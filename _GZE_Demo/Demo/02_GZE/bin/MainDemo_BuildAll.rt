template <class T> class gzArray;





typedef bool gzBool;


typedef signed char gzInt8;
typedef unsigned char gzUInt8;
typedef signed short int gzInt16;
typedef unsigned short int gzUInt16;
typedef signed int gzInt32;
typedef unsigned int gzUInt32;
typedef signed long long gzInt64;
typedef unsigned long long gzUInt64;

typedef float gzFloat32;
typedef double gzFloat64;

typedef const char* gzText8;
typedef const wchar_t* gzText16;




typedef void* gzPtr;
    typedef unsigned int gzPtrSize;
    typedef signed int gzIntX;
    typedef unsigned int gzUIntX;
extern "C" gzInt32 __divdi3(gzInt32 a, gzInt32 b);
extern char Support_Floating_Point_IEE_754[ (64 == sizeof(double) * 8)*2 - 1];
typedef unsigned int gzUInt;
typedef signed int gzInt;




typedef float gzFloat;




typedef void (*gzPtrFunc)(void);
typedef void* (*gzPtrFuncRAny)(void);
typedef void* (*gzPtrFuncRPAny)(void*);

typedef struct {
    gzUInt nNbIns;
}NbInstaces;
namespace Lib_GZ{class cDelegate;};
typedef Lib_GZ::cDelegate* gzAny;



typedef struct {
    void* _pInst;
}gzDlgWrapD;
typedef struct {
    void* _pInst;
}gzDlgWrapM;


struct gzComp{void* oClass; gzPtrFunc fCall; };




namespace Lib_GZ{ struct uLib; namespace Lib{extern gzUInt nClass; extern uLib* rLastLib;}};
struct gzFuncStack{void* oClass; const char* cName; };



 extern gzPtr gzaCallStack[1024];
 extern gzUInt gznCallStackIndex;


 struct gzStack {
  gzStack(gzPtr _pStFunc) {
   gznCallStackIndex++;
   gzaCallStack[(gznCallStackIndex) % 1024] = _pStFunc;
  }
  ~gzStack() {
   gznCallStackIndex--;
  }
 };




  typedef unsigned int size_t;
  typedef int ssize_t;
   typedef int intptr_t;
    typedef unsigned int uintptr_t;
   typedef int ptrdiff_t;
  typedef unsigned short wint_t;
  typedef unsigned short wctype_t;





 typedef int errno_t;




 typedef long __time32_t;




 typedef gzInt64 __time64_t;
  typedef __time64_t time_t;
 extern "C"{

  extern int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);

  double __attribute__((__cdecl__)) sin(double _X);
   double __attribute__((__cdecl__)) cos(double _X);
   double __attribute__((__cdecl__)) tan(double _X);
   double __attribute__((__cdecl__)) sinh(double _X);
   double __attribute__((__cdecl__)) cosh(double _X);
   double __attribute__((__cdecl__)) tanh(double _X);
   double __attribute__((__cdecl__)) asin(double _X);
   double __attribute__((__cdecl__)) acos(double _X);
   double __attribute__((__cdecl__)) atan(double _X);
   double __attribute__((__cdecl__)) atan2(double _Y,double _X);
   double __attribute__((__cdecl__)) exp(double _X);
   double __attribute__((__cdecl__)) log(double _X);
   double __attribute__((__cdecl__)) log10(double _X);
   double __attribute__((__cdecl__)) pow(double _X,double _Y);
   double __attribute__((__cdecl__)) sqrt(double _X);
   double __attribute__((__cdecl__)) ceil(double _X);
   double __attribute__((__cdecl__)) floor(double _X);

   extern float __attribute__((__cdecl__)) powf(float _X,float _Y);
     extern float __attribute__((__cdecl__)) ldexpf(float _X,int _Y);

    double __attribute__((__cdecl__)) ldexp(double _X,int _Y);
}


extern "C" {

 void* malloc(gzUIntX _nSize);
 void* calloc(gzUIntX num, gzUIntX size);
 void* realloc (void* ptr, gzUIntX size);
 void free (void* ptr);

 void* memcpy ( void * destination, const void * source, gzUIntX num );
 void* memset ( void * ptr, int value, gzUIntX num );



}




extern "C" {



 typedef struct _iobuf
 {
  char* _ptr;
  int _cnt;
  char* _base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char* _tmpfname;
 } FILE;



 int printf ( const char * format, ... );
 int wprintf (const wchar_t* format, ...);

 size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );
 int fclose ( FILE * stream );

}



extern "C" {
 int memcmp( const void * ptr1, const void * ptr2, gzUIntX num );

 int strcmp( const char * str1, const char * str2 );
 int strncmp( const char * str1, const char * str2, gzUIntX num );

 long strtol(const char* str, char** endptr, int base);

}









inline void GZ_assert(const char *_Message, const char *_File, unsigned _Line){printf("Assert Fail: %s", _Message);}




class gzStr;


namespace Lib_GZ{

    void fSpAssertError(gzUInt _nLine);
    void fSpAssertError(const gzStr& _sMessage, gzUInt _nLine);
    void fConsole(const gzStr& _sValue);

}
namespace GZptr
{



template<class T> inline void checked_delete(T * x)
{

    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete x;
}

template<class T> inline void checked_array_delete(T * x)
{
    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete [] x;
}

template<class T> struct checked_deleter
{
    typedef void result_type;
    typedef T * argument_type;

    void operator()(T * x) const
    {

        GZptr::checked_delete(x);
    }
};

template<class T> struct checked_array_deleter
{
    typedef void result_type;
    typedef T * argument_type;

    void operator()(T * x) const
    {
        GZptr::checked_array_delete(x);
    }
};

}

namespace GZptr
{

namespace detail
{

inline int atomic_exchange_and_add( int * pw, int dv )
{


    int r = *pw;
    *pw += dv;
    return r;
}

inline void atomic_increment( int * pw )
{

    ++*pw;
}

inline int atomic_conditional_increment( int * pw )
{


    int rv = *pw;
    if( rv != 0 ) ++*pw;
    return rv;
}

class sp_counted_base
{
private:

    sp_counted_base( sp_counted_base const & );
    sp_counted_base & operator= ( sp_counted_base const & );

    int use_count_;
    int weak_count_;

public:

    sp_counted_base(): use_count_( 1 ), weak_count_( 1 )
    {
    }

    virtual ~sp_counted_base()
    {
    }




    virtual void dispose() = 0;



    virtual void destroy()
    {
        delete this;
    }

    virtual void * get_untyped_deleter() = 0;

    void add_ref_copy()
    {
        atomic_increment( &use_count_ );
    }

    bool add_ref_lock()
    {
        return atomic_conditional_increment( &use_count_ ) != 0;
    }

    void release()
    {
        if( atomic_exchange_and_add( &use_count_, -1 ) == 1 )
        {
            dispose();
            weak_release();
        }
    }

    void weak_add_ref()
    {
        atomic_increment( &weak_count_ );
    }

    void weak_release()
    {
        if( atomic_exchange_and_add( &weak_count_, -1 ) == 1 )
        {
            destroy();
        }
    }

    long use_count() const
    {

        return use_count_;
    }
};

}

}



namespace GZptr
{
namespace detail
{

template<class X> class sp_counted_impl_p: public sp_counted_base
{
private:

    X * px_;

    sp_counted_impl_p( sp_counted_impl_p const & );
    sp_counted_impl_p & operator= ( sp_counted_impl_p const & );

    typedef sp_counted_impl_p<X> this_type;

public:

    explicit sp_counted_impl_p( X * px ): px_( px )
    {

    }

    virtual void dispose()
    {

        GZptr::checked_delete( px_ );
    }



    virtual void * get_untyped_deleter()
    {
        return 0;
    }

};


template<class P, class D> class sp_counted_impl_pd: public sp_counted_base
{
private:

    P ptr;
    D del;

    sp_counted_impl_pd( sp_counted_impl_pd const & );
    sp_counted_impl_pd & operator= ( sp_counted_impl_pd const & );

    typedef sp_counted_impl_pd<P, D> this_type;

public:



    sp_counted_impl_pd( P p, D & d ): ptr( p ), del( d )
    {
    }

    sp_counted_impl_pd( P p ): ptr( p ), del()
    {
    }

    virtual void dispose()
    {
        del( ptr );
    }

    virtual void * get_untyped_deleter()
    {
        return &reinterpret_cast<char&>( del );
    }

};

template<class P, class D, class A> class sp_counted_impl_pda: public sp_counted_base
{
private:

    P p_;
    D d_;
    A a_;

    sp_counted_impl_pda( sp_counted_impl_pda const & );
    sp_counted_impl_pda & operator= ( sp_counted_impl_pda const & );

    typedef sp_counted_impl_pda<P, D, A> this_type;

public:



    sp_counted_impl_pda( P p, D & d, A a ): p_( p ), d_( d ), a_( a )
    {
    }

    sp_counted_impl_pda( P p, A a ): p_( p ), d_( a ), a_( a )
    {
    }

    virtual void dispose()
    {
        d_( p_ );
    }

    virtual void destroy()
    {

        typedef typename A::template rebind< this_type >::other A2;

        A2 a2( a_ );
        this->~this_type();

        a2.deallocate( this, 1 );
    }


    virtual void * get_untyped_deleter()
    {
        return &reinterpret_cast<char&>( d_ );
    }
};

}

}
namespace GZptr
{

namespace detail
{

struct sp_nothrow_tag {};

template< class D > struct sp_inplace_tag
{
};


class weak_count;

class shared_count
{
private:

    sp_counted_base * pi_;



    friend class weak_count;

public:

    shared_count(): pi_(0)

    {
    }

    template<class Y> explicit shared_count( Y * p ): pi_( 0 )

    {

        pi_ = new sp_counted_impl_p<Y>( p );

        if( pi_ == 0 )
        {


        }
    }


    template<class P, class D> shared_count( P p, D d ): pi_(0)
    {

        pi_ = new sp_counted_impl_pd<P, D>(p, d);

        if(pi_ == 0)
        {


        }

    }
    template<class P, class D, class A> shared_count( P p, D d, A a ): pi_( 0 )
    {
        typedef sp_counted_impl_pda<P, D, A> impl_type;

        typedef typename A::template rebind< impl_type >::other A2;

        A2 a2( a );

        pi_ = a2.allocate( 1, static_cast< impl_type* >( 0 ) );

        if( pi_ != 0 )
        {
            ::new( static_cast< void* >( pi_ ) ) impl_type( p, d, a );
        }
        else
        {


        }
    }



    ~shared_count()
    {
        if( pi_ != 0 ) pi_->release();

    }

    shared_count(shared_count const & r): pi_(r.pi_)

    {
        if( pi_ != 0 ) pi_->add_ref_copy();
    }



    shared_count(shared_count && r): pi_(r.pi_)
    {
        r.pi_ = 0;
    }


    explicit shared_count(weak_count const & r);
    shared_count( weak_count const & r, sp_nothrow_tag );

    shared_count & operator= (shared_count const & r)
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if( tmp != 0 ) tmp->add_ref_copy();
            if( pi_ != 0 ) pi_->release();
            pi_ = tmp;
        }

        return *this;
    }

    void swap(shared_count & r)
    {
        sp_counted_base * tmp = r.pi_;
        r.pi_ = pi_;
        pi_ = tmp;
    }

    long use_count() const
    {
        return pi_ != 0? pi_->use_count(): 0;
    }

    bool unique() const
    {
        return use_count() == 1;
    }

    bool empty() const
    {
        return pi_ == 0;
    }

    friend inline bool operator==(shared_count const & a, shared_count const & b)
    {
        return a.pi_ == b.pi_;
    }
    void * get_untyped_deleter() const
    {
        return pi_? pi_->get_untyped_deleter(): 0;
    }
};


class weak_count
{
private:

    sp_counted_base * pi_;



    friend class shared_count;

public:

    weak_count(): pi_(0)

    {
    }

    weak_count(shared_count const & r): pi_(r.pi_)

    {
        if(pi_ != 0) pi_->weak_add_ref();
    }

    weak_count(weak_count const & r): pi_(r.pi_)

    {
        if(pi_ != 0) pi_->weak_add_ref();
    }





    weak_count(weak_count && r): pi_(r.pi_)

    {
        r.pi_ = 0;
    }



    ~weak_count()
    {
        if(pi_ != 0) pi_->weak_release();
    }

    weak_count & operator= (shared_count const & r)
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if(tmp != 0) tmp->weak_add_ref();
            if(pi_ != 0) pi_->weak_release();
            pi_ = tmp;
        }

        return *this;
    }

    weak_count & operator= (weak_count const & r)
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if(tmp != 0) tmp->weak_add_ref();
            if(pi_ != 0) pi_->weak_release();
            pi_ = tmp;
        }

        return *this;
    }

    void swap(weak_count & r)
    {
        sp_counted_base * tmp = r.pi_;
        r.pi_ = pi_;
        pi_ = tmp;
    }

    long use_count() const
    {
        return pi_ != 0? pi_->use_count(): 0;
    }

    bool empty() const
    {
        return pi_ == 0;
    }

    friend inline bool operator==(weak_count const & a, weak_count const & b)
    {
        return a.pi_ == b.pi_;
    }







};

inline shared_count::shared_count( weak_count const & r ): pi_( r.pi_ )
{
    if( pi_ == 0 || !pi_->add_ref_lock() )
    {

    }
}

inline shared_count::shared_count( weak_count const & r, sp_nothrow_tag ): pi_( r.pi_ )
{
    if( pi_ != 0 && !pi_->add_ref_lock() )
    {
        pi_ = 0;
    }
}

}

}




namespace Lib_GZ
{
    class cBase;
    template <class T> void fSwap( T& a, T& b )
    {
      T c(a); a=b; b=c;
    }
}


using namespace GZptr;


namespace GZptr
{
template<class T> class gzSp;
template<class T> class gzWp;

template<class T> class enable_shared_from_this;

class enable_shared_from_raw;






template <class T> class gzEmbed;
template <class T>
class gzEmbed {
    public:
    T val;

    inline gzEmbed(Lib_GZ::cBase* _parent):val(_parent) {};

    inline gzEmbed(T _val):val(_val){};



   inline gzEmbed(gzSp<T> _oOther):val(*_oOther.get()){};

   inline gzEmbed& operator = (gzSp<T> _oOther){

       if(_oOther.get() != 0){
            val = *_oOther.get();
       }else{
            val = T( (Lib_GZ::cBase*)(val.parent.get()) );
       }
        return *this;
    }


    inline T* operator->() const
    { return const_cast<T*>(&val);}



    inline T* get(){
        return &val;
     }

    gzSp<T> SpFromThis()
    {
        printf("\n\n\nOKI");
    }







    inline ~gzEmbed(){};
};





namespace detail
{



template< class T > struct sp_element
{
    typedef T type;
};


template< class T > struct sp_element< T[] >
{
    typedef T type;
};

template< class T, gzUIntX N > struct sp_element< T[N] >
{
    typedef T type;
};






template< class T > struct sp_dereference
{
    typedef T & type;
};

template<> struct sp_dereference< void >
{
    typedef void type;
};



template<> struct sp_dereference< void const >
{
    typedef void type;
};

template<> struct sp_dereference< void volatile >
{
    typedef void type;
};

template<> struct sp_dereference< void const volatile >
{
    typedef void type;
};




template< class T > struct sp_dereference< T[] >
{
    typedef void type;
};


template< class T, gzUIntX N > struct sp_dereference< T[N] >
{
    typedef void type;
};





template< class T > struct sp_member_access
{
    typedef T * type;
};



template< class T > struct sp_member_access< T[] >
{
    typedef void type;
};


template< class T, gzUIntX N > struct sp_member_access< T[N] >
{
    typedef void type;
};







template< class T > struct sp_array_access
{
    typedef void type;
};



template< class T > struct sp_array_access< T[] >
{
    typedef T & type;
};


template< class T, gzUIntX N > struct sp_array_access< T[N] >
{
    typedef T & type;
};
template< class T > struct sp_extent
{
    enum _vt { value = 0 };
};



template< class T, gzUIntX N > struct sp_extent< T[N] >
{
    enum _vt { value = N };
};







template< class X, class Y, class T > inline void sp_enable_shared_from_this( gzSp<X> const * ppx, Y const * py, GZptr::enable_shared_from_this< T > const * pe )
{
    if( pe != 0 )
    {
        pe->_internal_accept_owner( ppx, const_cast< Y* >( py ) );
    }
}

template< class X, class Y > inline void sp_enable_shared_from_this( gzSp<X> * ppx, Y const * py, GZptr::enable_shared_from_raw const * pe );
inline void sp_enable_shared_from_this( ... )
{
}
template< class Y, class T > inline void sp_assert_convertible()
{
    T* p = static_cast< Y* >( 0 );
    (void)p;


}



template< class T, class Y > inline void sp_pointer_construct( gzSp< T > * ppx, Y * p, GZptr::detail::shared_count & pn )
{
    GZptr::detail::shared_count( p ).swap( pn );
    GZptr::detail::sp_enable_shared_from_this( ppx, p, p );
}



template< class T, class Y > inline void sp_pointer_construct( gzSp< T[] > * , Y * p, GZptr::detail::shared_count & pn )
{
    sp_assert_convertible< Y[], T[] >();
    GZptr::detail::shared_count( p, GZptr::checked_array_deleter< T >() ).swap( pn );
}

template< class T, gzUIntX N, class Y > inline void sp_pointer_construct( gzSp< T[N] > * , Y * p, GZptr::detail::shared_count & pn )
{
    sp_assert_convertible< Y[N], T[N] >();
    GZptr::detail::shared_count( p, GZptr::checked_array_deleter< T >() ).swap( pn );
}





template< class T, class Y > inline void sp_deleter_construct( gzSp< T > * ppx, Y * p )
{
    GZptr::detail::sp_enable_shared_from_this( ppx, p, p );
}



template< class T, class Y > inline void sp_deleter_construct( gzSp< T[] > * , Y * )
{
    sp_assert_convertible< Y[], T[] >();
}

template< class T, gzUIntX N, class Y > inline void sp_deleter_construct( gzSp< T[N] > * , Y * )
{
    sp_assert_convertible< Y[N], T[N] >();
}



}
template<class T, class U> inline bool operator==(gzSp<T> const & a, gzSp<U> const & b)
{
    return a.get() == b.get();
}

template<class T, class U> inline bool operator!=(gzSp<T> const & a, gzSp<U> const & b)
{
    return a.get() != b.get();
}
template<class T, class U> inline bool operator<(gzSp<T> const & a, gzSp<U> const & b)
{
    return a.owner_before( b );
}

template<class T> inline void swap(gzSp<T> & a, gzSp<T> & b)
{
    a.swap(b);
}



template<class T, class U> gzSp<T> gzSCast( gzWp<U> const & r )
{
    (void) static_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename gzSp<T>::element_type E;

    E * p = static_cast< E* >( r.get() );

    return gzSp<T>( r.lock(), p );
}




template<class T, class U> gzSp<T> gzSCast( gzSp<U> const & r )
{
    (void) static_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename gzSp<T>::element_type E;


    E * p = static_cast< E* >( r.get() );
    return gzSp<T>( r, p );
}



template<class T, class U> gzSp<T> gzCCast( gzSp<U> const & r )
{
    (void) const_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename gzSp<T>::element_type E;

    E * p = const_cast< E* >( r.get() );
    return gzSp<T>( r, p );
}

template<class T, class U> gzSp<T> gzDCast( gzSp<U> const & r )
{
    (void) dynamic_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename gzSp<T>::element_type E;

    E * p = dynamic_cast< E* >( r.get() );
    return p? gzSp<T>( r, p ): gzSp<T>();
}

template<class T, class U> gzSp<T> gzRCast( gzSp<U> const & r )
{
    (void) reinterpret_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename gzSp<T>::element_type E;

    E * p = reinterpret_cast< E* >( r.get() );
    return gzSp<T>( r, p );
}



template<class T> inline typename gzSp<T>::element_type * get_pointer(gzSp<T> const & p)
{
    return p.get();
}
template<class T> class gzSp
{
private:


    typedef gzSp<T> this_type;

public:

    typedef typename GZptr::detail::sp_element< T >::type element_type;

    gzSp() : px( 0 ), pn()
    {

    }
    template<class Y>
    explicit gzSp( Y * p ): px( p ), pn()
    {
        GZptr::detail::sp_pointer_construct( this, p, pn );
    }







    template<class Y, class D> gzSp( Y * p, D d ): px( p ), pn( p, d )
    {
        GZptr::detail::sp_deleter_construct( this, p );
    }
    template<class Y, class D, class A> gzSp( Y * p, D d, A a ): px( p ), pn( p, d, a )
    {
        GZptr::detail::sp_deleter_construct( this, p );
    }
    gzSp( gzSp const & r ) : px( r.px ), pn( r.pn )
    {
    }



    template<class Y>
    explicit gzSp( gzWp<Y> const & r ): pn( r.pn )
    {
        GZptr::detail::sp_assert_convertible< Y, T >();


        px = r.px;
    }

    template<class Y>
    gzSp( gzWp<Y> const & r, GZptr::detail::sp_nothrow_tag )
                : px( 0 ), pn( r.pn, GZptr::detail::sp_nothrow_tag() )
    {
        if( !pn.empty() )
        {
            px = r.px;
        }
    }

    template<class Y>






    gzSp( gzSp<Y> const & r )


                : px( r.px ), pn( r.pn )
    {
        GZptr::detail::sp_assert_convertible< Y, T >();
    }


    template< class Y >
    gzSp( gzSp<Y> const & r, element_type * p ) : px( p ), pn( r.pn )
    {
    }
    template<class Y>
    gzSp& operator=(gzEmbed<Y> const & r ) {
        (gzSp<T>(new T(r.val))).swap(*this);
        return *this;
    }
    template<class Y>
    gzSp(gzEmbed<Y> const & r ) {
        *this = r ;
    }


    gzSp & operator=( gzSp const & r )
    {
        this_type(r).swap(*this);
        return *this;
    }



    template<class Y>
    gzSp & operator=(gzSp<Y> const & r)
    {
        this_type(r).swap(*this);
        return *this;
    }
    gzSp( gzSp && r ) : px( r.px ), pn()
    {
        pn.swap( r.pn );
        r.px = 0;
    }

    template<class Y>






    gzSp( gzSp<Y> && r )


                : px( r.px ), pn()
    {
        GZptr::detail::sp_assert_convertible< Y, T >();

        pn.swap( r.pn );
        r.px = 0;
    }

    gzSp & operator=( gzSp && r )
    {
        this_type( static_cast< gzSp && >( r ) ).swap( *this );
        return *this;
    }

    template<class Y>
    gzSp & operator=( gzSp<Y> && r )
    {
        this_type( static_cast< gzSp<Y> && >( r ) ).swap( *this );
        return *this;
    }
    void reset()
    {
        this_type().swap(*this);
    }

    template<class Y> void reset( Y * p )
    {
        if( !(p == 0 || p != px )){ Lib_GZ::fSpAssertError(766); };
        this_type( p ).swap( *this );
    }

    template<class Y, class D> void reset( Y * p, D d )
    {
        this_type( p, d ).swap( *this );
    }

    template<class Y, class D, class A> void reset( Y * p, D d, A a )
    {
        this_type( p, d, a ).swap( *this );
    }

    template<class Y> void reset( gzSp<Y> const & r, element_type * p )
    {
        this_type( r, p ).swap( *this );
    }


    typename GZptr::detail::sp_dereference< T >::type operator* () const
    {
        if( !(px != 0 )){ Lib_GZ::fSpAssertError(788); };
        return *px;
    }


    typename GZptr::detail::sp_member_access< T >::type operator-> () const
    {
        if( !(px != 0 )){ Lib_GZ::fSpAssertError(795); };
        return px;
    }


    typename GZptr::detail::sp_array_access< T >::type operator[] ( gzIntX i ) const
    {
        if( !(px != 0 )){ Lib_GZ::fSpAssertError(802); };
        if( !(i >= 0 && ( i < GZptr::detail::sp_extent< T >::value || GZptr::detail::sp_extent< T >::value == 0 ) )){ Lib_GZ::fSpAssertError(803); };

        return px[ i ];
    }

    element_type * get() const
    {
        return px;
    }


typedef element_type * this_type::*unspecified_bool_type;
operator unspecified_bool_type() const
{
    return px == 0? 0: &this_type::px;
}

bool operator! () const
{
    return px == 0;
}




    bool unique() const
    {
        return pn.unique();
    }

    long use_count() const
    {
        return pn.use_count();
    }

    void swap( gzSp & other )
    {
        Lib_GZ::fSwap(px, other.px);
        pn.swap(other.pn);
    }

    template<class Y> bool owner_before( gzSp<Y> const & rhs ) const
    {
        return pn < rhs.pn;
    }

    template<class Y> bool owner_before( gzWp<Y> const & rhs ) const
    {
        return pn < rhs.pn;
    }






    void * _internal_get_untyped_deleter() const
    {
        return pn.get_untyped_deleter();
    }

    bool _internal_equiv( gzSp const & r ) const
    {
        return px == r.px && pn == r.pn;
    }






private:
    template<class Y> friend class gzSp;
    template<class Y> friend class gzWp;




    element_type * px;
    GZptr::detail::shared_count pn;

};





namespace detail
{
        using namespace GZptr;






class esft2_deleter_wrapper
{
private:

    gzSp<void const volatile> deleter_;

public:

    esft2_deleter_wrapper()
    {
    }

    template< class T > void set_deleter( gzSp<T> const & deleter )
    {
        deleter_ = deleter;
    }






    template< class T> void operator()( T* )
    {
        if( !(deleter_.use_count() <= 1 )){ Lib_GZ::fSpAssertError(923); };
        deleter_.reset();
    }
};

}
template< class T > struct hash;

template< class T > gzUIntX hash_value( gzSp<T> const & p )
{
    return GZptr::hash< T* >()( p.get() );
}

}

namespace GZptr
{

template<class T> class gzWp
{
private:


    typedef gzWp<T> this_type;

public:

    typedef typename GZptr::detail::sp_element< T >::type element_type;

    gzWp() : px(0), pn()
    {
    }







    gzWp( gzWp const & r ) : px( r.px ), pn( r.pn )
    {
    }

    gzWp & operator=( gzWp const & r )
    {
        px = r.px;
        pn = r.pn;
        return *this;
    }
    template<class Y>






    gzWp( gzWp<Y> const & r )


                : px(static_cast<element_type *>(r.lock().get()) ), pn(r.pn)
    {

    }



    template<class Y>






    gzWp( gzWp<Y> && r )


                : px( r.lock().get() ), pn( static_cast< GZptr::detail::weak_count && >( r.pn ) )
    {
        GZptr::detail::sp_assert_convertible< Y, T >();
        r.px = 0;
    }


    gzWp( gzWp && r )
                : px( r.px ), pn( static_cast< GZptr::detail::weak_count && >( r.pn ) )
    {
        r.px = 0;
    }


    gzWp & operator=( gzWp && r )
    {
        this_type( static_cast< gzWp && >( r ) ).swap( *this );
        return *this;
    }




    template<class Y>






    gzWp( gzSp<Y> const & r )


                : px( r.px ), pn( r.pn )
    {
        GZptr::detail::sp_assert_convertible< Y, T >();
    }



    template<class Y>
    gzWp & operator=( gzWp<Y> const & r )
    {
        GZptr::detail::sp_assert_convertible< Y, T >();

        px = r.lock().get();
        pn = r.pn;

        return *this;
    }



    template<class Y>
    gzWp & operator=( gzWp<Y> && r )
    {
        this_type( static_cast< gzWp<Y> && >( r ) ).swap( *this );
        return *this;
    }



    template<class Y>
    gzWp & operator=( gzSp<Y> const & r )
    {
        GZptr::detail::sp_assert_convertible< Y, T >();

        px = r.px;
        pn = r.pn;

        return *this;
    }




    gzSp<T> lock() const
    {
        return gzSp<T>( *this, GZptr::detail::sp_nothrow_tag() );
    }



    long use_count() const
    {
        return pn.use_count();
    }

    bool expired() const
    {
        return pn.use_count() == 0;
    }

    bool _empty() const
    {
        return pn.empty();
    }

    void reset()
    {
        this_type().swap(*this);
    }

    void swap(this_type & other)
    {
        Lib_GZ::fSwap(px, other.px);
        pn.swap(other.pn);
    }

    template<typename Y>
    void _internal_aliasing_assign(gzWp<Y> const & r, element_type * px2)
    {
        px = px2;
        pn = r.pn;
    }

    template<class Y> bool owner_before( gzWp<Y> const & rhs ) const
    {
        return pn < rhs.pn;
    }

    template<class Y> bool owner_before( gzSp<Y> const & rhs ) const
    {
        return pn < rhs.pn;
    }





    typename GZptr::detail::sp_dereference< T >::type operator* () const
    {
        if( !pn.empty() ){
            if( !(px != 0 )){ Lib_GZ::fSpAssertError(240); };
          return *px;
        }else{
            return 0;
        }
    }


    typename GZptr::detail::sp_member_access< T >::type operator-> () const
    {
        if( !pn.empty() ){
            if( !(px != 0 )){ Lib_GZ::fSpAssertError(251); };
          return px;
        }else{
            return 0;
        }
    }

    element_type * get() const
    {
        if( !pn.empty() ){
            if( !(px != 0 )){ Lib_GZ::fSpAssertError(261); };
          return px;
        }else{
            return 0;
        }
    }
public:

    template<class Y> friend class gzWp;
    template<class Y> friend class gzSp;



    element_type * px;
    GZptr::detail::weak_count pn;

};

template<class T, class U> inline bool operator<(gzWp<T> const & a, gzWp<U> const & b)
{
    return a.owner_before( b );
}

template<class T> void swap(gzWp<T> & a, gzWp<T> & b)
{
    a.swap(b);
}

}
template <class T>
class gzAElement {
    public:
    T val;
    inline gzAElement():val() {
    };
    inline gzAElement(T _val):val(_val){};
    inline ~gzAElement(){};
};


template <class T>
class gzARoot {
public:
    gzAElement<T>** aTab;
    gzUIntX nSize;
    gzUIntX nRealSize;
     gzAElement<T> oNull;

    inline gzARoot():nSize(0),nRealSize(0),aTab(0){

    }
    inline gzARoot(gzUIntX _nRealSize):nSize(_nRealSize),nRealSize(_nRealSize) {


        aTab = (gzAElement<T>**)calloc(_nRealSize, sizeof(gzAElement<T>*));
    }
    inline ~gzARoot(){
        for(gzUIntX i = 0; i < nSize; i++){
            delete aTab[i];
        }
       free(aTab);
    };
};

template <class T>
class gzArray {

 public:

        gzSp<gzARoot<T>> array;


  gzArray();


        gzArray(const gzArray& _sOther);


        virtual ~gzArray();

        gzArray& operator=(const gzArray& _sOther) const;
        gzArray operator+(const gzArray& _sOther) const;
        gzArray operator+=(const gzArray& _sOther) const;

        gzSp<gzARoot<T>> operator->() const
        { return array; }



        inline gzUInt GnSize() const {
            return array->nSize;
        }




        T* operator()(gzUIntX _nIndex) const;


        T & operator[](gzUIntX _nIndex) const;

        inline void fPush(const T& _nVal){
            (*this)[ array->nSize] = _nVal;
        }


    private :
        void fOutOfBound(gzUIntX _nIndex) const;
};


template <class T>
gzArray<T>::gzArray():array(gzSp< gzARoot<T> >( new gzARoot<T>() )) {

}







template <class T>
gzArray<T>::gzArray(const gzArray& _sOther){
  array = _sOther.array;
}

template <class T>
gzArray<T>& gzArray<T>::operator=(const gzArray<T>& _sOther) const{

   const_cast<gzArray<T>*>(this)->array = _sOther.array;
   return *const_cast<gzArray<T>*>(this);
}

template <class T>
gzArray<T> gzArray<T>::operator+(const gzArray<T>& _sOther) const {
  array = _sOther.array;
}

template <class T>
gzArray<T> gzArray<T>::operator+=(const gzArray<T>& _sOther) const {
 array = _sOther.array;
}






template <class T>
void gzArray<T>::fOutOfBound(gzUIntX _nIndex) const {
        gzAElement<T>** _pTemp = array->aTab;
        gzUIntX _nRealSizeTemp = array->nRealSize;
         array->nSize = _nIndex+1;
         array->nRealSize = array->nSize * 2;

        array->aTab = (gzAElement<T>**)malloc((array->nRealSize) * (sizeof(gzAElement<T>*)));
        memcpy(array->aTab, _pTemp, _nRealSizeTemp * sizeof(gzAElement<T>*));

        memset(array->aTab + _nRealSizeTemp, 0, (array->nRealSize - _nRealSizeTemp) * sizeof(gzAElement<T>*));
        free(_pTemp);
}





template <class T>
 T* gzArray<T>::operator()(gzUIntX _nIndex) const {
     if(_nIndex < array->nSize && array->aTab[_nIndex] != 0){
        return &array->aTab[_nIndex]->val;
     }
    return 0;
}



template <class T>
 T & gzArray<T>::operator[](gzUIntX _nIndex) const {
     if(_nIndex >= array->nSize){

        if(_nIndex < array->nRealSize){
            array->nSize = _nIndex + 1;
         }else{
             if(_nIndex > 0xFFFFFFFF/2){
                return array->oNull.val;
             }
             fOutOfBound(_nIndex);
         }
     }

    if(array->aTab[_nIndex] == 0){
        array->aTab[_nIndex] = new gzAElement<T>();
    }
    return array->aTab[_nIndex]->val;
}

template <class T>
gzArray<T>::~gzArray(){

}


namespace Lib_GZ{
    namespace cArray{

    }
}

template <class T> class gzArray;




namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cStThread;}




   namespace Lib_GZ{
class cDelegate;}






namespace GZptr
{

template<class T> class enable_shared_from_this
{
protected:

    enable_shared_from_this()
    {
    }

    enable_shared_from_this(enable_shared_from_this const &)
    {
    }

    enable_shared_from_this & operator=(enable_shared_from_this const &)
    {
        return *this;
    }

    ~enable_shared_from_this()
    {
    }

public:


    gzSp<T> SpFromThis()
    {
        gzSp<T> p( weak_this_ );
        return p;
    }

    gzSp<T const> SpFromThis() const
    {
        gzSp<T const> p( weak_this_ );
        GZ_ASSERT( p.get() == this );
        return p;
    }

public:


    template<class X, class Y> void _internal_accept_owner( gzSp<X> const * ppx, Y * py ) const
    {
        if( weak_this_.expired() )
        {
            weak_this_ = gzSp<T>( *ppx, py );
        }
    }




    mutable gzWp<T> weak_this_;

};

}

namespace Lib_GZ{


class cThread;
class cDelegate : public GZptr::enable_shared_from_this<cDelegate> {

 public:

        inline virtual void ThreadLoop(){};
        inline virtual void ThreadEnd(){};

  inline virtual gzAny MemCopy(){return 0;};
  inline virtual gzAny DeepCopy(){return 0;};


};

class cBase : public cDelegate {

 public:
        gzWp<cDelegate> parent;
        cThread* thread;


        inline cBase(cBase* _parent):thread(0) {
           if(_parent != 0){
                parent = _parent->SpFromThis();
                thread = _parent->thread;
          }else{

           }
        }



  inline cBase(const cBase& _o):thread(_o.thread), parent(_o.parent) {
  }


  inline cBase(const cBase& _o, gzBool _b):thread(0), parent() {

  }


};


}

namespace GZptr{
template<class T> gzSp<T> gzSCastSelf( gzAny _ptr) {

    if(_ptr == 0){return gzSp<T>();}

    if( _ptr->weak_this_.px != 0){
        gzSp<T> r( ((gzWp<T>)_ptr->weak_this_ ));



        return gzSp<T>( r, r.get() );

    }else{



    return gzSp<T>( static_cast<T*>( _ptr->MemCopy()) );
    }
}
}



namespace Lib_GZ{namespace StThread{



}}


namespace Lib_GZ{
namespace StThread{

}

class cStThread : public cBase {

 public:
  inline cStThread(cBase* _parent): cBase(_parent){};
  virtual ~cStThread(){};

 private:

};



}

class gzStr;








gzUInt16* NewConvertUTF8toUTF16 ( const gzUInt8* source);
gzUInt8* NewConvertUTF16toUTF8 ( const gzUInt16* source);
int ConvertUTF8toUTF16 ( const gzUInt8* source, gzUInt16* target);
int ConvertUTF16toUTF8 ( const gzUInt16* source, gzUInt8* target);

gzUInt8* u8_fNewUtf32ToUtf8(gzUInt32 _nChar);




gzInt32 u8_fGetChar(gzUInt8* _sSrc);


int u8_toucs(gzInt32 *dest, int sz, char *src, int srcsz);


int u8_toutf8(char *dest, int sz, gzInt32 *src, int srcsz);


int u8_wc_toutf8(char* dest, gzInt32 ch);


int u8_offset(char *str, int charnum);


int u8_charnum(char *s, int offset);



gzInt32 u8_nextchar(char *s, int *i);
gzUInt8 u8_next(gzUInt8* _sSrc);
gzInt8 u8_prev(gzUInt8* _sSrc);



void u8_inc(char *s, int *i);


void u8_dec(char *s, int *i);


int u8_seqlen(char *s);




int u8_read_escape_sequence(char *src, gzInt32 *dest);



int u8_escape_wchar(char *buf, int sz, gzInt32 ch);


int u8_unescape(char *buf, int sz, char *src);




int u8_escape(char *buf, int sz, char *src, int escape_quotes);

template <class T> class gzArray;
struct gzHoldStr
{
    gzUInt nNbIns;

    gzUInt8* end;
    gzUInt maxSize;
    gzUInt8* array;
    bool NoDelete;

};







class gzStr {

 public:
        gzHoldStr* sStr;
        gzUInt8* pCurrPos;


  gzStr();
        gzStr(gzUInt8* _Array, gzUInt _nLength, bool _bNoDelete = false);
        gzStr(gzUInt16* _Array);
        gzStr(const gzStr& _sOther);
  gzStr(const gzStr& _sOther, gzBool _bDeepCpy);
        gzStr(gzInt32 _nChar);


        gzBool fNext() const;
        gzBool fPrev() const;

        virtual ~gzStr();

        gzBool operator==(const gzStr& _sOther) const;

        gzStr& operator=(const gzStr& _sOther) const;
        gzStr operator+(const gzStr& _sOther) const;
        gzStr operator+=(const gzStr& _sOther) const;

        gzUInt32 GnCurrChar() const;
        inline gzUIntX GnSize() const{
            return sStr->end - sStr->array - 1;
        }

        inline gzUInt8* fcStr() const {
            return (gzUInt8*)sStr->array + 1;
        }

        gzBool fReplace(const gzStr& _sFind, const gzStr& _sReplace) const;
        gzUInt fReplaceAll(const gzStr& _sFind, const gzStr& _sReplace) const;
        gzBool fRevReplace(const gzStr& _sFind, const gzStr& _sReplace) const;
        gzUInt fRevReplaceAll(const gzStr& _sFind, const gzStr& _sReplace) const;


        gzUInt fToUInt() const;
        gzStr& fSubStrCount(gzUInt nCount) const;
        gzStr fSubStr(const gzStr& _sFind = (gzStr((gzUInt8*)"\0" "\xEF\xB7\x90", (sizeof("\0" "\xEF\xB7\x90")/sizeof(gzUInt8)) - 2, true)), gzBool _bExclude = false) const;
        gzStr fRevSubStr(const gzStr& _sFind = (gzStr((gzUInt8*)"\0" "\xEF\xB7\x90", (sizeof("\0" "\xEF\xB7\x90")/sizeof(gzUInt8)) - 2, true)), gzBool _bExclude = false) const;

        gzArray<gzStr> fSplit(const gzStr& _sDelimiter) const;

        gzBool fFind(const gzStr& _sFind, gzBool _bExclude = false) const;
        gzBool fRevFind(const gzStr& _sFind, gzBool _bExclude = false) const;
        gzStr& fBegin() const;
        gzStr& fEnd() const;


        gzStr fPathGetFileExtention() const;
        gzStr fPathGetFileName() const;
        gzStr fPathGetCurrFolder() const;
        gzBool fPathFindPrecFolder() const;
        gzStr fPathGetRelative(const gzStr& _sRelativePath) const;

 private:
        inline void fNextInline();
        gzBool fDetachAndHold() const;
        void fReleaseHold(gzBool _bPrevRelease) const;
        void fDetachAndCopie();
};



gzStr gzStrUI(gzUInt64 _nEntier);
gzStr gzStrI(gzInt64 _nEntier);
gzStr gzStrF(gzFloat64 _nFloat, gzUInt8 _nbCharAfter = 3);
gzStr gzStrH32(gzUInt32 _nEntier);
gzStr gzStrC(const char* _Array);
gzStr gzStrC(gzInt* _Array);
gzStr gzStrC(const char* _Array, gzUInt _nCount);
gzStr gzStrB(gzBool _bValue);

class gzUTF16 {
    gzUInt16* array;

    public :
    inline gzUTF16(const gzStr& _sConvert) {
       array = NewConvertUTF8toUTF16( _sConvert.sStr->array + 1 );
    }

    inline operator gzUInt16*() {
        return array;
    };
    inline gzUInt16* get() {
        return array;
    };

    inline ~gzUTF16(){
        free(array);
    }
};

class gzUStrAutoRestore {
    public :
        gzUInt8* pBackPos;
        gzStr* sRef;

         inline gzUStrAutoRestore(const gzStr& _sBackup){
            sRef = const_cast<gzStr*>(&_sBackup);
            pBackPos = _sBackup.pCurrPos;
        }
        inline ~gzUStrAutoRestore(){
            sRef->pCurrPos = pBackPos;
        }
};



class gzRstUStr {
     public :
        gzUInt8* pBackPos;
        gzStr* sRef;
        gzStr* sBackRef;

         inline gzRstUStr(const gzStr& _sBackup){
            sRef = const_cast<gzStr*>(&_sBackup);
            sBackRef = const_cast<gzStr*>(&_sBackup);
            pBackPos = _sBackup.pCurrPos;
        }

        inline ~gzRstUStr(){
            sBackRef->pCurrPos = pBackPos;
        }

        inline gzStr& fEnd() const {return sRef->fEnd();};
        inline gzBool fPrev() const {return sRef->fPrev();};
        inline gzUInt32 GnCurrChar() const {return sRef->GnCurrChar();};

        inline gzRstUStr operator+=(const gzStr& _sOther) const{
            (*sRef) += _sOther;
            return *const_cast<gzRstUStr*>(this);
        }

        inline gzStr operator+(const gzStr& _sOther) const{
            return (*sRef) + _sOther;
        }

        inline gzRstUStr& operator=(const gzStr& _sOther) {
            sRef = const_cast<gzStr*>(&_sOther);
            return *const_cast<gzRstUStr*>(this);
        }


        inline gzStr* operator->() const
        { return sRef; }

        inline gzStr& operator->()
        { return *sRef; }

        inline operator gzStr*() {
            return sRef;
        };

        inline operator gzStr&() {
            return *sRef;
        };

};


namespace Lib_GZ{
    struct uOverplace {uOverplace* _rPrec; gzUInt nId; gzPtrFuncRPAny cfOri; gzPtrFuncRPAny cfOver; gzPtrFuncRPAny cfExt; gzPtrFuncRAny cfExtAdr;};
    struct uLib { uLib* rPrec; gzStr sName; uOverplace** _rLastClass; };
    extern uLib zpLib;
    inline uLib* fSetLib(uLib* _rLib){
       uLib* rTemp = Lib::rLastLib;
       Lib::rLastLib = _rLib;
       return rTemp;
    }
}


namespace Lib_GZ{ void fIniLib(); extern Lib_GZ::uLib zpLib; extern Lib_GZ::uOverplace* rLastClass; inline Lib_GZ::uLib NewLib(){return {Lib_GZ::fSetLib(&zpLib), (gzStr((gzUInt8*)"\0" "Lib_GZ", (sizeof("\0" "Lib_GZ")/sizeof(gzUInt8)) - 2, true)), &rLastClass };} namespace Lib{ inline Lib_GZ::uOverplace* SetClass(Lib_GZ::uOverplace* _rClass){ Lib_GZ::uOverplace* rTemp = rLastClass; rLastClass = _rClass; return rTemp; } }}







namespace Lib_GZ{namespace Sys{class cContext;}}





class gzDataRoot {
public:
 gzUInt nNbIns;
 gzUInt nStride;
 gzUInt nSize;
    gzUInt nLimit;






    void* aTab;


 inline void fAddInstance(){
  nNbIns++;
 }
 inline void fRemoveInstance(){
  nNbIns--;
  if(nNbIns == 0){
   delete this;
  }
 }


  void fMalloc( gzUInt _nSize);
  void fFree();


 inline void fResizeMem( gzUInt _nSize){
  if(aTab == 0){
   fMalloc(_nSize);

  }else{
   fMalloc(_nSize);
  }
 }


 inline void fSetSize( gzUInt _nSize){
  nSize = _nSize;
  if(nSize > nLimit){
   nLimit = nSize * 2;
   fResizeMem(nLimit);
  }
 }


    inline gzDataRoot(gzUInt _nStride):nNbIns(1), aTab(0), nSize(0),nLimit(0) {
  nStride = _nStride;


  fSetSize(100);
    }


    inline gzDataRoot(gzUInt _nStride, gzUIntX _nRealSize):nNbIns(1), aTab(0),nSize(0),nLimit(0) {
  nStride = _nStride;

  fSetSize(100);

    }
    inline ~gzDataRoot(){
  fFree();

    };

};



template <class T> class gzData;

template <class T>
class gzFData {

 public:
  gzDataRoot* array;

  gzFData(gzDataRoot*_pOther){
   const_cast<gzFData<T>*>(this)->array = _pOther;
  }

  gzFData(const gzData<T>& _sOther){
   const_cast<gzFData<T>*>(this)->array = _sOther.array;
  }

  inline gzDataRoot* get() const {
   return array;
        }
};




template <class T>
class gzData {

 public:

  gzDataRoot* array;


  gzData(): array( new gzDataRoot( sizeof(T) ) ) {
  }

  gzData(gzDataRoot*_pOther){
    fFirstAssign(_pOther);
  }

  gzData(const gzData& _sOther){
    fFirstAssign(_sOther.array);
  }


        gzData& operator=(const gzData& _sOther) const{
   fAssign(_sOther.array);
     return *const_cast<gzData<T>*>(this);
  }




  inline gzDataRoot* get() const {
   return array;
        }
  inline void fFirstAssign(gzDataRoot* _pOther) const {
   const_cast<gzData<T>*>(this)->array = _pOther;
   _pOther->fAddInstance();
        }
  inline void fAssign(gzDataRoot* _pOther) const {
   gzDataRoot* _pTemp = array;
   const_cast<gzData<T>*>(this)->array = _pOther;
   _pOther->fAddInstance();
   if(_pTemp != 0){
    _pTemp->fRemoveInstance();
   }
        }
        inline gzUInt GnSize() const {

   return 0;
        }


        T* operator()(gzUIntX _nIndex) const;


        T & operator[](gzUIntX _nIndex) const{
   return ((T*)array->aTab)[_nIndex];
  }




        inline void fPush(const T& _nVal){


        }

  ~gzData(){
   array->fRemoveInstance();
  }

    private :

};
template <class T>
 T* gzData<T>::operator()(gzUIntX _nIndex) const {




    return 0;
}
namespace Lib_GZ{
    namespace cArray{

    }
}



typedef gzInt64 tLS;








   namespace Lib_GZ{
class cDelegate;}





namespace Lib_GZ {
namespace Math {

static const gzUInt nIPrecision = 10;
static const gzUInt nIDivPrecision = 12;
static const gzUInt nIDivPrecAdd64 = 4;

static const gzUInt nIPixPrecision = 8;



static const gzFloat nR90 = 1.57079633;
static const gzFloat nHPI = 1.57079633;
static const gzFloat64 nPI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062;

static const gzUInt nPrec = (1 << nIPrecision);
static const gzUInt nHPrec = (nPrec/2);
static const gzUInt nSP = nIPrecision;

static const gzUInt nPixPrec = (1 << nIPixPrecision);
static const gzUInt nPixHPrec = (nPixPrec/2);
static const gzUInt nPixSP = nIPixPrecision;
static const gzUInt nPixSP8 = (nIPixPrecision + (nIPixPrecision - 8));
static const gzUInt nPixSPDiff = (nIPrecision - nIPixPrecision);



    static const gzUInt nDivPrec = (nIDivPrecision + nIDivPrecAdd64);






}

}
namespace Lib_GZ {
namespace pMath {
inline int fFloatToInt( double d )
{
   union Cast
   {
      double d;
      long l;
    };
   volatile Cast c;
   c.d = d + 6755399441055744.0;
   return c.l;
}
    gzInt8 inline fAbs(gzInt8 _nVal){
     if(_nVal < 0){ return -_nVal;}else{return _nVal;}
    }
    gzInt16 inline fAbs(gzInt16 _nVal){
     if(_nVal < 0){ return -_nVal;}else{return _nVal;}
    }
    gzInt32 inline fAbs(gzInt32 _nVal){
     if(_nVal < 0){ return -_nVal;}else{return _nVal;}
    }
    gzInt64 inline fAbs(gzInt64 _nVal){
     if(_nVal < 0){ return -_nVal;}else{return _nVal;}
    }
    gzFloat32 inline fAbs(gzFloat32 _nVal){
     if(_nVal < 0){ return -_nVal;}else{return _nVal;}
    }
    gzFloat64 inline fAbs(gzFloat64 _nVal){
     if(_nVal < 0){ return -_nVal;}else{return _nVal;}
    }
    gzFloat64 fPow(gzFloat64 uiNombre, gzUInt32 uiExposant);
    gzInt32 fPow(gzInt32 uiNombre, gzUInt32 uiExposant);

    gzFloat32 fSqrt(const gzFloat32 _nVal);
    gzFloat fSin(gzFloat _nAngle);
    gzFloat fCos(gzFloat _nAngle);
    gzFloat fTan(gzFloat _nAngle);
    gzFloat fASin (gzFloat _nValue);
    gzFloat fACos(gzFloat _nValue);
    gzFloat fATan(gzFloat _nValue);
    gzFloat fATan2( gzFloat _nY, gzFloat _nX );
}
}


class GZ_M {

 public:
 private:

};


class gzStr;

namespace Lib_GZ{

typedef struct {
    gzInt8* nVal;
    gzInt8 nLastVal;
    gzFloat nFracVal;
    gzFloat nLimit;
    gzFloat nSpeed;
    gzInt8 nTo;

} GZ_uEase_gzInt8;

typedef struct {
    gzInt16* nVal;
    gzInt16 nLastVal;
    gzFloat nFracVal;
    gzFloat nLimit;
    gzFloat nSpeed;
    gzInt16 nTo;

} GZ_uEase_gzInt16;

typedef struct {
    gzInt32* nVal;
    gzInt32 nLastVal;
    gzFloat nFracVal;
    gzFloat nLimit;
    gzFloat nSpeed;
    gzInt32 nTo;

} GZ_uEase_gzInt32;

typedef struct {
    gzInt64* nVal;
    gzInt64 nLastVal;
    gzFloat nFracVal;
    gzFloat nLimit;
    gzFloat nSpeed;
    gzInt64 nTo;

} GZ_uEase_gzInt64;


typedef struct {
    gzFloat32* nVal;
    gzFloat32 nLastVal;
    gzFloat nFracVal;
    gzFloat nLimit;
    gzFloat nSpeed;
    gzFloat32 nTo;

} GZ_uEase_gzFloat32;

typedef struct {
    gzFloat64* nVal;
    gzFloat64 nLastVal;
    gzFloat nFracVal;
    gzFloat nLimit;
    gzFloat nSpeed;
    gzFloat64 nTo;

} GZ_uEase_gzFloat64;





inline void GZ_uEase_fLimit(GZ_uEase_gzFloat32* _rEase, gzFloat _nLimit){
    _rEase->nLimit = pMath::fAbs(_nLimit);
}

inline void GZ_uEase_fSpeed(GZ_uEase_gzFloat32* _rEase, gzFloat _nSpeed){
    if(_nSpeed > -1.0 && _nSpeed < 1.0 ){
        _nSpeed = 1.0;
    }
    _rEase->nSpeed = _nSpeed;
}






void GZ_uEase_fStep(GZ_uEase_gzInt8* _rEase);
void GZ_uEase_fStep(GZ_uEase_gzInt16* _rEase);
void GZ_uEase_fStep(GZ_uEase_gzInt32* _rEase);
void GZ_uEase_fStep(GZ_uEase_gzInt64* _rEase);

void GZ_uEase_fStep(GZ_uEase_gzFloat32* _rEase);
}







template <class T> class gzPod;
template <class T>
class gzPod {
    public:
    T val;
    inline gzPod() {};


    inline gzPod(T _val):val(_val){};
    inline T* operator->() const
    { return const_cast<T*>(&val);}



    inline T* get(){
        return &val;
     }



    inline ~gzPod(){};
};
namespace Lib_GZ{







struct gzComp_r_void_p_No {void* oClass; gzPtrFunc fCall; };;
namespace Dlg_r_void_p_No{
   class Dlg;typedef const Dlg& DlgP; typedef void(* FpM)(gzDlgWrapM* _w ); typedef void(* FpD)(gzDlgWrapD* _w ); typedef void(* FpP)(void* _oInst ); inline void fDlgEmptyFunction(void* _oInst ){return ;};
   class Dlg { struct _dStD{void* oClass; FpD fCall; };struct _dStM{void* oClass; FpM fCall; };struct _dStP{void* oClass; FpP fCall; };private:Lib_GZ::gzComp_r_void_p_No cfDlg;public:inline Dlg(){ ((_dStD*)&cfDlg)->oClass = 0; ((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}inline Dlg(Lib_GZ::gzComp_r_void_p_No _cfDelegate){ cfDlg = _cfDelegate;}inline Dlg& operator=(Lib_GZ::gzComp_r_void_p_No _cfDelegate){ cfDlg = _cfDelegate; return *this;}inline Lib_GZ::gzComp_r_void_p_No get() const {return cfDlg;} inline gzBool fIsSet(){return true;}inline Dlg(FpD _Func){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)_Func;}inline Dlg(void* _opClass, FpM _Func){((_dStD*)&cfDlg)->oClass = _opClass;((_dStM*)&cfDlg)->fCall = (FpM)_Func;} inline void fReset(){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}
        inline void fCall() const{
            (*((_dStP*)&cfDlg)->fCall)(((gzComp*)&cfDlg)->oClass );
         }
    };
}



struct gzComp_r_void_p_gzStr {void* oClass; gzPtrFunc fCall; };;
namespace Dlg_r_void_p_gzStr{
   class Dlg;typedef const Dlg& DlgP; typedef void(* FpM)(gzDlgWrapM* _w , const gzStr&); typedef void(* FpD)(gzDlgWrapD* _w , const gzStr&); typedef void(* FpP)(void* _oInst , const gzStr&); inline void fDlgEmptyFunction(void* _oInst , const gzStr&){return ;};
   class Dlg { struct _dStD{void* oClass; FpD fCall; };struct _dStM{void* oClass; FpM fCall; };struct _dStP{void* oClass; FpP fCall; };private:Lib_GZ::gzComp_r_void_p_gzStr cfDlg;public:inline Dlg(){ ((_dStD*)&cfDlg)->oClass = 0; ((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}inline Dlg(Lib_GZ::gzComp_r_void_p_gzStr _cfDelegate){ cfDlg = _cfDelegate;}inline Dlg& operator=(Lib_GZ::gzComp_r_void_p_gzStr _cfDelegate){ cfDlg = _cfDelegate; return *this;}inline Lib_GZ::gzComp_r_void_p_gzStr get() const {return cfDlg;} inline gzBool fIsSet(){return true;}inline Dlg(FpD _Func){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)_Func;}inline Dlg(void* _opClass, FpM _Func){((_dStD*)&cfDlg)->oClass = _opClass;((_dStM*)&cfDlg)->fCall = (FpM)_Func;} inline void fReset(){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}
        inline void fCall(const gzStr& _sStr) const{
            (*((_dStP*)&cfDlg)->fCall)(((gzComp*)&cfDlg)->oClass , _sStr );
         }
    };
}



struct gzComp_r_void_p_gzPtr {void* oClass; gzPtrFunc fCall; };;
namespace Dlg_r_void_p_gzPtr{
   class Dlg;typedef const Dlg& DlgP; typedef void(* FpM)(gzDlgWrapM* _w , gzPtr); typedef void(* FpD)(gzDlgWrapD* _w , gzPtr); typedef void(* FpP)(void* _oInst , gzPtr); inline void fDlgEmptyFunction(void* _oInst , gzPtr){return ;};
   class Dlg { struct _dStD{void* oClass; FpD fCall; };struct _dStM{void* oClass; FpM fCall; };struct _dStP{void* oClass; FpP fCall; };private:Lib_GZ::gzComp_r_void_p_gzPtr cfDlg;public:inline Dlg(){ ((_dStD*)&cfDlg)->oClass = 0; ((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}inline Dlg(Lib_GZ::gzComp_r_void_p_gzPtr _cfDelegate){ cfDlg = _cfDelegate;}inline Dlg& operator=(Lib_GZ::gzComp_r_void_p_gzPtr _cfDelegate){ cfDlg = _cfDelegate; return *this;}inline Lib_GZ::gzComp_r_void_p_gzPtr get() const {return cfDlg;} inline gzBool fIsSet(){return true;}inline Dlg(FpD _Func){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)_Func;}inline Dlg(void* _opClass, FpM _Func){((_dStD*)&cfDlg)->oClass = _opClass;((_dStM*)&cfDlg)->fCall = (FpM)_Func;} inline void fReset(){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}
        inline void fCall(gzPtr _pAny) const{
            (*((_dStP*)&cfDlg)->fCall)(((gzComp*)&cfDlg)->oClass , _pAny );
         }
    };
}

}





namespace Lib_GZ{class cStThread;}







namespace Lib_GZ{namespace File{
 class cResource;
}}
typedef Lib_GZ::File::cResource* gzRcFile;
struct gzRcFolder{
 const unsigned int nTotalFolder;
 const unsigned int nTotalFile;
 const gzStr sName;
 const gzRcFolder* aFolder;
 const gzRcFile* aFile;
};
 typedef gzUInt gzVal;


template <class T> class gzArray;

typedef struct {
    gzUInt nNbIns;
    gzUInt size;
    gzUInt maxSize;
    gzPtr *array;
} ArrayFunc;


typedef struct {
    int *array;
    gzUInt size;
    gzUInt maxSize;
} ArrayInt;

 typedef struct ArrayPtr {
    gzUInt size;
    gzUInt maxSize;
    ArrayPtr **array;
}ArrayPtr;
ArrayPtr** GZ_tAw_Ptr(ArrayPtr* _aArray, gzUInt _nIndex);
ArrayPtr* GZ_tAr_Ptr(ArrayPtr* _aArray, gzUInt _nIndex);

void* c_e(void* _ptr);
gzInt32* GZ_tAw_Int(ArrayInt* _aArray, gzUInt _nIndex);
gzInt32 GZ_tAr_Int(ArrayInt* _aArray, gzUInt _nIndex);

template <class T> class gzQArray;
struct gzQElementAnyHold {
    void* pNext;
    void* pPrev;
    void* pRoot;
    gzInt nNbInst;
};

class gzQElementAny {
    public:
    gzQElementAnyHold* qeAny;
   inline gzQElementAny(gzQElementAnyHold* _Any){
        qeAny = _Any;
    }
};

class gzQRoot {
public:
    void* pFirst;
    void* pLast;
    gzUInt nTotal;

    inline gzQRoot():nTotal(0){
    }
    inline ~gzQRoot(){};
};
template <class T>
struct gzQElementHold {
    void* pNext;
    void* pPrev;
    void* pRoot;
    gzInt nNbInst;
    T Val;

    gzQElementHold<T>* fNext() const;
    gzQElementHold<T>* fPrev() const;

    inline gzQElementHold(const T &_Val): Val(_Val), nNbInst(1) {

    }

    inline gzQElementHold():nNbInst(1){

    }
     inline ~gzQElementHold(){

    }
};


template <class T>
class gzQElement {
    public:
    gzQElementHold<T>* qeHold;

     inline gzQElement(){
        qeHold = new gzQElementHold<T>();
        qeHold->pRoot = 0;
        qeHold->pPrev = qeHold;
        qeHold->pNext = qeHold;
        qeHold->nNbInst = 1;
     }

     inline gzQElement( const gzQElement& other ){
        qeHold = other.qeHold;
        qeHold->nNbInst++;
     }

    inline gzQElement& operator= (const gzQElement& other)
    {
       if(qeHold != 0){
            qeHold->nNbInst--;
            if(qeHold->nNbInst == 0){
                delete qeHold;
            }
        }
        qeHold = other.qeHold;
        qeHold->nNbInst++;
        return *this;
    }

    inline gzQElement( gzQElementHold<T>* _qeHold) {
        qeHold = _qeHold;
        qeHold->nNbInst++;
    };

    inline ~gzQElement(){
        qeHold->nNbInst--;
        if(qeHold->nNbInst == 0){
           delete qeHold;
        }
    };

    inline T ref() const {

        return qeHold->Val;
    };

    inline T* val() const {

        return &qeHold->Val;
    };

    inline gzQElementHold<T>* operator->() const
    { return qeHold; }

    inline gzQElementHold<T>& operator->()
    { return *qeHold; }


    inline operator gzQElementHold<T>*() {
        return qeHold;
    };

    inline operator gzQElementHold<T>&() {
        return *qeHold;
    };

    inline gzQElement<T> GqeNext() const{ return qeHold->fNext();}
    inline gzQElement<T> GqePrev() const{ return qeHold->fPrev();}
};






namespace Lib_GZ{struct gzComp_r_gzBool_p_gzQElement_gzQElement {void* oClass; gzPtrFunc fCall; };;}



namespace Dlg_r_gzBool_p_gzQElement_gzQElement{


   class Dlg;typedef const Dlg& DlgP; typedef gzBool(* FpM)(gzDlgWrapM* _w , const gzQElementAny& _pLeft, const gzQElementAny& _pRight); typedef gzBool(* FpD)(gzDlgWrapD* _w , const gzQElementAny& _pLeft, const gzQElementAny& _pRight); typedef gzBool(* FpP)(void* _oInst , const gzQElementAny& _pLeft, const gzQElementAny& _pRight); inline gzBool fDlgEmptyFunction(void* _oInst , const gzQElementAny& _pLeft, const gzQElementAny& _pRight){return false;};
   class Dlg { struct _dStD{void* oClass; FpD fCall; };struct _dStM{void* oClass; FpM fCall; };struct _dStP{void* oClass; FpP fCall; };private:Lib_GZ::gzComp_r_gzBool_p_gzQElement_gzQElement cfDlg;public:inline Dlg(){ ((_dStD*)&cfDlg)->oClass = 0; ((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}inline Dlg(Lib_GZ::gzComp_r_gzBool_p_gzQElement_gzQElement _cfDelegate){ cfDlg = _cfDelegate;}inline Dlg& operator=(Lib_GZ::gzComp_r_gzBool_p_gzQElement_gzQElement _cfDelegate){ cfDlg = _cfDelegate; return *this;}inline Lib_GZ::gzComp_r_gzBool_p_gzQElement_gzQElement get() const {return cfDlg;} inline gzBool fIsSet(){return true;}inline Dlg(FpD _Func){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)_Func;}inline Dlg(void* _opClass, FpM _Func){((_dStD*)&cfDlg)->oClass = _opClass;((_dStM*)&cfDlg)->fCall = (FpM)_Func;} inline void fReset(){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}

        inline gzInt fCall(const gzQElementAny& _pLeft, const gzQElementAny& _pRight) const{
            return (*((_dStP*)&cfDlg)->fCall)(((gzComp*)&cfDlg)->oClass , _pLeft, _pRight );
         }
    };
}


template <class T>
class gzQArray {

 public:

        gzSp<gzQRoot> queue;
        gzQElementHold<T>* qeEmpty;

  gzQArray();
        gzQArray(const gzQArray& _sOther);

        gzQElement<T> GqeEmpty() const;
        gzQElement<T> GqeFirst() const;
        gzQElement<T> GqeLast() const;
        gzUInt GnTotal() const;

        void fShort(Dlg_r_gzBool_p_gzQElement_gzQElement::DlgP _dCustomShort) const;

        gzBool fNext() const;
        gzBool fPrev() const;
        gzQElement<T> fPush(const T&) const;
  T fPrePop() const;

        gzBool fClear() const;

        virtual ~gzQArray();

        gzQArray& operator=(const gzQArray& _sOther) const;
        gzQArray operator+(const gzQArray& _sOther) const;
        gzQArray operator+=(const gzQArray& _sOther) const;

 private:

};



namespace Lib_GZ{

    namespace cQArray{
        void fRangeShort( gzQElementAnyHold* pLeft, gzQElementAnyHold* pRight, Dlg_r_gzBool_p_gzQElement_gzQElement::DlgP _dCustomShort);

        inline void fSwap(gzQElementAnyHold* node1, gzQElementAnyHold* node2) {
         gzQElementAnyHold* temp;


          temp = (gzQElementAnyHold*)node1->pNext;
          node1->pNext = node2->pNext;
          node2->pNext = temp;

          if (node1->pNext == 0){
            ((gzQRoot*)node1->pRoot)->pLast = node1;

          }else{
            ((gzQElementAnyHold*)node1->pNext)->pPrev = node1;
          }
          if (node2->pNext == 0){
            ((gzQRoot*)node2->pRoot)->pLast = node2;

          }else{
            ((gzQElementAnyHold*)node2->pNext)->pPrev = node2;
          }
          temp = (gzQElementAnyHold*)node1->pPrev;
          node1->pPrev = node2->pPrev;
          node2->pPrev = temp;


          if (node1->pPrev == 0){
            ((gzQRoot*)node1->pRoot)->pFirst = node1;

          }else{
            ((gzQElementAnyHold*)node1->pPrev)->pNext = node1;
          }

          if (node2->pPrev == 0){
            ((gzQRoot*)node2->pRoot)->pFirst = node2;

          }else{
            ((gzQElementAnyHold*)node2->pPrev)->pNext = node2;
          }
        }


        inline void fShort( gzQRoot* _qaRoot, Dlg_r_gzBool_p_gzQElement_gzQElement::DlgP _dCustomShort){
            gzQElementAnyHold* pLeft = (gzQElementAnyHold*)_qaRoot->pFirst;
            gzQElementAnyHold* pRight = (gzQElementAnyHold*)_qaRoot->pLast;



            pLeft->pPrev = 0;
            pRight->pNext = 0;
            fRangeShort(pLeft, pRight, _dCustomShort);


            ((gzQElementAnyHold*)_qaRoot->pFirst)->pPrev = ((gzQElementAnyHold*)_qaRoot->pLast);
            ((gzQElementAnyHold*)_qaRoot->pLast)->pNext = ((gzQElementAnyHold*)_qaRoot->pFirst);
        }
    }
}





template <class T>
gzQElementHold<T>* gzQElementHold<T>::fNext() const {
    return (gzQElementHold<T>*)this->pNext;
}

template <class T>
gzQElementHold<T>* gzQElementHold<T>::fPrev() const {
    return (gzQElementHold<T>*)this->pPrev;
}





template <class T>
void gzQArray<T>::fShort(Dlg_r_gzBool_p_gzQElement_gzQElement::DlgP _dCustomShort) const {
    Lib_GZ::cQArray::fShort(queue.get(), _dCustomShort);
}


template <class T>
gzQElement<T> gzQArray<T>::fPush(const T& _Val) const {


    gzQElementHold<T>* _qeNew = new gzQElementHold<T>(_Val);



    _qeNew->pRoot = queue.get();

    if(queue->nTotal == 0){
        queue->pFirst = _qeNew;
        queue->pLast = _qeNew;
        _qeNew->pPrev = _qeNew;
        _qeNew->pNext = _qeNew;
    }else {
         gzQElementHold<T>* _qeOldLast = (gzQElementHold<T>*)queue->pLast;
        queue->pLast = _qeNew;
        _qeOldLast->pNext = _qeNew;

        _qeNew->pPrev = _qeOldLast;
        _qeNew->pNext = (gzQElementHold<T>*)queue->pFirst;
        ((gzQElementHold<T>*)(queue->pFirst))->pPrev = _qeNew;
    }
    queue->nTotal++;
    return _qeNew;
}

template <class T>
T gzQArray<T>::fPrePop() const {

 if(queue->nTotal == 0){
  return 0;
 }

 gzQElementHold<T>* _qePoped = (gzQElementHold<T>*)queue->pFirst;

 if(queue->nTotal == 1){
  queue->nTotal = 0;
  queue->pFirst = qeEmpty;
  queue->pLast = qeEmpty;
 }else{

  gzQElementHold<T>* _qeBef = (gzQElementHold<T>*)_qePoped->pPrev;
  gzQElementHold<T>* _qeAft = (gzQElementHold<T>*)_qePoped->pNext;

  _qeBef->pNext = _qeAft;
  _qeAft->pPrev = _qeBef;

   queue->pFirst = _qeAft;
   ((gzQElementHold<T>*)(queue->pLast))->pNext = queue->pFirst;
   queue->nTotal--;
 }
  T _nVal = _qePoped->Val;
  delete _qePoped;
  return _nVal;
}
template <class T>
gzBool gzQArray<T>::fClear() const {
    gzQElementHold<T>* _qeCurrent = GqeFirst();
    gzQElementHold<T>* _qeLast = _qeCurrent;
    for(gzUInt i = 0; i < queue->nTotal; i++){
      _qeCurrent = _qeCurrent->fNext();
      _qeLast->nNbInst --;
      if(_qeLast->nNbInst == 0){
            delete _qeLast;
      }
      _qeLast = _qeCurrent;
    }
    queue->nTotal = 0;
    queue->pFirst = qeEmpty;
    queue->pLast = qeEmpty;
    return true;
}


template <class T>
gzQElement<T> gzQArray<T>::GqeFirst() const {
    return (gzQElementHold<T>*)queue->pFirst;
}

template <class T>
gzQElement<T> gzQArray<T>::GqeLast() const {
    return (gzQElementHold<T>*)queue->pLast;
}

template <class T>
gzUInt gzQArray<T>::GnTotal() const {
    return queue->nTotal;
}






template <class T>
gzQArray<T>::gzQArray():queue(gzSp< gzQRoot >( new gzQRoot() )) {

    qeEmpty = new gzQElementHold<T>();
    qeEmpty->pRoot = queue.get();
    qeEmpty->pPrev = qeEmpty;
    qeEmpty->pNext = qeEmpty;

    queue->pFirst = qeEmpty;
    queue->pLast = qeEmpty;
}

template <class T>
gzQArray<T>::gzQArray(const gzQArray& _sOther){
 queue = _sOther.queue;
}

template <class T>
gzQArray<T>& gzQArray<T>::operator=(const gzQArray<T>& _sOther) const{
   const_cast<gzQArray<T>*>(this)->queue = _sOther.queue;
   return *const_cast<gzQArray<T>*>(this);
}
template <class T>
gzQArray<T>::~gzQArray(){
    if(queue.use_count() == 1){
       gzQElementHold<T>* _qeCurrent = GqeFirst();
       gzQElementHold<T>* _qeLast = _qeCurrent;
        for(gzUInt i = 0; i < queue->nTotal; i++){
          _qeCurrent = _qeCurrent->fNext();
        _qeLast->nNbInst --;
          if(_qeLast->nNbInst == 0){
                delete _qeLast;
          }
          _qeLast = _qeCurrent;
        }
        qeEmpty->nNbInst--;
        if(qeEmpty->nNbInst == 0){
            delete qeEmpty;
        }
    }
}

namespace Lib_GZ{
 class cAtomicQueue;

 class cThreadMsg;
 class cThread;

 class cHoldGate{
  public:

  Lib_GZ::cAtomicQueue* oQueue;
  gzUInt nNbIns;


  Lib_GZ::cThreadMsg* fReceive(Lib_GZ::cBase* _oReceivingClass);
  int fSend(Lib_GZ::cThreadMsg* _oMsg);

  cHoldGate();
  ~cHoldGate();

 };

 namespace Gate{

  void fAdd(Lib_GZ::cHoldGate* _oHold);
  void fSub(Lib_GZ::cHoldGate* _oHold);
 }
}
template <class T>
class gzGate {
public :

 Lib_GZ::cHoldGate* oHold;

 inline gzGate(){oHold = new Lib_GZ::cHoldGate();}
 inline void Ini(){
     if(oHold == 0){
            oHold = new Lib_GZ::cHoldGate();
     }
 }


 inline ~gzGate(){
  Lib_GZ::Gate::fSub(oHold);
 }


 inline gzSp<T> fReceive(Lib_GZ::cBase* _oReceivingClass){ return gzSp<T>((T*)oHold->fReceive(_oReceivingClass)); }



 inline int fSend(Lib_GZ::cThreadMsg* _oMsg){return oHold->fSend(_oMsg);};

 gzGate(const gzGate& _oOther);
 gzGate& operator=(const gzGate& _oOther) const;

};


template <class T>
 gzGate<T>::gzGate(const gzGate& _oOther){
 oHold = _oOther.oHold;
   Lib_GZ::Gate::fAdd(oHold);
}

template <class T>
gzGate<T>& gzGate<T>::operator=(const gzGate<T>& _oOther) const{

 Lib_GZ::cHoldGate* _oTemp = oHold;

   const_cast<gzGate<T>*>(this)->oHold = _oOther.oHold;
   Lib_GZ::Gate::fAdd(oHold);


    if(_oTemp != 0){
        Lib_GZ::Gate::fSub(_oTemp);
    }

   return *const_cast<gzGate<T>*>(this);
}


namespace Lib_GZ{class cThreadExt;}





   namespace Lib_GZ{
class cDelegate;}

template <class T> class gzQArray;




namespace Lib_GZ{class cThread;}
namespace Lib_GZ{namespace Sys{class cThreadObj;}}



namespace Lib_GZ{class cDispacher;}


namespace Lib_GZ{
namespace ThreadExt{


}
class cThreadExt : public Lib_GZ::cBase {

 public:
        gzSp<Sys::cThreadObj> oThreadObj;

        gzQElement<gzSp<cThreadExt>> qeInList;

        cThread* oThread;

  inline cThreadExt(cBase _parent):cBase(_parent), oThread(0){};
  void Ini_cThreadExt(Lib_GZ::Dlg_r_void_p_gzPtr::DlgP _dCallBack);
  virtual void fStart();
  virtual void fJoin();
  virtual void fCancel();
  virtual void fClose();
  virtual ~cThreadExt();

 private:

};
namespace ThreadExt{

    inline gzSp<Lib_GZ::cThreadExt> New(cBase _parent, Lib_GZ::Dlg_r_void_p_gzPtr::DlgP _dCallBack){
        gzSp<Lib_GZ::cThreadExt>_oTemp = gzSp<Lib_GZ::cThreadExt>(new Lib_GZ::cThreadExt(_parent));
        _oTemp->Ini_cThreadExt(_dCallBack);
        return _oTemp;
    }
}

}

namespace Lib_GZ{class cThread;}




template <class T> class gzArray;

   namespace Lib_GZ{
class cDelegate;}








namespace Lib_GZ{namespace Thread{



}}


namespace Lib_GZ{class cDispacher;}
namespace Lib_GZ{namespace Sys{class cDebug;}}

namespace Lib_GZ{
class cStThread;
class cThreadExt;

namespace Thread{

}

class cThread : public Lib_GZ::cBase {

 public:
  static gzUInt nCurrId;

  gzUInt nId = 0;


       gzArray<gzSp<cStThread>> st;
       gzArray<gzPtrFuncRPAny> func;

       gzSp<cBase> oObj;

       gzBool bRun;
    gzUInt nSleepTime;
       cThreadExt* pThreadExt;
       void fStart(cBase* _poObj);

        cThread(cBase* _parent);


  inline cThread(const cBase& _o, gzBool _b):cBase(_o,_b) {

  }






  void fLinkThreadExt(cThreadExt* _pThreadExt);
  void fLoop();
  virtual ~cThread();

 private:

};


}





namespace Lib_GZ{namespace Sys{class cWindow;}}










template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Sys{class cWindow;}}



namespace Lib_GZ{namespace Sys{namespace Window{


 const gzInt nPosCenter = -1;



 struct eWinState{
  enum Type {
   Normal = 0,
   Minimised = 1,
   Maximised = 2,
   Hidden = 3
  };
  Type t_;inline eWinState(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eWinState(){};
 };
 struct eWinBorder{
  enum Type {
   Normal = 0,
   NormalDouble = 1,
   None = 2,
   BorderOnly = 3,
   BorderOnlyDouble = 4,
   Title = 5,
   TitleDouble = 6
  };
  Type t_;inline eWinBorder(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eWinBorder(){};
 };
 struct eWinClick{
  enum Type {
   None = 0,
   Close = 1,
   Maximize = 2,
   Minimize = 3
  };
  Type t_;inline eWinClick(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eWinClick(){};
 };
}}}





namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThread;}






namespace Lib_GZ{namespace Class{



}}


namespace Lib_GZ{class cThreadMsg;}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Class{
 cClass* MemCopy(cClass* _oClass);


}
class pClass {

 public:


};

class cClass : public Lib_GZ::cBase {

 public:



  cClass(Lib_GZ::cBase* _parent);
  virtual void Ini_cClass();

  inline cClass(const cClass &_o) : Lib_GZ::cBase(_o){};
  inline cClass(const cClass &_o, gzBool _b) : Lib_GZ::cBase(_o, _b){};
  virtual ~cClass();

 private:



};
class csClass : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cClass> New(Lib_GZ::cBase* _parent){
   gzSp<cClass>_oTemp = gzSp<cClass>(new cClass(_parent));
   _oTemp->Ini_cClass();
   return _oTemp;
  }

  gzInt nClassId;



  inline csClass(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csClass(){};
};
namespace Class{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csClass((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csClass> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csClass*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csClass*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csClass>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Class{
}}

namespace Lib_GZ{namespace Sys{namespace Window{



}}}


namespace Lib_GZ{namespace Gpu{class cGpu;}}
namespace Lib_GZ{namespace Gfx{class cInterface;}}

namespace Lib_GZ{namespace Input{class cKey;}}



namespace Lib_GZ{namespace Input{namespace Key{





 struct eKey{
  enum Type {
   Abnt_C1 = gzInt(193),
   Abnt_C2 = gzInt(194),
   Numpad_Add = gzInt(107),
   Attn = gzInt(246),
   Backspace = gzInt(8),
   Break = gzInt(3),
   Clear = gzInt(12),
   CrSel = gzInt(247),
   Numpad_Dot = gzInt(110),
   Numpad_Divide = gzInt(111),
   ErEof = gzInt(249),
   Escape = gzInt(27),
   Execute = gzInt(43),
   ExSel = gzInt(248),
   Ico_Clear = gzInt(230),
   Ico_Help = gzInt(227),
   KEY_0 = gzInt(48),
   KEY_1 = gzInt(49),
   KEY_2 = gzInt(50),
   KEY_3 = gzInt(51),
   KEY_4 = gzInt(52),
   KEY_5 = gzInt(53),
   KEY_6 = gzInt(54),
   KEY_7 = gzInt(55),
   KEY_8 = gzInt(56),
   KEY_9 = gzInt(57),
   KEY_A = gzInt(65),
   KEY_B = gzInt(66),
   KEY_C = gzInt(67),
   KEY_D = gzInt(68),
   KEY_E = gzInt(69),
   KEY_F = gzInt(70),
   KEY_G = gzInt(71),
   KEY_H = gzInt(72),
   KEY_I = gzInt(73),
   KEY_J = gzInt(74),
   KEY_K = gzInt(75),
   KEY_L = gzInt(76),
   KEY_M = gzInt(77),
   KEY_N = gzInt(78),
   KEY_O = gzInt(79),
   KEY_P = gzInt(80),
   KEY_Q = gzInt(81),
   KEY_R = gzInt(82),
   KEY_S = gzInt(83),
   KEY_T = gzInt(84),
   KEY_U = gzInt(85),
   KEY_V = gzInt(86),
   KEY_W = gzInt(87),
   KEY_X = gzInt(88),
   KEY_Y = gzInt(89),
   KEY_Z = gzInt(90),
   Numpad_Multiply = gzInt(106),
   NoName = gzInt(252),
   Numpad_0 = gzInt(96),
   Numpad_1 = gzInt(97),
   Numpad_2 = gzInt(98),
   Numpad_3 = gzInt(99),
   Numpad_4 = gzInt(100),
   Numpad_5 = gzInt(101),
   Numpad_6 = gzInt(102),
   Numpad_7 = gzInt(103),
   Numpad_8 = gzInt(104),
   Numpad_9 = gzInt(105),
   OEM_1 = gzInt(186),
   OEM_102 = gzInt(226),
   OEM_2 = gzInt(191),
   OEM_3 = gzInt(192),
   OEM_4 = gzInt(219),
   OEM_5 = gzInt(220),
   OEM_6 = gzInt(221),
   OEM_7 = gzInt(222),
   OEM_8 = gzInt(223),
   OEM_ATTN = gzInt(240),
   OEM_AUTO = gzInt(243),
   OEM_AX = gzInt(225),
   OEM_BACKTAB = gzInt(245),
   OEM_CLEAR = gzInt(254),
   OEM_COMMA = gzInt(188),
   OEM_COPY = gzInt(242),
   OEM_CUSEL = gzInt(239),
   OEM_ENLW = gzInt(244),
   OEM_FINISH = gzInt(241),
   OEM_FJ_LOYA = gzInt(149),
   OEM_FJ_MASSHOU = gzInt(147),
   OEM_FJ_ROYA = gzInt(150),
   OEM_FJ_TOUROKU = gzInt(148),
   OEM_JUMP = gzInt(234),
   OEM_MINUS = gzInt(189),
   OEM_PA1 = gzInt(235),
   OEM_PA2 = gzInt(236),
   OEM_PA3 = gzInt(237),
   OEM_PERIOD = gzInt(190),
   OEM_PLUS = gzInt(187),
   OEM_RESET = gzInt(233),
   OEM_WSCTRL = gzInt(238),
   PA1 = gzInt(253),
   Packet = gzInt(231),
   Play = gzInt(250),
   ProcessKey = gzInt(229),
   Return = gzInt(13),
   Select = gzInt(41),
   Separator = gzInt(108),
   SPACE = gzInt(32),
   Numpad_Subtract = gzInt(109),
   Tab = gzInt(9),
   Zoom = gzInt(251),
   None = gzInt(255),
   Accept = gzInt(30),
   Apps = gzInt(93),
   BROWSER_BACK = gzInt(166),
   BROWSER_FAVORITES = gzInt(171),
   BROWSER_FORWARD = gzInt(167),
   BROWSER_HOME = gzInt(172),
   BROWSER_REFRESH = gzInt(168),
   BROWSER_SEARCH = gzInt(170),
   BROWSER_STOP = gzInt(169),
   Capital = gzInt(20),
   Convert = gzInt(28),
   Delete = gzInt(46),
   End = gzInt(35),
   F1 = gzInt(112),
   F10 = gzInt(121),
   F11 = gzInt(122),
   F12 = gzInt(123),
   F13 = gzInt(124),
   F14 = gzInt(125),
   F15 = gzInt(126),
   F16 = gzInt(127),
   F17 = gzInt(128),
   F18 = gzInt(129),
   F19 = gzInt(130),
   F2 = gzInt(113),
   F20 = gzInt(131),
   F21 = gzInt(132),
   F22 = gzInt(133),
   F23 = gzInt(134),
   F24 = gzInt(135),
   F3 = gzInt(114),
   F4 = gzInt(115),
   F5 = gzInt(116),
   F6 = gzInt(117),
   F7 = gzInt(118),
   F8 = gzInt(119),
   F9 = gzInt(120),
   Final = gzInt(24),
   Help = gzInt(47),
   Home = gzInt(36),
   Ico_00 = gzInt(228),
   Insert = gzInt(45),
   JUNJA = gzInt(23),
   KANA = gzInt(21),
   KANJI = gzInt(25),
   LAUNCH_APP1 = gzInt(182),
   LAUNCH_APP2 = gzInt(183),
   LAUNCH_MAIL = gzInt(180),
   LAUNCH_MEDIA_SELECT = gzInt(181),
   Mouse_Left = gzInt(1),
   LControl = gzInt(162),
   LMenu = gzInt(164),
   LShift = gzInt(160),
   LWin = gzInt(91),
   Media_NextTrack = gzInt(176),
   Media_PlayPause = gzInt(179),
   Media_PrevTrack = gzInt(177),
   Media_Stop = gzInt(178),
   ModeChange = gzInt(31),
   NonConvert = gzInt(29),
   NumLock = gzInt(144),
   OEM_Jisho = gzInt(146),
   Pause = gzInt(19),
   Print = gzInt(42),
   PageUp = gzInt(33),
   PageDown = gzInt(34),
   Mouse_Right = gzInt(2),
   Mouse_Middle = gzInt(4),
   RConctrol = gzInt(163),
   RMenu = gzInt(165),
   RShift = gzInt(161),
   RWin = gzInt(92),
   Scroll_Lock = gzInt(145),
   Sleep = gzInt(95),
   Snapshot = gzInt(44),
   UP = gzInt(38),
   Down = gzInt(40),
   Left = gzInt(37),
   Right = gzInt(39),
   Volume_Down = gzInt(174),
   Volume_Mute = gzInt(173),
   Volume_Up = gzInt(175),
   XButton_1 = gzInt(5),
   XButton_2 = gzInt(6)
  };
  Type t_;inline eKey(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eKey(){};
 };
}}}

namespace Lib_GZ{namespace Sys{class cWindow;}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}
namespace Lib_GZ{namespace Sys{namespace Window{


 namespace Dlg_fReceiveMessage_r_void_p_gzStr{

  class Dlg;typedef const Dlg& DlgP; typedef void(* FpM)(gzDlgWrapM* _w , const gzStr& _sMessage); typedef void(* FpD)(gzDlgWrapD* _w , const gzStr& _sMessage); typedef void(* FpP)(void* _oInst , const gzStr& _sMessage); inline void fDlgEmptyFunction(void* _oInst , const gzStr& _sMessage){return ;};
   class Dlg { struct _dStD{void* oClass; FpD fCall; };struct _dStM{void* oClass; FpM fCall; };struct _dStP{void* oClass; FpP fCall; };private:Lib_GZ::gzComp_r_void_p_gzStr cfDlg;public:inline Dlg(){ ((_dStD*)&cfDlg)->oClass = 0; ((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}inline Dlg(Lib_GZ::gzComp_r_void_p_gzStr _cfDelegate){ cfDlg = _cfDelegate;}inline Dlg& operator=(Lib_GZ::gzComp_r_void_p_gzStr _cfDelegate){ cfDlg = _cfDelegate; return *this;}inline Lib_GZ::gzComp_r_void_p_gzStr get() const {return cfDlg;} inline gzBool fIsSet(){return true;}inline Dlg(FpD _Func){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)_Func;}inline Dlg(void* _opClass, FpM _Func){((_dStD*)&cfDlg)->oClass = _opClass;((_dStM*)&cfDlg)->fCall = (FpM)_Func;} inline void fReset(){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}

   inline void fCall(const gzStr& _sMessage){
    (*((_dStP*)&cfDlg)->fCall)(((gzComp*)&cfDlg)->oClass , _sMessage );
    }
  };
 }







}
class pWindow {

 public:


};

class cWindow : public Lib_GZ::cClass {

 public:





  gzBool bGlobalSharedContext;
  gzBool bReady;
  gzSp<Lib_GZ::Gpu::cGpu> oGpu;
  Lib_GZ::Sys::Window::eWinBorder hBorder;
  Window::Dlg_fReceiveMessage_r_void_p_gzStr::Dlg dInterProcessMessage;
  Lib_GZ::Sys::Window::eWinClick hWinClick;
  gzBool bWinGPU;
  gzFloat nMouseX;
  gzFloat nMouseY;
  gzUInt nHandleId;
  gzFloat nLastMouseX;
  gzFloat nLastMouseY;
  gzFloat nPosX;
  gzFloat nPosY;
  gzInt nFrameWidth;
  gzInt nFrameHeight;
  gzStr sWindowName;
  cWindow(Lib_GZ::cBase* _parent);
  virtual void Ini_cWindow(Lib_GZ::Gfx::cInterface* _oInterface, const gzStr& _sWindowName, gzUInt _nFrameWidth, gzUInt _nFrameHeight, gzBool _bTransparent = false, gzInt _nBgColor = gzInt(4294967295));
  virtual void fCreate(gzInt _nPosX, gzInt _nPosY, gzUInt _nWinWidth, gzUInt _nWinHeight, Lib_GZ::Sys::Window::eWinState _nStart = Lib_GZ::Sys::Window::eWinState::Normal, gzBool _bResizable = false, gzBool _bDragAndDrop = false, gzBool _bVisible = true);
  virtual void fFrameStart();
  virtual void fMove(gzInt _nPosX, gzInt _nPosY);
  virtual void fMoveAndSize(gzInt _nPosX, gzInt _nPosY, gzInt _nWidth, gzInt _nHeight);
  virtual void fShow(gzBool _bActive = true);
  virtual void fHide();
  virtual void fIniProcess();
  virtual void fMinimize();
  virtual void fMaximize();
  virtual void fRestore();
  virtual void fDisable();
  virtual void fSendData(gzUInt _nOtherWinId);
  virtual void fIniPixelZone();
  virtual void drawPixel();
  virtual void fBlit();
  virtual gzInt fKeyIsDown(gzInt _nKeyVal);
  virtual void fClear();
  virtual void fCpuVSyncOnGpu();
  virtual gzBool fIsWindowReady();
  virtual void fIniRender();
  virtual void fGetMousePosition();
  virtual void fStartCaptureOutside();
  virtual void fStopCaptureOutside();
  virtual void fFrameEnd();
  virtual gzInt** fGetPixelArray();
  virtual void fTest();
  virtual void fGetKey(Lib_GZ::Input::cKey* _oKey);

  inline cWindow(const cWindow &_o) : Lib_GZ::cClass(_o), bGlobalSharedContext(_o.bGlobalSharedContext), bReady(_o.bReady), oGpu(), hBorder(), dInterProcessMessage(), hWinClick(), bWinGPU(_o.bWinGPU), nMouseX(_o.nMouseX), nMouseY(_o.nMouseY), nHandleId(_o.nHandleId), nLastMouseX(_o.nLastMouseX), nLastMouseY(_o.nLastMouseY), nPosX(_o.nPosX), nPosY(_o.nPosY), nFrameWidth(_o.nFrameWidth), nFrameHeight(_o.nFrameHeight), sWindowName(_o.sWindowName){};
  inline cWindow(const cWindow &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), bGlobalSharedContext(_o.bGlobalSharedContext), bReady(_o.bReady), oGpu(), hBorder(), dInterProcessMessage(), hWinClick(), bWinGPU(_o.bWinGPU), nMouseX(_o.nMouseX), nMouseY(_o.nMouseY), nHandleId(_o.nHandleId), nLastMouseX(_o.nLastMouseX), nLastMouseY(_o.nLastMouseY), nPosX(_o.nPosX), nPosY(_o.nPosY), nFrameWidth(_o.nFrameWidth), nFrameHeight(_o.nFrameHeight), sWindowName(_o.sWindowName,_b){};
  virtual ~cWindow();

 private:


  virtual void fReceiveMessage(const gzStr& _sMessage);

};
class csWindow : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cWindow> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cInterface* _oInterface, const gzStr& _sWindowName, gzUInt _nFrameWidth, gzUInt _nFrameHeight, gzBool _bTransparent = false, gzInt _nBgColor = gzInt(4294967295)){
   gzSp<cWindow>_oTemp = gzSp<cWindow>(new cWindow(_parent));
   _oTemp->Ini_cWindow(_oInterface, _sWindowName, _nFrameWidth, _nFrameHeight, _bTransparent, _nBgColor);
   return _oTemp;
  }

  gzBool bMouseDrag;
  gzBool bFirstMouseOver;



  inline csWindow(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csWindow(){};
};
namespace Window{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csWindow((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csWindow> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csWindow*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csWindow*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csWindow>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Window{
}}}

namespace Lib_GZ{namespace Sys{namespace Context{



}}}


namespace Lib_GZ{namespace Gpu{class cGpu;}}

namespace Lib_GZ{namespace Sys{class cWindow;}}

namespace Lib_GZ{namespace Gfx{class cInterface;}}

namespace Lib_GZ{namespace Input{class cKey;}}

namespace Lib_GZ{namespace Sys{namespace Message{class cContextCreated;}}}
namespace Lib_GZ{namespace Sys{namespace Message{class cContextLink;}}}
namespace Lib_GZ{namespace Sys{namespace Message{class cMousePos;}}}
namespace Lib_GZ{namespace Sys{namespace Message{class cBlit;}}}
namespace Lib_GZ{namespace Base{class cPt;}}
namespace Lib_GZ{namespace Base{class cDim;}}
namespace Lib_GZ{namespace Sys{class cSystem;}}
namespace Lib_GZ{namespace Sys{class cContext;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace Context{
extern gzGate<Lib_GZ::cThreadMsg> gMainThreadGate;
}
class pContext {

 public:


};

class cContext : public Lib_GZ::Sys::cWindow {

 public:



  gzGate<Lib_GZ::cThreadMsg> gContextGate;
  gzGate<Lib_GZ::cThreadMsg> gHandleGate;
  gzInt32** aDrawZone2D;
  gzInt32* aDrawZone1D;
  gzBool bBlitInProgress;
  gzBool bLibSharedContext;
  gzBool bIniDrawZone;
  cContext(Lib_GZ::cBase* _parent);
  virtual void Ini_cContext(Lib_GZ::Gfx::cInterface* _oInterface, const gzStr& _sWindowName, gzUInt _nFrameWidth, gzUInt _nFrameHeight, gzBool _bTransparent = false, gzInt _nBgColor = gzInt(4294967295));
  virtual void fCreate(gzInt _nPosX, gzInt _nPosY, gzUInt _nWinWidth, gzUInt _nWinHeight, Lib_GZ::Sys::Window::eWinState _nStart = Lib_GZ::Sys::Window::eWinState::Normal, gzBool _bGpuDraw = true, gzBool _bResizable = false, gzBool _bDragAndDrop = false, gzBool _bVisible = true);
  virtual void fCreateNow();
  virtual void fFrameStart();
  virtual void fSendData(gzUInt _nOtherWinId);
  virtual void fIniPixelZone();
  virtual void drawPixel();
  virtual void fBlit();
  virtual gzInt fKeyIsDown(gzInt _nKeyVal);
  virtual void fClear();
  virtual void fCpuVSyncOnGpu();
  virtual gzBool fIsWindowReady();
  virtual void fIniRender();
  virtual void fGetMousePosition();
  virtual void fStartCaptureOutside();
  virtual void fStopCaptureOutside();
  virtual void fFrameEnd();
  virtual gzInt** fGetPixelArray();
  virtual void fGetKey(Lib_GZ::Input::cKey* _oKey);
  virtual void fCompleteContext(Lib_GZ::Sys::Message::cContextCreated* _oInfo);
  virtual void fBlitComplete(gzUIntX _nDrawZoneAdr = 0);

  inline cContext(const cContext &_o) : Lib_GZ::Sys::cWindow(_o), gContextGate(_o.gContextGate), gHandleGate(_o.gHandleGate), aDrawZone2D(), aDrawZone1D(), bBlitInProgress(_o.bBlitInProgress), bLibSharedContext(_o.bLibSharedContext), bIniDrawZone(_o.bIniDrawZone){};
  inline cContext(const cContext &_o, gzBool _b) : Lib_GZ::Sys::cWindow(_o, _b), gContextGate(_o.gContextGate), gHandleGate(_o.gHandleGate), aDrawZone2D(), aDrawZone1D(), bBlitInProgress(_o.bBlitInProgress), bLibSharedContext(_o.bLibSharedContext), bIniDrawZone(_o.bIniDrawZone){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cContext();

 private:


  virtual void fReceiveMessage(const gzStr& _sMessage);

};
class csContext : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cContext> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cInterface* _oInterface, const gzStr& _sWindowName, gzUInt _nFrameWidth, gzUInt _nFrameHeight, gzBool _bTransparent = false, gzInt _nBgColor = gzInt(4294967295)){
   gzSp<cContext>_oTemp = gzSp<cContext>(new cContext(_parent));
   _oTemp->Ini_cContext(_oInterface, _sWindowName, _nFrameWidth, _nFrameHeight, _bTransparent, _nBgColor);
   return _oTemp;
  }

  gzQArray<gzSp<Lib_GZ::Sys::cContext>> qaContext;
  gzQArray<gzSp<Lib_GZ::Sys::Message::cContextLink>> qaLinks;


  virtual void fAddLink(Lib_GZ::Sys::Message::cContextLink* _oLink);
  virtual void fManageMessage();
  virtual void fManageMessageOp();

  inline csContext(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csContext(){};
};
namespace Context{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csContext((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csContext> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csContext*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csContext*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csContext>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Context{
}}}

namespace Lib_GZ{class cThread;}

template <class T> class gzQArray;


namespace Lib_GZ{

 namespace Sys{
  class cWindow;
  class cContext;
 }






class cLib;
namespace File{class cResource;}
typedef File::cResource* (*gzPtrFuncRc)(void);

namespace Lib {
 extern gzBool bLittleEndian;
    extern gzQArray<uLib> zqaLibList;


    extern gzInt32 nThreadCount;

    extern gzBool bIniFinish;
    extern gzInt32 nNumWindows;
    extern gzBool bIsAlive ;
    extern gzInt32 nAppReturn;
    extern gzBool bIsIni;

    extern gzStr sDirExe;
    extern gzStr sExeName;
    extern gzStr sExeExt;
    extern gzStr sExe;
    extern gzStr sRcDir;

    extern gzStr sDirRcFiles;
    extern gzStr sDirRcEmbed;

 extern gzStr sDirExe;
    extern gzStr sExeName;
    extern gzStr sExeExt;
    extern gzStr sExe;



    extern gzWp<Lib_GZ::Sys::cContext> oWinLib;

    gzBool fAddLoadRc(gzPtrFuncRc _dPtrFunc);

    void fSetID(uOverplace* _rClass);

    void fLoadAllLib();


    void fCheckOverPlace(const gzArray<gzStr>& _aLib);
    void fDoOverPlace(uOverplace* _rClass);

    extern gzArray<gzStr> aLib;



}



class cLib : public Lib_GZ::cThread {

 public:

        inline void Ini_cLib(){};



        gzSp<Sys::cContext> oWinLib;

        gzBool bIsAlive;
        cLib(gzUIntX _nInstanceId, gzStr _sArg, gzUIntX _nCmd);

        void fIni();


        gzBool fMainUpdate(gzInt _nSleepTime = 1);

        void fSetDirRcFiles(const gzStr& _sRcDir);
        void fSetDirRcEmbed(const gzStr& _sDirRcEmbed);

        void fLoadAllRc();

        ~cLib();

 private:


};

class csLib: public Lib_GZ::cStThread {

 public:
  inline gzSp<cLib> New(gzUIntX _nInstanceId, gzStr _sArg, gzUIntX _nCmd){
   gzSp<cLib>_oTemp = gzSp<cLib>(new cLib(_nInstanceId, _sArg, _nCmd));
   _oTemp->Ini_cLib();
   return _oTemp;
  }


 void fStaticIni();

     gzBool bIniFinish;
     gzInt32 nNumWindows;
     gzBool bIsAlive ;
     gzInt32 nAppReturn;
     gzBool bIsIni;



     gzWp<Sys::cWindow> oWinLib;

    inline csLib(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
    inline ~csLib(){};

 private:





};
namespace Lib{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csLib((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csLib> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csLib*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csLib*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csLib>((_oCurrThread->st(zDefault.nId)->get())); }}



namespace Lib {
 inline gzSp<cLib> New(gzUIntX _nInstanceId, gzStr _sArg, gzUIntX _nCmd){
  gzSp<cLib>_oTemp = gzSp<cLib>(new cLib(_nInstanceId, _sArg, _nCmd));
  _oTemp->Ini_cLib();
  return _oTemp;
 }

}

}







template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Sys{namespace Debug{



}}}


namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace Debug{
}
class pDebug {

 public:

 static void fConsole(const gzStr& _sValue);

};

class cDebug : public Lib_GZ::cClass {

 public:



  cDebug(Lib_GZ::cBase* _parent);
  virtual void Ini_cDebug();

  inline cDebug(const cDebug &_o) : Lib_GZ::cClass(_o){};
  inline cDebug(const cDebug &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cDebug();

 private:



};
class csDebug : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cDebug> New(Lib_GZ::cBase* _parent){
   gzSp<cDebug>_oTemp = gzSp<cDebug>(new cDebug(_parent));
   _oTemp->Ini_cDebug();
   return _oTemp;
  }

  gzSp<Lib_GZ::Sys::cDebug> oInst;
  gzBool bPipe;
  gzBool bPrefix;
  gzStr sMsgFuncMissing;


  static void fConsole(const gzStr& _sValue);
  virtual void fTrace1(const gzStr& _sValue);
  virtual void fTrace2(const gzStr& _sValue);
  virtual void fTrace3(const gzStr& _sValue);
  virtual void fPass(const gzStr& _sValue);
  virtual void fWarning(const gzStr& _sValue);
  virtual void fError(const gzStr& _sValue);
  virtual void fFatal(const gzStr& _sValue);

  inline csDebug(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csDebug(){};
};
namespace Debug{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csDebug((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csDebug> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csDebug*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csDebug*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csDebug>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Debug{
}}}





extern "C" {
extern "C++" {
template <bool __test, typename __dsttype>
  struct __if_array;
template <typename __dsttype>
  struct __if_array <true, __dsttype> {
    typedef __dsttype __type;
};
}
#pragma pack(push,_CRT_PACKING)



extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
}



#pragma pack(pop)
extern "C" {
const char *__mingw_get_crt_info (void);


}
#pragma pack(push,_CRT_PACKING)
typedef size_t rsize_t;
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;







#pragma pack(pop)




#pragma pack(push,_CRT_PACKING)


extern "C" {


  struct _EXCEPTION_POINTERS;
  struct _EXCEPTION_RECORD;
  struct _CONTEXT;

  int __attribute__((__cdecl__)) _except_handler(struct _EXCEPTION_RECORD *_ExceptionRecord,void *_EstablisherFrame,struct _CONTEXT *_ContextRecord,void *_DispatcherContext);
  unsigned long __attribute__((__cdecl__)) _exception_code(void);
  void *__attribute__((__cdecl__)) _exception_info(void);
  int __attribute__((__cdecl__)) _abnormal_termination(void);






  typedef void (__attribute__((__cdecl__)) * _PHNDLR)(int);

  struct _XCPT_ACTION {
    unsigned long XcptNum;
    int SigNum;
    _PHNDLR XcptAction;
  };

  extern struct _XCPT_ACTION _XcptActTab[];
  extern int _XcptActTabCount;
  extern int _XcptActTabSize;
  extern int _First_FPE_Indx;
  extern int _Num_FPE;

  int __attribute__((__cdecl__)) __CppXcptFilter(unsigned long _ExceptionNum,struct _EXCEPTION_POINTERS * _ExceptionPtr);
  int __attribute__((__cdecl__)) _XcptFilter(unsigned long _ExceptionNum,struct _EXCEPTION_POINTERS * _ExceptionPtr);





  typedef int (*PEXCEPTION_HANDLER)(struct _EXCEPTION_RECORD*, void*, struct _CONTEXT*, void*);
}


#pragma pack(pop)
typedef __builtin_va_list va_list;
typedef __builtin_va_list __gnuc_va_list;
extern "C" {
}
extern "C" {




  typedef unsigned long ULONG;
  typedef ULONG *PULONG;
  typedef unsigned short USHORT;
  typedef USHORT *PUSHORT;
  typedef unsigned char UCHAR;
  typedef UCHAR *PUCHAR;
  typedef char *PSZ;
typedef int WINBOOL;



  typedef int BOOL;


typedef WINBOOL *PBOOL;
typedef WINBOOL *LPBOOL;



  typedef unsigned char BYTE;
  typedef unsigned short WORD;
  typedef unsigned long DWORD;
  typedef float FLOAT;
  typedef FLOAT *PFLOAT;
  typedef BYTE *PBYTE;
  typedef BYTE *LPBYTE;
  typedef int *PINT;
  typedef int *LPINT;
  typedef WORD *PWORD;
  typedef WORD *LPWORD;
  typedef long *LPLONG;
  typedef DWORD *PDWORD;
  typedef DWORD *LPDWORD;
  typedef void *LPVOID;


  typedef const void *LPCVOID;

  typedef int INT;
  typedef unsigned int UINT;
  typedef unsigned int *PUINT;
extern "C" {
extern "C" {
  extern unsigned short ** _imp___pctype;
  extern unsigned short ** _imp___wctype;
  extern unsigned short ** _imp___pwctype;
  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __attribute__((__cdecl__)) __updatetlocinfo(void);
  pthreadmbcinfo __attribute__((__cdecl__)) __updatetmbcinfo(void);
          int __attribute__((__cdecl__)) _isctype(int _C,int _Type);
          int __attribute__((__cdecl__)) _isctype_l(int _C,int _Type,_locale_t _Locale);
          int __attribute__((__cdecl__)) isalpha(int _C);
          int __attribute__((__cdecl__)) _isalpha_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) isupper(int _C);
          int __attribute__((__cdecl__)) _isupper_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) islower(int _C);
          int __attribute__((__cdecl__)) _islower_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) isdigit(int _C);
          int __attribute__((__cdecl__)) _isdigit_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) isxdigit(int _C);
          int __attribute__((__cdecl__)) _isxdigit_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) isspace(int _C);
          int __attribute__((__cdecl__)) _isspace_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) ispunct(int _C);
          int __attribute__((__cdecl__)) _ispunct_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) isalnum(int _C);
          int __attribute__((__cdecl__)) _isalnum_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) isprint(int _C);
          int __attribute__((__cdecl__)) _isprint_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) isgraph(int _C);
          int __attribute__((__cdecl__)) _isgraph_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) iscntrl(int _C);
          int __attribute__((__cdecl__)) _iscntrl_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) toupper(int _C);
          int __attribute__((__cdecl__)) tolower(int _C);
          int __attribute__((__cdecl__)) _tolower(int _C);
          int __attribute__((__cdecl__)) _tolower_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) _toupper(int _C);
          int __attribute__((__cdecl__)) _toupper_l(int _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) __isascii(int _C);
          int __attribute__((__cdecl__)) __toascii(int _C);
          int __attribute__((__cdecl__)) __iscsymf(int _C);
          int __attribute__((__cdecl__)) __iscsym(int _C);


int __attribute__((__cdecl__)) isblank(int _C);






  int __attribute__((__cdecl__)) iswalpha(wint_t _C);
          int __attribute__((__cdecl__)) _iswalpha_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswupper(wint_t _C);
          int __attribute__((__cdecl__)) _iswupper_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswlower(wint_t _C);
          int __attribute__((__cdecl__)) _iswlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswdigit(wint_t _C);
          int __attribute__((__cdecl__)) _iswdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswxdigit(wint_t _C);
          int __attribute__((__cdecl__)) _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswspace(wint_t _C);
          int __attribute__((__cdecl__)) _iswspace_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswpunct(wint_t _C);
          int __attribute__((__cdecl__)) _iswpunct_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswalnum(wint_t _C);
          int __attribute__((__cdecl__)) _iswalnum_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswprint(wint_t _C);
          int __attribute__((__cdecl__)) _iswprint_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswgraph(wint_t _C);
          int __attribute__((__cdecl__)) _iswgraph_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswcntrl(wint_t _C);
          int __attribute__((__cdecl__)) _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswascii(wint_t _C);
  int __attribute__((__cdecl__)) isleadbyte(int _C);
          int __attribute__((__cdecl__)) _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towupper(wint_t _C);
          wint_t __attribute__((__cdecl__)) _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towlower(wint_t _C);
          wint_t __attribute__((__cdecl__)) _towlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswctype(wint_t _C,wctype_t _Type);
          int __attribute__((__cdecl__)) _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
          int __attribute__((__cdecl__)) __iswcsymf(wint_t _C);
          int __attribute__((__cdecl__)) _iswcsymf_l(wint_t _C,_locale_t _Locale);
          int __attribute__((__cdecl__)) __iswcsym(wint_t _C);
          int __attribute__((__cdecl__)) _iswcsym_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) is_wctype(wint_t _C,wctype_t _Type);


int __attribute__((__cdecl__)) iswblank(wint_t _C);
  extern int * _imp____mb_cur_max;
}
extern "C" {
}
extern "C" {
}
extern "C" {
long _InterlockedAnd(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedAnd(volatile long *Destination, long Value) { return __sync_fetch_and_and(Destination, Value); }




long _InterlockedOr(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedOr(volatile long *Destination, long Value) { return __sync_fetch_and_or(Destination, Value); }




long _InterlockedXor(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedXor(volatile long *Destination, long Value) { return __sync_fetch_and_xor(Destination, Value); }




short _InterlockedIncrement16(short volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedIncrement16(short volatile *Addend) {
    return __sync_add_and_fetch(Addend, 1);
}




short _InterlockedDecrement16(short volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedDecrement16(short volatile *Addend) {
    return __sync_sub_and_fetch(Addend, 1);
}




short _InterlockedCompareExchange16(short volatile *Destination, short ExChange, short Comperand);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedCompareExchange16(short volatile *Destination, short ExChange, short Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}




long _InterlockedExchangeAdd(long volatile *Addend, long Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedExchangeAdd(long volatile *Addend, long Value) {
    return __sync_fetch_and_add(Addend, Value);
}




long _InterlockedCompareExchange(long volatile *Destination, long ExChange, long Comperand);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedCompareExchange(long volatile *Destination, long ExChange, long Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}




long _InterlockedIncrement(long volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedIncrement(long volatile *Addend) {
   return __sync_add_and_fetch(Addend, 1);
}




long _InterlockedDecrement(long volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedDecrement(long volatile *Addend) {
   return __sync_sub_and_fetch(Addend, 1);
}




long _InterlockedAdd(long volatile *Addend, long Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedAdd(long volatile *Addend, long Value) {
    return __sync_add_and_fetch(Addend, Value);
}




__extension__ long long _InterlockedAdd64(long long volatile *Addend, long long Value);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedAdd64(long long volatile *Addend, long long Value) {
    return __sync_add_and_fetch(Addend, Value);
}




long _InterlockedExchange(long volatile *Target, long Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedExchange(long volatile *Target, long Value) {
    return __sync_lock_test_and_set(Target, Value);
}




__extension__ long long _InterlockedCompareExchange64(long long volatile *Destination, long long ExChange, long long Comperand);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedCompareExchange64(long long volatile *Destination, long long ExChange, long long Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}




void *_InterlockedCompareExchangePointer(void * volatile *Destination, void *ExChange, void *Comperand);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void *_InterlockedCompareExchangePointer(void *volatile *Destination, void *ExChange, void *Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}




void *_InterlockedExchangePointer(void *volatile *Target,void *Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void *_InterlockedExchangePointer(void *volatile *Target,void *Value) {
    return __sync_lock_test_and_set(Target, Value);
}
void __int2c(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __int2c(void) {
    __asm__ __volatile__("int {$}" "0x2c" :);
}




void __stosb(unsigned char *, unsigned char, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosb(unsigned char *Dest, unsigned char Data, size_t Count) { __asm__ __volatile__ ("rep stos{" "b|b" "}" : "+D" (Dest), "+c" (Count) : [Data] "a" (Data) : "memory"); }




void __stosw(unsigned short *, unsigned short, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosw(unsigned short *Dest, unsigned short Data, size_t Count) { __asm__ __volatile__ ("rep stos{" "w|w" "}" : "+D" (Dest), "+c" (Count) : [Data] "a" (Data) : "memory"); }




void __stosd(unsigned long *, unsigned long, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosd(unsigned long *Dest, unsigned long Data, size_t Count) { __asm__ __volatile__ ("rep stos{" "l|d" "}" : "+D" (Dest), "+c" (Count) : [Data] "a" (Data) : "memory"); }




unsigned char _interlockedbittestandset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandset(long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock bts{l %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }




unsigned char _interlockedbittestandreset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandreset(long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btr{l %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }




unsigned char _interlockedbittestandcomplement(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandcomplement(long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btc{l %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }




unsigned char InterlockedBitTestAndSet(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndSet(volatile long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock bts{l %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }




unsigned char InterlockedBitTestAndReset(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndReset(volatile long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btr{l %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }




unsigned char InterlockedBitTestAndComplement(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndComplement(volatile long *Base, long Offset) { unsigned char old; __asm__ __volatile__ ("lock btc{l %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=qm" (old), [Base] "+m" (*Base) : [Offset] "I" "r" (Offset) : "memory", "cc"); return old; }




unsigned char _BitScanForward(unsigned long *Index, unsigned long Mask);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanForward(unsigned long *Index, unsigned long Mask) { unsigned long n; __asm__ ("bsf{l %[Mask],%[Index] | %[Index],%[Mask]}" : [Index] "=r" (n) : [Mask] "r" (Mask) : "cc"); *Index = n; return Mask!=0; }




unsigned char _BitScanReverse(unsigned long *Index, unsigned long Mask);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanReverse(unsigned long *Index, unsigned long Mask) { unsigned long n; __asm__ ("bsr{l %[Mask],%[Index] | %[Index],%[Mask]}" : [Index] "=r" (n) : [Mask] "r" (Mask) : "cc"); *Index = n; return Mask!=0; }




unsigned char _bittest(long const *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittest(const long *Base, long Offset) { unsigned char old; __asm__ ("bt{" "l" " %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=rm" (old) : [Offset] "I" "r" (Offset), [Base] "rm" (*Base) : "cc"); return old; }




unsigned char _bittestandset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandset(long *Base, long Offset) { unsigned char old; __asm__ ("bts" "{" "l" " %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=r" (old), [Base] "+rm" (*Base) : [Offset] "I" "r" (Offset) : "cc"); return old; }




unsigned char _bittestandreset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandreset(long *Base, long Offset) { unsigned char old; __asm__ ("btr" "{" "l" " %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=r" (old), [Base] "+rm" (*Base) : [Offset] "I" "r" (Offset) : "cc"); return old; }




unsigned char _bittestandcomplement(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandcomplement(long *Base, long Offset) { unsigned char old; __asm__ ("btc" "{" "l" " %[Offset],%[Base] | %[Base],%[Offset]} ; setc %[old]" : [old] "=r" (old), [Base] "+rm" (*Base) : [Offset] "I" "r" (Offset) : "cc"); return old; }
void __movsb(unsigned char *Destination, unsigned char const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsb(unsigned char *Destination, unsigned char const *Source, size_t Count) { __asm__ __volatile__ ( "rep movs" "b" : "=D" (Destination), "=S" (Source), "=c" (Count) : "0" (Destination), "1" (Source), "2" (Count) : "memory"); }




void __movsw(unsigned short *Dest, unsigned short const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsw(unsigned short *Destination, unsigned short const *Source, size_t Count) { __asm__ __volatile__ ( "rep movs" "w" : "=D" (Destination), "=S" (Source), "=c" (Count) : "0" (Destination), "1" (Source), "2" (Count) : "memory"); }




void __movsd(unsigned long *Dest, unsigned long const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsd(unsigned long *Destination, unsigned long const *Source, size_t Count) { __asm__ __volatile__ ( "rep movs" "d" : "=D" (Destination), "=S" (Source), "=c" (Count) : "0" (Destination), "1" (Source), "2" (Count) : "memory"); }
unsigned char __readfsbyte(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char __readfsbyte(unsigned long Offset) { unsigned char ret; __asm__ ("mov{" "b" " %%" "fs" ":%[offset], %[ret] | %[ret], %%" "fs" ":%[offset]}" : [ret] "=r" (ret) : [offset] "m" ((*(unsigned char *) (size_t) Offset))); return ret; }




unsigned short __readfsword(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned short __readfsword(unsigned long Offset) { unsigned short ret; __asm__ ("mov{" "w" " %%" "fs" ":%[offset], %[ret] | %[ret], %%" "fs" ":%[offset]}" : [ret] "=r" (ret) : [offset] "m" ((*(unsigned short *) (size_t) Offset))); return ret; }




unsigned long __readfsdword(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long __readfsdword(unsigned long Offset) { unsigned long ret; __asm__ ("mov{" "l" " %%" "fs" ":%[offset], %[ret] | %[ret], %%" "fs" ":%[offset]}" : [ret] "=r" (ret) : [offset] "m" ((*(unsigned long *) (size_t) Offset))); return ret; }




void __writefsbyte(unsigned long Offset,unsigned char Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writefsbyte(unsigned long Offset, unsigned char Data) { __asm__ ("mov{" "b" " %[Data], %%" "fs" ":%[offset] | %%" "fs" ":%[offset], %[Data]}" : [offset] "=m" ((*(unsigned char *) (size_t) Offset)) : [Data] "ri" (Data)); }




void __writefsword(unsigned long Offset,unsigned short Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writefsword(unsigned long Offset, unsigned short Data) { __asm__ ("mov{" "w" " %[Data], %%" "fs" ":%[offset] | %%" "fs" ":%[offset], %[Data]}" : [offset] "=m" ((*(unsigned short *) (size_t) Offset)) : [Data] "ri" (Data)); }




void __writefsdword(unsigned long Offset,unsigned long Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writefsdword(unsigned long Offset, unsigned long Data) { __asm__ ("mov{" "l" " %[Data], %%" "fs" ":%[offset] | %%" "fs" ":%[offset], %[Data]}" : [offset] "=m" ((*(unsigned long *) (size_t) Offset)) : [Data] "ri" (Data)); }
}
typedef unsigned long POINTER_64_INT;
extern "C" {


  typedef signed char INT8,*PINT8;
  typedef signed short INT16,*PINT16;
  typedef signed int INT32,*PINT32;
  __extension__ typedef signed long long INT64,*PINT64;
  typedef unsigned char UINT8,*PUINT8;
  typedef unsigned short UINT16,*PUINT16;
  typedef unsigned int UINT32,*PUINT32;
  __extension__ typedef unsigned long long UINT64,*PUINT64;
  typedef signed int LONG32,*PLONG32;
  typedef unsigned int ULONG32,*PULONG32;
  typedef unsigned int DWORD32,*PDWORD32;
  typedef int INT_PTR,*PINT_PTR;
  typedef unsigned int UINT_PTR,*PUINT_PTR;
  typedef long LONG_PTR,*PLONG_PTR;
  typedef unsigned long ULONG_PTR,*PULONG_PTR;
  typedef unsigned short UHALF_PTR,*PUHALF_PTR;
  typedef short HALF_PTR,*PHALF_PTR;
  typedef long SHANDLE_PTR;
  typedef unsigned long HANDLE_PTR;
  static __inline void * PtrToPtr64 (const void *p) { return ((void *) (ULONG_PTR) p); }
  static __inline void *Ptr64ToPtr (const void * p) { return ((void *) (ULONG_PTR) p); }
  static __inline void * HandleToHandle64 (const void *h) { return ((void *) (LONG_PTR) h); }
  static __inline void *Handle64ToHandle (const void * h) { return ((void *) (ULONG_PTR) h); }
  __extension__ typedef ULONG_PTR SIZE_T,*PSIZE_T;
  __extension__ typedef LONG_PTR SSIZE_T,*PSSIZE_T;
  __extension__ typedef ULONG_PTR DWORD_PTR,*PDWORD_PTR;
  __extension__ typedef long long LONG64,*PLONG64;
  __extension__ typedef unsigned long long ULONG64,*PULONG64;
  __extension__ typedef unsigned long long DWORD64,*PDWORD64;
  __extension__ typedef ULONG_PTR KAFFINITY;
  __extension__ typedef KAFFINITY *PKAFFINITY;


}
  typedef void *PVOID;
  typedef void *PVOID64;
  typedef char CHAR;
  typedef short SHORT;
  typedef long LONG;

  typedef int INT;





  typedef wchar_t WCHAR;

  typedef WCHAR *PWCHAR,*LPWCH,*PWCH;
  typedef const WCHAR *LPCWCH,*PCWCH;
  typedef WCHAR *NWPSTR,*LPWSTR,*PWSTR;
  typedef PWSTR *PZPWSTR;
  typedef const PWSTR *PCZPWSTR;
  typedef WCHAR *LPUWSTR,*PUWSTR;
  typedef const WCHAR *LPCWSTR,*PCWSTR;
  typedef PCWSTR *PZPCWSTR;
  typedef const WCHAR *LPCUWSTR,*PCUWSTR;
  typedef WCHAR *PZZWSTR;
  typedef const WCHAR *PCZZWSTR;
  typedef WCHAR *PUZZWSTR;
  typedef const WCHAR *PCUZZWSTR;
  typedef WCHAR *PNZWCH;
  typedef const WCHAR *PCNZWCH;
  typedef WCHAR *PUNZWCH;
  typedef const WCHAR *PCUNZWCH;
  typedef CHAR *PCHAR,*LPCH,*PCH;
  typedef const CHAR *LPCCH,*PCCH;
  typedef CHAR *NPSTR,*LPSTR,*PSTR;
  typedef PSTR *PZPSTR;
  typedef const PSTR *PCZPSTR;
  typedef const CHAR *LPCSTR,*PCSTR;
  typedef PCSTR *PZPCSTR;
  typedef CHAR *PZZSTR;
  typedef const CHAR *PCZZSTR;
  typedef CHAR *PNZCH;
  typedef const CHAR *PCNZCH;




  typedef WCHAR TCHAR, *PTCHAR;
  typedef WCHAR TBYTE, *PTBYTE;


  typedef LPWSTR LPTCH,PTCH;
  typedef LPWSTR PTSTR,LPTSTR;
  typedef LPCWSTR PCTSTR,LPCTSTR;
  typedef LPUWSTR PUTSTR,LPUTSTR;
  typedef LPCUWSTR PCUTSTR,LPCUTSTR;
  typedef LPWSTR LP;
  typedef PZZWSTR PZZTSTR;
  typedef PCZZWSTR PCZZTSTR;
  typedef PUZZWSTR PUZZTSTR;
  typedef PCUZZWSTR PCUZZTSTR;
  typedef PZPWSTR PZPTSTR;
  typedef PNZWCH PNZTCH;
  typedef PCNZWCH PCNZTCH;
  typedef PUNZWCH PUNZTCH;
  typedef PCUNZWCH PCUNZTCH;
  typedef SHORT *PSHORT;
  typedef LONG *PLONG;



typedef struct _GROUP_AFFINITY {
  KAFFINITY Mask;
  WORD Group;
  WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;



  typedef void *HANDLE;






  typedef HANDLE *PHANDLE;
  typedef BYTE FCHAR;
  typedef WORD FSHORT;
  typedef DWORD FLONG;



  typedef LONG HRESULT;
  typedef char CCHAR;


typedef DWORD LCID;

  typedef PDWORD PLCID;


  typedef WORD LANGID;





typedef enum {
  UNSPECIFIED_COMPARTMENT_ID = 0,
  DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID,*PCOMPARTMENT_ID;
    typedef struct _FLOAT128 {
      __extension__ long long LowPart;
      __extension__ long long HighPart;
  } FLOAT128;

  typedef FLOAT128 *PFLOAT128;


  __extension__ typedef long long LONGLONG;
  __extension__ typedef unsigned long long ULONGLONG;



  typedef LONGLONG *PLONGLONG;
  typedef ULONGLONG *PULONGLONG;
  typedef LONGLONG USN;







  typedef union _LARGE_INTEGER {
    __extension__ struct {
      DWORD LowPart;
      LONG HighPart;
    } ;
    struct {
      DWORD LowPart;
      LONG HighPart;
    } u;

    LONGLONG QuadPart;
  } LARGE_INTEGER;

  typedef LARGE_INTEGER *PLARGE_INTEGER;




  typedef union _ULARGE_INTEGER {
    __extension__ struct {
      DWORD LowPart;
      DWORD HighPart;
    } ;
    struct {
      DWORD LowPart;
      DWORD HighPart;
    } u;

    ULONGLONG QuadPart;
  } ULARGE_INTEGER;

  typedef ULARGE_INTEGER *PULARGE_INTEGER;

  typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
  } LUID,*PLUID;




  typedef ULONGLONG DWORDLONG;
  typedef DWORDLONG *PDWORDLONG;
  extern "C" {
    unsigned int __attribute__((__cdecl__)) _rotl(unsigned int Value,int Shift);
    unsigned int __attribute__((__cdecl__)) _rotr(unsigned int Value,int Shift);






    __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long Value,int Shift);
    __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);




  }
  typedef BYTE BOOLEAN;

  typedef BOOLEAN *PBOOLEAN;




  typedef struct _LIST_ENTRY {
    struct _LIST_ENTRY *Flink;
    struct _LIST_ENTRY *Blink;
  } LIST_ENTRY,*PLIST_ENTRY,* PRLIST_ENTRY;

  typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
  } SINGLE_LIST_ENTRY,*PSINGLE_LIST_ENTRY;

  typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
  } LIST_ENTRY32;
  typedef LIST_ENTRY32 *PLIST_ENTRY32;

  typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
  } LIST_ENTRY64;
  typedef LIST_ENTRY64 *PLIST_ENTRY64;
typedef struct _GUID {
  unsigned long Data1;
  unsigned short Data2;
  unsigned short Data3;
  unsigned char Data4[8];
} GUID;




extern "C++" {
__extension__ template<typename T> const GUID &__mingw_uuidof();
}
typedef GUID *LPGUID;




typedef const GUID *LPCGUID;





typedef GUID IID;
typedef IID *LPIID;






typedef GUID CLSID;


typedef CLSID *LPCLSID;



typedef GUID FMTID;
typedef FMTID *LPFMTID;
extern "C" {
          void *__attribute__((__cdecl__)) _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
                void *__attribute__((__cdecl__)) memchr(const void *_Buf ,int _Val,size_t _MaxCount);
          int __attribute__((__cdecl__)) _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
          int __attribute__((__cdecl__)) _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int __attribute__((__cdecl__)) memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * __attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _Size) ;
          errno_t __attribute__((__cdecl__)) memcpy_s (void *_dest,size_t _numberOfElements,const void *_src,size_t _count);
  void * __attribute__((__cdecl__)) mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void * __attribute__((__cdecl__)) memset(void *_Dst,int _Val,size_t _Size);

  void * __attribute__((__cdecl__)) memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int __attribute__((__cdecl__)) memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;


  char * __attribute__((__cdecl__)) _strset(char *_Str,int _Val) ;
  char * __attribute__((__cdecl__)) _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char * __attribute__((__cdecl__)) strcpy(char * __restrict__ _Dest,const char * __restrict__ _Source);
  char * __attribute__((__cdecl__)) strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
  int __attribute__((__cdecl__)) strcmp(const char *_Str1,const char *_Str2);
  size_t __attribute__((__cdecl__)) strlen(const char *_Str);
  size_t __attribute__((__cdecl__)) strnlen(const char *_Str,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _Size) ;
          char *__attribute__((__cdecl__)) _strdup(const char *_Src);
                char *__attribute__((__cdecl__)) strchr(const char *_Str,int _Val);
          int __attribute__((__cdecl__)) _stricmp(const char *_Str1,const char *_Str2);
          int __attribute__((__cdecl__)) _strcmpi(const char *_Str1,const char *_Str2);
          int __attribute__((__cdecl__)) _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int __attribute__((__cdecl__)) strcoll(const char *_Str1,const char *_Str2);
          int __attribute__((__cdecl__)) _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
          int __attribute__((__cdecl__)) _stricoll(const char *_Str1,const char *_Str2);
          int __attribute__((__cdecl__)) _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
          int __attribute__((__cdecl__)) _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
          int __attribute__((__cdecl__)) _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
          int __attribute__((__cdecl__)) _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
          int __attribute__((__cdecl__)) _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) strcspn(const char *_Str,const char *_Control);
          char *__attribute__((__cdecl__)) _strerror(const char *_ErrMsg) ;
  char *__attribute__((__cdecl__)) strerror(int) ;
          char *__attribute__((__cdecl__)) _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strncat(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
          int __attribute__((__cdecl__)) _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
          int __attribute__((__cdecl__)) _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
          char *__attribute__((__cdecl__)) _strnset(char *_Str,int _Val,size_t _MaxCount) ;
          char *__attribute__((__cdecl__)) _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
                char *__attribute__((__cdecl__)) strpbrk(const char *_Str,const char *_Control);
                char *__attribute__((__cdecl__)) strrchr(const char *_Str,int _Ch);
          char *__attribute__((__cdecl__)) _strrev(char *_Str);
  size_t __attribute__((__cdecl__)) strspn(const char *_Str,const char *_Control);
                char *__attribute__((__cdecl__)) strstr(const char *_Str,const char *_SubStr);
  char *__attribute__((__cdecl__)) strtok(char * __restrict__ _Str,const char * __restrict__ _Delim) ;


  char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);

          char *__attribute__((__cdecl__)) _strupr(char *_String) ;
          char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) strxfrm(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount);
          size_t __attribute__((__cdecl__)) _strxfrm_l(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);


  char *__attribute__((__cdecl__)) strdup(const char *_Src) ;
  int __attribute__((__cdecl__)) strcmpi(const char *_Str1,const char *_Str2) ;
  int __attribute__((__cdecl__)) stricmp(const char *_Str1,const char *_Str2) ;
  char *__attribute__((__cdecl__)) strlwr(char *_Str) ;
  int __attribute__((__cdecl__)) strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
  int __attribute__((__cdecl__)) strcasecmp (const char *, const char *);

  inline int __attribute__((__cdecl__)) strncasecmp (const char *__sz1, const char *__sz2, size_t __sizeMaxCompare) { return _strnicmp (__sz1, __sz2, __sizeMaxCompare); }
  inline int __attribute__((__cdecl__)) strcasecmp (const char *__sz1, const char *__sz2) { return _stricmp (__sz1, __sz2); }




  char *__attribute__((__cdecl__)) strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char *__attribute__((__cdecl__)) strrev(char *_Str) ;
  char *__attribute__((__cdecl__)) strset(char *_Str,int _Val) ;
  char *__attribute__((__cdecl__)) strupr(char *_Str) ;





          wchar_t *__attribute__((__cdecl__)) _wcsdup(const wchar_t *_Str);
  wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
                wchar_t *__attribute__((__cdecl__)) wcschr(const wchar_t *_Str,wchar_t _Ch);
  int __attribute__((__cdecl__)) wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t __attribute__((__cdecl__)) wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t __attribute__((__cdecl__)) wcslen(const wchar_t *_Str);
  size_t __attribute__((__cdecl__)) wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t *__attribute__((__cdecl__)) _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
                wchar_t *__attribute__((__cdecl__)) wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t *__attribute__((__cdecl__)) wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t __attribute__((__cdecl__)) wcsspn(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t *__attribute__((__cdecl__)) wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t *__attribute__((__cdecl__)) wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
          wchar_t *__attribute__((__cdecl__)) _wcserror(int _ErrNum) ;
          wchar_t *__attribute__((__cdecl__)) __wcserror(const wchar_t *_Str) ;
          int __attribute__((__cdecl__)) _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
          int __attribute__((__cdecl__)) _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
          int __attribute__((__cdecl__)) _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
          int __attribute__((__cdecl__)) _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
          wchar_t *__attribute__((__cdecl__)) _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
          wchar_t *__attribute__((__cdecl__)) _wcsrev(wchar_t *_Str);
          wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *_Str,wchar_t _Val) ;
          wchar_t *__attribute__((__cdecl__)) _wcslwr(wchar_t *_String) ;
          wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
          wchar_t *__attribute__((__cdecl__)) _wcsupr(wchar_t *_String) ;
          wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
          size_t __attribute__((__cdecl__)) _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
          int __attribute__((__cdecl__)) _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
          int __attribute__((__cdecl__)) _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
          int __attribute__((__cdecl__)) _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
          int __attribute__((__cdecl__)) _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
          int __attribute__((__cdecl__)) _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
          int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
          int __attribute__((__cdecl__)) _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t *__attribute__((__cdecl__)) wcsdup(const wchar_t *_Str) ;

  int __attribute__((__cdecl__)) wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int __attribute__((__cdecl__)) wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsrev(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t *__attribute__((__cdecl__)) wcslwr(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsupr(wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;




}
extern "C" {


          errno_t __attribute__((__cdecl__)) _strset_s(char *_Dst,size_t _DstSize,int _Value);
          errno_t __attribute__((__cdecl__)) _strerror_s(char *_Buf,size_t _SizeInBytes,const char *_ErrMsg);
          errno_t __attribute__((__cdecl__)) strerror_s(char *_Buf,size_t _SizeInBytes,int _ErrNum);
          errno_t __attribute__((__cdecl__)) _strlwr_s(char *_Str,size_t _Size);
          errno_t __attribute__((__cdecl__)) _strlwr_s_l(char *_Str,size_t _Size,_locale_t _Locale);
          errno_t __attribute__((__cdecl__)) _strnset_s(char *_Str,size_t _Size,int _Val,size_t _MaxCount);
          errno_t __attribute__((__cdecl__)) _strupr_s(char *_Str,size_t _Size);
          errno_t __attribute__((__cdecl__)) _strupr_s_l(char *_Str,size_t _Size,_locale_t _Locale);

          errno_t __attribute__((__cdecl__)) strncat_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
          errno_t __attribute__((__cdecl__)) _strncat_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
          errno_t __attribute__((__cdecl__)) strcpy_s(char *_Dst, rsize_t _SizeInBytes, const char *_Src);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) strcpy_s(char (&_Dest)[__size], const char * _Source) { return strcpy_s(_Dest,__size,_Source); } }
          errno_t __attribute__((__cdecl__)) strncpy_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
          errno_t __attribute__((__cdecl__)) _strncpy_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
          char *__attribute__((__cdecl__)) strtok_s(char *_Str,const char *_Delim,char **_Context);
          char *__attribute__((__cdecl__)) _strtok_s_l(char *_Str,const char *_Delim,char **_Context,_locale_t _Locale);
          errno_t __attribute__((__cdecl__)) strcat_s(char *_Dst, rsize_t _SizeInBytes, const char * _Src);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) strcat_s(char (&_Dest)[__size], const char * _Source) { return strcat_s(_Dest,__size,_Source); } }

          errno_t __attribute__((__cdecl__)) memmove_s(void *_dest,size_t _numberOfElements,const void *_src,size_t _count);


          wchar_t *__attribute__((__cdecl__)) wcstok_s(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context);
          errno_t __attribute__((__cdecl__)) _wcserror_s(wchar_t *_Buf,size_t _SizeInWords,int _ErrNum);
          errno_t __attribute__((__cdecl__)) __wcserror_s(wchar_t *_Buffer,size_t _SizeInWords,const wchar_t *_ErrMsg);
          errno_t __attribute__((__cdecl__)) _wcsnset_s(wchar_t *_Dst,size_t _DstSizeInWords,wchar_t _Val,size_t _MaxCount);
          errno_t __attribute__((__cdecl__)) _wcsset_s(wchar_t *_Str,size_t _SizeInWords,wchar_t _Val);
          errno_t __attribute__((__cdecl__)) _wcslwr_s(wchar_t *_Str,size_t _SizeInWords);
          errno_t __attribute__((__cdecl__)) _wcslwr_s_l(wchar_t *_Str,size_t _SizeInWords,_locale_t _Locale);
          errno_t __attribute__((__cdecl__)) _wcsupr_s(wchar_t *_Str,size_t _Size);
          errno_t __attribute__((__cdecl__)) _wcsupr_s_l(wchar_t *_Str,size_t _Size,_locale_t _Locale);

          errno_t __attribute__((__cdecl__)) wcscpy_s(wchar_t *_Dst, rsize_t _SizeInWords, const wchar_t *_Src);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) wcscpy_s(wchar_t (&_Dest)[__size], const wchar_t * _Source) { return wcscpy_s(_Dest,__size,_Source); } }
          errno_t __attribute__((__cdecl__)) wcscat_s(wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t *_Src);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) wcscat_s(wchar_t (&_Dest)[__size], const wchar_t * _Source) { return wcscat_s(_Dest,__size,_Source); } }

          errno_t __attribute__((__cdecl__)) wcsncat_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
          errno_t __attribute__((__cdecl__)) _wcsncat_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
          errno_t __attribute__((__cdecl__)) wcsncpy_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
          errno_t __attribute__((__cdecl__)) _wcsncpy_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
          wchar_t *__attribute__((__cdecl__)) _wcstok_s_l(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context,_locale_t _Locale);
          errno_t __attribute__((__cdecl__)) _wcsset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val,_locale_t _Locale);
          errno_t __attribute__((__cdecl__)) _wcsnset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val, size_t _Count,_locale_t _Locale);

  inline __attribute__((__always_inline__)) size_t __attribute__((__cdecl__)) wcsnlen_s(const wchar_t * _src, size_t _count) {
    return _src ? wcsnlen(_src, _count) : 0;
  }



}






__inline int InlineIsEqualGUID (const GUID & rguid1, const GUID & rguid2) {
  return ((&rguid1.Data1)[0] == (&rguid2.Data1)[0] && (&rguid1.Data1)[1] == (&rguid2.Data1)[1] && (&rguid1.Data1)[2] == (&rguid2.Data1)[2] && (&rguid1.Data1)[3] == (&rguid2.Data1)[3]);
}

__inline int IsEqualGUID (const GUID & rguid1, const GUID & rguid2) {
  return !memcmp (&rguid1,&rguid2, sizeof (GUID));
}
__inline bool operator== (const GUID & guidOne, const GUID & guidOther) { return !!IsEqualGUID (guidOne, guidOther); }
__inline bool operator!= (const GUID & guidOne, const GUID & guidOther) { return ! (guidOne == guidOther); }
  typedef struct _OBJECTID {
    GUID Lineage;
    DWORD Uniquifier;
  } OBJECTID;
    typedef int __attribute__((__stdcall__)) EXCEPTION_ROUTINE (struct _EXCEPTION_RECORD *ExceptionRecord, PVOID EstablisherFrame, struct _CONTEXT *ContextRecord, PVOID DispatcherContext);


    typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;
  typedef ULONG_PTR KSPIN_LOCK;
  typedef KSPIN_LOCK *PKSPIN_LOCK;

    typedef struct __attribute__ ((__aligned__ (16))) _M128A {
      ULONGLONG Low;
      LONGLONG High;
    } M128A,*PM128A;

    typedef struct __attribute__ ((__aligned__ (16))) _XSAVE_FORMAT {
      WORD ControlWord;
      WORD StatusWord;
      BYTE TagWord;
      BYTE Reserved1;
      WORD ErrorOpcode;
      DWORD ErrorOffset;
      WORD ErrorSelector;
      WORD Reserved2;
      DWORD DataOffset;
      WORD DataSelector;
      WORD Reserved3;
      DWORD MxCsr;
      DWORD MxCsr_Mask;
      M128A FloatRegisters[8];




      M128A XmmRegisters[8];
      BYTE Reserved4[220];
      DWORD Cr0NpxState;

    } XSAVE_FORMAT,*PXSAVE_FORMAT;

    typedef struct __attribute__ ((__aligned__ (8))) _XSAVE_AREA_HEADER {
      DWORD64 Mask;
      DWORD64 Reserved[7];
    } XSAVE_AREA_HEADER,*PXSAVE_AREA_HEADER;

    typedef struct __attribute__ ((__aligned__ (16))) _XSAVE_AREA {
      XSAVE_FORMAT LegacyState;
      XSAVE_AREA_HEADER Header;
    } XSAVE_AREA,*PXSAVE_AREA;

    typedef struct _XSTATE_CONTEXT {
      DWORD64 Mask;
      DWORD Length;
      DWORD Reserved1;
      PXSAVE_AREA Area;

      DWORD Reserved2;

      PVOID Buffer;

      DWORD Reserved3;

    } XSTATE_CONTEXT,*PXSTATE_CONTEXT;

    typedef struct _SCOPE_TABLE_AMD64 {
      DWORD Count;
      struct {
 DWORD BeginAddress;
 DWORD EndAddress;
 DWORD HandlerAddress;
 DWORD JumpTarget;
      } ScopeRecord[1];
    } SCOPE_TABLE_AMD64,*PSCOPE_TABLE_AMD64;
  extern "C" {
  }
  struct _TEB *NtCurrentTeb(void);
  PVOID GetCurrentFiber(void);
  PVOID GetFiberData(void);



  inline __attribute__((__always_inline__)) struct _TEB *NtCurrentTeb(void)
  {
    return (struct _TEB *)__readfsdword(0x18);
  }
  inline __attribute__((__always_inline__)) PVOID GetCurrentFiber(void)
  {
    return(PVOID)__readfsdword(0x10);
  }
  inline __attribute__((__always_inline__)) PVOID GetFiberData(void)
  {
      return *(PVOID *)GetCurrentFiber();
  }
    typedef struct _FLOATING_SAVE_AREA {
      DWORD ControlWord;
      DWORD StatusWord;
      DWORD TagWord;
      DWORD ErrorOffset;
      DWORD ErrorSelector;
      DWORD DataOffset;
      DWORD DataSelector;
      BYTE RegisterArea[80];
      DWORD Cr0NpxState;
    } FLOATING_SAVE_AREA;

    typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;

    typedef struct _CONTEXT {
      DWORD ContextFlags;
      DWORD Dr0;
      DWORD Dr1;
      DWORD Dr2;
      DWORD Dr3;
      DWORD Dr6;
      DWORD Dr7;
      FLOATING_SAVE_AREA FloatSave;
      DWORD SegGs;
      DWORD SegFs;
      DWORD SegEs;
      DWORD SegDs;

      DWORD Edi;
      DWORD Esi;
      DWORD Ebx;
      DWORD Edx;
      DWORD Ecx;
      DWORD Eax;
      DWORD Ebp;
      DWORD Eip;
      DWORD SegCs;
      DWORD EFlags;
      DWORD Esp;
      DWORD SegSs;
      BYTE ExtendedRegisters[512];
    } CONTEXT;

    typedef CONTEXT *PCONTEXT;
    typedef struct _LDT_ENTRY {
      WORD LimitLow;
      WORD BaseLow;
      union {
 struct {
   BYTE BaseMid;
   BYTE Flags1;
   BYTE Flags2;
   BYTE BaseHi;
 } Bytes;
 struct {
   DWORD BaseMid : 8;
   DWORD Type : 5;
   DWORD Dpl : 2;
   DWORD Pres : 1;
   DWORD LimitHi : 4;
   DWORD Sys : 1;
   DWORD Reserved_0 : 1;
   DWORD Default_Big : 1;
   DWORD Granularity : 1;
   DWORD BaseHi : 8;
 } Bits;
      } HighWord;
    } LDT_ENTRY,*PLDT_ENTRY;
    typedef struct _EXCEPTION_RECORD {
      DWORD ExceptionCode;
      DWORD ExceptionFlags;
      struct _EXCEPTION_RECORD *ExceptionRecord;
      PVOID ExceptionAddress;
      DWORD NumberParameters;
      ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

    typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

    typedef struct _EXCEPTION_RECORD32 {
      DWORD ExceptionCode;
      DWORD ExceptionFlags;
      DWORD ExceptionRecord;
      DWORD ExceptionAddress;
      DWORD NumberParameters;
      DWORD ExceptionInformation[15];
    } EXCEPTION_RECORD32,*PEXCEPTION_RECORD32;

    typedef struct _EXCEPTION_RECORD64 {
      DWORD ExceptionCode;
      DWORD ExceptionFlags;
      DWORD64 ExceptionRecord;
      DWORD64 ExceptionAddress;
      DWORD NumberParameters;
      DWORD __unusedAlignment;
      DWORD64 ExceptionInformation[15];
    } EXCEPTION_RECORD64,*PEXCEPTION_RECORD64;

    typedef struct _EXCEPTION_POINTERS {
      PEXCEPTION_RECORD ExceptionRecord;
      PCONTEXT ContextRecord;
    } EXCEPTION_POINTERS,*PEXCEPTION_POINTERS;
    typedef PVOID PACCESS_TOKEN;
    typedef PVOID PSECURITY_DESCRIPTOR;
    typedef PVOID PSID;
    typedef PVOID PCLAIMS_BLOB;
    typedef DWORD ACCESS_MASK;
    typedef ACCESS_MASK *PACCESS_MASK;
    typedef struct _GENERIC_MAPPING {
      ACCESS_MASK GenericRead;
      ACCESS_MASK GenericWrite;
      ACCESS_MASK GenericExecute;
      ACCESS_MASK GenericAll;
    } GENERIC_MAPPING;
    typedef GENERIC_MAPPING *PGENERIC_MAPPING;
#pragma pack(push,4)

 typedef struct _LUID_AND_ATTRIBUTES {
      LUID Luid;
      DWORD Attributes;
    } LUID_AND_ATTRIBUTES,*PLUID_AND_ATTRIBUTES;
    typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
    typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
#pragma pack(pop)




 typedef struct _SID_IDENTIFIER_AUTHORITY {
      BYTE Value[6];
    } SID_IDENTIFIER_AUTHORITY,*PSID_IDENTIFIER_AUTHORITY;




    typedef struct _SID {
      BYTE Revision;
      BYTE SubAuthorityCount;
      SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
      DWORD SubAuthority[1];
    } SID,*PISID;
    typedef enum _SID_NAME_USE {
      SidTypeUser = 1,SidTypeGroup,SidTypeDomain,SidTypeAlias,SidTypeWellKnownGroup,SidTypeDeletedAccount,SidTypeInvalid,SidTypeUnknown,SidTypeComputer,SidTypeLabel
    } SID_NAME_USE,*PSID_NAME_USE;

    typedef struct _SID_AND_ATTRIBUTES {



      PSID Sid;

      DWORD Attributes;
    } SID_AND_ATTRIBUTES,*PSID_AND_ATTRIBUTES;

    typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
    typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;

    typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

    typedef struct _SID_AND_ATTRIBUTES_HASH {
      DWORD SidCount;
      PSID_AND_ATTRIBUTES SidAttr;
      SID_HASH_ENTRY Hash[32];
    } SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
    typedef enum {
      WinNullSid = 0,WinWorldSid = 1,WinLocalSid = 2,WinCreatorOwnerSid = 3,
      WinCreatorGroupSid = 4,WinCreatorOwnerServerSid = 5,
      WinCreatorGroupServerSid = 6,WinNtAuthoritySid = 7,WinDialupSid = 8,
      WinNetworkSid = 9,WinBatchSid = 10,WinInteractiveSid = 11,
      WinServiceSid = 12,WinAnonymousSid = 13,WinProxySid = 14,
      WinEnterpriseControllersSid = 15,WinSelfSid = 16,
      WinAuthenticatedUserSid = 17,WinRestrictedCodeSid = 18,
      WinTerminalServerSid = 19,WinRemoteLogonIdSid = 20,WinLogonIdsSid = 21,
      WinLocalSystemSid = 22,WinLocalServiceSid = 23,WinNetworkServiceSid = 24,
      WinBuiltinDomainSid = 25,WinBuiltinAdministratorsSid = 26,
      WinBuiltinUsersSid = 27,WinBuiltinGuestsSid = 28,
      WinBuiltinPowerUsersSid = 29,WinBuiltinAccountOperatorsSid = 30,
      WinBuiltinSystemOperatorsSid = 31,WinBuiltinPrintOperatorsSid = 32,
      WinBuiltinBackupOperatorsSid = 33,WinBuiltinReplicatorSid = 34,
      WinBuiltinPreWindows2000CompatibleAccessSid = 35,
      WinBuiltinRemoteDesktopUsersSid = 36,
      WinBuiltinNetworkConfigurationOperatorsSid = 37,
      WinAccountAdministratorSid = 38,WinAccountGuestSid = 39,
      WinAccountKrbtgtSid = 40,WinAccountDomainAdminsSid = 41,
      WinAccountDomainUsersSid = 42,WinAccountDomainGuestsSid = 43,
      WinAccountComputersSid = 44,WinAccountControllersSid = 45,
      WinAccountCertAdminsSid = 46,WinAccountSchemaAdminsSid = 47,
      WinAccountEnterpriseAdminsSid = 48,WinAccountPolicyAdminsSid = 49,
      WinAccountRasAndIasServersSid = 50,WinNTLMAuthenticationSid = 51,
      WinDigestAuthenticationSid = 52,WinSChannelAuthenticationSid = 53,
      WinThisOrganizationSid = 54,WinOtherOrganizationSid = 55,
      WinBuiltinIncomingForestTrustBuildersSid = 56,
      WinBuiltinPerfMonitoringUsersSid = 57,WinBuiltinPerfLoggingUsersSid = 58,
      WinBuiltinAuthorizationAccessSid = 59,
      WinBuiltinTerminalServerLicenseServersSid = 60,
      WinBuiltinDCOMUsersSid = 61,WinBuiltinIUsersSid = 62,
      WinIUserSid = 63, WinBuiltinCryptoOperatorsSid = 64,
      WinUntrustedLabelSid = 65, WinLowLabelSid = 66, WinMediumLabelSid = 67,
      WinHighLabelSid = 68, WinSystemLabelSid = 69, WinWriteRestrictedCodeSid = 70,
      WinCreatorOwnerRightsSid = 71, WinCacheablePrincipalsGroupSid = 72,
      WinNonCacheablePrincipalsGroupSid = 73, WinEnterpriseReadonlyControllersSid = 74,
      WinAccountReadonlyControllersSid = 75, WinBuiltinEventLogReadersGroup = 76,
      WinNewEnterpriseReadonlyControllersSid = 77, WinBuiltinCertSvcDComAccessGroup = 78,
      WinMediumPlusLabelSid = 79, WinLocalLogonSid = 80, WinConsoleLogonSid = 81,
      WinThisOrganizationCertificateSid = 82, WinApplicationPackageAuthoritySid = 83,
      WinBuiltinAnyPackageSid = 84, WinCapabilityInternetClientSid = 85,
      WinCapabilityInternetClientServerSid = 86,
      WinCapabilityPrivateNetworkClientServerSid = 87,
      WinCapabilityPicturesLibrarySid = 88, WinCapabilityVideosLibrarySid = 89,
      WinCapabilityMusicLibrarySid = 90, WinCapabilityDocumentsLibrarySid = 91,
      WinCapabilitySharedUserCertificatesSid = 92, WinCapabilityEnterpriseAuthenticationSid = 93,
      WinCapabilityRemovableStorageSid = 94, WinBuiltinRDSRemoteAccessServersSid = 95,
      WinBuiltinRDSEndpointServersSid = 96, WinBuiltinRDSManagementServersSid = 97,
      WinUserModeDriversSid = 98, WinBuiltinHyperVAdminsSid = 99,
      WinAccountCloneableControllersSid = 100,
      WinBuiltinAccessControlAssistanceOperatorsSid = 101,
      WinBuiltinRemoteManagementUsersSid = 102, WinAuthenticationAuthorityAssertedSid = 103,
      WinAuthenticationServiceAssertedSid = 104
} WELL_KNOWN_SID_TYPE;
    typedef struct _ACL {
      BYTE AclRevision;
      BYTE Sbz1;
      WORD AclSize;
      WORD AceCount;
      WORD Sbz2;
    } ACL;
    typedef ACL *PACL;

    typedef struct _ACE_HEADER {
      BYTE AceType;
      BYTE AceFlags;
      WORD AceSize;
    } ACE_HEADER;
    typedef ACE_HEADER *PACE_HEADER;
    typedef struct _ACCESS_ALLOWED_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_ALLOWED_ACE;

    typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

    typedef struct _ACCESS_DENIED_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_DENIED_ACE;
    typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

    typedef struct _SYSTEM_AUDIT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_AUDIT_ACE;
    typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

    typedef struct _SYSTEM_ALARM_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_ALARM_ACE;
    typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

    typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_RESOURCE_ATTRIBUTE_ACE,*PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

    typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_SCOPED_POLICY_ID_ACE,*PSYSTEM_SCOPED_POLICY_ID_ACE;

    typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;







    typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } ACCESS_ALLOWED_OBJECT_ACE,*PACCESS_ALLOWED_OBJECT_ACE;

    typedef struct _ACCESS_DENIED_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } ACCESS_DENIED_OBJECT_ACE,*PACCESS_DENIED_OBJECT_ACE;

    typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } SYSTEM_AUDIT_OBJECT_ACE,*PSYSTEM_AUDIT_OBJECT_ACE;

    typedef struct _SYSTEM_ALARM_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } SYSTEM_ALARM_OBJECT_ACE,*PSYSTEM_ALARM_OBJECT_ACE;

    typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_ALLOWED_CALLBACK_ACE,*PACCESS_ALLOWED_CALLBACK_ACE;

    typedef struct _ACCESS_DENIED_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } ACCESS_DENIED_CALLBACK_ACE,*PACCESS_DENIED_CALLBACK_ACE;

    typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_AUDIT_CALLBACK_ACE,*PSYSTEM_AUDIT_CALLBACK_ACE;

    typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD SidStart;
    } SYSTEM_ALARM_CALLBACK_ACE,*PSYSTEM_ALARM_CALLBACK_ACE;

    typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;

    } ACCESS_ALLOWED_CALLBACK_OBJECT_ACE,*PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

    typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } ACCESS_DENIED_CALLBACK_OBJECT_ACE,*PACCESS_DENIED_CALLBACK_OBJECT_ACE;

    typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;
    } SYSTEM_AUDIT_CALLBACK_OBJECT_ACE,*PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

    typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
      ACE_HEADER Header;
      ACCESS_MASK Mask;
      DWORD Flags;
      GUID ObjectType;
      GUID InheritedObjectType;
      DWORD SidStart;

    } SYSTEM_ALARM_CALLBACK_OBJECT_ACE,*PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;




    typedef enum _ACL_INFORMATION_CLASS {
      AclRevisionInformation = 1,AclSizeInformation
    } ACL_INFORMATION_CLASS;

    typedef struct _ACL_REVISION_INFORMATION {
      DWORD AclRevision;
    } ACL_REVISION_INFORMATION;
    typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;

    typedef struct _ACL_SIZE_INFORMATION {
      DWORD AceCount;
      DWORD AclBytesInUse;
      DWORD AclBytesFree;
    } ACL_SIZE_INFORMATION;
    typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;






    typedef WORD SECURITY_DESCRIPTOR_CONTROL,*PSECURITY_DESCRIPTOR_CONTROL;
    typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
      BYTE Revision;
      BYTE Sbz1;
      SECURITY_DESCRIPTOR_CONTROL Control;
      DWORD Owner;
      DWORD Group;
      DWORD Sacl;
      DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE,*PISECURITY_DESCRIPTOR_RELATIVE;

    typedef struct _SECURITY_DESCRIPTOR {
      BYTE Revision;
      BYTE Sbz1;
      SECURITY_DESCRIPTOR_CONTROL Control;
      PSID Owner;
      PSID Group;
      PACL Sacl;
      PACL Dacl;
    } SECURITY_DESCRIPTOR,*PISECURITY_DESCRIPTOR;

    typedef struct _OBJECT_TYPE_LIST {
      WORD Level;
      WORD Sbz;
      GUID *ObjectType;
    } OBJECT_TYPE_LIST,*POBJECT_TYPE_LIST;







    typedef enum _AUDIT_EVENT_TYPE {
      AuditEventObjectAccess,AuditEventDirectoryServiceAccess
    } AUDIT_EVENT_TYPE,*PAUDIT_EVENT_TYPE;
    typedef struct _PRIVILEGE_SET {
      DWORD PrivilegeCount;
      DWORD Control;
      LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET,*PPRIVILEGE_SET;







    typedef enum _ACCESS_REASON_TYPE {
      AccessReasonNone = 0x00000000,
      AccessReasonAllowedAce = 0x00010000,
      AccessReasonDeniedAce = 0x00020000,
      AccessReasonAllowedParentAce = 0x00030000,
      AccessReasonDeniedParentAce = 0x00040000,
      AccessReasonNotGrantedByCape = 0x00050000,
      AccessReasonNotGrantedByParentCape = 0x00060000,
      AccessReasonNotGrantedToAppContainer = 0x00070000,
      AccessReasonMissingPrivilege = 0x00100000,
      AccessReasonFromPrivilege = 0x00200000,
      AccessReasonIntegrityLevel = 0x00300000,
      AccessReasonOwnership = 0x00400000,
      AccessReasonNullDacl = 0x00500000,
      AccessReasonEmptyDacl = 0x00600000,
      AccessReasonNoSD = 0x00700000,
      AccessReasonNoGrant = 0x00800000
    } ACCESS_REASON_TYPE;
    typedef DWORD ACCESS_REASON;

    typedef struct _ACCESS_REASONS {
      ACCESS_REASON Data[32];
    } ACCESS_REASONS,*PACCESS_REASONS;





    typedef struct _SE_SECURITY_DESCRIPTOR {
      DWORD Size;
      DWORD Flags;
      PSECURITY_DESCRIPTOR SecurityDescriptor;
    } SE_SECURITY_DESCRIPTOR,*PSE_SECURITY_DESCRIPTOR;

    typedef struct _SE_ACCESS_REQUEST {
      DWORD Size;
      PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
      ACCESS_MASK DesiredAccess;
      ACCESS_MASK PreviouslyGrantedAccess;
      PSID PrincipalSelfSid;
      PGENERIC_MAPPING GenericMapping;
      DWORD ObjectTypeListCount;
      POBJECT_TYPE_LIST ObjectTypeList;
    } SE_ACCESS_REQUEST,*PSE_ACCESS_REQUEST;

    typedef struct _SE_ACCESS_REPLY {
      DWORD Size;
      DWORD ResultListCount;
      PACCESS_MASK GrantedAccess;
      PDWORD AccessStatus;
      PACCESS_REASONS AccessReason;
      PPRIVILEGE_SET *Privileges;
    } SE_ACCESS_REPLY,*PSE_ACCESS_REPLY;
    typedef enum _SECURITY_IMPERSONATION_LEVEL {
      SecurityAnonymous,SecurityIdentification,SecurityImpersonation,SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL,*PSECURITY_IMPERSONATION_LEVEL;
    typedef enum _TOKEN_TYPE {
      TokenPrimary = 1,TokenImpersonation
    } TOKEN_TYPE;
    typedef TOKEN_TYPE *PTOKEN_TYPE;

    typedef enum _TOKEN_ELEVATION_TYPE {
      TokenElevationTypeDefault = 1,
      TokenElevationTypeFull,
      TokenElevationTypeLimited
    } TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;

    typedef enum _TOKEN_INFORMATION_CLASS {
      TokenUser = 1,
      TokenGroups,
      TokenPrivileges,
      TokenOwner,
      TokenPrimaryGroup,
      TokenDefaultDacl,
      TokenSource,
      TokenType,
      TokenImpersonationLevel,
      TokenStatistics,
      TokenRestrictedSids,
      TokenSessionId,
      TokenGroupsAndPrivileges,
      TokenSessionReference,
      TokenSandBoxInert,
      TokenAuditPolicy,
      TokenOrigin,
      TokenElevationType,
      TokenLinkedToken,
      TokenElevation,
      TokenHasRestrictions,
      TokenAccessInformation,
      TokenVirtualizationAllowed,
      TokenVirtualizationEnabled,
      TokenIntegrityLevel,
      TokenUIAccess,
      TokenMandatoryPolicy,
      TokenLogonSid,
      TokenIsAppContainer,
      TokenCapabilities,
      TokenAppContainerSid,
      TokenAppContainerNumber,
      TokenUserClaimAttributes,
      TokenDeviceClaimAttributes,
      TokenRestrictedUserClaimAttributes,
      TokenRestrictedDeviceClaimAttributes,
      TokenDeviceGroups,
      TokenRestrictedDeviceGroups,
      TokenSecurityAttributes,
      TokenIsRestricted,
      MaxTokenInfoClass
    } TOKEN_INFORMATION_CLASS,*PTOKEN_INFORMATION_CLASS;

    typedef struct _TOKEN_USER {
      SID_AND_ATTRIBUTES User;
    } TOKEN_USER,*PTOKEN_USER;

    typedef struct _TOKEN_GROUPS {
      DWORD GroupCount;



      SID_AND_ATTRIBUTES Groups[1];

    } TOKEN_GROUPS,*PTOKEN_GROUPS;

    typedef struct _TOKEN_PRIVILEGES {
      DWORD PrivilegeCount;
      LUID_AND_ATTRIBUTES Privileges[1];
    } TOKEN_PRIVILEGES,*PTOKEN_PRIVILEGES;

    typedef struct _TOKEN_OWNER {
      PSID Owner;
    } TOKEN_OWNER,*PTOKEN_OWNER;

    typedef struct _TOKEN_PRIMARY_GROUP {
      PSID PrimaryGroup;
    } TOKEN_PRIMARY_GROUP,*PTOKEN_PRIMARY_GROUP;

    typedef struct _TOKEN_DEFAULT_DACL {
      PACL DefaultDacl;
    } TOKEN_DEFAULT_DACL,*PTOKEN_DEFAULT_DACL;

    typedef struct _TOKEN_USER_CLAIMS {
      PCLAIMS_BLOB UserClaims;
    } TOKEN_USER_CLAIMS,*PTOKEN_USER_CLAIMS;

    typedef struct _TOKEN_DEVICE_CLAIMS {
      PCLAIMS_BLOB DeviceClaims;
    } TOKEN_DEVICE_CLAIMS,*PTOKEN_DEVICE_CLAIMS;

    typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
      DWORD SidCount;
      DWORD SidLength;
      PSID_AND_ATTRIBUTES Sids;
      DWORD RestrictedSidCount;
      DWORD RestrictedSidLength;
      PSID_AND_ATTRIBUTES RestrictedSids;
      DWORD PrivilegeCount;
      DWORD PrivilegeLength;
      PLUID_AND_ATTRIBUTES Privileges;
      LUID AuthenticationId;
    } TOKEN_GROUPS_AND_PRIVILEGES,*PTOKEN_GROUPS_AND_PRIVILEGES;

    typedef struct _TOKEN_LINKED_TOKEN {
      HANDLE LinkedToken;
    } TOKEN_LINKED_TOKEN,*PTOKEN_LINKED_TOKEN;

    typedef struct _TOKEN_ELEVATION {
      DWORD TokenIsElevated;
    } TOKEN_ELEVATION,*PTOKEN_ELEVATION;

    typedef struct _TOKEN_MANDATORY_LABEL {
      SID_AND_ATTRIBUTES Label;
    } TOKEN_MANDATORY_LABEL,*PTOKEN_MANDATORY_LABEL;







    typedef struct _TOKEN_MANDATORY_POLICY {
      DWORD Policy;
    } TOKEN_MANDATORY_POLICY,*PTOKEN_MANDATORY_POLICY;

    typedef struct _TOKEN_ACCESS_INFORMATION {
      PSID_AND_ATTRIBUTES_HASH SidHash;
      PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
      PTOKEN_PRIVILEGES Privileges;
      LUID AuthenticationId;
      TOKEN_TYPE TokenType;
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
      TOKEN_MANDATORY_POLICY MandatoryPolicy;
      DWORD Flags;
      DWORD AppContainerNumber;
      PSID PackageSid;
      PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    } TOKEN_ACCESS_INFORMATION,*PTOKEN_ACCESS_INFORMATION;



    typedef struct _TOKEN_AUDIT_POLICY {
      UCHAR PerUserPolicy[(((56)) >> 1) + 1];
    } TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



    typedef struct _TOKEN_SOURCE {
      CHAR SourceName[8];
      LUID SourceIdentifier;
    } TOKEN_SOURCE,*PTOKEN_SOURCE;

    typedef struct _TOKEN_STATISTICS {
      LUID TokenId;
      LUID AuthenticationId;
      LARGE_INTEGER ExpirationTime;
      TOKEN_TYPE TokenType;
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
      DWORD DynamicCharged;
      DWORD DynamicAvailable;
      DWORD GroupCount;
      DWORD PrivilegeCount;
      LUID ModifiedId;
    } TOKEN_STATISTICS,*PTOKEN_STATISTICS;

    typedef struct _TOKEN_CONTROL {
      LUID TokenId;
      LUID AuthenticationId;
      LUID ModifiedId;
      TOKEN_SOURCE TokenSource;
    } TOKEN_CONTROL,*PTOKEN_CONTROL;

    typedef struct _TOKEN_ORIGIN {
      LUID OriginatingLogonSession;
    } TOKEN_ORIGIN,*PTOKEN_ORIGIN;

    typedef enum _MANDATORY_LEVEL {
      MandatoryLevelUntrusted = 0,
      MandatoryLevelLow,
      MandatoryLevelMedium,
      MandatoryLevelHigh,
      MandatoryLevelSystem,
      MandatoryLevelSecureProcess,
      MandatoryLevelCount
    } MANDATORY_LEVEL,*PMANDATORY_LEVEL;

    typedef struct _TOKEN_APPCONTAINER_INFORMATION {
      PSID TokenAppContainer;
    } TOKEN_APPCONTAINER_INFORMATION,*PTOKEN_APPCONTAINER_INFORMATION;
    typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
      DWORD64 Version;
      PWSTR Name;
    } CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE,*PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;

    typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
      PVOID pValue;
      DWORD ValueLength;
    } CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
    typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
      PWSTR Name;
      WORD ValueType;
      WORD Reserved;
      DWORD Flags;
      DWORD ValueCount;
      union {
 PLONG64 pInt64;
 PDWORD64 pUint64;
 PWSTR *ppString;
 PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
 PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
      } Values;
    } CLAIM_SECURITY_ATTRIBUTE_V1,*PCLAIM_SECURITY_ATTRIBUTE_V1;

    typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
      DWORD Name;
      WORD ValueType;
      WORD Reserved;
      DWORD Flags;
      DWORD ValueCount;
      union {
 DWORD pInt64[1];
 DWORD pUint64[1];
 DWORD ppString[1];
 DWORD pFqbn[1];
 DWORD pOctetString[1];
      } Values;
    } CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1,*PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;





    typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
      WORD Version;
      WORD Reserved;
      DWORD AttributeCount;
      union {
 PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
      } Attribute;
    } CLAIM_SECURITY_ATTRIBUTES_INFORMATION,*PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;




    typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,*PSECURITY_CONTEXT_TRACKING_MODE;

    typedef struct _SECURITY_QUALITY_OF_SERVICE {
      DWORD Length;
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
      SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
      BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE,*PSECURITY_QUALITY_OF_SERVICE;

    typedef struct _SE_IMPERSONATION_STATE {
      PACCESS_TOKEN Token;
      BOOLEAN CopyOnOpen;
      BOOLEAN EffectiveOnly;
      SECURITY_IMPERSONATION_LEVEL Level;
    } SE_IMPERSONATION_STATE,*PSE_IMPERSONATION_STATE;






    typedef DWORD SECURITY_INFORMATION,*PSECURITY_INFORMATION;
    typedef enum _SE_LEARNING_MODE_DATA_TYPE {
      SeLearningModeInvalidType = 0,
      SeLearningModeSettings,
      SeLearningModeMax
    } SE_LEARNING_MODE_DATA_TYPE;



    typedef struct _SECURITY_CAPABILITIES {
      PSID AppContainerSid;
      PSID_AND_ATTRIBUTES Capabilities;
      DWORD CapabilityCount;
      DWORD Reserved;
    } SECURITY_CAPABILITIES,*PSECURITY_CAPABILITIES,*LPSECURITY_CAPABILITIES;
    typedef struct _JOB_SET_ARRAY {
      HANDLE JobHandle;
      DWORD MemberLevel;
      DWORD Flags;
    } JOB_SET_ARRAY,*PJOB_SET_ARRAY;





    typedef struct _EXCEPTION_REGISTRATION_RECORD {
      __extension__ union {
        struct _EXCEPTION_REGISTRATION_RECORD *Next;
        struct _EXCEPTION_REGISTRATION_RECORD *prev;
      };
      __extension__ union {
        PEXCEPTION_ROUTINE Handler;
        PEXCEPTION_ROUTINE handler;
      };
    } EXCEPTION_REGISTRATION_RECORD;

    typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

    typedef EXCEPTION_REGISTRATION_RECORD EXCEPTION_REGISTRATION;
    typedef PEXCEPTION_REGISTRATION_RECORD PEXCEPTION_REGISTRATION;




    __extension__ typedef struct _NT_TIB {
      struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
      PVOID StackBase;
      PVOID StackLimit;
      PVOID SubSystemTib;
      __extension__ union {
 PVOID FiberData;
 DWORD Version;
      };
      PVOID ArbitraryUserPointer;
      struct _NT_TIB *Self;
    } NT_TIB;
    typedef NT_TIB *PNT_TIB;


    __extension__ typedef struct _NT_TIB32 {
      DWORD ExceptionList;
      DWORD StackBase;
      DWORD StackLimit;
      DWORD SubSystemTib;
      __extension__ union {
 DWORD FiberData;
 DWORD Version;
      };
      DWORD ArbitraryUserPointer;
      DWORD Self;
    } NT_TIB32,*PNT_TIB32;

    __extension__ typedef struct _NT_TIB64 {
      DWORD64 ExceptionList;
      DWORD64 StackBase;
      DWORD64 StackLimit;
      DWORD64 SubSystemTib;
      __extension__ union {
 DWORD64 FiberData;
 DWORD Version;
      };
      DWORD64 ArbitraryUserPointer;
      DWORD64 Self;
    } NT_TIB64,*PNT_TIB64;
    typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
      DWORD UmsVersion;
      PVOID UmsContext;
      PVOID UmsCompletionList;
    } UMS_CREATE_THREAD_ATTRIBUTES,*PUMS_CREATE_THREAD_ATTRIBUTES;

    typedef struct _QUOTA_LIMITS {
      SIZE_T PagedPoolLimit;
      SIZE_T NonPagedPoolLimit;
      SIZE_T MinimumWorkingSetSize;
      SIZE_T MaximumWorkingSetSize;
      SIZE_T PagefileLimit;
      LARGE_INTEGER TimeLimit;
    } QUOTA_LIMITS,*PQUOTA_LIMITS;







    typedef union _RATE_QUOTA_LIMIT {
      DWORD RateData;
      __extension__ struct {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
      } ;
    } RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

    typedef struct _QUOTA_LIMITS_EX {
      SIZE_T PagedPoolLimit;
      SIZE_T NonPagedPoolLimit;
      SIZE_T MinimumWorkingSetSize;
      SIZE_T MaximumWorkingSetSize;
      SIZE_T PagefileLimit;
      LARGE_INTEGER TimeLimit;
      SIZE_T WorkingSetLimit;
      SIZE_T Reserved2;
      SIZE_T Reserved3;
      SIZE_T Reserved4;
      DWORD Flags;
      RATE_QUOTA_LIMIT CpuRateLimit;
    } QUOTA_LIMITS_EX,*PQUOTA_LIMITS_EX;

    typedef struct _IO_COUNTERS {
      ULONGLONG ReadOperationCount;
      ULONGLONG WriteOperationCount;
      ULONGLONG OtherOperationCount;
      ULONGLONG ReadTransferCount;
      ULONGLONG WriteTransferCount;
      ULONGLONG OtherTransferCount;
    } IO_COUNTERS;
    typedef IO_COUNTERS *PIO_COUNTERS;




    typedef enum _HARDWARE_COUNTER_TYPE {
      PMCCounter,
      MaxHardwareCounterType
    } HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

    typedef enum _PROCESS_MITIGATION_POLICY {
      ProcessDEPPolicy,
      ProcessASLRPolicy,
      ProcessReserved1MitigationPolicy,
      ProcessStrictHandleCheckPolicy,
      ProcessSystemCallDisablePolicy,
      ProcessMitigationOptionsMask,
      ProcessExtensionPointDisablePolicy,
      MaxProcessMitigationPolicy
    } PROCESS_MITIGATION_POLICY,*PPROCESS_MITIGATION_POLICY;

    typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD EnableBottomUpRandomization : 1;
   DWORD EnableForceRelocateImages : 1;
   DWORD EnableHighEntropy : 1;
   DWORD DisallowStrippedImages : 1;
   DWORD ReservedFlags : 28;
 };
      };
    } PROCESS_MITIGATION_ASLR_POLICY,*PPROCESS_MITIGATION_ASLR_POLICY;

    typedef struct _PROCESS_MITIGATION_DEP_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD Enable : 1;
   DWORD DisableAtlThunkEmulation : 1;
   DWORD ReservedFlags : 30;
 };
      };
      BOOLEAN Permanent;
    } PROCESS_MITIGATION_DEP_POLICY,*PPROCESS_MITIGATION_DEP_POLICY;

    typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD RaiseExceptionOnInvalidHandleReference : 1;
   DWORD HandleExceptionsPermanentlyEnabled : 1;
   DWORD ReservedFlags : 30;
 };
      };
    } PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY,*PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

    typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD DisallowWin32kSystemCalls : 1;
   DWORD ReservedFlags : 31;
 };
      };
    } PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY,*PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

    typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
      __extension__ union {
 DWORD Flags;
 __extension__ struct {
   DWORD DisableExtensionPoints : 1;
   DWORD ReservedFlags : 31;
 };
      };
    } PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY,*PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

    typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
      LARGE_INTEGER TotalUserTime;
      LARGE_INTEGER TotalKernelTime;
      LARGE_INTEGER ThisPeriodTotalUserTime;
      LARGE_INTEGER ThisPeriodTotalKernelTime;
      DWORD TotalPageFaultCount;
      DWORD TotalProcesses;
      DWORD ActiveProcesses;
      DWORD TotalTerminatedProcesses;
    } JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,*PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

    typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
      LARGE_INTEGER PerProcessUserTimeLimit;
      LARGE_INTEGER PerJobUserTimeLimit;
      DWORD LimitFlags;
      SIZE_T MinimumWorkingSetSize;
      SIZE_T MaximumWorkingSetSize;
      DWORD ActiveProcessLimit;
      ULONG_PTR Affinity;
      DWORD PriorityClass;
      DWORD SchedulingClass;
    } JOBOBJECT_BASIC_LIMIT_INFORMATION,*PJOBOBJECT_BASIC_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
      JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
      IO_COUNTERS IoInfo;
      SIZE_T ProcessMemoryLimit;
      SIZE_T JobMemoryLimit;
      SIZE_T PeakProcessMemoryUsed;
      SIZE_T PeakJobMemoryUsed;
    } JOBOBJECT_EXTENDED_LIMIT_INFORMATION,*PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
      DWORD NumberOfAssignedProcesses;
      DWORD NumberOfProcessIdsInList;
      ULONG_PTR ProcessIdList[1];
    } JOBOBJECT_BASIC_PROCESS_ID_LIST,*PJOBOBJECT_BASIC_PROCESS_ID_LIST;

    typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
      DWORD UIRestrictionsClass;
    } JOBOBJECT_BASIC_UI_RESTRICTIONS,*PJOBOBJECT_BASIC_UI_RESTRICTIONS;

    typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
      DWORD SecurityLimitFlags;
      HANDLE JobToken;
      PTOKEN_GROUPS SidsToDisable;
      PTOKEN_PRIVILEGES PrivilegesToDelete;
      PTOKEN_GROUPS RestrictedSids;
    } JOBOBJECT_SECURITY_LIMIT_INFORMATION,*PJOBOBJECT_SECURITY_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
      DWORD EndOfJobTimeAction;
    } JOBOBJECT_END_OF_JOB_TIME_INFORMATION,*PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

    typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
      PVOID CompletionKey;
      HANDLE CompletionPort;
    } JOBOBJECT_ASSOCIATE_COMPLETION_PORT,*PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

    typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
      JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
      IO_COUNTERS IoInfo;
    } JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION,*PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

    typedef struct _JOBOBJECT_JOBSET_INFORMATION {
      DWORD MemberLevel;
    } JOBOBJECT_JOBSET_INFORMATION,*PJOBOBJECT_JOBSET_INFORMATION;

    typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
      ToleranceLow = 1,
      ToleranceMedium,
      ToleranceHigh
    } JOBOBJECT_RATE_CONTROL_TOLERANCE;

    typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
      ToleranceIntervalShort = 1,
      ToleranceIntervalMedium,
      ToleranceIntervalLong
    } JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

    typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
      DWORD64 IoReadBytesLimit;
      DWORD64 IoWriteBytesLimit;
      LARGE_INTEGER PerJobUserTimeLimit;
      DWORD64 JobMemoryLimit;
      JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
      JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
      DWORD LimitFlags;
    } JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION,*PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

    typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
      DWORD LimitFlags;
      DWORD ViolationLimitFlags;
      DWORD64 IoReadBytes;
      DWORD64 IoReadBytesLimit;
      DWORD64 IoWriteBytes;
      DWORD64 IoWriteBytesLimit;
      LARGE_INTEGER PerJobUserTime;
      LARGE_INTEGER PerJobUserTimeLimit;
      DWORD64 JobMemory;
      DWORD64 JobMemoryLimit;
      JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
      JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
    } JOBOBJECT_LIMIT_VIOLATION_INFORMATION,*PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

    typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
      DWORD ControlFlags;
      __extension__ union {
 DWORD CpuRate;
 DWORD Weight;
      };
    } JOBOBJECT_CPU_RATE_CONTROL_INFORMATION,*PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
    typedef enum _JOBOBJECTINFOCLASS {
      JobObjectBasicAccountingInformation = 1, JobObjectBasicLimitInformation,
      JobObjectBasicProcessIdList, JobObjectBasicUIRestrictions,
      JobObjectSecurityLimitInformation, JobObjectEndOfJobTimeInformation,
      JobObjectAssociateCompletionPortInformation, JobObjectBasicAndIoAccountingInformation,
      JobObjectExtendedLimitInformation, JobObjectJobSetInformation,
      JobObjectGroupInformation,
      JobObjectNotificationLimitInformation,
      JobObjectLimitViolationInformation,
      JobObjectGroupInformationEx,
      JobObjectCpuRateControlInformation,
      JobObjectCompletionFilter,
      JobObjectCompletionCounter,
      JobObjectReserved1Information = 18,
      JobObjectReserved2Information,
      JobObjectReserved3Information,
      JobObjectReserved4Information,
      JobObjectReserved5Information,
      JobObjectReserved6Information,
      JobObjectReserved7Information,
      JobObjectReserved8Information,
      MaxJobObjectInfoClass
    } JOBOBJECTINFOCLASS;

    typedef enum _FIRMWARE_TYPE {
      FirmwareTypeUnknown,
      FirmwareTypeBios,
      FirmwareTypeUefi,
      FirmwareTypeMax
    } FIRMWARE_TYPE,*PFIRMWARE_TYPE;
    typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
      RelationProcessorCore,RelationNumaNode,RelationCache,
      RelationProcessorPackage,RelationGroup,RelationAll=0xffff
    } LOGICAL_PROCESSOR_RELATIONSHIP;



    typedef enum _PROCESSOR_CACHE_TYPE {
      CacheUnified,CacheInstruction,CacheData,CacheTrace
    } PROCESSOR_CACHE_TYPE;



    typedef struct _CACHE_DESCRIPTOR {
      BYTE Level;
      BYTE Associativity;
      WORD LineSize;
      DWORD Size;
      PROCESSOR_CACHE_TYPE Type;
    } CACHE_DESCRIPTOR,*PCACHE_DESCRIPTOR;

    typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
      ULONG_PTR ProcessorMask;
      LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
      __extension__ union {
 struct {
   BYTE Flags;
 } ProcessorCore;
 struct {
   DWORD NodeNumber;
 } NumaNode;
 CACHE_DESCRIPTOR Cache;
 ULONGLONG Reserved[2];
      } ;
    } SYSTEM_LOGICAL_PROCESSOR_INFORMATION,*PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

    typedef struct _PROCESSOR_RELATIONSHIP {
      BYTE Flags;
      BYTE Reserved[21];
      WORD GroupCount;
      GROUP_AFFINITY GroupMask[1];
    } PROCESSOR_RELATIONSHIP,*PPROCESSOR_RELATIONSHIP;

    typedef struct _NUMA_NODE_RELATIONSHIP {
      DWORD NodeNumber;
      BYTE Reserved[20];
      GROUP_AFFINITY GroupMask;
    } NUMA_NODE_RELATIONSHIP,*PNUMA_NODE_RELATIONSHIP;

    typedef struct _CACHE_RELATIONSHIP {
      BYTE Level;
      BYTE Associativity;
      WORD LineSize;
      DWORD CacheSize;
      PROCESSOR_CACHE_TYPE Type;
      BYTE Reserved[20];
      GROUP_AFFINITY GroupMask;
    } CACHE_RELATIONSHIP,*PCACHE_RELATIONSHIP;

    typedef struct _PROCESSOR_GROUP_INFO {
      BYTE MaximumProcessorCount;
      BYTE ActiveProcessorCount;
      BYTE Reserved[38];
      KAFFINITY ActiveProcessorMask;
    } PROCESSOR_GROUP_INFO,*PPROCESSOR_GROUP_INFO;

    typedef struct _GROUP_RELATIONSHIP {
      WORD MaximumGroupCount;
      WORD ActiveGroupCount;
      BYTE Reserved[20];
      PROCESSOR_GROUP_INFO GroupInfo[1];
    } GROUP_RELATIONSHIP,*PGROUP_RELATIONSHIP;

    struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
      LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
      DWORD Size;
      __extension__ union {
 PROCESSOR_RELATIONSHIP Processor;
 NUMA_NODE_RELATIONSHIP NumaNode;
 CACHE_RELATIONSHIP Cache;
 GROUP_RELATIONSHIP Group;
      } ;
    };

    typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,*PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

    typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
      DWORD64 CycleTime;
    } SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION,*PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
    typedef struct _XSTATE_FEATURE {
      DWORD Offset;
      DWORD Size;
    } XSTATE_FEATURE,*PXSTATE_FEATURE;

    typedef struct _XSTATE_CONFIGURATION {
      DWORD64 EnabledFeatures;
      DWORD64 EnabledVolatileFeatures;
      DWORD Size;
      DWORD OptimizedSave : 1;
      XSTATE_FEATURE Features[(64)];
    } XSTATE_CONFIGURATION,*PXSTATE_CONFIGURATION;

    typedef struct _MEMORY_BASIC_INFORMATION {
      PVOID BaseAddress;
      PVOID AllocationBase;
      DWORD AllocationProtect;
      SIZE_T RegionSize;
      DWORD State;
      DWORD Protect;
      DWORD Type;
    } MEMORY_BASIC_INFORMATION,*PMEMORY_BASIC_INFORMATION;

    typedef struct _MEMORY_BASIC_INFORMATION32 {
      DWORD BaseAddress;
      DWORD AllocationBase;
      DWORD AllocationProtect;
      DWORD RegionSize;
      DWORD State;
      DWORD Protect;
      DWORD Type;
    } MEMORY_BASIC_INFORMATION32,*PMEMORY_BASIC_INFORMATION32;

    typedef struct __attribute__ ((__aligned__ (16))) _MEMORY_BASIC_INFORMATION64 {
      ULONGLONG BaseAddress;
      ULONGLONG AllocationBase;
      DWORD AllocationProtect;
      DWORD __alignment1;
      ULONGLONG RegionSize;
      DWORD State;
      DWORD Protect;
      DWORD Type;
      DWORD __alignment2;
    } MEMORY_BASIC_INFORMATION64,*PMEMORY_BASIC_INFORMATION64;
    typedef struct FILE_ID_128 {
      ULONGLONG LowPart;
      ULONGLONG HighPart;
    } FILE_ID_128, *PFILE_ID_128;

    typedef struct _FILE_NOTIFY_INFORMATION {
      DWORD NextEntryOffset;
      DWORD Action;
      DWORD FileNameLength;
      WCHAR FileName[1];
    } FILE_NOTIFY_INFORMATION,*PFILE_NOTIFY_INFORMATION;

    typedef union _FILE_SEGMENT_ELEMENT {
      PVOID64 Buffer;
      ULONGLONG Alignment;
    } FILE_SEGMENT_ELEMENT,*PFILE_SEGMENT_ELEMENT;

    typedef struct _REPARSE_GUID_DATA_BUFFER {
      DWORD ReparseTag;
      WORD ReparseDataLength;
      WORD Reserved;
      GUID ReparseGuid;
      struct {
 BYTE DataBuffer[1];
      } GenericReparseBuffer;
    } REPARSE_GUID_DATA_BUFFER,*PREPARSE_GUID_DATA_BUFFER;
    extern "C" const GUID GUID_MAX_POWER_SAVINGS;
    extern "C" const GUID GUID_MIN_POWER_SAVINGS;
    extern "C" const GUID GUID_TYPICAL_POWER_SAVINGS;
    extern "C" const GUID NO_SUBGROUP_GUID;
    extern "C" const GUID ALL_POWERSCHEMES_GUID;
    extern "C" const GUID GUID_POWERSCHEME_PERSONALITY;
    extern "C" const GUID GUID_ACTIVE_POWERSCHEME;
    extern "C" const GUID GUID_IDLE_RESILIENCY_SUBGROUP;
    extern "C" const GUID GUID_IDLE_RESILIENCY_PERIOD;
    extern "C" const GUID GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
    extern "C" const GUID GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
    extern "C" const GUID GUID_VIDEO_SUBGROUP;
    extern "C" const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;
    extern "C" const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;
    extern "C" const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
    extern "C" const GUID GUID_VIDEO_DIM_TIMEOUT;
    extern "C" const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;
    extern "C" const GUID GUID_MONITOR_POWER_ON;
    extern "C" const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
    extern "C" const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
    extern "C" const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
    extern "C" const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
    extern "C" const GUID GUID_CONSOLE_DISPLAY_STATE;
    extern "C" const GUID GUID_ALLOW_DISPLAY_REQUIRED;
    extern "C" const GUID GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;
    extern "C" const GUID GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;
    extern "C" const GUID GUID_NON_ADAPTIVE_INPUT_TIMEOUT;
    extern "C" const GUID GUID_DISK_SUBGROUP;
    extern "C" const GUID GUID_DISK_POWERDOWN_TIMEOUT;
    extern "C" const GUID GUID_DISK_IDLE_TIMEOUT;
    extern "C" const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;
    extern "C" const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
    extern "C" const GUID GUID_SLEEP_SUBGROUP;
    extern "C" const GUID GUID_SLEEP_IDLE_THRESHOLD;
    extern "C" const GUID GUID_STANDBY_TIMEOUT;
    extern "C" const GUID GUID_UNATTEND_SLEEP_TIMEOUT;
    extern "C" const GUID GUID_HIBERNATE_TIMEOUT;
    extern "C" const GUID GUID_HIBERNATE_FASTS4_POLICY;
    extern "C" const GUID GUID_CRITICAL_POWER_TRANSITION;
    extern "C" const GUID GUID_SYSTEM_AWAYMODE;
    extern "C" const GUID GUID_ALLOW_AWAYMODE;
    extern "C" const GUID GUID_ALLOW_STANDBY_STATES;
    extern "C" const GUID GUID_ALLOW_RTC_WAKE;
    extern "C" const GUID GUID_ALLOW_SYSTEM_REQUIRED;
    extern "C" const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
    extern "C" const GUID GUID_POWERBUTTON_ACTION;
    extern "C" const GUID GUID_SLEEPBUTTON_ACTION;
    extern "C" const GUID GUID_USERINTERFACEBUTTON_ACTION;
    extern "C" const GUID GUID_LIDCLOSE_ACTION;
    extern "C" const GUID GUID_LIDOPEN_POWERSTATE;
    extern "C" const GUID GUID_BATTERY_SUBGROUP;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
    extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
    extern "C" const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;
    extern "C" const GUID GUID_PROCESSOR_THROTTLE_POLICY;
    extern "C" const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;
    extern "C" const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;
    extern "C" const GUID GUID_PROCESSOR_ALLOW_THROTTLING;
    extern "C" const GUID GUID_PROCESSOR_IDLESTATE_POLICY;
    extern "C" const GUID GUID_PROCESSOR_PERFSTATE_POLICY;
    extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;
    extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
    extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
    extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;
    extern "C" const GUID GUID_PROCESSOR_PERF_TIME_CHECK;
    extern "C" const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
    extern "C" const GUID GUID_PROCESSOR_PERF_BOOST_MODE;
    extern "C" const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;
    extern "C" const GUID GUID_PROCESSOR_IDLE_DISABLE;
    extern "C" const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
    extern "C" const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
    extern "C" const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
    extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
    extern "C" const GUID GUID_PROCESSOR_PARKING_PERF_STATE;
    extern "C" const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
    extern "C" const GUID GUID_PROCESSOR_PERF_HISTORY;
    extern "C" const GUID GUID_PROCESSOR_PERF_LATENCY_HINT;
    extern "C" const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY;
    extern "C" const GUID GUID_SYSTEM_COOLING_POLICY;
    extern "C" const GUID GUID_LOCK_CONSOLE_ON_WAKE;
    extern "C" const GUID GUID_DEVICE_IDLE_POLICY;
    extern "C" const GUID GUID_ACDC_POWER_SOURCE;
    extern "C" const GUID GUID_LIDSWITCH_STATE_CHANGE;
    extern "C" const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
    extern "C" const GUID GUID_GLOBAL_USER_PRESENCE;
    extern "C" const GUID GUID_SESSION_DISPLAY_STATUS;
    extern "C" const GUID GUID_SESSION_USER_PRESENCE;
    extern "C" const GUID GUID_IDLE_BACKGROUND_TASK;
    extern "C" const GUID GUID_BACKGROUND_TASK_NOTIFICATION;
    extern "C" const GUID GUID_APPLAUNCH_BUTTON;
    extern "C" const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
    extern "C" const GUID GUID_PCIEXPRESS_ASPM_POLICY;
    extern "C" const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;

  typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,PowerSystemWorking = 1,PowerSystemSleeping1 = 2,PowerSystemSleeping2 = 3,PowerSystemSleeping3 = 4,PowerSystemHibernate = 5,PowerSystemShutdown = 6,PowerSystemMaximum = 7
  } SYSTEM_POWER_STATE,*PSYSTEM_POWER_STATE;



  typedef enum {
    PowerActionNone = 0, PowerActionReserved, PowerActionSleep, PowerActionHibernate,
    PowerActionShutdown, PowerActionShutdownReset, PowerActionShutdownOff,
    PowerActionWarmEject
  } POWER_ACTION,*PPOWER_ACTION;

  typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0, PowerDeviceD0, PowerDeviceD1, PowerDeviceD2, PowerDeviceD3,
    PowerDeviceMaximum
  } DEVICE_POWER_STATE,*PDEVICE_POWER_STATE;

  typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0, PowerMonitorOn, PowerMonitorDim
  } MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

  typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
  } USER_ACTIVITY_PRESENCE,*PUSER_ACTIVITY_PRESENCE;







  typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

  typedef enum {
    LT_DONT_CARE,LT_LOWEST_LATENCY
  } LATENCY_TIME;
  typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
  } POWER_REQUEST_TYPE,*PPOWER_REQUEST_TYPE;
    typedef struct CM_Power_Data_s {
      DWORD PD_Size;
      DEVICE_POWER_STATE PD_MostRecentPowerState;
      DWORD PD_Capabilities;
      DWORD PD_D1Latency;
      DWORD PD_D2Latency;
      DWORD PD_D3Latency;
      DEVICE_POWER_STATE PD_PowerStateMapping[7];
      SYSTEM_POWER_STATE PD_DeepestSystemWake;
    } CM_POWER_DATA,*PCM_POWER_DATA;

    typedef enum {
      SystemPowerPolicyAc,
      SystemPowerPolicyDc,
      VerifySystemPolicyAc,
      VerifySystemPolicyDc,
      SystemPowerCapabilities,
      SystemBatteryState,
      SystemPowerStateHandler,
      ProcessorStateHandler,
      SystemPowerPolicyCurrent,
      AdministratorPowerPolicy,
      SystemReserveHiberFile,
      ProcessorInformation,
      SystemPowerInformation,
      ProcessorStateHandler2,
      LastWakeTime,
      LastSleepTime,
      SystemExecutionState,
      SystemPowerStateNotifyHandler,
      ProcessorPowerPolicyAc,
      ProcessorPowerPolicyDc,
      VerifyProcessorPowerPolicyAc,
      VerifyProcessorPowerPolicyDc,
      ProcessorPowerPolicyCurrent,
      SystemPowerStateLogging,
      SystemPowerLoggingEntry,
      SetPowerSettingValue,
      NotifyUserPowerSetting,
      PowerInformationLevelUnused0,
      SystemMonitorHiberBootPowerOff,
      SystemVideoState,
      TraceApplicationPowerMessage,
      TraceApplicationPowerMessageEnd,
      ProcessorPerfStates,
      ProcessorIdleStates,
      ProcessorCap,
      SystemWakeSource,
      SystemHiberFileInformation,
      TraceServicePowerMessage,
      ProcessorLoad,
      PowerShutdownNotification,
      MonitorCapabilities,
      SessionPowerInit,
      SessionDisplayState,
      PowerRequestCreate,
      PowerRequestAction,
      GetPowerRequestList,
      ProcessorInformationEx,
      NotifyUserModeLegacyPowerEvent,
      GroupPark,
      ProcessorIdleDomains,
      WakeTimerList,
      SystemHiberFileSize,
      ProcessorIdleStatesHv,
      ProcessorPerfStatesHv,
      ProcessorPerfCapHv,
      ProcessorSetIdle,
      LogicalProcessorIdling,
      UserPresence,
      PowerSettingNotificationName,
      GetPowerSettingValue,
      IdleResiliency,
      SessionRITState,
      SessionConnectNotification,
      SessionPowerCleanup,
      SessionLockState,
      SystemHiberbootState,
      PlatformInformation,
      PdcInvocation,
      MonitorInvocation,
      FirmwareTableInformationRegistered,
      SetShutdownSelectedTime,
      SuspendResumeInvocation,
      PlmPowerRequestCreate,
      ScreenOff,
      CsDeviceNotification,
      PlatformRole,
      LastResumePerformance,
      DisplayBurst,
      ExitLatencySamplingPercentage,
      ApplyLowPowerScenarioSettings,
      PowerInformationLevelMaximum
    } POWER_INFORMATION_LEVEL;

    typedef enum {
      UserNotPresent = 0,
      UserPresent = 1,
      UserUnknown = 0xff
    } POWER_USER_PRESENCE_TYPE,*PPOWER_USER_PRESENCE_TYPE;

    typedef struct _POWER_USER_PRESENCE {
      POWER_USER_PRESENCE_TYPE UserPresence;
    } POWER_USER_PRESENCE,*PPOWER_USER_PRESENCE;

    typedef struct _POWER_SESSION_CONNECT {
      BOOLEAN Connected;
      BOOLEAN Console;
    } POWER_SESSION_CONNECT,*PPOWER_SESSION_CONNECT;

    typedef struct _POWER_SESSION_TIMEOUTS {
      DWORD InputTimeout;
      DWORD DisplayTimeout;
    } POWER_SESSION_TIMEOUTS,*PPOWER_SESSION_TIMEOUTS;

    typedef struct _POWER_SESSION_RIT_STATE {
      BOOLEAN Active;
      DWORD LastInputTime;
    } POWER_SESSION_RIT_STATE,*PPOWER_SESSION_RIT_STATE;

    typedef struct _POWER_SESSION_WINLOGON {
      DWORD SessionId;
      BOOLEAN Console;
      BOOLEAN Locked;
    } POWER_SESSION_WINLOGON,*PPOWER_SESSION_WINLOGON;

    typedef struct _POWER_IDLE_RESILIENCY {
      DWORD CoalescingTimeout;
      DWORD IdleResiliencyPeriod;
    } POWER_IDLE_RESILIENCY,*PPOWER_IDLE_RESILIENCY;

    typedef enum {
      MonitorRequestReasonUnknown,
      MonitorRequestReasonPowerButton,
      MonitorRequestReasonRemoteConnection,
      MonitorRequestReasonScMonitorpower,
      MonitorRequestReasonUserInput,
      MonitorRequestReasonAcDcDisplayBurst,
      MonitorRequestReasonUserDisplayBurst,
      MonitorRequestReasonPoSetSystemState,
      MonitorRequestReasonSetThreadExecutionState,
      MonitorRequestReasonFullWake,
      MonitorRequestReasonSessionUnlock,
      MonitorRequestReasonScreenOffRequest,
      MonitorRequestReasonIdleTimeout,
      MonitorRequestReasonPolicyChange,
      MonitorRequestReasonMax
    } POWER_MONITOR_REQUEST_REASON;

    typedef struct _POWER_MONITOR_INVOCATION {
      BOOLEAN On;
      BOOLEAN Console;
      POWER_MONITOR_REQUEST_REASON RequestReason;
    } POWER_MONITOR_INVOCATION,*PPOWER_MONITOR_INVOCATION;

    typedef struct _RESUME_PERFORMANCE {
      DWORD PostTimeMs;
      ULONGLONG TotalResumeTimeMs;
      ULONGLONG ResumeCompleteTimestamp;
    } RESUME_PERFORMANCE,*PRESUME_PERFORMANCE;

    typedef enum {
      PoAc,
      PoDc,
      PoHot,
      PoConditionMaximum
    } SYSTEM_POWER_CONDITION;

    typedef struct {
      DWORD Version;
      GUID Guid;
      SYSTEM_POWER_CONDITION PowerCondition;
      DWORD DataLength;
      BYTE Data[1];
    } SET_POWER_SETTING_VALUE,*PSET_POWER_SETTING_VALUE;



    typedef struct {
      GUID Guid;
    } NOTIFY_USER_POWER_SETTING,*PNOTIFY_USER_POWER_SETTING;

    typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
      LARGE_INTEGER ActivationTime;
      DWORD Flags;
      DWORD ButtonInstanceID;
    } APPLICATIONLAUNCH_SETTING_VALUE,*PAPPLICATIONLAUNCH_SETTING_VALUE;

    typedef enum _POWER_PLATFORM_ROLE {
      PlatformRoleUnspecified = 0,
      PlatformRoleDesktop,
      PlatformRoleMobile,
      PlatformRoleWorkstation,
      PlatformRoleEnterpriseServer,
      PlatformRoleSOHOServer,
      PlatformRoleAppliancePC,
      PlatformRolePerformanceServer,
      PlatformRoleSlate,
      PlatformRoleMaximum
    } POWER_PLATFORM_ROLE,*PPOWER_PLATFORM_ROLE;

    typedef struct _POWER_PLATFORM_INFORMATION {
      BOOLEAN AoAc;
    } POWER_PLATFORM_INFORMATION,*PPOWER_PLATFORM_INFORMATION;
    typedef struct {
      DWORD Granularity;
      DWORD Capacity;
    } BATTERY_REPORTING_SCALE,*PBATTERY_REPORTING_SCALE;

    typedef struct {
      DWORD Frequency;
      DWORD Flags;
      DWORD PercentFrequency;
    } PPM_WMI_LEGACY_PERFSTATE,*PPPM_WMI_LEGACY_PERFSTATE;

    typedef struct {
      DWORD Latency;
      DWORD Power;
      DWORD TimeCheck;
      BYTE PromotePercent;
      BYTE DemotePercent;
      BYTE StateType;
      BYTE Reserved;
      DWORD StateFlags;
      DWORD Context;
      DWORD IdleHandler;
      DWORD Reserved1;
    } PPM_WMI_IDLE_STATE,*PPPM_WMI_IDLE_STATE;

    typedef struct {
      DWORD Type;
      DWORD Count;
      DWORD TargetState;
      DWORD OldState;
      DWORD64 TargetProcessors;
      PPM_WMI_IDLE_STATE State[1];
    } PPM_WMI_IDLE_STATES,*PPPM_WMI_IDLE_STATES;

    typedef struct {
      DWORD Type;
      DWORD Count;
      DWORD TargetState;
      DWORD OldState;
      PVOID TargetProcessors;
      PPM_WMI_IDLE_STATE State[1];
    } PPM_WMI_IDLE_STATES_EX,*PPPM_WMI_IDLE_STATES_EX;

    typedef struct {
      DWORD Frequency;
      DWORD Power;
      BYTE PercentFrequency;
      BYTE IncreaseLevel;
      BYTE DecreaseLevel;
      BYTE Type;
      DWORD IncreaseTime;
      DWORD DecreaseTime;
      DWORD64 Control;
      DWORD64 Status;
      DWORD HitCount;
      DWORD Reserved1;
      DWORD64 Reserved2;
      DWORD64 Reserved3;
    } PPM_WMI_PERF_STATE,*PPPM_WMI_PERF_STATE;

    typedef struct {
      DWORD Count;
      DWORD MaxFrequency;
      DWORD CurrentState;
      DWORD MaxPerfState;
      DWORD MinPerfState;
      DWORD LowestPerfState;
      DWORD ThermalConstraint;
      BYTE BusyAdjThreshold;
      BYTE PolicyType;
      BYTE Type;
      BYTE Reserved;
      DWORD TimerInterval;
      DWORD64 TargetProcessors;
      DWORD PStateHandler;
      DWORD PStateContext;
      DWORD TStateHandler;
      DWORD TStateContext;
      DWORD FeedbackHandler;
      DWORD Reserved1;
      DWORD64 Reserved2;
      PPM_WMI_PERF_STATE State[1];
    } PPM_WMI_PERF_STATES,*PPPM_WMI_PERF_STATES;

    typedef struct {
      DWORD Count;
      DWORD MaxFrequency;
      DWORD CurrentState;
      DWORD MaxPerfState;
      DWORD MinPerfState;
      DWORD LowestPerfState;
      DWORD ThermalConstraint;
      BYTE BusyAdjThreshold;
      BYTE PolicyType;
      BYTE Type;
      BYTE Reserved;
      DWORD TimerInterval;
      PVOID TargetProcessors;
      DWORD PStateHandler;
      DWORD PStateContext;
      DWORD TStateHandler;
      DWORD TStateContext;
      DWORD FeedbackHandler;
      DWORD Reserved1;
      DWORD64 Reserved2;
      PPM_WMI_PERF_STATE State[1];
    } PPM_WMI_PERF_STATES_EX,*PPPM_WMI_PERF_STATES_EX;




    typedef struct {
      DWORD IdleTransitions;
      DWORD FailedTransitions;
      DWORD InvalidBucketIndex;
      DWORD64 TotalTime;
      DWORD IdleTimeBuckets[6];
    } PPM_IDLE_STATE_ACCOUNTING,*PPPM_IDLE_STATE_ACCOUNTING;

    typedef struct {
      DWORD StateCount;
      DWORD TotalTransitions;
      DWORD ResetCount;
      DWORD64 StartTime;
      PPM_IDLE_STATE_ACCOUNTING State[1];
    } PPM_IDLE_ACCOUNTING,*PPPM_IDLE_ACCOUNTING;

    typedef struct {
      DWORD64 TotalTimeUs;
      DWORD MinTimeUs;
      DWORD MaxTimeUs;
      DWORD Count;
    } PPM_IDLE_STATE_BUCKET_EX,*PPPM_IDLE_STATE_BUCKET_EX;

    typedef struct {
      DWORD64 TotalTime;
      DWORD IdleTransitions;
      DWORD FailedTransitions;
      DWORD InvalidBucketIndex;
      DWORD MinTimeUs;
      DWORD MaxTimeUs;
      DWORD CancelledTransitions;
      PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
    } PPM_IDLE_STATE_ACCOUNTING_EX,*PPPM_IDLE_STATE_ACCOUNTING_EX;

    typedef struct {
      DWORD StateCount;
      DWORD TotalTransitions;
      DWORD ResetCount;
      DWORD AbortCount;
      DWORD64 StartTime;
      PPM_IDLE_STATE_ACCOUNTING_EX State[1];
    } PPM_IDLE_ACCOUNTING_EX,*PPPM_IDLE_ACCOUNTING_EX;
    typedef struct {
      DWORD State;
      DWORD Status;
      DWORD Latency;
      DWORD Speed;
      DWORD Processor;
    } PPM_PERFSTATE_EVENT,*PPPM_PERFSTATE_EVENT;

    typedef struct {
      DWORD State;
      DWORD Latency;
      DWORD Speed;
      DWORD64 Processors;
    } PPM_PERFSTATE_DOMAIN_EVENT,*PPPM_PERFSTATE_DOMAIN_EVENT;

    typedef struct {
      DWORD NewState;
      DWORD OldState;
      DWORD64 Processors;
    } PPM_IDLESTATE_EVENT,*PPPM_IDLESTATE_EVENT;

    typedef struct {
      DWORD ThermalConstraint;
      DWORD64 Processors;
    } PPM_THERMALCHANGE_EVENT,*PPPM_THERMALCHANGE_EVENT;
    typedef struct {
      BYTE Mode;
      DWORD64 Processors;
    } PPM_THERMAL_POLICY_EVENT,*PPPM_THERMAL_POLICY_EVENT;

    extern "C" const GUID PPM_PERFSTATE_CHANGE_GUID;
    extern "C" const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
    extern "C" const GUID PPM_IDLESTATE_CHANGE_GUID;
    extern "C" const GUID PPM_PERFSTATES_DATA_GUID;
    extern "C" const GUID PPM_IDLESTATES_DATA_GUID;
    extern "C" const GUID PPM_IDLE_ACCOUNTING_GUID;
    extern "C" const GUID PPM_IDLE_ACCOUNTING_EX_GUID;
    extern "C" const GUID PPM_THERMALCONSTRAINT_GUID;
    extern "C" const GUID PPM_PERFMON_PERFSTATE_GUID;
    extern "C" const GUID PPM_THERMAL_POLICY_CHANGE_GUID;

    typedef struct {
      POWER_ACTION Action;
      DWORD Flags;
      DWORD EventCode;
    } POWER_ACTION_POLICY,*PPOWER_ACTION_POLICY;
    typedef struct {
      DWORD TimeCheck;
      BYTE DemotePercent;
      BYTE PromotePercent;
      BYTE Spare[2];
    } PROCESSOR_IDLESTATE_INFO,*PPROCESSOR_IDLESTATE_INFO;

    typedef struct {
      BOOLEAN Enable;
      BYTE Spare[3];
      DWORD BatteryLevel;
      POWER_ACTION_POLICY PowerPolicy;
      SYSTEM_POWER_STATE MinSystemState;
    } SYSTEM_POWER_LEVEL,*PSYSTEM_POWER_LEVEL;

    typedef struct _SYSTEM_POWER_POLICY {
      DWORD Revision;
      POWER_ACTION_POLICY PowerButton;
      POWER_ACTION_POLICY SleepButton;
      POWER_ACTION_POLICY LidClose;
      SYSTEM_POWER_STATE LidOpenWake;
      DWORD Reserved;
      POWER_ACTION_POLICY Idle;
      DWORD IdleTimeout;
      BYTE IdleSensitivity;
      BYTE DynamicThrottle;
      BYTE Spare2[2];
      SYSTEM_POWER_STATE MinSleep;
      SYSTEM_POWER_STATE MaxSleep;
      SYSTEM_POWER_STATE ReducedLatencySleep;
      DWORD WinLogonFlags;
      DWORD Spare3;
      DWORD DozeS4Timeout;
      DWORD BroadcastCapacityResolution;
      SYSTEM_POWER_LEVEL DischargePolicy[4];
      DWORD VideoTimeout;
      BOOLEAN VideoDimDisplay;
      DWORD VideoReserved[3];
      DWORD SpindownTimeout;
      BOOLEAN OptimizeForPower;
      BYTE FanThrottleTolerance;
      BYTE ForcedThrottle;
      BYTE MinThrottle;
      POWER_ACTION_POLICY OverThrottled;
    } SYSTEM_POWER_POLICY,*PSYSTEM_POWER_POLICY;







    typedef struct {
      WORD Revision;
      union {
 WORD AsWORD;
 __extension__ struct {
   WORD AllowScaling : 1;
   WORD Disabled : 1;
   WORD Reserved : 14;
 } ;
      } Flags;
      DWORD PolicyCount;
      PROCESSOR_IDLESTATE_INFO Policy[0x3];
    } PROCESSOR_IDLESTATE_POLICY,*PPROCESSOR_IDLESTATE_POLICY;

    typedef struct _PROCESSOR_POWER_POLICY_INFO {
      DWORD TimeCheck;
      DWORD DemoteLimit;
      DWORD PromoteLimit;
      BYTE DemotePercent;
      BYTE PromotePercent;
      BYTE Spare[2];
      DWORD AllowDemotion:1;
      DWORD AllowPromotion:1;
      DWORD Reserved:30;
    } PROCESSOR_POWER_POLICY_INFO,*PPROCESSOR_POWER_POLICY_INFO;

    typedef struct _PROCESSOR_POWER_POLICY {
      DWORD Revision;
      BYTE DynamicThrottle;
      BYTE Spare[3];
      DWORD DisableCStates:1;
      DWORD Reserved:31;
      DWORD PolicyCount;
      PROCESSOR_POWER_POLICY_INFO Policy[3];
    } PROCESSOR_POWER_POLICY,*PPROCESSOR_POWER_POLICY;

    typedef struct {
      DWORD Revision;
      BYTE MaxThrottle;
      BYTE MinThrottle;
      BYTE BusyAdjThreshold;
      __extension__ union {
 BYTE Spare;
 union {
   BYTE AsBYTE;
   __extension__ struct {
     BYTE NoDomainAccounting : 1;
     BYTE IncreasePolicy: 2;
     BYTE DecreasePolicy: 2;
     BYTE Reserved : 3;
   } ;
 } Flags;
      } ;
      DWORD TimeCheck;
      DWORD IncreaseTime;
      DWORD DecreaseTime;
      DWORD IncreasePercent;
      DWORD DecreasePercent;
    } PROCESSOR_PERFSTATE_POLICY,*PPROCESSOR_PERFSTATE_POLICY;

    typedef struct _ADMINISTRATOR_POWER_POLICY {
      SYSTEM_POWER_STATE MinSleep;
      SYSTEM_POWER_STATE MaxSleep;
      DWORD MinVideoTimeout;
      DWORD MaxVideoTimeout;
      DWORD MinSpindownTimeout;
      DWORD MaxSpindownTimeout;
    } ADMINISTRATOR_POWER_POLICY,*PADMINISTRATOR_POWER_POLICY;

    typedef struct {
      BOOLEAN PowerButtonPresent;
      BOOLEAN SleepButtonPresent;
      BOOLEAN LidPresent;
      BOOLEAN SystemS1;
      BOOLEAN SystemS2;
      BOOLEAN SystemS3;
      BOOLEAN SystemS4;
      BOOLEAN SystemS5;
      BOOLEAN HiberFilePresent;
      BOOLEAN FullWake;
      BOOLEAN VideoDimPresent;
      BOOLEAN ApmPresent;
      BOOLEAN UpsPresent;
      BOOLEAN ThermalControl;
      BOOLEAN ProcessorThrottle;
      BYTE ProcessorMinThrottle;
      BYTE ProcessorMaxThrottle;
      BOOLEAN FastSystemS4;
      BYTE spare2[3];
      BOOLEAN DiskSpinDown;
      BYTE spare3[8];
      BOOLEAN SystemBatteriesPresent;
      BOOLEAN BatteriesAreShortTerm;
      BATTERY_REPORTING_SCALE BatteryScale[3];
      SYSTEM_POWER_STATE AcOnLineWake;
      SYSTEM_POWER_STATE SoftLidWake;
      SYSTEM_POWER_STATE RtcWake;
      SYSTEM_POWER_STATE MinDeviceWakeState;
      SYSTEM_POWER_STATE DefaultLowLatencyWake;
    } SYSTEM_POWER_CAPABILITIES,*PSYSTEM_POWER_CAPABILITIES;

    typedef struct {
      BOOLEAN AcOnLine;
      BOOLEAN BatteryPresent;
      BOOLEAN Charging;
      BOOLEAN Discharging;
      BOOLEAN Spare1[4];
      DWORD MaxCapacity;
      DWORD RemainingCapacity;
      DWORD Rate;
      DWORD EstimatedTime;
      DWORD DefaultAlert1;
      DWORD DefaultAlert2;
    } SYSTEM_BATTERY_STATE,*PSYSTEM_BATTERY_STATE;
#pragma pack(push,4)
#pragma pack(push,2)


 typedef struct _IMAGE_DOS_HEADER {
      WORD e_magic;
      WORD e_cblp;
      WORD e_cp;
      WORD e_crlc;
      WORD e_cparhdr;
      WORD e_minalloc;
      WORD e_maxalloc;
      WORD e_ss;
      WORD e_sp;
      WORD e_csum;
      WORD e_ip;
      WORD e_cs;
      WORD e_lfarlc;
      WORD e_ovno;
      WORD e_res[4];
      WORD e_oemid;
      WORD e_oeminfo;
      WORD e_res2[10];
      LONG e_lfanew;
    } IMAGE_DOS_HEADER,*PIMAGE_DOS_HEADER;

    typedef struct _IMAGE_OS2_HEADER {
      WORD ne_magic;
      CHAR ne_ver;
      CHAR ne_rev;
      WORD ne_enttab;
      WORD ne_cbenttab;
      LONG ne_crc;
      WORD ne_flags;
      WORD ne_autodata;
      WORD ne_heap;
      WORD ne_stack;
      LONG ne_csip;
      LONG ne_sssp;
      WORD ne_cseg;
      WORD ne_cmod;
      WORD ne_cbnrestab;
      WORD ne_segtab;
      WORD ne_rsrctab;
      WORD ne_restab;
      WORD ne_modtab;
      WORD ne_imptab;
      LONG ne_nrestab;
      WORD ne_cmovent;
      WORD ne_align;
      WORD ne_cres;
      BYTE ne_exetyp;
      BYTE ne_flagsothers;
      WORD ne_pretthunks;
      WORD ne_psegrefbytes;
      WORD ne_swaparea;
      WORD ne_expver;
    } IMAGE_OS2_HEADER,*PIMAGE_OS2_HEADER;

    typedef struct _IMAGE_VXD_HEADER {
      WORD e32_magic;
      BYTE e32_border;
      BYTE e32_worder;
      DWORD e32_level;
      WORD e32_cpu;
      WORD e32_os;
      DWORD e32_ver;
      DWORD e32_mflags;
      DWORD e32_mpages;
      DWORD e32_startobj;
      DWORD e32_eip;
      DWORD e32_stackobj;
      DWORD e32_esp;
      DWORD e32_pagesize;
      DWORD e32_lastpagesize;
      DWORD e32_fixupsize;
      DWORD e32_fixupsum;
      DWORD e32_ldrsize;
      DWORD e32_ldrsum;
      DWORD e32_objtab;
      DWORD e32_objcnt;
      DWORD e32_objmap;
      DWORD e32_itermap;
      DWORD e32_rsrctab;
      DWORD e32_rsrccnt;
      DWORD e32_restab;
      DWORD e32_enttab;
      DWORD e32_dirtab;
      DWORD e32_dircnt;
      DWORD e32_fpagetab;
      DWORD e32_frectab;
      DWORD e32_impmod;
      DWORD e32_impmodcnt;
      DWORD e32_impproc;
      DWORD e32_pagesum;
      DWORD e32_datapage;
      DWORD e32_preload;
      DWORD e32_nrestab;
      DWORD e32_cbnrestab;
      DWORD e32_nressum;
      DWORD e32_autodata;
      DWORD e32_debuginfo;
      DWORD e32_debuglen;
      DWORD e32_instpreload;
      DWORD e32_instdemand;
      DWORD e32_heapsize;
      BYTE e32_res3[12];
      DWORD e32_winresoff;
      DWORD e32_winreslen;
      WORD e32_devid;
      WORD e32_ddkver;
    } IMAGE_VXD_HEADER,*PIMAGE_VXD_HEADER;
#pragma pack(pop)


 typedef struct _IMAGE_FILE_HEADER {
      WORD Machine;
      WORD NumberOfSections;
      DWORD TimeDateStamp;
      DWORD PointerToSymbolTable;
      DWORD NumberOfSymbols;
      WORD SizeOfOptionalHeader;
      WORD Characteristics;
    } IMAGE_FILE_HEADER,*PIMAGE_FILE_HEADER;
    typedef struct _IMAGE_DATA_DIRECTORY {
      DWORD VirtualAddress;
      DWORD Size;
    } IMAGE_DATA_DIRECTORY,*PIMAGE_DATA_DIRECTORY;



    typedef struct _IMAGE_OPTIONAL_HEADER {

      WORD Magic;
      BYTE MajorLinkerVersion;
      BYTE MinorLinkerVersion;
      DWORD SizeOfCode;
      DWORD SizeOfInitializedData;
      DWORD SizeOfUninitializedData;
      DWORD AddressOfEntryPoint;
      DWORD BaseOfCode;
      DWORD BaseOfData;
      DWORD ImageBase;
      DWORD SectionAlignment;
      DWORD FileAlignment;
      WORD MajorOperatingSystemVersion;
      WORD MinorOperatingSystemVersion;
      WORD MajorImageVersion;
      WORD MinorImageVersion;
      WORD MajorSubsystemVersion;
      WORD MinorSubsystemVersion;
      DWORD Win32VersionValue;
      DWORD SizeOfImage;
      DWORD SizeOfHeaders;
      DWORD CheckSum;
      WORD Subsystem;
      WORD DllCharacteristics;
      DWORD SizeOfStackReserve;
      DWORD SizeOfStackCommit;
      DWORD SizeOfHeapReserve;
      DWORD SizeOfHeapCommit;
      DWORD LoaderFlags;
      DWORD NumberOfRvaAndSizes;
      IMAGE_DATA_DIRECTORY DataDirectory[16];
    } IMAGE_OPTIONAL_HEADER32,*PIMAGE_OPTIONAL_HEADER32;

    typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
      WORD Magic;
      BYTE MajorLinkerVersion;
      BYTE MinorLinkerVersion;
      DWORD SizeOfCode;
      DWORD SizeOfInitializedData;
      DWORD SizeOfUninitializedData;
      DWORD AddressOfEntryPoint;
      DWORD BaseOfCode;
      DWORD BaseOfData;
      DWORD BaseOfBss;
      DWORD GprMask;
      DWORD CprMask[4];
      DWORD GpValue;
    } IMAGE_ROM_OPTIONAL_HEADER,*PIMAGE_ROM_OPTIONAL_HEADER;

    typedef struct _IMAGE_OPTIONAL_HEADER64 {
      WORD Magic;
      BYTE MajorLinkerVersion;
      BYTE MinorLinkerVersion;
      DWORD SizeOfCode;
      DWORD SizeOfInitializedData;
      DWORD SizeOfUninitializedData;
      DWORD AddressOfEntryPoint;
      DWORD BaseOfCode;
      ULONGLONG ImageBase;
      DWORD SectionAlignment;
      DWORD FileAlignment;
      WORD MajorOperatingSystemVersion;
      WORD MinorOperatingSystemVersion;
      WORD MajorImageVersion;
      WORD MinorImageVersion;
      WORD MajorSubsystemVersion;
      WORD MinorSubsystemVersion;
      DWORD Win32VersionValue;
      DWORD SizeOfImage;
      DWORD SizeOfHeaders;
      DWORD CheckSum;
      WORD Subsystem;
      WORD DllCharacteristics;
      ULONGLONG SizeOfStackReserve;
      ULONGLONG SizeOfStackCommit;
      ULONGLONG SizeOfHeapReserve;
      ULONGLONG SizeOfHeapCommit;
      DWORD LoaderFlags;
      DWORD NumberOfRvaAndSizes;
      IMAGE_DATA_DIRECTORY DataDirectory[16];
    } IMAGE_OPTIONAL_HEADER64,*PIMAGE_OPTIONAL_HEADER64;
    typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
    typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;




    typedef struct _IMAGE_NT_HEADERS64 {
      DWORD Signature;
      IMAGE_FILE_HEADER FileHeader;
      IMAGE_OPTIONAL_HEADER64 OptionalHeader;
    } IMAGE_NT_HEADERS64,*PIMAGE_NT_HEADERS64;

    typedef struct _IMAGE_NT_HEADERS {
      DWORD Signature;
      IMAGE_FILE_HEADER FileHeader;
      IMAGE_OPTIONAL_HEADER32 OptionalHeader;
    } IMAGE_NT_HEADERS32,*PIMAGE_NT_HEADERS32;

    typedef struct _IMAGE_ROM_HEADERS {
      IMAGE_FILE_HEADER FileHeader;
      IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
    } IMAGE_ROM_HEADERS,*PIMAGE_ROM_HEADERS;





    typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
    typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
    typedef struct ANON_OBJECT_HEADER {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      CLSID ClassID;
      DWORD SizeOfData;
    } ANON_OBJECT_HEADER;

    typedef struct ANON_OBJECT_HEADER_V2 {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      CLSID ClassID;
      DWORD SizeOfData;
      DWORD Flags;
      DWORD MetaDataSize;
      DWORD MetaDataOffset;
    } ANON_OBJECT_HEADER_V2;

    typedef struct ANON_OBJECT_HEADER_BIGOBJ {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      CLSID ClassID;
      DWORD SizeOfData;
      DWORD Flags;
      DWORD MetaDataSize;
      DWORD MetaDataOffset;
      DWORD NumberOfSections;
      DWORD PointerToSymbolTable;
      DWORD NumberOfSymbols;
    } ANON_OBJECT_HEADER_BIGOBJ;



    typedef struct _IMAGE_SECTION_HEADER {
      BYTE Name[8];
      union {
 DWORD PhysicalAddress;
 DWORD VirtualSize;
      } Misc;
      DWORD VirtualAddress;
      DWORD SizeOfRawData;
      DWORD PointerToRawData;
      DWORD PointerToRelocations;
      DWORD PointerToLinenumbers;
      WORD NumberOfRelocations;
      WORD NumberOfLinenumbers;
      DWORD Characteristics;
    } IMAGE_SECTION_HEADER,*PIMAGE_SECTION_HEADER;
#pragma pack(push,2)

 typedef struct _IMAGE_SYMBOL {
      union {
 BYTE ShortName[8];
 struct {
   DWORD Short;
   DWORD Long;
 } Name;
 DWORD LongName[2];
      } N;
      DWORD Value;
      SHORT SectionNumber;
      WORD Type;
      BYTE StorageClass;
      BYTE NumberOfAuxSymbols;
    } IMAGE_SYMBOL;
    typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;



    typedef struct _IMAGE_SYMBOL_EX {
      union {
 BYTE ShortName[8];
 struct {
   DWORD Short;
   DWORD Long;
 } Name;
 DWORD LongName[2];
      } N;
      DWORD Value;
      LONG SectionNumber;
      WORD Type;
      BYTE StorageClass;
      BYTE NumberOfAuxSymbols;
    } IMAGE_SYMBOL_EX, *PIMAGE_SYMBOL_EX;
#pragma pack(push,2)

 typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
      BYTE bAuxType;
      BYTE bReserved;
      DWORD SymbolTableIndex;
      BYTE rgbReserved[12];
    } IMAGE_AUX_SYMBOL_TOKEN_DEF, *PIMAGE_AUX_SYMBOL_TOKEN_DEF;
#pragma pack(pop)


 typedef union _IMAGE_AUX_SYMBOL {
      struct {
 DWORD TagIndex;
 union {
   struct {
     WORD Linenumber;
     WORD Size;
   } LnSz;
   DWORD TotalSize;
 } Misc;
 union {
   struct {
     DWORD PointerToLinenumber;
     DWORD PointerToNextFunction;
   } Function;
   struct {
     WORD Dimension[4];
   } Array;
 } FcnAry;
 WORD TvIndex;
      } Sym;
      struct {
 BYTE Name[18];
      } File;
      struct {
 DWORD Length;
 WORD NumberOfRelocations;
 WORD NumberOfLinenumbers;
 DWORD CheckSum;
 SHORT Number;
 BYTE Selection;
      } Section;
      IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
      struct {
 DWORD crc;
 BYTE rgbReserved[14];
      } CRC;
    } IMAGE_AUX_SYMBOL, *PIMAGE_AUX_SYMBOL;

    typedef union _IMAGE_AUX_SYMBOL_EX {
      struct {
 DWORD WeakDefaultSymIndex;
 DWORD WeakSearchType;
 BYTE rgbReserved[12];
      } Sym;
      struct {
 BYTE Name[sizeof (IMAGE_SYMBOL_EX)];
      } File;
      struct {
 DWORD Length;
 WORD NumberOfRelocations;
 WORD NumberOfLinenumbers;
 DWORD CheckSum;
 SHORT Number;
 BYTE Selection;
 BYTE bReserved;
 SHORT HighNumber;
 BYTE rgbReserved[2];
      } Section;
      __extension__ struct {
 IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
 BYTE rgbReserved[2];
      };
      struct {
 DWORD crc;
 BYTE rgbReserved[16];
      } CRC;
    } IMAGE_AUX_SYMBOL_EX, *PIMAGE_AUX_SYMBOL_EX;



    typedef enum IMAGE_AUX_SYMBOL_TYPE {
      IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
    } IMAGE_AUX_SYMBOL_TYPE;
    typedef struct _IMAGE_RELOCATION {
      __extension__ union {
 DWORD VirtualAddress;
 DWORD RelocCount;
      } ;
      DWORD SymbolTableIndex;
      WORD Type;
    } IMAGE_RELOCATION;
    typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
    typedef struct _IMAGE_LINENUMBER {
      union {
 DWORD SymbolTableIndex;
 DWORD VirtualAddress;
      } Type;
      WORD Linenumber;
    } IMAGE_LINENUMBER;
    typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;
#pragma pack(pop)


 typedef struct _IMAGE_BASE_RELOCATION {
      DWORD VirtualAddress;
      DWORD SizeOfBlock;
    } IMAGE_BASE_RELOCATION;
    typedef IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;
    typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
      BYTE Name[16];
      BYTE Date[12];
      BYTE UserID[6];
      BYTE GroupID[6];
      BYTE Mode[8];
      BYTE Size[10];
      BYTE EndHeader[2];
    } IMAGE_ARCHIVE_MEMBER_HEADER,*PIMAGE_ARCHIVE_MEMBER_HEADER;



    typedef struct _IMAGE_EXPORT_DIRECTORY {
      DWORD Characteristics;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD Name;
      DWORD Base;
      DWORD NumberOfFunctions;
      DWORD NumberOfNames;
      DWORD AddressOfFunctions;
      DWORD AddressOfNames;
      DWORD AddressOfNameOrdinals;
    } IMAGE_EXPORT_DIRECTORY,*PIMAGE_EXPORT_DIRECTORY;

    typedef struct _IMAGE_IMPORT_BY_NAME {
      WORD Hint;
      BYTE Name[1];
    } IMAGE_IMPORT_BY_NAME,*PIMAGE_IMPORT_BY_NAME;
#pragma pack(push,8)


 typedef struct _IMAGE_THUNK_DATA64 {
      union {
 ULONGLONG ForwarderString;
 ULONGLONG Function;
 ULONGLONG Ordinal;
 ULONGLONG AddressOfData;
      } u1;
    } IMAGE_THUNK_DATA64;
    typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;
#pragma pack(pop)


 typedef struct _IMAGE_THUNK_DATA32 {
      union {
 DWORD ForwarderString;
 DWORD Function;
 DWORD Ordinal;
 DWORD AddressOfData;
      } u1;
    } IMAGE_THUNK_DATA32;
    typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;
    typedef void (__attribute__((__stdcall__)) *PIMAGE_TLS_CALLBACK)(PVOID DllHandle,DWORD Reason,PVOID Reserved);

    typedef struct _IMAGE_TLS_DIRECTORY64 {
      ULONGLONG StartAddressOfRawData;
      ULONGLONG EndAddressOfRawData;
      ULONGLONG AddressOfIndex;
      ULONGLONG AddressOfCallBacks;
      DWORD SizeOfZeroFill;
      DWORD Characteristics;
    } IMAGE_TLS_DIRECTORY64;
    typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;

    typedef struct _IMAGE_TLS_DIRECTORY32 {
      DWORD StartAddressOfRawData;
      DWORD EndAddressOfRawData;
      DWORD AddressOfIndex;
      DWORD AddressOfCallBacks;
      DWORD SizeOfZeroFill;
      DWORD Characteristics;
    } IMAGE_TLS_DIRECTORY32;
    typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;
    typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
    typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;

    typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
    typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;


    typedef struct _IMAGE_IMPORT_DESCRIPTOR {
      __extension__ union {
 DWORD Characteristics;
 DWORD OriginalFirstThunk;
      } ;
      DWORD TimeDateStamp;

      DWORD ForwarderChain;
      DWORD Name;
      DWORD FirstThunk;
    } IMAGE_IMPORT_DESCRIPTOR;
    typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;

    typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
      DWORD TimeDateStamp;
      WORD OffsetModuleName;
      WORD NumberOfModuleForwarderRefs;
    } IMAGE_BOUND_IMPORT_DESCRIPTOR,*PIMAGE_BOUND_IMPORT_DESCRIPTOR;

    typedef struct _IMAGE_BOUND_FORWARDER_REF {
      DWORD TimeDateStamp;
      WORD OffsetModuleName;
      WORD Reserved;
    } IMAGE_BOUND_FORWARDER_REF,*PIMAGE_BOUND_FORWARDER_REF;

    typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
      union {
 DWORD AllAttributes;
 __extension__ struct {
   DWORD RvaBased : 1;
   DWORD ReservedAttributes : 31;
 };
      } Attributes;
      DWORD DllNameRVA;
      DWORD ModuleHandleRVA;
      DWORD ImportAddressTableRVA;
      DWORD ImportNameTableRVA;
      DWORD BoundImportAddressTableRVA;
      DWORD UnloadInformationTableRVA;
      DWORD TimeDateStamp;
    } IMAGE_DELAYLOAD_DESCRIPTOR,*PIMAGE_DELAYLOAD_DESCRIPTOR;
    typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;

    typedef struct _IMAGE_RESOURCE_DIRECTORY {
      DWORD Characteristics;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      WORD NumberOfNamedEntries;
      WORD NumberOfIdEntries;
    } IMAGE_RESOURCE_DIRECTORY,*PIMAGE_RESOURCE_DIRECTORY;




    typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
      __extension__ union {
 __extension__ struct {
   DWORD NameOffset:31;
   DWORD NameIsString:1;
 } ;
 DWORD Name;
 WORD Id;
      } ;
      __extension__ union {
 DWORD OffsetToData;
 __extension__ struct {
   DWORD OffsetToDirectory:31;
   DWORD DataIsDirectory:1;
 } ;
      } ;
    } IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;

    typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
      WORD Length;
      CHAR NameString[1];
    } IMAGE_RESOURCE_DIRECTORY_STRING,*PIMAGE_RESOURCE_DIRECTORY_STRING;

    typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
      WORD Length;
      WCHAR NameString[1];
    } IMAGE_RESOURCE_DIR_STRING_U,*PIMAGE_RESOURCE_DIR_STRING_U;

    typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
      DWORD OffsetToData;
      DWORD Size;
      DWORD CodePage;
      DWORD Reserved;
    } IMAGE_RESOURCE_DATA_ENTRY,*PIMAGE_RESOURCE_DATA_ENTRY;

    typedef struct {
      DWORD Size;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD GlobalFlagsClear;
      DWORD GlobalFlagsSet;
      DWORD CriticalSectionDefaultTimeout;
      DWORD DeCommitFreeBlockThreshold;
      DWORD DeCommitTotalFreeThreshold;
      DWORD LockPrefixTable;
      DWORD MaximumAllocationSize;
      DWORD VirtualMemoryThreshold;
      DWORD ProcessHeapFlags;
      DWORD ProcessAffinityMask;
      WORD CSDVersion;
      WORD Reserved1;
      DWORD EditList;
      DWORD SecurityCookie;
      DWORD SEHandlerTable;
      DWORD SEHandlerCount;
    } IMAGE_LOAD_CONFIG_DIRECTORY32,*PIMAGE_LOAD_CONFIG_DIRECTORY32;

    typedef struct {
      DWORD Size;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD GlobalFlagsClear;
      DWORD GlobalFlagsSet;
      DWORD CriticalSectionDefaultTimeout;
      ULONGLONG DeCommitFreeBlockThreshold;
      ULONGLONG DeCommitTotalFreeThreshold;
      ULONGLONG LockPrefixTable;
      ULONGLONG MaximumAllocationSize;
      ULONGLONG VirtualMemoryThreshold;
      ULONGLONG ProcessAffinityMask;
      DWORD ProcessHeapFlags;
      WORD CSDVersion;
      WORD Reserved1;
      ULONGLONG EditList;
      ULONGLONG SecurityCookie;
      ULONGLONG SEHandlerTable;
      ULONGLONG SEHandlerCount;
    } IMAGE_LOAD_CONFIG_DIRECTORY64,*PIMAGE_LOAD_CONFIG_DIRECTORY64;





    typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
    typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;


    typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
      DWORD FuncStart;
      DWORD PrologLen : 8;
      DWORD FuncLen : 22;
      DWORD ThirtyTwoBit : 1;
      DWORD ExceptionFlag : 1;
    } IMAGE_CE_RUNTIME_FUNCTION_ENTRY,*PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
      ULONGLONG BeginAddress;
      ULONGLONG EndAddress;
      ULONGLONG ExceptionHandler;
      ULONGLONG HandlerData;
      ULONGLONG PrologEndAddress;
    } IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
      DWORD BeginAddress;
      DWORD EndAddress;
      DWORD ExceptionHandler;
      DWORD HandlerData;
      DWORD PrologEndAddress;
    } IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
      DWORD BeginAddress;
      __extension__ union {
 DWORD UnwindData;
 __extension__ struct {
   DWORD Flag : 2;
   DWORD FunctionLength : 11;
   DWORD Ret : 2;
   DWORD H : 1;
   DWORD Reg : 3;
   DWORD R : 1;
   DWORD L : 1;
   DWORD C : 1;
   DWORD StackAdjust : 10;
 } ;
      } ;
    } IMAGE_ARM_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

    typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
      DWORD BeginAddress;
      DWORD EndAddress;
      __extension__ union {
 DWORD UnwindInfoAddress;
 DWORD UnwindData;
      } ;
    } _IMAGE_RUNTIME_FUNCTION_ENTRY,*_PIMAGE_RUNTIME_FUNCTION_ENTRY;

    typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
    typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
    typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
    typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;


    typedef struct _IMAGE_DEBUG_DIRECTORY {
      DWORD Characteristics;
      DWORD TimeDateStamp;
      WORD MajorVersion;
      WORD MinorVersion;
      DWORD Type;
      DWORD SizeOfData;
      DWORD AddressOfRawData;
      DWORD PointerToRawData;
    } IMAGE_DEBUG_DIRECTORY,*PIMAGE_DEBUG_DIRECTORY;
    typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
      DWORD NumberOfSymbols;
      DWORD LvaToFirstSymbol;
      DWORD NumberOfLinenumbers;
      DWORD LvaToFirstLinenumber;
      DWORD RvaToFirstByteOfCode;
      DWORD RvaToLastByteOfCode;
      DWORD RvaToFirstByteOfData;
      DWORD RvaToLastByteOfData;
    } IMAGE_COFF_SYMBOLS_HEADER,*PIMAGE_COFF_SYMBOLS_HEADER;






    typedef struct _FPO_DATA {
      DWORD ulOffStart;
      DWORD cbProcSize;
      DWORD cdwLocals;
      WORD cdwParams;
      WORD cbProlog : 8;
      WORD cbRegs : 3;
      WORD fHasSEH : 1;
      WORD fUseBP : 1;
      WORD reserved : 1;
      WORD cbFrame : 2;
    } FPO_DATA,*PFPO_DATA;




    typedef struct _IMAGE_DEBUG_MISC {
      DWORD DataType;
      DWORD Length;
      BOOLEAN Unicode;
      BYTE Reserved[3];
      BYTE Data[1];
    } IMAGE_DEBUG_MISC,*PIMAGE_DEBUG_MISC;

    typedef struct _IMAGE_FUNCTION_ENTRY {
      DWORD StartingAddress;
      DWORD EndingAddress;
      DWORD EndOfPrologue;
    } IMAGE_FUNCTION_ENTRY,*PIMAGE_FUNCTION_ENTRY;

    typedef struct _IMAGE_FUNCTION_ENTRY64 {
      ULONGLONG StartingAddress;
      ULONGLONG EndingAddress;
      __extension__ union {
 ULONGLONG EndOfPrologue;
 ULONGLONG UnwindInfoAddress;
      } ;
    } IMAGE_FUNCTION_ENTRY64,*PIMAGE_FUNCTION_ENTRY64;

    typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
      WORD Signature;
      WORD Flags;
      WORD Machine;
      WORD Characteristics;
      DWORD TimeDateStamp;
      DWORD CheckSum;
      DWORD ImageBase;
      DWORD SizeOfImage;
      DWORD NumberOfSections;
      DWORD ExportedNamesSize;
      DWORD DebugDirectorySize;
      DWORD SectionAlignment;
      DWORD Reserved[2];
    } IMAGE_SEPARATE_DEBUG_HEADER,*PIMAGE_SEPARATE_DEBUG_HEADER;

    typedef struct _NON_PAGED_DEBUG_INFO {
      WORD Signature;
      WORD Flags;
      DWORD Size;
      WORD Machine;
      WORD Characteristics;
      DWORD TimeDateStamp;
      DWORD CheckSum;
      DWORD SizeOfImage;
      ULONGLONG ImageBase;
    } NON_PAGED_DEBUG_INFO,*PNON_PAGED_DEBUG_INFO;







    typedef struct _ImageArchitectureHeader {
      unsigned int AmaskValue: 1;
      int Adummy1 : 7;
      unsigned int AmaskShift : 8;
      int Adummy2 : 16;
      DWORD FirstEntryRVA;
    } IMAGE_ARCHITECTURE_HEADER,*PIMAGE_ARCHITECTURE_HEADER;

    typedef struct _ImageArchitectureEntry {
      DWORD FixupInstRVA;
      DWORD NewInst;
    } IMAGE_ARCHITECTURE_ENTRY,*PIMAGE_ARCHITECTURE_ENTRY;
#pragma pack(pop)




 typedef struct IMPORT_OBJECT_HEADER {
      WORD Sig1;
      WORD Sig2;
      WORD Version;
      WORD Machine;
      DWORD TimeDateStamp;
      DWORD SizeOfData;
      __extension__ union {
 WORD Ordinal;
 WORD Hint;
      };
      WORD Type : 2;
      WORD NameType : 3;
      WORD Reserved : 11;
    } IMPORT_OBJECT_HEADER;

    typedef enum IMPORT_OBJECT_TYPE {
      IMPORT_OBJECT_CODE = 0,IMPORT_OBJECT_DATA = 1,IMPORT_OBJECT_CONST = 2
    } IMPORT_OBJECT_TYPE;

    typedef enum IMPORT_OBJECT_NAME_TYPE {
      IMPORT_OBJECT_ORDINAL = 0,IMPORT_OBJECT_NAME = 1,IMPORT_OBJECT_NAME_NO_PREFIX = 2,IMPORT_OBJECT_NAME_UNDECORATE = 3
    } IMPORT_OBJECT_NAME_TYPE;



    typedef enum ReplacesCorHdrNumericDefines {
      COMIMAGE_FLAGS_ILONLY = 0x00000001,COMIMAGE_FLAGS_32BITREQUIRED = 0x00000002,COMIMAGE_FLAGS_IL_LIBRARY = 0x00000004,
      COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x00000008,COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x00010000,COR_VERSION_MAJOR_V2 = 2,
      COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2,COR_VERSION_MINOR = 0,COR_DELETED_NAME_LENGTH = 8,COR_VTABLEGAP_NAME_LENGTH = 8,
      NATIVE_TYPE_MAX_CB = 1,COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE= 0xFF,IMAGE_COR_MIH_METHODRVA = 0x01,IMAGE_COR_MIH_EHRVA = 0x02,
      IMAGE_COR_MIH_BASICBLOCK = 0x08,COR_VTABLE_32BIT =0x01,COR_VTABLE_64BIT =0x02,COR_VTABLE_FROM_UNMANAGED = 0x04,
      COR_VTABLE_CALL_MOST_DERIVED = 0x10,IMAGE_COR_EATJ_THUNK_SIZE = 32,MAX_CLASS_NAME =1024,MAX_PACKAGE_NAME = 1024
    } ReplacesCorHdrNumericDefines;

    typedef struct IMAGE_COR20_HEADER {
      DWORD cb;
      WORD MajorRuntimeVersion;
      WORD MinorRuntimeVersion;
      IMAGE_DATA_DIRECTORY MetaData;
      DWORD Flags;
      __extension__ union {
 DWORD EntryPointToken;
 DWORD EntryPointRVA;
      } ;
      IMAGE_DATA_DIRECTORY Resources;
      IMAGE_DATA_DIRECTORY StrongNameSignature;
      IMAGE_DATA_DIRECTORY CodeManagerTable;
      IMAGE_DATA_DIRECTORY VTableFixups;
      IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
      IMAGE_DATA_DIRECTORY ManagedNativeHeader;
    } IMAGE_COR20_HEADER,*PIMAGE_COR20_HEADER;



             WORD __attribute__((__stdcall__)) RtlCaptureStackBackTrace (DWORD FramesToSkip, DWORD FramesToCapture, PVOID *BackTrace, PDWORD BackTraceHash);
             void __attribute__((__stdcall__)) RtlCaptureContext (PCONTEXT ContextRecord);
             SIZE_T __attribute__((__stdcall__)) RtlCompareMemory (const void *Source1, const void *Source2, SIZE_T Length);
             void __attribute__((__stdcall__)) RtlUnwind (PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue);
             PVOID __attribute__((__stdcall__)) RtlPcToFileHeader (PVOID PcValue, PVOID *BaseOfImage);
    typedef struct _SINGLE_LIST_ENTRY SLIST_ENTRY,*PSLIST_ENTRY;

    typedef union _SLIST_HEADER {
      ULONGLONG Alignment;
      __extension__ struct {
 SLIST_ENTRY Next;
 WORD Depth;
 WORD Sequence;
      } ;
    } SLIST_HEADER,*PSLIST_HEADER;





             void __attribute__((__stdcall__)) RtlInitializeSListHead (PSLIST_HEADER ListHead);
             PSLIST_ENTRY __attribute__((__stdcall__)) RtlFirstEntrySList (const SLIST_HEADER *ListHead);
             PSLIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedPopEntrySList (PSLIST_HEADER ListHead);
             PSLIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedPushEntrySList (PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
             PSLIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedPushListSListEx (PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, DWORD Count);
             PSLIST_ENTRY __attribute__((__stdcall__)) RtlInterlockedFlushSList (PSLIST_HEADER ListHead);
             WORD __attribute__((__stdcall__)) RtlQueryDepthSList (PSLIST_HEADER ListHead);





typedef struct _RTL_RUN_ONCE { PVOID Ptr; } RTL_RUN_ONCE, *PRTL_RUN_ONCE;
typedef DWORD (__attribute__((__stdcall__)) *PRTL_RUN_ONCE_INIT_FN)(PRTL_RUN_ONCE, PVOID, PVOID *);
  typedef struct _RTL_BARRIER {
    DWORD Reserved1;
    DWORD Reserved2;
    ULONG_PTR Reserved3[2];
    DWORD Reserved4;
    DWORD Reserved5;
  } RTL_BARRIER,*PRTL_BARRIER;
    PVOID __attribute__((__stdcall__)) RtlSecureZeroMemory(PVOID ptr,SIZE_T cnt);


    inline PVOID __attribute__((__stdcall__)) RtlSecureZeroMemory(PVOID ptr,SIZE_T cnt) {
      volatile char *vptr =(volatile char *)ptr;



      while(cnt) {
 *vptr++ = 0;
 cnt--;
      }

      return ptr;
    }


    typedef struct _MESSAGE_RESOURCE_ENTRY {
      WORD Length;
      WORD Flags;
      BYTE Text[1];
    } MESSAGE_RESOURCE_ENTRY,*PMESSAGE_RESOURCE_ENTRY;
    typedef struct _MESSAGE_RESOURCE_BLOCK {
      DWORD LowId;
      DWORD HighId;
      DWORD OffsetToEntries;
    } MESSAGE_RESOURCE_BLOCK,*PMESSAGE_RESOURCE_BLOCK;

    typedef struct _MESSAGE_RESOURCE_DATA {
      DWORD NumberOfBlocks;
      MESSAGE_RESOURCE_BLOCK Blocks[1];
    } MESSAGE_RESOURCE_DATA,*PMESSAGE_RESOURCE_DATA;

    typedef struct _OSVERSIONINFOA {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      CHAR szCSDVersion[128];
    } OSVERSIONINFOA,*POSVERSIONINFOA,*LPOSVERSIONINFOA;

    typedef struct _OSVERSIONINFOW {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      WCHAR szCSDVersion[128];
    } OSVERSIONINFOW,*POSVERSIONINFOW,*LPOSVERSIONINFOW,RTL_OSVERSIONINFOW,*PRTL_OSVERSIONINFOW;

    typedef OSVERSIONINFOW OSVERSIONINFO;
    typedef POSVERSIONINFOW POSVERSIONINFO;
    typedef LPOSVERSIONINFOW LPOSVERSIONINFO;

    typedef struct _OSVERSIONINFOEXA {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      CHAR szCSDVersion[128];
      WORD wServicePackMajor;
      WORD wServicePackMinor;
      WORD wSuiteMask;
      BYTE wProductType;
      BYTE wReserved;
    } OSVERSIONINFOEXA,*POSVERSIONINFOEXA,*LPOSVERSIONINFOEXA;

    typedef struct _OSVERSIONINFOEXW {
      DWORD dwOSVersionInfoSize;
      DWORD dwMajorVersion;
      DWORD dwMinorVersion;
      DWORD dwBuildNumber;
      DWORD dwPlatformId;
      WCHAR szCSDVersion[128];
      WORD wServicePackMajor;
      WORD wServicePackMinor;
      WORD wSuiteMask;
      BYTE wProductType;
      BYTE wReserved;
    } OSVERSIONINFOEXW,*POSVERSIONINFOEXW,*LPOSVERSIONINFOEXW,RTL_OSVERSIONINFOEXW,*PRTL_OSVERSIONINFOEXW;

    typedef OSVERSIONINFOEXW OSVERSIONINFOEX;
    typedef POSVERSIONINFOEXW POSVERSIONINFOEX;
    typedef LPOSVERSIONINFOEXW LPOSVERSIONINFOEX;
             ULONGLONG __attribute__((__stdcall__)) VerSetConditionMask (ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition);
    typedef enum _RTL_UMS_THREAD_INFO_CLASS {
      UmsThreadInvalidInfoClass = 0,
      UmsThreadUserContext,
      UmsThreadPriority,
      UmsThreadAffinity,
      UmsThreadTeb,
      UmsThreadIsSuspended,
      UmsThreadIsTerminated,
      UmsThreadMaxInfoClass
    } RTL_UMS_THREAD_INFO_CLASS,*PRTL_UMS_THREAD_INFO_CLASS;

    typedef enum _RTL_UMS_SCHEDULER_REASON {
      UmsSchedulerStartup = 0,
      UmsSchedulerThreadBlocked,
      UmsSchedulerThreadYield,
    } RTL_UMS_SCHEDULER_REASON,*PRTL_UMS_SCHEDULER_REASON;

    typedef void __attribute__((__stdcall__)) RTL_UMS_SCHEDULER_ENTRY_POINT (RTL_UMS_SCHEDULER_REASON Reason, ULONG_PTR ActivationPayload, PVOID SchedulerParam);
    typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
    typedef struct _RTL_CRITICAL_SECTION_DEBUG {
      WORD Type;
      WORD CreatorBackTraceIndex;
      struct _RTL_CRITICAL_SECTION *CriticalSection;
      LIST_ENTRY ProcessLocksList;
      DWORD EntryCount;
      DWORD ContentionCount;
      DWORD Flags;
      WORD CreatorBackTraceIndexHigh;
      WORD SpareWORD;
    } RTL_CRITICAL_SECTION_DEBUG,*PRTL_CRITICAL_SECTION_DEBUG,RTL_RESOURCE_DEBUG,*PRTL_RESOURCE_DEBUG;
#pragma pack(push,8)

 typedef struct _RTL_CRITICAL_SECTION {
      PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
      LONG LockCount;
      LONG RecursionCount;
      HANDLE OwningThread;
      HANDLE LockSemaphore;
      ULONG_PTR SpinCount;
    } RTL_CRITICAL_SECTION,*PRTL_CRITICAL_SECTION;
#pragma pack(pop)


 typedef struct _RTL_SRWLOCK { PVOID Ptr; } RTL_SRWLOCK,*PRTL_SRWLOCK;
    typedef struct _RTL_CONDITION_VARIABLE { PVOID Ptr; } RTL_CONDITION_VARIABLE,*PRTL_CONDITION_VARIABLE;






    typedef void (__attribute__((__stdcall__)) *PAPCFUNC) (ULONG_PTR Parameter);
    typedef LONG (__attribute__((__stdcall__)) *PVECTORED_EXCEPTION_HANDLER) (struct _EXCEPTION_POINTERS *ExceptionInfo);

    typedef enum _HEAP_INFORMATION_CLASS {
      HeapCompatibilityInformation,
      HeapEnableTerminationOnCorruption
    } HEAP_INFORMATION_CLASS;

    typedef void (__attribute__((__stdcall__)) *WORKERCALLBACKFUNC) (PVOID);
    typedef void (__attribute__((__stdcall__)) *APC_CALLBACK_FUNCTION) (DWORD, PVOID, PVOID);
    typedef void (__attribute__((__stdcall__)) *WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN);
    typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
    typedef void (__attribute__((__stdcall__)) *PFLS_CALLBACK_FUNCTION) (PVOID lpFlsData);
    typedef BOOLEAN (__attribute__((__stdcall__)) *PSECURE_MEMORY_CACHE_CALLBACK) (PVOID Addr, SIZE_T Range);
    typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
      ActivationContextBasicInformation = 1,
      ActivationContextDetailedInformation = 2,
      AssemblyDetailedInformationInActivationContext = 3,
      FileInformationInAssemblyOfAssemblyInActivationContext = 4,
      RunlevelInformationInActivationContext = 5,
      CompatibilityInformationInActivationContext = 6,
      ActivationContextManifestResourceName = 7,
      MaxActivationContextInfoClass,
      AssemblyDetailedInformationInActivationContxt = 3,
      FileInformationInAssemblyOfAssemblyInActivationContxt = 4
    } ACTIVATION_CONTEXT_INFO_CLASS;

    typedef enum {
      ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
      ACTCTX_RUN_LEVEL_AS_INVOKER,
      ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
      ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
      ACTCTX_RUN_LEVEL_NUMBERS
    } ACTCTX_REQUESTED_RUN_LEVEL;

    typedef enum {
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
    } ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

    typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
      DWORD ulAssemblyIndex;
      DWORD ulFileIndexInAssembly;
    } ACTIVATION_CONTEXT_QUERY_INDEX,*PACTIVATION_CONTEXT_QUERY_INDEX;

    typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
      DWORD ulFlags;
      DWORD ulFilenameLength;
      DWORD ulPathLength;
      PCWSTR lpFileName;
      PCWSTR lpFilePath;
    } ASSEMBLY_FILE_DETAILED_INFORMATION,*PASSEMBLY_FILE_DETAILED_INFORMATION;

    typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
      DWORD ulFlags;
      DWORD ulEncodedAssemblyIdentityLength;
      DWORD ulManifestPathType;
      DWORD ulManifestPathLength;
      LARGE_INTEGER liManifestLastWriteTime;
      DWORD ulPolicyPathType;
      DWORD ulPolicyPathLength;
      LARGE_INTEGER liPolicyLastWriteTime;
      DWORD ulMetadataSatelliteRosterIndex;
      DWORD ulManifestVersionMajor;
      DWORD ulManifestVersionMinor;
      DWORD ulPolicyVersionMajor;
      DWORD ulPolicyVersionMinor;
      DWORD ulAssemblyDirectoryNameLength;
      PCWSTR lpAssemblyEncodedAssemblyIdentity;
      PCWSTR lpAssemblyManifestPath;
      PCWSTR lpAssemblyPolicyPath;
      PCWSTR lpAssemblyDirectoryName;
      DWORD ulFileCount;
    } ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,*PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

    typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
      DWORD ulFlags;
      ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
      DWORD UiAccess;
    } ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION,*PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

    typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
      GUID Id;
      ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
    } COMPATIBILITY_CONTEXT_ELEMENT,*PCOMPATIBILITY_CONTEXT_ELEMENT;



    typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
      DWORD ElementCount;
      COMPATIBILITY_CONTEXT_ELEMENT Elements[];
    } ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION,*PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;



    typedef struct _SUPPORTED_OS_INFO {
      WORD OsCount;
      WORD MitigationExist;
      WORD OsList[(4)];
    } SUPPORTED_OS_INFO,*PSUPPORTED_OS_INFO;

    typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
      DWORD dwFlags;
      DWORD ulFormatVersion;
      DWORD ulAssemblyCount;
      DWORD ulRootManifestPathType;
      DWORD ulRootManifestPathChars;
      DWORD ulRootConfigurationPathType;
      DWORD ulRootConfigurationPathChars;
      DWORD ulAppDirPathType;
      DWORD ulAppDirPathChars;
      PCWSTR lpRootManifestPath;
      PCWSTR lpRootConfigurationPath;
      PCWSTR lpAppDirPath;
    } ACTIVATION_CONTEXT_DETAILED_INFORMATION,*PACTIVATION_CONTEXT_DETAILED_INFORMATION;

    typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;
    typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
    typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
    typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
    typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;
    typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION *PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
    typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
    typedef void (__attribute__((__stdcall__)) *RTL_VERIFIER_DLL_LOAD_CALLBACK) (PWSTR DllName,PVOID DllBase,SIZE_T DllSize,PVOID Reserved);
    typedef void (__attribute__((__stdcall__)) *RTL_VERIFIER_DLL_UNLOAD_CALLBACK) (PWSTR DllName,PVOID DllBase,SIZE_T DllSize,PVOID Reserved);
    typedef void (__attribute__((__stdcall__)) *RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK)(PVOID AllocationBase,SIZE_T AllocationSize);

    typedef struct _RTL_VERIFIER_THUNK_DESCRIPTOR {
      PCHAR ThunkName;
      PVOID ThunkOldAddress;
      PVOID ThunkNewAddress;
    } RTL_VERIFIER_THUNK_DESCRIPTOR,*PRTL_VERIFIER_THUNK_DESCRIPTOR;

    typedef struct _RTL_VERIFIER_DLL_DESCRIPTOR {
      PWCHAR DllName;
      DWORD DllFlags;
      PVOID DllAddress;
      PRTL_VERIFIER_THUNK_DESCRIPTOR DllThunks;
    } RTL_VERIFIER_DLL_DESCRIPTOR,*PRTL_VERIFIER_DLL_DESCRIPTOR;

    typedef struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR {
      DWORD Length;
      PRTL_VERIFIER_DLL_DESCRIPTOR ProviderDlls;
      RTL_VERIFIER_DLL_LOAD_CALLBACK ProviderDllLoadCallback;
      RTL_VERIFIER_DLL_UNLOAD_CALLBACK ProviderDllUnloadCallback;
      PWSTR VerifierImage;
      DWORD VerifierFlags;
      DWORD VerifierDebug;
      PVOID RtlpGetStackTraceAddress;
      PVOID RtlpDebugPageHeapCreate;
      PVOID RtlpDebugPageHeapDestroy;
      RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK ProviderNtdllHeapFreeCallback;
    } RTL_VERIFIER_PROVIDER_DESCRIPTOR,*PRTL_VERIFIER_PROVIDER_DESCRIPTOR;
    void __attribute__((__stdcall__)) RtlApplicationVerifierStop(ULONG_PTR Code,PSTR Message,ULONG_PTR Param1,PSTR Description1,ULONG_PTR Param2,PSTR Description2,ULONG_PTR Param3,PSTR Description3,ULONG_PTR Param4,PSTR Description4);
             DWORD __attribute__((__stdcall__)) RtlSetHeapInformation(PVOID HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength);
             DWORD __attribute__((__stdcall__)) RtlQueryHeapInformation(PVOID HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength,PSIZE_T ReturnLength);
    DWORD __attribute__((__stdcall__)) RtlMultipleAllocateHeap(PVOID HeapHandle,DWORD Flags,SIZE_T Size,DWORD Count,PVOID *Array);
    DWORD __attribute__((__stdcall__)) RtlMultipleFreeHeap(PVOID HeapHandle,DWORD Flags,DWORD Count,PVOID *Array);

    typedef struct _HARDWARE_COUNTER_DATA {
      HARDWARE_COUNTER_TYPE Type;
      DWORD Reserved;
      DWORD64 Value;
    } HARDWARE_COUNTER_DATA,*PHARDWARE_COUNTER_DATA;

    typedef struct _PERFORMANCE_DATA {
      WORD Size;
      BYTE Version;
      BYTE HwCountersCount;
      DWORD ContextSwitchCount;
      DWORD64 WaitReasonBitMap;
      DWORD64 CycleTime;
      DWORD RetryCount;
      DWORD Reserved;
      HARDWARE_COUNTER_DATA HwCounters[16];
    } PERFORMANCE_DATA,*PPERFORMANCE_DATA;
    typedef struct _EVENTLOGRECORD {
      DWORD Length;
      DWORD Reserved;
      DWORD RecordNumber;
      DWORD TimeGenerated;
      DWORD TimeWritten;
      DWORD EventID;
      WORD EventType;
      WORD NumStrings;
      WORD EventCategory;
      WORD ReservedFlags;
      DWORD ClosingRecordNumber;
      DWORD StringOffset;
      DWORD UserSidLength;
      DWORD UserSidOffset;
      DWORD DataLength;
      DWORD DataOffset;
    } EVENTLOGRECORD,*PEVENTLOGRECORD;



    typedef struct _EVENTSFORLOGFILE {
      DWORD ulSize;
      WCHAR szLogicalLogFile[256];
      DWORD ulNumRecords;
      EVENTLOGRECORD pEventLogRecords[];
    } EVENTSFORLOGFILE,*PEVENTSFORLOGFILE;

    typedef struct _PACKEDEVENTINFO {
      DWORD ulSize;
      DWORD ulNumEventsForLogFile;
      DWORD ulOffsets[];
    } PACKEDEVENTINFO,*PPACKEDEVENTINFO;
    typedef enum _CM_SERVICE_NODE_TYPE {
      DriverType = 0x00000001,FileSystemType = 0x00000002,Win32ServiceOwnProcess = 0x00000010,
      Win32ServiceShareProcess = 0x00000020,AdapterType = 0x00000004,RecognizerType = 0x00000008
    } SERVICE_NODE_TYPE;

    typedef enum _CM_SERVICE_LOAD_TYPE {
      BootLoad = 0x00000000,SystemLoad = 0x00000001,AutoLoad = 0x00000002,DemandLoad = 0x00000003,
      DisableLoad = 0x00000004
    } SERVICE_LOAD_TYPE;

    typedef enum _CM_ERROR_CONTROL_TYPE {
      IgnoreError = 0x00000000,NormalError = 0x00000001,SevereError = 0x00000002,CriticalError = 0x00000003
    } SERVICE_ERROR_TYPE;
    typedef struct _TAPE_ERASE {
      DWORD Type;
      BOOLEAN Immediate;
    } TAPE_ERASE,*PTAPE_ERASE;
    typedef struct _TAPE_PREPARE {
      DWORD Operation;
      BOOLEAN Immediate;
    } TAPE_PREPARE,*PTAPE_PREPARE;






    typedef struct _TAPE_WRITE_MARKS {
      DWORD Type;
      DWORD Count;
      BOOLEAN Immediate;
    } TAPE_WRITE_MARKS,*PTAPE_WRITE_MARKS;





    typedef struct _TAPE_GET_POSITION {
      DWORD Type;
      DWORD Partition;
      LARGE_INTEGER Offset;
    } TAPE_GET_POSITION,*PTAPE_GET_POSITION;
    typedef struct _TAPE_SET_POSITION {
      DWORD Method;
      DWORD Partition;
      LARGE_INTEGER Offset;
      BOOLEAN Immediate;
    } TAPE_SET_POSITION,*PTAPE_SET_POSITION;
    typedef struct _TAPE_GET_DRIVE_PARAMETERS {
      BOOLEAN ECC;
      BOOLEAN Compression;
      BOOLEAN DataPadding;
      BOOLEAN ReportSetmarks;
      DWORD DefaultBlockSize;
      DWORD MaximumBlockSize;
      DWORD MinimumBlockSize;
      DWORD MaximumPartitionCount;
      DWORD FeaturesLow;
      DWORD FeaturesHigh;
      DWORD EOTWarningZoneSize;
    } TAPE_GET_DRIVE_PARAMETERS,*PTAPE_GET_DRIVE_PARAMETERS;

    typedef struct _TAPE_SET_DRIVE_PARAMETERS {
      BOOLEAN ECC;
      BOOLEAN Compression;
      BOOLEAN DataPadding;
      BOOLEAN ReportSetmarks;
      DWORD EOTWarningZoneSize;
    } TAPE_SET_DRIVE_PARAMETERS,*PTAPE_SET_DRIVE_PARAMETERS;

    typedef struct _TAPE_GET_MEDIA_PARAMETERS {
      LARGE_INTEGER Capacity;
      LARGE_INTEGER Remaining;
      DWORD BlockSize;
      DWORD PartitionCount;
      BOOLEAN WriteProtected;
    } TAPE_GET_MEDIA_PARAMETERS,*PTAPE_GET_MEDIA_PARAMETERS;

    typedef struct _TAPE_SET_MEDIA_PARAMETERS {
      DWORD BlockSize;
    } TAPE_SET_MEDIA_PARAMETERS,*PTAPE_SET_MEDIA_PARAMETERS;





    typedef struct _TAPE_CREATE_PARTITION {
      DWORD Method;
      DWORD Count;
      DWORD Size;
    } TAPE_CREATE_PARTITION,*PTAPE_CREATE_PARTITION;







    typedef struct _TAPE_WMI_OPERATIONS {
      DWORD Method;
      DWORD DataBufferSize;
      PVOID DataBuffer;
    } TAPE_WMI_OPERATIONS,*PTAPE_WMI_OPERATIONS;

    typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
      TapeDriveProblemNone,TapeDriveReadWriteWarning,TapeDriveReadWriteError,TapeDriveReadWarning,TapeDriveWriteWarning,TapeDriveReadError,TapeDriveWriteError,TapeDriveHardwareError,TapeDriveUnsupportedMedia,TapeDriveScsiConnectionError,TapeDriveTimetoClean,TapeDriveCleanDriveNow,TapeDriveMediaLifeExpired,TapeDriveSnappedTape
    } TAPE_DRIVE_PROBLEM_TYPE;


  typedef DWORD TP_VERSION,*PTP_VERSION;
  typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE,*PTP_CALLBACK_INSTANCE;
  typedef void (__attribute__((__stdcall__)) *PTP_SIMPLE_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context);
  typedef struct _TP_POOL TP_POOL,*PTP_POOL;

  typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
  } TP_CALLBACK_PRIORITY;

  typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
  } TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

  typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP,*PTP_CLEANUP_GROUP;
  typedef void (__attribute__((__stdcall__)) *PTP_CLEANUP_GROUP_CANCEL_CALLBACK) (PVOID ObjectContext, PVOID CleanupContext);
  typedef struct _TP_CALLBACK_ENVIRON_V1 {
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union {
      DWORD Flags;
      struct {
 DWORD LongFunction : 1;
 DWORD Persistent : 1;
 DWORD Private : 30;
      } s;
    } u;
  } TP_CALLBACK_ENVIRON_V1;
  typedef TP_CALLBACK_ENVIRON_V1 TP_CALLBACK_ENVIRON,*PTP_CALLBACK_ENVIRON;


  typedef struct _TP_WORK TP_WORK,*PTP_WORK;
  typedef void (__attribute__((__stdcall__)) *PTP_WORK_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WORK Work);
  typedef struct _TP_TIMER TP_TIMER,*PTP_TIMER;
  typedef void (__attribute__((__stdcall__)) *PTP_TIMER_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_TIMER Timer);
  typedef DWORD TP_WAIT_RESULT;
  typedef struct _TP_WAIT TP_WAIT,*PTP_WAIT;
  typedef void (__attribute__((__stdcall__)) *PTP_WAIT_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PTP_WAIT Wait, TP_WAIT_RESULT WaitResult);
  typedef struct _TP_IO TP_IO,*PTP_IO;


    inline __attribute__((__always_inline__)) void TpInitializeCallbackEnviron (PTP_CALLBACK_ENVIRON cbe) {
      cbe->Pool = 0;
      cbe->CleanupGroup = 0;
      cbe->CleanupGroupCancelCallback = 0;
      cbe->RaceDll = 0;
      cbe->ActivationContext = 0;
      cbe->FinalizationCallback = 0;
      cbe->u.Flags = 0;

      cbe->Version = 1;





    }
    inline __attribute__((__always_inline__)) void TpSetCallbackThreadpool (PTP_CALLBACK_ENVIRON cbe, PTP_POOL pool) { cbe->Pool = pool; }
    inline __attribute__((__always_inline__)) void TpSetCallbackCleanupGroup (PTP_CALLBACK_ENVIRON cbe, PTP_CLEANUP_GROUP cleanup_group, PTP_CLEANUP_GROUP_CANCEL_CALLBACK cleanup_group_cb) {
      cbe->CleanupGroup = cleanup_group;
      cbe->CleanupGroupCancelCallback = cleanup_group_cb;
    }
    inline __attribute__((__always_inline__)) void TpSetCallbackActivationContext (PTP_CALLBACK_ENVIRON cbe, struct _ACTIVATION_CONTEXT *actx) { cbe->ActivationContext = actx; }
    inline __attribute__((__always_inline__)) void TpSetCallbackNoActivationContext (PTP_CALLBACK_ENVIRON cbe) { cbe->ActivationContext = (struct _ACTIVATION_CONTEXT *) (LONG_PTR) -1; }
    inline __attribute__((__always_inline__)) void TpSetCallbackLongFunction (PTP_CALLBACK_ENVIRON cbe) { cbe->u.s.LongFunction = 1; }
    inline __attribute__((__always_inline__)) void TpSetCallbackRaceWithDll (PTP_CALLBACK_ENVIRON cbe, PVOID h) { cbe->RaceDll = h; }
    inline __attribute__((__always_inline__)) void TpSetCallbackFinalizationCallback (PTP_CALLBACK_ENVIRON cbe, PTP_SIMPLE_CALLBACK fini_cb) { cbe->FinalizationCallback = fini_cb; }



    inline __attribute__((__always_inline__)) void TpSetCallbackPersistent (PTP_CALLBACK_ENVIRON cbe) { cbe->u.s.Persistent = 1; }
    inline __attribute__((__always_inline__)) void TpDestroyCallbackEnviron (PTP_CALLBACK_ENVIRON cbe) { {(cbe) = (cbe);}; }
    extern "C" {
extern "C" {


  typedef GUID CRM_PROTOCOL_ID,*PCRM_PROTOCOL_ID;
  typedef ULONG NOTIFICATION_MASK;
  typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
  } TRANSACTION_NOTIFICATION,*PTRANSACTION_NOTIFICATION;

  typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID EnlistmentId;
    GUID UOW;
  } TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT,*PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



  typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
  } TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT,*PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

  typedef ULONG SAVEPOINT_ID,*PSAVEPOINT_ID;

  typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
  } TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT,*PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

  typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;
  } TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT,*PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

  typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID UOW;
  } TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT,*PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

  typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT,*PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







  typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
  } KCRM_MARSHAL_HEADER,*PKCRM_MARSHAL_HEADER,* PRKCRM_MARSHAL_HEADER;

  typedef struct _KCRM_TRANSACTION_BLOB {
    GUID UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
  } KCRM_TRANSACTION_BLOB,*PKCRM_TRANSACTION_BLOB,* PRKCRM_TRANSACTION_BLOB;

  typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID ProtocolId;
    ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
  } KCRM_PROTOCOL_BLOB,*PKCRM_PROTOCOL_BLOB,* PRKCRM_PROTOCOL_BLOB;


}
      typedef enum _TRANSACTION_OUTCOME {
 TransactionOutcomeUndetermined = 1,
 TransactionOutcomeCommitted,
 TransactionOutcomeAborted,
      } TRANSACTION_OUTCOME;

      typedef enum _TRANSACTION_STATE {
 TransactionStateNormal = 1,
 TransactionStateIndoubt,
 TransactionStateCommittedNotify,
      } TRANSACTION_STATE;

      typedef struct _TRANSACTION_BASIC_INFORMATION {
 GUID TransactionId;
 DWORD State;
 DWORD Outcome;
      } TRANSACTION_BASIC_INFORMATION,*PTRANSACTION_BASIC_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
 GUID TmIdentity;
 LARGE_INTEGER VirtualClock;
      } TRANSACTIONMANAGER_BASIC_INFORMATION,*PTRANSACTIONMANAGER_BASIC_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
 GUID LogIdentity;
      } TRANSACTIONMANAGER_LOG_INFORMATION,*PTRANSACTIONMANAGER_LOG_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
 DWORD LogPathLength;
 WCHAR LogPath[1];
      } TRANSACTIONMANAGER_LOGPATH_INFORMATION,*PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
 ULONGLONG LastRecoveredLsn;
      } TRANSACTIONMANAGER_RECOVERY_INFORMATION,*PTRANSACTIONMANAGER_RECOVERY_INFORMATION;

      typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
 GUID OldestTransactionGuid;
      } TRANSACTIONMANAGER_OLDEST_INFORMATION,*PTRANSACTIONMANAGER_OLDEST_INFORMATION;

      typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
 DWORD IsolationLevel;
 DWORD IsolationFlags;
 LARGE_INTEGER Timeout;
 DWORD Outcome;
 DWORD DescriptionLength;
 WCHAR Description[1];
      } TRANSACTION_PROPERTIES_INFORMATION,*PTRANSACTION_PROPERTIES_INFORMATION;

      typedef struct _TRANSACTION_BIND_INFORMATION {
 HANDLE TmHandle;
      } TRANSACTION_BIND_INFORMATION,*PTRANSACTION_BIND_INFORMATION;

      typedef struct _TRANSACTION_ENLISTMENT_PAIR {
 GUID EnlistmentId;
 GUID ResourceManagerId;
      } TRANSACTION_ENLISTMENT_PAIR,*PTRANSACTION_ENLISTMENT_PAIR;

      typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
 DWORD NumberOfEnlistments;
 TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
      } TRANSACTION_ENLISTMENTS_INFORMATION,*PTRANSACTION_ENLISTMENTS_INFORMATION;

      typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
 TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
      } TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION,*PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;

      typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
 GUID ResourceManagerId;
 DWORD DescriptionLength;
 WCHAR Description[1];
      } RESOURCEMANAGER_BASIC_INFORMATION,*PRESOURCEMANAGER_BASIC_INFORMATION;

      typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
 HANDLE IoCompletionPortHandle;
 ULONG_PTR CompletionKey;
      } RESOURCEMANAGER_COMPLETION_INFORMATION,*PRESOURCEMANAGER_COMPLETION_INFORMATION;

      typedef enum _TRANSACTION_INFORMATION_CLASS {
 TransactionBasicInformation,
 TransactionPropertiesInformation,
 TransactionEnlistmentInformation,
 TransactionSuperiorEnlistmentInformation,
 TransactionBindInformation,
 TransactionDTCPrivateInformation
      } TRANSACTION_INFORMATION_CLASS;

      typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
 TransactionManagerBasicInformation,
 TransactionManagerLogInformation,
 TransactionManagerLogPathInformation,
 TransactionManagerOnlineProbeInformation = 3,
 TransactionManagerRecoveryInformation = 4,
 TransactionManagerOldestTransactionInformation = 5
      } TRANSACTIONMANAGER_INFORMATION_CLASS;

      typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
 ResourceManagerBasicInformation,
 ResourceManagerCompletionInformation
      } RESOURCEMANAGER_INFORMATION_CLASS;

      typedef struct _ENLISTMENT_BASIC_INFORMATION {
 GUID EnlistmentId;
 GUID TransactionId;
 GUID ResourceManagerId;
      } ENLISTMENT_BASIC_INFORMATION,*PENLISTMENT_BASIC_INFORMATION;

      typedef struct _ENLISTMENT_CRM_INFORMATION {
 GUID CrmTransactionManagerId;
 GUID CrmResourceManagerId;
 GUID CrmEnlistmentId;
      } ENLISTMENT_CRM_INFORMATION,*PENLISTMENT_CRM_INFORMATION;

      typedef enum _ENLISTMENT_INFORMATION_CLASS {
 EnlistmentBasicInformation,
 EnlistmentRecoveryInformation,
 EnlistmentCrmInformation
      } ENLISTMENT_INFORMATION_CLASS;

      typedef struct _TRANSACTION_LIST_ENTRY {
         GUID UOW;
      } TRANSACTION_LIST_ENTRY,*PTRANSACTION_LIST_ENTRY;

      typedef struct _TRANSACTION_LIST_INFORMATION {
 DWORD NumberOfTransactions;
 TRANSACTION_LIST_ENTRY TransactionInformation[1];
      } TRANSACTION_LIST_INFORMATION,*PTRANSACTION_LIST_INFORMATION;

      typedef enum _KTMOBJECT_TYPE {
 KTMOBJECT_TRANSACTION,
 KTMOBJECT_TRANSACTION_MANAGER,
 KTMOBJECT_RESOURCE_MANAGER,
 KTMOBJECT_ENLISTMENT,
 KTMOBJECT_INVALID
      } KTMOBJECT_TYPE,*PKTMOBJECT_TYPE;

      typedef struct _KTMOBJECT_CURSOR {
 GUID LastQuery;
 DWORD ObjectIdCount;
 GUID ObjectIds[1];
      } KTMOBJECT_CURSOR,*PKTMOBJECT_CURSOR;


    }
typedef struct _WOW64_FLOATING_SAVE_AREA {
  DWORD ControlWord;
  DWORD StatusWord;
  DWORD TagWord;
  DWORD ErrorOffset;
  DWORD ErrorSelector;
  DWORD DataOffset;
  DWORD DataSelector;
  BYTE RegisterArea[80];
  DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA, *PWOW64_FLOATING_SAVE_AREA;
#pragma pack(push,4)

typedef struct _WOW64_CONTEXT {
  DWORD ContextFlags;
  DWORD Dr0;
  DWORD Dr1;
  DWORD Dr2;
  DWORD Dr3;
  DWORD Dr6;
  DWORD Dr7;
  WOW64_FLOATING_SAVE_AREA FloatSave;
  DWORD SegGs;
  DWORD SegFs;
  DWORD SegEs;
  DWORD SegDs;
  DWORD Edi;
  DWORD Esi;
  DWORD Ebx;
  DWORD Edx;
  DWORD Ecx;
  DWORD Eax;
  DWORD Ebp;
  DWORD Eip;
  DWORD SegCs;
  DWORD EFlags;
  DWORD Esp;
  DWORD SegSs;
  BYTE ExtendedRegisters[512];
} WOW64_CONTEXT, *PWOW64_CONTEXT;
#pragma pack(pop)


typedef struct _WOW64_LDT_ENTRY {
  WORD LimitLow;
  WORD BaseLow;
  __extension__ union {
    struct {
      BYTE BaseMid;
      BYTE Flags1;
      BYTE Flags2;
      BYTE BaseHi;
    } Bytes;
    struct {
      DWORD BaseMid :8;
      DWORD Type :5;
      DWORD Dpl :2;
      DWORD Pres :1;
      DWORD LimitHi :4;
      DWORD Sys :1;
      DWORD Reserved_0 :1;
      DWORD Default_Big :1;
      DWORD Granularity :1;
      DWORD BaseHi :8;
    } Bits;
  } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

    typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
      DWORD Selector;
      WOW64_LDT_ENTRY Descriptor;
    } WOW64_DESCRIPTOR_TABLE_ENTRY,*PWOW64_DESCRIPTOR_TABLE_ENTRY;
}






  typedef UINT_PTR WPARAM;
  typedef LONG_PTR LPARAM;
  typedef LONG_PTR LRESULT;
  typedef HANDLE *SPHANDLE;
  typedef HANDLE *LPHANDLE;
  typedef HANDLE HGLOBAL;
  typedef HANDLE HLOCAL;
  typedef HANDLE GLOBALHANDLE;
  typedef HANDLE LOCALHANDLE;





  typedef int (__attribute__((__stdcall__)) *FARPROC) ();
  typedef int (__attribute__((__stdcall__)) *NEARPROC) ();
  typedef int (__attribute__((__stdcall__)) *PROC) ();


  typedef WORD ATOM;

  typedef int HFILE;
  struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__ *HINSTANCE;
  struct HKEY__ { int unused; }; typedef struct HKEY__ *HKEY;
  typedef HKEY *PHKEY;
  struct HKL__ { int unused; }; typedef struct HKL__ *HKL;
  struct HLSURF__ { int unused; }; typedef struct HLSURF__ *HLSURF;
  struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__ *HMETAFILE;
  typedef HINSTANCE HMODULE;
  struct HRGN__ { int unused; }; typedef struct HRGN__ *HRGN;
  struct HRSRC__ { int unused; }; typedef struct HRSRC__ *HRSRC;
  struct HSPRITE__ { int unused; }; typedef struct HSPRITE__ *HSPRITE;
  struct HSTR__ { int unused; }; typedef struct HSTR__ *HSTR;
  struct HTASK__ { int unused; }; typedef struct HTASK__ *HTASK;
  struct HWINSTA__ { int unused; }; typedef struct HWINSTA__ *HWINSTA;

  typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
  } FILETIME,*PFILETIME,*LPFILETIME;



}






extern "C" {
struct HWND__ { int unused; }; typedef struct HWND__ *HWND;
struct HHOOK__ { int unused; }; typedef struct HHOOK__ *HHOOK;
  typedef void *HGDIOBJ;




struct HACCEL__ { int unused; }; typedef struct HACCEL__ *HACCEL;
struct HBITMAP__ { int unused; }; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__ { int unused; }; typedef struct HBRUSH__ *HBRUSH;
struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__ *HCOLORSPACE;
struct HDC__ { int unused; }; typedef struct HDC__ *HDC;
struct HGLRC__ { int unused; }; typedef struct HGLRC__ *HGLRC;
struct HDESK__ { int unused; }; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;
struct HFONT__ { int unused; }; typedef struct HFONT__ *HFONT;
struct HICON__ { int unused; }; typedef struct HICON__ *HICON;
struct HMENU__ { int unused; }; typedef struct HMENU__ *HMENU;
struct HPALETTE__ { int unused; }; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__ { int unused; }; typedef struct HPEN__ *HPEN;
struct HMONITOR__ { int unused; }; typedef struct HMONITOR__ *HMONITOR;
struct HWINEVENTHOOK__ { int unused; }; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;

typedef HICON HCURSOR;
typedef DWORD COLORREF;



struct HUMPD__ { int unused; }; typedef struct HUMPD__ *HUMPD;

typedef DWORD *LPCOLORREF;





typedef struct tagRECT {
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
} RECT,*PRECT,*NPRECT,*LPRECT;

typedef const RECT *LPCRECT;

typedef struct _RECTL {
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
} RECTL,*PRECTL,*LPRECTL;

typedef const RECTL *LPCRECTL;

typedef struct tagPOINT {
  LONG x;
  LONG y;
} POINT,*PPOINT,*NPPOINT,*LPPOINT;

typedef struct _POINTL {
  LONG x;
  LONG y;
} POINTL,*PPOINTL;

typedef struct tagSIZE {
  LONG cx;
  LONG cy;
} SIZE,*PSIZE,*LPSIZE;

typedef SIZE SIZEL;
typedef SIZE *PSIZEL,*LPSIZEL;

typedef struct tagPOINTS {
  SHORT x;
  SHORT y;
} POINTS,*PPOINTS,*LPPOINTS;
}
extern "C" {







  typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    WINBOOL bInheritHandle;
  } SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

  typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    __extension__ union {
      struct {
 DWORD Offset;
 DWORD OffsetHigh;
      } ;
      PVOID Pointer;
    } ;
    HANDLE hEvent;
  } OVERLAPPED, *LPOVERLAPPED;

  typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
  } OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
  typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
  } SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


  typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[260];
    CHAR cAlternateFileName[14];
  } WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;

  typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[260];
    WCHAR cAlternateFileName[14];
  } WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;

  typedef WIN32_FIND_DATAW WIN32_FIND_DATA;
  typedef PWIN32_FIND_DATAW PWIN32_FIND_DATA;
  typedef LPWIN32_FIND_DATAW LPWIN32_FIND_DATA;

  typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
  } FINDEX_INFO_LEVELS;




  typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
  } FINDEX_SEARCH_OPS;

  typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
  } GET_FILEEX_INFO_LEVELS;
  typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
  typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
  typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
  typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
  typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
  typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

  typedef void (__attribute__((__stdcall__)) *LPOVERLAPPED_COMPLETION_ROUTINE) (DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped);




  typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    __extension__ union {
      struct {
 HANDLE hMem;
 DWORD dwReserved[3];
      } Block;
      struct {
 DWORD dwCommittedSize;
 DWORD dwUnCommittedSize;
 LPVOID lpFirstBlock;
 LPVOID lpLastBlock;
      } Region;
    } ;
  } PROCESS_HEAP_ENTRY,*LPPROCESS_HEAP_ENTRY,*PPROCESS_HEAP_ENTRY;







  typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
      struct {
 HMODULE LocalizedReasonModule;
 ULONG LocalizedReasonId;
 ULONG ReasonStringCount;
 LPWSTR *ReasonStrings;
      } Detailed;
      LPWSTR SimpleReasonString;
    } Reason;
  } REASON_CONTEXT, *PREASON_CONTEXT;
  typedef DWORD (__attribute__((__stdcall__)) *PTHREAD_START_ROUTINE) (LPVOID lpThreadParameter);
  typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

  typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
  } EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

  typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
  } CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

  typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
  } CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

  typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
  } EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

  typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
  } EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

  typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
  } LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

  typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
  } UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

  typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
  } OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

  typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
  } RIP_INFO, *LPRIP_INFO;

  typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
      EXCEPTION_DEBUG_INFO Exception;
      CREATE_THREAD_DEBUG_INFO CreateThread;
      CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
      EXIT_THREAD_DEBUG_INFO ExitThread;
      EXIT_PROCESS_DEBUG_INFO ExitProcess;
      LOAD_DLL_DEBUG_INFO LoadDll;
      UNLOAD_DLL_DEBUG_INFO UnloadDll;
      OUTPUT_DEBUG_STRING_INFO DebugString;
      RIP_INFO RipInfo;
    } u;
  } DEBUG_EVENT, *LPDEBUG_EVENT;


  typedef PCONTEXT LPCONTEXT;
}
extern "C" {




  typedef struct _CONTRACT_DESCRIPTION CONTRACT_DESCRIPTION;
  typedef struct _BEM_REFERENCE BEM_REFERENCE;
  typedef void (__attribute__((__stdcall__)) *BEM_FREE_INTERFACE_CALLBACK) (void *interfaceInstance);

  HRESULT __attribute__((__stdcall__)) BemCreateReference (const GUID & iid, void *interfaceInstance, BEM_FREE_INTERFACE_CALLBACK freeCallback, BEM_REFERENCE **reference);
  HRESULT __attribute__((__stdcall__)) BemCreateContractFrom (LPCWSTR dllPath, const GUID & extensionId, const CONTRACT_DESCRIPTION *contractDescription, void *hostContract, void **contract);
  HRESULT __attribute__((__stdcall__)) BemCopyReference (BEM_REFERENCE *reference, BEM_REFERENCE **copiedReference);
  void __attribute__((__stdcall__)) BemFreeReference (BEM_REFERENCE *reference);
  void __attribute__((__stdcall__)) BemFreeContract (void *contract);




}
extern "C" {



             WINBOOL __attribute__((__stdcall__)) IsDebuggerPresent (void);
             void __attribute__((__stdcall__)) OutputDebugStringA (LPCSTR lpOutputString);
             void __attribute__((__stdcall__)) OutputDebugStringW (LPCWSTR lpOutputString);





             void __attribute__((__stdcall__)) DebugBreak (void);
             WINBOOL __attribute__((__stdcall__)) ContinueDebugEvent (DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus);
             WINBOOL __attribute__((__stdcall__)) WaitForDebugEvent (LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds);
             WINBOOL __attribute__((__stdcall__)) DebugActiveProcess (DWORD dwProcessId);
             WINBOOL __attribute__((__stdcall__)) DebugActiveProcessStop (DWORD dwProcessId);
             WINBOOL __attribute__((__stdcall__)) CheckRemoteDebuggerPresent (HANDLE hProcess, PBOOL pbDebuggerPresent);



}
extern "C" {



  typedef LONG (__attribute__((__stdcall__)) *PTOP_LEVEL_EXCEPTION_FILTER) (struct _EXCEPTION_POINTERS *ExceptionInfo);
  typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

             LONG __attribute__((__stdcall__)) UnhandledExceptionFilter (struct _EXCEPTION_POINTERS *ExceptionInfo);
             LPTOP_LEVEL_EXCEPTION_FILTER __attribute__((__stdcall__)) SetUnhandledExceptionFilter (LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
             UINT __attribute__((__stdcall__)) SetErrorMode (UINT uMode);
             PVOID __attribute__((__stdcall__)) AddVectoredExceptionHandler (ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
             ULONG __attribute__((__stdcall__)) RemoveVectoredExceptionHandler (PVOID Handle);
             PVOID __attribute__((__stdcall__)) AddVectoredContinueHandler (ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
             ULONG __attribute__((__stdcall__)) RemoveVectoredContinueHandler (PVOID Handle);
             void __attribute__((__stdcall__)) RaiseException (DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments);
             DWORD __attribute__((__stdcall__)) GetLastError (void);
             void __attribute__((__stdcall__)) SetLastError (DWORD dwErrCode);



}
extern "C" {
}
extern "C" {
  typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
  } BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION,
    *LPBY_HANDLE_FILE_INFORMATION;

             LONG __attribute__((__stdcall__)) CompareFileTime (const FILETIME *lpFileTime1, const FILETIME *lpFileTime2);
             HANDLE __attribute__((__stdcall__)) CreateFileA (LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
             HANDLE __attribute__((__stdcall__)) CreateFileW (LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
             WINBOOL __attribute__((__stdcall__)) DefineDosDeviceW (DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath);
             WINBOOL __attribute__((__stdcall__)) DeleteVolumeMountPointW (LPCWSTR lpszVolumeMountPoint);
             WINBOOL __attribute__((__stdcall__)) FileTimeToLocalFileTime (const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
             WINBOOL __attribute__((__stdcall__)) FindCloseChangeNotification (HANDLE hChangeHandle);
             HANDLE __attribute__((__stdcall__)) FindFirstChangeNotificationA (LPCSTR lpPathName, WINBOOL bWatchSubtree, DWORD dwNotifyFilter);
             HANDLE __attribute__((__stdcall__)) FindFirstChangeNotificationW (LPCWSTR lpPathName, WINBOOL bWatchSubtree, DWORD dwNotifyFilter);
             HANDLE __attribute__((__stdcall__)) FindFirstFileA (LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);
             HANDLE __attribute__((__stdcall__)) FindFirstFileW (LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
             HANDLE __attribute__((__stdcall__)) FindFirstVolumeW (LPWSTR lpszVolumeName, DWORD cchBufferLength);
             WINBOOL __attribute__((__stdcall__)) FindNextChangeNotification (HANDLE hChangeHandle);
             WINBOOL __attribute__((__stdcall__)) FindNextVolumeW (HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength);
             WINBOOL __attribute__((__stdcall__)) FindVolumeClose (HANDLE hFindVolume);
             WINBOOL __attribute__((__stdcall__)) GetDiskFreeSpaceA (LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
             WINBOOL __attribute__((__stdcall__)) GetDiskFreeSpaceW (LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
             UINT __attribute__((__stdcall__)) GetDriveTypeA (LPCSTR lpRootPathName);
             UINT __attribute__((__stdcall__)) GetDriveTypeW (LPCWSTR lpRootPathName);
             DWORD __attribute__((__stdcall__)) GetFileAttributesA (LPCSTR lpFileName);
             DWORD __attribute__((__stdcall__)) GetFileAttributesW (LPCWSTR lpFileName);
             WINBOOL __attribute__((__stdcall__)) GetFileInformationByHandle (HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
             DWORD __attribute__((__stdcall__)) GetFileSize (HANDLE hFile, LPDWORD lpFileSizeHigh);
             WINBOOL __attribute__((__stdcall__)) GetFileSizeEx (HANDLE hFile, PLARGE_INTEGER lpFileSize);
             WINBOOL __attribute__((__stdcall__)) GetFileTime (HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
             DWORD __attribute__((__stdcall__)) GetFileType (HANDLE hFile);
             DWORD __attribute__((__stdcall__)) GetFullPathNameA (LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
             DWORD __attribute__((__stdcall__)) GetFullPathNameW (LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
             DWORD __attribute__((__stdcall__)) GetLogicalDrives (void);
             DWORD __attribute__((__stdcall__)) GetLogicalDriveStringsW (DWORD nBufferLength, LPWSTR lpBuffer);
             DWORD __attribute__((__stdcall__)) GetLongPathNameA (LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer);
             DWORD __attribute__((__stdcall__)) GetLongPathNameW (LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
             DWORD __attribute__((__stdcall__)) GetShortPathNameW (LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);
             UINT __attribute__((__stdcall__)) GetTempFileNameW (LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
             WINBOOL __attribute__((__stdcall__)) GetVolumeInformationW (LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
             WINBOOL __attribute__((__stdcall__)) GetVolumePathNameW (LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength);
             WINBOOL __attribute__((__stdcall__)) LocalFileTimeToFileTime (const FILETIME *lpLocalFileTime, LPFILETIME lpFileTime);
             WINBOOL __attribute__((__stdcall__)) LockFile (HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh);
             DWORD __attribute__((__stdcall__)) QueryDosDeviceW (LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax);
             WINBOOL __attribute__((__stdcall__)) ReadFileEx (HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
             WINBOOL __attribute__((__stdcall__)) ReadFileScatter (HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
             DWORD __attribute__((__stdcall__)) SetFilePointer (HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
             WINBOOL __attribute__((__stdcall__)) SetFileTime (HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime);
             WINBOOL __attribute__((__stdcall__)) SetFileValidData (HANDLE hFile, LONGLONG ValidDataLength);
             WINBOOL __attribute__((__stdcall__)) UnlockFile (HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh);
             WINBOOL __attribute__((__stdcall__)) WriteFileEx (HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
             WINBOOL __attribute__((__stdcall__)) WriteFileGather (HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
             DWORD __attribute__((__stdcall__)) GetTempPathW (DWORD nBufferLength, LPWSTR lpBuffer);
             WINBOOL __attribute__((__stdcall__)) GetVolumeNameForVolumeMountPointW (LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);
             WINBOOL __attribute__((__stdcall__)) GetVolumePathNamesForVolumeNameW (LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
  typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
  } WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;
             WINBOOL __attribute__((__stdcall__)) CreateDirectoryA (LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
             WINBOOL __attribute__((__stdcall__)) CreateDirectoryW (LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
             WINBOOL __attribute__((__stdcall__)) DeleteFileA (LPCSTR lpFileName);
             WINBOOL __attribute__((__stdcall__)) DeleteFileW (LPCWSTR lpFileName);
             WINBOOL __attribute__((__stdcall__)) FindClose (HANDLE hFindFile);
             HANDLE __attribute__((__stdcall__)) FindFirstFileExA (LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
             HANDLE __attribute__((__stdcall__)) FindFirstFileExW (LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
             WINBOOL __attribute__((__stdcall__)) FindNextFileA (HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);
             WINBOOL __attribute__((__stdcall__)) FindNextFileW (HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
             WINBOOL __attribute__((__stdcall__)) FlushFileBuffers (HANDLE hFile);
             WINBOOL __attribute__((__stdcall__)) GetDiskFreeSpaceExA (LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
             WINBOOL __attribute__((__stdcall__)) GetDiskFreeSpaceExW (LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
             WINBOOL __attribute__((__stdcall__)) GetFileAttributesExA (LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
             WINBOOL __attribute__((__stdcall__)) GetFileAttributesExW (LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
             WINBOOL __attribute__((__stdcall__)) LockFileEx (HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped);
             WINBOOL __attribute__((__stdcall__)) ReadFile (HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
             WINBOOL __attribute__((__stdcall__)) RemoveDirectoryA (LPCSTR lpPathName);
             WINBOOL __attribute__((__stdcall__)) RemoveDirectoryW (LPCWSTR lpPathName);
             WINBOOL __attribute__((__stdcall__)) SetEndOfFile (HANDLE hFile);
             WINBOOL __attribute__((__stdcall__)) SetFileAttributesA (LPCSTR lpFileName, DWORD dwFileAttributes);
             WINBOOL __attribute__((__stdcall__)) SetFileAttributesW (LPCWSTR lpFileName, DWORD dwFileAttributes);
             WINBOOL __attribute__((__stdcall__)) SetFilePointerEx (HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod);
             WINBOOL __attribute__((__stdcall__)) UnlockFileEx (HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped);
             WINBOOL __attribute__((__stdcall__)) WriteFile (HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
}
extern "C" {





             WINBOOL __attribute__((__stdcall__)) CloseHandle (HANDLE hObject);
             WINBOOL __attribute__((__stdcall__)) DuplicateHandle (HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwOptions);



             WINBOOL __attribute__((__stdcall__)) GetHandleInformation (HANDLE hObject, LPDWORD lpdwFlags);
             WINBOOL __attribute__((__stdcall__)) SetHandleInformation (HANDLE hObject, DWORD dwMask, DWORD dwFlags);



}
extern "C" {



  typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
  } HEAP_SUMMARY,*PHEAP_SUMMARY;

  typedef PHEAP_SUMMARY LPHEAP_SUMMARY;

             HANDLE __attribute__((__stdcall__)) HeapCreate (DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
             WINBOOL __attribute__((__stdcall__)) HeapDestroy (HANDLE hHeap);
             WINBOOL __attribute__((__stdcall__)) HeapValidate (HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
             SIZE_T __attribute__((__stdcall__)) HeapCompact (HANDLE hHeap, DWORD dwFlags);
  WINBOOL __attribute__((__stdcall__)) HeapSummary (HANDLE hHeap, DWORD dwFlags, LPHEAP_SUMMARY lpSummary);
             DWORD __attribute__((__stdcall__)) GetProcessHeaps (DWORD NumberOfHeaps, PHANDLE ProcessHeaps);
             WINBOOL __attribute__((__stdcall__)) HeapLock (HANDLE hHeap);
             WINBOOL __attribute__((__stdcall__)) HeapUnlock (HANDLE hHeap);
             WINBOOL __attribute__((__stdcall__)) HeapWalk (HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);
             WINBOOL __attribute__((__stdcall__)) HeapSetInformation (HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
             WINBOOL __attribute__((__stdcall__)) HeapQueryInformation (HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);



             LPVOID __attribute__((__stdcall__)) HeapAlloc (HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
             LPVOID __attribute__((__stdcall__)) HeapReAlloc (HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
             WINBOOL __attribute__((__stdcall__)) HeapFree (HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
             SIZE_T __attribute__((__stdcall__)) HeapSize (HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
             HANDLE __attribute__((__stdcall__)) GetProcessHeap (void);



}
extern "C" {



             WINBOOL __attribute__((__stdcall__)) GetOverlappedResult (HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, WINBOOL bWait);
             HANDLE __attribute__((__stdcall__)) CreateIoCompletionPort (HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
             WINBOOL __attribute__((__stdcall__)) GetQueuedCompletionStatus (HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED *lpOverlapped, DWORD dwMilliseconds);
             WINBOOL __attribute__((__stdcall__)) PostQueuedCompletionStatus (HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped);
             WINBOOL __attribute__((__stdcall__)) DeviceIoControl (HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
             WINBOOL __attribute__((__stdcall__)) CancelIo (HANDLE hFile);
             WINBOOL __attribute__((__stdcall__)) GetOverlappedResultEx (HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, DWORD dwMilliseconds, WINBOOL bAlertable);



}
extern "C" {




             LONG __attribute__((__stdcall__)) InterlockedIncrement (LONG volatile *lpAddend);
             LONG __attribute__((__stdcall__)) InterlockedDecrement (LONG volatile *lpAddend);
             LONG __attribute__((__stdcall__)) InterlockedExchange (LONG volatile *Target, LONG Value);
             LONG __attribute__((__stdcall__)) InterlockedExchangeAdd (LONG volatile *Addend, LONG Value);
             LONG __attribute__((__stdcall__)) InterlockedCompareExchange (LONG volatile *Destination, LONG Exchange, LONG Comperand);
             LONGLONG __attribute__((__stdcall__)) InterlockedCompareExchange64 (LONGLONG volatile *Destination, LONGLONG Exchange, LONGLONG Comperand);
             void __attribute__((__stdcall__)) InitializeSListHead (PSLIST_HEADER ListHead);
             PSLIST_ENTRY __attribute__((__stdcall__)) InterlockedPopEntrySList (PSLIST_HEADER ListHead);
             PSLIST_ENTRY __attribute__((__stdcall__)) InterlockedPushEntrySList (PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
             PSLIST_ENTRY __attribute__((__stdcall__)) InterlockedFlushSList (PSLIST_HEADER ListHead);
             USHORT __attribute__((__stdcall__)) QueryDepthSList (PSLIST_HEADER ListHead);
}
extern "C" {



             WINBOOL __attribute__((__stdcall__)) IsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result);



}
extern "C" {



  typedef struct tagENUMUILANG {
    ULONG NumOfEnumUILang;
    ULONG SizeOfEnumUIBuffer;
    LANGID *pEnumUIBuffer;
  } ENUMUILANG, *PENUMUILANG;


  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESLANGPROCA) (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESLANGPROCW) (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESNAMEPROCA) (HMODULE hModule, LPCSTR lpType, LPSTR lpName, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESNAMEPROCW) (HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESTYPEPROCA) (HMODULE hModule, LPSTR lpType, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *ENUMRESTYPEPROCW) (HMODULE hModule, LPWSTR lpType, LONG_PTR lParam);
  typedef WINBOOL (__attribute__((__stdcall__)) *PGET_MODULE_HANDLE_EXA) (DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule);
  typedef WINBOOL (__attribute__((__stdcall__)) *PGET_MODULE_HANDLE_EXW) (DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule);


  typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;
             HRSRC __attribute__((__stdcall__)) FindResourceExW (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage);
             __attribute__((noreturn)) void __attribute__((__stdcall__)) FreeLibraryAndExitThread (HMODULE hLibModule, DWORD dwExitCode);
             WINBOOL __attribute__((__stdcall__)) FreeResource (HGLOBAL hResData);
             DWORD __attribute__((__stdcall__)) GetModuleFileNameA (HMODULE hModule, LPSTR lpFilename, DWORD nSize);
             DWORD __attribute__((__stdcall__)) GetModuleFileNameW (HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
             HMODULE __attribute__((__stdcall__)) GetModuleHandleA (LPCSTR lpModuleName);
             HMODULE __attribute__((__stdcall__)) GetModuleHandleW (LPCWSTR lpModuleName);
             HMODULE __attribute__((__stdcall__)) LoadLibraryExA (LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
             HMODULE __attribute__((__stdcall__)) LoadLibraryExW (LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
             HGLOBAL __attribute__((__stdcall__)) LoadResource (HMODULE hModule, HRSRC hResInfo);
             int __attribute__((__stdcall__)) LoadStringA (HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax);
             int __attribute__((__stdcall__)) LoadStringW (HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
             LPVOID __attribute__((__stdcall__)) LockResource (HGLOBAL hResData);
             DWORD __attribute__((__stdcall__)) SizeofResource (HMODULE hModule, HRSRC hResInfo);
             DLL_DIRECTORY_COOKIE __attribute__((__stdcall__)) AddDllDirectory (PCWSTR NewDirectory);
             WINBOOL __attribute__((__stdcall__)) RemoveDllDirectory (DLL_DIRECTORY_COOKIE Cookie);
             WINBOOL __attribute__((__stdcall__)) SetDefaultDllDirectories (DWORD DirectoryFlags);
             WINBOOL __attribute__((__stdcall__)) GetModuleHandleExA (DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule);
             WINBOOL __attribute__((__stdcall__)) GetModuleHandleExW (DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule);
             WINBOOL __attribute__((__stdcall__)) EnumResourceLanguagesA(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,ENUMRESLANGPROCA lpEnumFunc,LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumResourceLanguagesW(HMODULE hModule,LPCWSTR lpType,LPCWSTR lpName,ENUMRESLANGPROCW lpEnumFunc,LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) DisableThreadLibraryCalls (HMODULE hLibModule);
             WINBOOL __attribute__((__stdcall__)) FreeLibrary (HMODULE hLibModule);
             FARPROC __attribute__((__stdcall__)) GetProcAddress (HMODULE hModule, LPCSTR lpProcName);






}
extern "C" {



  typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
  } MEMORY_RESOURCE_NOTIFICATION_TYPE;
             SIZE_T __attribute__((__stdcall__)) VirtualQuery (LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
             WINBOOL __attribute__((__stdcall__)) FlushViewOfFile (LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush);
             WINBOOL __attribute__((__stdcall__)) UnmapViewOfFile (LPCVOID lpBaseAddress);
             HANDLE __attribute__((__stdcall__)) CreateFileMappingFromApp (HANDLE hFile, PSECURITY_ATTRIBUTES SecurityAttributes, ULONG PageProtection, ULONG64 MaximumSize, PCWSTR Name);
             PVOID __attribute__((__stdcall__)) MapViewOfFileFromApp (HANDLE hFileMappingObject, ULONG DesiredAccess, ULONG64 FileOffset, SIZE_T NumberOfBytesToMap);
             LPVOID __attribute__((__stdcall__)) VirtualAlloc (LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
             WINBOOL __attribute__((__stdcall__)) VirtualFree (LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
             WINBOOL __attribute__((__stdcall__)) VirtualProtect (LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
             LPVOID __attribute__((__stdcall__)) VirtualAllocEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
             WINBOOL __attribute__((__stdcall__)) VirtualFreeEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
             WINBOOL __attribute__((__stdcall__)) VirtualProtectEx (HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
             SIZE_T __attribute__((__stdcall__)) VirtualQueryEx (HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
             WINBOOL __attribute__((__stdcall__)) ReadProcessMemory (HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
             WINBOOL __attribute__((__stdcall__)) WriteProcessMemory (HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesWritten);
             HANDLE __attribute__((__stdcall__)) CreateFileMappingW (HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
             HANDLE __attribute__((__stdcall__)) OpenFileMappingW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
             LPVOID __attribute__((__stdcall__)) MapViewOfFile (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
             LPVOID __attribute__((__stdcall__)) MapViewOfFileEx (HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress);
             SIZE_T __attribute__((__stdcall__)) GetLargePageMinimum (void);
             WINBOOL __attribute__((__stdcall__)) GetProcessWorkingSetSizeEx (HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags);
             WINBOOL __attribute__((__stdcall__)) SetProcessWorkingSetSizeEx (HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags);
             WINBOOL __attribute__((__stdcall__)) VirtualLock (LPVOID lpAddress, SIZE_T dwSize);
             WINBOOL __attribute__((__stdcall__)) VirtualUnlock (LPVOID lpAddress, SIZE_T dwSize);
             UINT __attribute__((__stdcall__)) GetWriteWatch (DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID *lpAddresses, ULONG_PTR *lpdwCount, LPDWORD lpdwGranularity);
             UINT __attribute__((__stdcall__)) ResetWriteWatch (LPVOID lpBaseAddress, SIZE_T dwRegionSize);
             HANDLE __attribute__((__stdcall__)) CreateMemoryResourceNotification (MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
             WINBOOL __attribute__((__stdcall__)) QueryMemoryResourceNotification (HANDLE ResourceNotificationHandle, PBOOL ResourceState);
             WINBOOL __attribute__((__stdcall__)) GetSystemFileCacheSize (PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags);
             WINBOOL __attribute__((__stdcall__)) SetSystemFileCacheSize (SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags);
}
extern "C" {



            WINBOOL __attribute__((__stdcall__)) ImpersonateNamedPipeClient (HANDLE hNamedPipe);
             WINBOOL __attribute__((__stdcall__)) CreatePipe (PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize);
             WINBOOL __attribute__((__stdcall__)) ConnectNamedPipe (HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped);
             WINBOOL __attribute__((__stdcall__)) DisconnectNamedPipe (HANDLE hNamedPipe);
             WINBOOL __attribute__((__stdcall__)) SetNamedPipeHandleState (HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout);
             WINBOOL __attribute__((__stdcall__)) PeekNamedPipe (HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage);
             WINBOOL __attribute__((__stdcall__)) TransactNamedPipe (HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped);
             HANDLE __attribute__((__stdcall__)) CreateNamedPipeW (LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
             WINBOOL __attribute__((__stdcall__)) WaitNamedPipeW (LPCWSTR lpNamedPipeName, DWORD nTimeOut);
}
extern "C" {





             HANDLE __attribute__((__stdcall__)) CreatePrivateNamespaceW (LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);
             HANDLE __attribute__((__stdcall__)) OpenPrivateNamespaceW (LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);




             BOOLEAN __attribute__((__stdcall__)) ClosePrivateNamespace (HANDLE Handle, ULONG Flags);
             HANDLE __attribute__((__stdcall__)) CreateBoundaryDescriptorW (LPCWSTR Name, ULONG Flags);




             WINBOOL __attribute__((__stdcall__)) AddSIDToBoundaryDescriptor (HANDLE *BoundaryDescriptor, PSID RequiredSid);
             void __attribute__((__stdcall__)) DeleteBoundaryDescriptor (HANDLE BoundaryDescriptor);



}
extern "C" {



             LPCH __attribute__((__stdcall__)) GetEnvironmentStrings (void);
             LPWCH __attribute__((__stdcall__)) GetEnvironmentStringsW (void);
             WINBOOL __attribute__((__stdcall__)) SetEnvironmentStringsW (LPWCH NewEnvironment);
             WINBOOL __attribute__((__stdcall__)) FreeEnvironmentStringsA (LPCH penv);
             WINBOOL __attribute__((__stdcall__)) FreeEnvironmentStringsW (LPWCH penv);
             HANDLE __attribute__((__stdcall__)) GetStdHandle (DWORD nStdHandle);
             WINBOOL __attribute__((__stdcall__)) SetStdHandle (DWORD nStdHandle, HANDLE hHandle);



             LPSTR __attribute__((__stdcall__)) GetCommandLineA (void);
             LPWSTR __attribute__((__stdcall__)) GetCommandLineW (void);
             DWORD __attribute__((__stdcall__)) GetEnvironmentVariableA (LPCSTR lpName, LPSTR lpBuffer, DWORD nSize);
             DWORD __attribute__((__stdcall__)) GetEnvironmentVariableW (LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize);
             WINBOOL __attribute__((__stdcall__)) SetEnvironmentVariableA (LPCSTR lpName, LPCSTR lpValue);
             WINBOOL __attribute__((__stdcall__)) SetEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpValue);
             DWORD __attribute__((__stdcall__)) ExpandEnvironmentStringsA (LPCSTR lpSrc, LPSTR lpDst, DWORD nSize);
             DWORD __attribute__((__stdcall__)) ExpandEnvironmentStringsW (LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
             WINBOOL __attribute__((__stdcall__)) SetCurrentDirectoryA (LPCSTR lpPathName);
             WINBOOL __attribute__((__stdcall__)) SetCurrentDirectoryW (LPCWSTR lpPathName);
             DWORD __attribute__((__stdcall__)) GetCurrentDirectoryA (DWORD nBufferLength, LPSTR lpBuffer);
             DWORD __attribute__((__stdcall__)) GetCurrentDirectoryW (DWORD nBufferLength, LPWSTR lpBuffer);
             DWORD __attribute__((__stdcall__)) SearchPathW (LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
             DWORD __attribute__((__stdcall__)) SearchPathA (LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
             WINBOOL __attribute__((__stdcall__)) NeedCurrentDirectoryForExePathA (LPCSTR ExeName);
             WINBOOL __attribute__((__stdcall__)) NeedCurrentDirectoryForExePathW (LPCWSTR ExeName);
}
extern "C" {
  typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
  } PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

  typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
  } STARTUPINFOA, *LPSTARTUPINFOA;

  typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
  } STARTUPINFOW, *LPSTARTUPINFOW;

  typedef STARTUPINFOW STARTUPINFO;
  typedef LPSTARTUPINFOW LPSTARTUPINFO;

  typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;

             DWORD __attribute__((__stdcall__)) QueueUserAPC (PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
             WINBOOL __attribute__((__stdcall__)) GetProcessTimes (HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
             __attribute__((noreturn)) void __attribute__((__stdcall__)) ExitProcess (UINT uExitCode);
             WINBOOL __attribute__((__stdcall__)) TerminateProcess (HANDLE hProcess, UINT uExitCode);
             WINBOOL __attribute__((__stdcall__)) GetExitCodeProcess (HANDLE hProcess, LPDWORD lpExitCode);
             WINBOOL __attribute__((__stdcall__)) SwitchToThread (void);
             HANDLE __attribute__((__stdcall__)) CreateRemoteThread (HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
             HANDLE __attribute__((__stdcall__)) OpenThread (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwThreadId);
             WINBOOL __attribute__((__stdcall__)) SetThreadPriorityBoost (HANDLE hThread, WINBOOL bDisablePriorityBoost);
             WINBOOL __attribute__((__stdcall__)) GetThreadPriorityBoost (HANDLE hThread, PBOOL pDisablePriorityBoost);
             WINBOOL __attribute__((__stdcall__)) TerminateThread (HANDLE hThread, DWORD dwExitCode);
             WINBOOL __attribute__((__stdcall__)) SetProcessShutdownParameters (DWORD dwLevel, DWORD dwFlags);
             DWORD __attribute__((__stdcall__)) GetProcessVersion (DWORD ProcessId);
             void __attribute__((__stdcall__)) GetStartupInfoW (LPSTARTUPINFOW lpStartupInfo);
            WINBOOL __attribute__((__stdcall__)) SetThreadToken (PHANDLE Thread, HANDLE Token);
            WINBOOL __attribute__((__stdcall__)) OpenProcessToken (HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
            WINBOOL __attribute__((__stdcall__)) OpenThreadToken (HANDLE ThreadHandle, DWORD DesiredAccess, WINBOOL OpenAsSelf, PHANDLE TokenHandle);
             WINBOOL __attribute__((__stdcall__)) SetPriorityClass (HANDLE hProcess, DWORD dwPriorityClass);
             WINBOOL __attribute__((__stdcall__)) SetThreadStackGuarantee (PULONG StackSizeInBytes);
             DWORD __attribute__((__stdcall__)) GetPriorityClass (HANDLE hProcess);
             WINBOOL __attribute__((__stdcall__)) ProcessIdToSessionId (DWORD dwProcessId, DWORD *pSessionId);
             DWORD __attribute__((__stdcall__)) GetProcessId (HANDLE Process);
             DWORD __attribute__((__stdcall__)) GetThreadId (HANDLE Thread);
             HANDLE __attribute__((__stdcall__)) CreateRemoteThreadEx (HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId);
             WINBOOL __attribute__((__stdcall__)) GetThreadContext (HANDLE hThread, LPCONTEXT lpContext);
             WINBOOL __attribute__((__stdcall__)) SetThreadContext (HANDLE hThread, const CONTEXT *lpContext);
             WINBOOL __attribute__((__stdcall__)) FlushInstructionCache (HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize);
             WINBOOL __attribute__((__stdcall__)) GetThreadTimes (HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
             HANDLE __attribute__((__stdcall__)) OpenProcess (DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwProcessId);
             WINBOOL __attribute__((__stdcall__)) GetProcessHandleCount (HANDLE hProcess, PDWORD pdwHandleCount);
             DWORD __attribute__((__stdcall__)) GetCurrentProcessorNumber (void);






             WINBOOL __attribute__((__stdcall__)) CreateProcessA (LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
             WINBOOL __attribute__((__stdcall__)) CreateProcessW (LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);




            WINBOOL __attribute__((__stdcall__)) CreateProcessAsUserW (HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
             HANDLE __attribute__((__stdcall__)) GetCurrentProcess (void);
             DWORD __attribute__((__stdcall__)) GetCurrentProcessId (void);
             HANDLE __attribute__((__stdcall__)) GetCurrentThread (void);
             DWORD __attribute__((__stdcall__)) GetCurrentThreadId (void);
  WINBOOL __attribute__((__stdcall__)) IsProcessorFeaturePresent (DWORD ProcessorFeature);



             HANDLE __attribute__((__stdcall__)) CreateThread (LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
             WINBOOL __attribute__((__stdcall__)) SetThreadPriority (HANDLE hThread, int nPriority);
             int __attribute__((__stdcall__)) GetThreadPriority (HANDLE hThread);
             __attribute__((noreturn)) void __attribute__((__stdcall__)) ExitThread (DWORD dwExitCode);
             WINBOOL __attribute__((__stdcall__)) GetExitCodeThread (HANDLE hThread, LPDWORD lpExitCode);
             DWORD __attribute__((__stdcall__)) SuspendThread (HANDLE hThread);
             DWORD __attribute__((__stdcall__)) ResumeThread (HANDLE hThread);
             DWORD __attribute__((__stdcall__)) TlsAlloc (void);
             LPVOID __attribute__((__stdcall__)) TlsGetValue (DWORD dwTlsIndex);
             WINBOOL __attribute__((__stdcall__)) TlsSetValue (DWORD dwTlsIndex, LPVOID lpTlsValue);
             WINBOOL __attribute__((__stdcall__)) TlsFree (DWORD dwTlsIndex);







}
extern "C" {
}
extern "C" {


             WINBOOL __attribute__((__stdcall__)) QueryPerformanceCounter (LARGE_INTEGER *lpPerformanceCount);
             WINBOOL __attribute__((__stdcall__)) QueryPerformanceFrequency (LARGE_INTEGER *lpFrequency);


}
extern "C" {
}
extern "C" {







}
extern "C" {



            WINBOOL __attribute__((__stdcall__)) AccessCheck (PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
            WINBOOL __attribute__((__stdcall__)) AccessCheckAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);




            WINBOOL __attribute__((__stdcall__)) AccessCheckByType (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
            WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeResultList (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccessList, LPDWORD AccessStatusList);
            WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);




            WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeResultListAndAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);




            WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeResultListAndAuditAlarmByHandleW (LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccessList, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);




            WINBOOL __attribute__((__stdcall__)) AddAccessAllowedAce (PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
            WINBOOL __attribute__((__stdcall__)) AddAccessAllowedAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
            WINBOOL __attribute__((__stdcall__)) AddAccessAllowedObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid);
            WINBOOL __attribute__((__stdcall__)) AddAccessDeniedAce (PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
            WINBOOL __attribute__((__stdcall__)) AddAccessDeniedAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
            WINBOOL __attribute__((__stdcall__)) AddAccessDeniedObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid);
            WINBOOL __attribute__((__stdcall__)) AddAce (PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength);
            WINBOOL __attribute__((__stdcall__)) AddAuditAccessAce (PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
            WINBOOL __attribute__((__stdcall__)) AddAuditAccessAceEx (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
            WINBOOL __attribute__((__stdcall__)) AddAuditAccessObjectAce (PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
            WINBOOL __attribute__((__stdcall__)) AdjustTokenGroups (HANDLE TokenHandle, WINBOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength, PTOKEN_GROUPS PreviousState, PDWORD ReturnLength);
            WINBOOL __attribute__((__stdcall__)) AdjustTokenPrivileges (HANDLE TokenHandle, WINBOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
            WINBOOL __attribute__((__stdcall__)) AllocateAndInitializeSid (PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID *pSid);
            WINBOOL __attribute__((__stdcall__)) AllocateLocallyUniqueId (PLUID Luid);
            WINBOOL __attribute__((__stdcall__)) AreAllAccessesGranted (DWORD GrantedAccess, DWORD DesiredAccess);
            WINBOOL __attribute__((__stdcall__)) AreAnyAccessesGranted (DWORD GrantedAccess, DWORD DesiredAccess);
            WINBOOL __attribute__((__stdcall__)) CheckTokenMembership (HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember);







            WINBOOL __attribute__((__stdcall__)) ConvertToAutoInheritPrivateObjectSecurity (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, GUID *ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping);
            WINBOOL __attribute__((__stdcall__)) CopySid (DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid);
            WINBOOL __attribute__((__stdcall__)) CreatePrivateObjectSecurity (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, WINBOOL IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping);
            WINBOOL __attribute__((__stdcall__)) CreatePrivateObjectSecurityEx (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID *ObjectType, WINBOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
            WINBOOL __attribute__((__stdcall__)) CreatePrivateObjectSecurityWithMultipleInheritance (PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID **ObjectTypes, ULONG GuidCount, WINBOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
            WINBOOL __attribute__((__stdcall__)) CreateRestrictedToken (HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle);
            WINBOOL __attribute__((__stdcall__)) CreateWellKnownSid (WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD *cbSid);
            WINBOOL __attribute__((__stdcall__)) EqualDomainSid (PSID pSid1, PSID pSid2, WINBOOL *pfEqual);

            WINBOOL __attribute__((__stdcall__)) DeleteAce (PACL pAcl, DWORD dwAceIndex);
            WINBOOL __attribute__((__stdcall__)) DestroyPrivateObjectSecurity (PSECURITY_DESCRIPTOR *ObjectDescriptor);
            WINBOOL __attribute__((__stdcall__)) DuplicateToken (HANDLE ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle);
            WINBOOL __attribute__((__stdcall__)) DuplicateTokenEx (HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);
            WINBOOL __attribute__((__stdcall__)) EqualPrefixSid (PSID pSid1, PSID pSid2);
            WINBOOL __attribute__((__stdcall__)) EqualSid (PSID pSid1, PSID pSid2);
            WINBOOL __attribute__((__stdcall__)) FindFirstFreeAce (PACL pAcl, LPVOID *pAce);
            PVOID __attribute__((__stdcall__)) FreeSid (PSID pSid);
            WINBOOL __attribute__((__stdcall__)) GetAce (PACL pAcl, DWORD dwAceIndex, LPVOID *pAce);
            WINBOOL __attribute__((__stdcall__)) GetAclInformation (PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
            WINBOOL __attribute__((__stdcall__)) GetFileSecurityW (LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);




            WINBOOL __attribute__((__stdcall__)) GetKernelObjectSecurity (HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
            DWORD __attribute__((__stdcall__)) GetLengthSid (PSID pSid);
            WINBOOL __attribute__((__stdcall__)) GetPrivateObjectSecurity (PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, PDWORD ReturnLength);
            WINBOOL __attribute__((__stdcall__)) GetSecurityDescriptorControl (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision);
            WINBOOL __attribute__((__stdcall__)) GetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL *pDacl, LPBOOL lpbDaclDefaulted);
            WINBOOL __attribute__((__stdcall__)) GetSecurityDescriptorGroup (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pGroup, LPBOOL lpbGroupDefaulted);
            DWORD __attribute__((__stdcall__)) GetSecurityDescriptorLength (PSECURITY_DESCRIPTOR pSecurityDescriptor);
            WINBOOL __attribute__((__stdcall__)) GetSecurityDescriptorOwner (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pOwner, LPBOOL lpbOwnerDefaulted);
            DWORD __attribute__((__stdcall__)) GetSecurityDescriptorRMControl (PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
            WINBOOL __attribute__((__stdcall__)) GetSecurityDescriptorSacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL *pSacl, LPBOOL lpbSaclDefaulted);
            PSID_IDENTIFIER_AUTHORITY __attribute__((__stdcall__)) GetSidIdentifierAuthority (PSID pSid);
            DWORD __attribute__((__stdcall__)) GetSidLengthRequired (UCHAR nSubAuthorityCount);
            PDWORD __attribute__((__stdcall__)) GetSidSubAuthority (PSID pSid, DWORD nSubAuthority);
            PUCHAR __attribute__((__stdcall__)) GetSidSubAuthorityCount (PSID pSid);
            WINBOOL __attribute__((__stdcall__)) GetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
            WINBOOL __attribute__((__stdcall__)) GetWindowsAccountDomainSid (PSID pSid, PSID pDomainSid, DWORD *cbDomainSid);
            WINBOOL __attribute__((__stdcall__)) ImpersonateAnonymousToken (HANDLE ThreadHandle);
            WINBOOL __attribute__((__stdcall__)) ImpersonateLoggedOnUser (HANDLE hToken);
            WINBOOL __attribute__((__stdcall__)) ImpersonateSelf (SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
            WINBOOL __attribute__((__stdcall__)) InitializeAcl (PACL pAcl, DWORD nAclLength, DWORD dwAclRevision);
            WINBOOL __attribute__((__stdcall__)) InitializeSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision);
            WINBOOL __attribute__((__stdcall__)) InitializeSid (PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount);
            WINBOOL __attribute__((__stdcall__)) IsTokenRestricted (HANDLE TokenHandle);
            WINBOOL __attribute__((__stdcall__)) IsValidAcl (PACL pAcl);
            WINBOOL __attribute__((__stdcall__)) IsValidSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor);
            WINBOOL __attribute__((__stdcall__)) IsValidSid (PSID pSid);
            WINBOOL __attribute__((__stdcall__)) IsWellKnownSid (PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType);
            WINBOOL __attribute__((__stdcall__)) MakeAbsoluteSD (PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, LPDWORD lpdwAbsoluteSecurityDescriptorSize, PACL pDacl, LPDWORD lpdwDaclSize, PACL pSacl, LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, LPDWORD lpdwPrimaryGroupSize);
            WINBOOL __attribute__((__stdcall__)) MakeSelfRelativeSD (PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferLength);
            void __attribute__((__stdcall__)) MapGenericMask (PDWORD AccessMask, PGENERIC_MAPPING GenericMapping);
            WINBOOL __attribute__((__stdcall__)) ObjectCloseAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);




            WINBOOL __attribute__((__stdcall__)) ObjectDeleteAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);




            WINBOOL __attribute__((__stdcall__)) ObjectOpenAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, WINBOOL ObjectCreation, WINBOOL AccessGranted, LPBOOL GenerateOnClose);




            WINBOOL __attribute__((__stdcall__)) ObjectPrivilegeAuditAlarmW (LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);




            WINBOOL __attribute__((__stdcall__)) PrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult);
            WINBOOL __attribute__((__stdcall__)) PrivilegedServiceAuditAlarmW (LPCWSTR SubsystemName, LPCWSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
            WINBOOL __attribute__((__stdcall__)) RevertToSelf (void);
            WINBOOL __attribute__((__stdcall__)) SetAclInformation (PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
            WINBOOL __attribute__((__stdcall__)) SetFileSecurityW (LPCWSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);




            WINBOOL __attribute__((__stdcall__)) SetKernelObjectSecurity (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
            WINBOOL __attribute__((__stdcall__)) SetPrivateObjectSecurity (SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token);
            WINBOOL __attribute__((__stdcall__)) SetPrivateObjectSecurityEx (SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token);





            WINBOOL __attribute__((__stdcall__)) SetSecurityDescriptorControl (PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);
            WINBOOL __attribute__((__stdcall__)) SetSecurityDescriptorDacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bDaclPresent, PACL pDacl, WINBOOL bDaclDefaulted);
            WINBOOL __attribute__((__stdcall__)) SetSecurityDescriptorGroup (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, WINBOOL bGroupDefaulted);
            WINBOOL __attribute__((__stdcall__)) SetSecurityDescriptorOwner (PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, WINBOOL bOwnerDefaulted);
            DWORD __attribute__((__stdcall__)) SetSecurityDescriptorRMControl (PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
            WINBOOL __attribute__((__stdcall__)) SetSecurityDescriptorSacl (PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bSaclPresent, PACL pSacl, WINBOOL bSaclDefaulted);
            WINBOOL __attribute__((__stdcall__)) SetTokenInformation (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength);







}
extern "C" {
  typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;

  typedef RTL_RUN_ONCE INIT_ONCE;
  typedef PRTL_RUN_ONCE PINIT_ONCE;
  typedef PRTL_RUN_ONCE LPINIT_ONCE;

  typedef WINBOOL (__attribute__((__stdcall__)) *PINIT_ONCE_FN) (PINIT_ONCE InitOnce, PVOID Parameter, PVOID *Context);
  typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;

             void __attribute__((__stdcall__)) EnterCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
             void __attribute__((__stdcall__)) LeaveCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
             WINBOOL __attribute__((__stdcall__)) TryEnterCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
             void __attribute__((__stdcall__)) DeleteCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
             WINBOOL __attribute__((__stdcall__)) SetEvent (HANDLE hEvent);
             WINBOOL __attribute__((__stdcall__)) ResetEvent (HANDLE hEvent);
             WINBOOL __attribute__((__stdcall__)) ReleaseSemaphore (HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount);
             WINBOOL __attribute__((__stdcall__)) ReleaseMutex (HANDLE hMutex);
             DWORD __attribute__((__stdcall__)) WaitForSingleObjectEx (HANDLE hHandle, DWORD dwMilliseconds, WINBOOL bAlertable);
             DWORD __attribute__((__stdcall__)) WaitForMultipleObjectsEx (DWORD nCount, const HANDLE *lpHandles, WINBOOL bWaitAll, DWORD dwMilliseconds, WINBOOL bAlertable);
             HANDLE __attribute__((__stdcall__)) OpenMutexW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
             HANDLE __attribute__((__stdcall__)) OpenEventA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
             HANDLE __attribute__((__stdcall__)) OpenEventW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
             HANDLE __attribute__((__stdcall__)) OpenSemaphoreW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
  WINBOOL __attribute__((__stdcall__)) WaitOnAddress (volatile void *Address, PVOID CompareAddress, SIZE_T AddressSize, DWORD dwMilliseconds);
  void __attribute__((__stdcall__)) WakeByAddressSingle (PVOID Address);
  void __attribute__((__stdcall__)) WakeByAddressAll (PVOID Address);
  typedef void (__attribute__((__stdcall__)) *PTIMERAPCROUTINE) (LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue);

  typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
  typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
  typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;





             void __attribute__((__stdcall__)) InitializeCriticalSection (LPCRITICAL_SECTION lpCriticalSection);
             WINBOOL __attribute__((__stdcall__)) InitializeCriticalSectionAndSpinCount (LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
             DWORD __attribute__((__stdcall__)) SetCriticalSectionSpinCount (LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
             DWORD __attribute__((__stdcall__)) WaitForSingleObject (HANDLE hHandle, DWORD dwMilliseconds);
             DWORD __attribute__((__stdcall__)) SleepEx (DWORD dwMilliseconds, WINBOOL bAlertable);
             HANDLE __attribute__((__stdcall__)) CreateMutexA (LPSECURITY_ATTRIBUTES lpMutexAttributes, WINBOOL bInitialOwner, LPCSTR lpName);
             HANDLE __attribute__((__stdcall__)) CreateMutexW (LPSECURITY_ATTRIBUTES lpMutexAttributes, WINBOOL bInitialOwner, LPCWSTR lpName);
             HANDLE __attribute__((__stdcall__)) CreateEventA (LPSECURITY_ATTRIBUTES lpEventAttributes, WINBOOL bManualReset, WINBOOL bInitialState, LPCSTR lpName);
             HANDLE __attribute__((__stdcall__)) CreateEventW (LPSECURITY_ATTRIBUTES lpEventAttributes, WINBOOL bManualReset, WINBOOL bInitialState, LPCWSTR lpName);
             WINBOOL __attribute__((__stdcall__)) SetWaitableTimer (HANDLE hTimer, const LARGE_INTEGER *lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, WINBOOL fResume);
             WINBOOL __attribute__((__stdcall__)) CancelWaitableTimer (HANDLE hTimer);
             HANDLE __attribute__((__stdcall__)) OpenWaitableTimerW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpTimerName);
  WINBOOL __attribute__((__stdcall__)) EnterSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier, DWORD dwFlags);
  WINBOOL __attribute__((__stdcall__)) InitializeSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier, LONG lTotalThreads, LONG lSpinCount);
  WINBOOL __attribute__((__stdcall__)) DeleteSynchronizationBarrier (LPSYNCHRONIZATION_BARRIER lpBarrier);
             void __attribute__((__stdcall__)) Sleep (DWORD dwMilliseconds);
             DWORD __attribute__((__stdcall__)) SignalObjectAndWait (HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, WINBOOL bAlertable);
}
extern "C" {



  typedef struct _SYSTEM_INFO {
    __extension__ union {
      DWORD dwOemId;
      __extension__ struct {
 WORD wProcessorArchitecture;
 WORD wReserved;
      } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
  } SYSTEM_INFO, *LPSYSTEM_INFO;

             void __attribute__((__stdcall__)) GetSystemTime (LPSYSTEMTIME lpSystemTime);
             void __attribute__((__stdcall__)) GetSystemTimeAsFileTime (LPFILETIME lpSystemTimeAsFileTime);
             void __attribute__((__stdcall__)) GetLocalTime (LPSYSTEMTIME lpSystemTime);
             void __attribute__((__stdcall__)) GetNativeSystemInfo (LPSYSTEM_INFO lpSystemInfo);






             DWORD __attribute__((__stdcall__)) GetVersion (void);

  typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
  } MEMORYSTATUSEX,*LPMEMORYSTATUSEX;

  typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
  } COMPUTER_NAME_FORMAT;

             WINBOOL __attribute__((__stdcall__)) GlobalMemoryStatusEx (LPMEMORYSTATUSEX lpBuffer);
             WINBOOL __attribute__((__stdcall__)) SetLocalTime (const SYSTEMTIME *lpSystemTime);
             void __attribute__((__stdcall__)) GetSystemInfo (LPSYSTEM_INFO lpSystemInfo);
             DWORD __attribute__((__stdcall__)) GetTickCount (void);
             WINBOOL __attribute__((__stdcall__)) GetSystemTimeAdjustment (PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled);
             UINT __attribute__((__stdcall__)) GetSystemDirectoryA (LPSTR lpBuffer, UINT uSize);
             UINT __attribute__((__stdcall__)) GetSystemDirectoryW (LPWSTR lpBuffer, UINT uSize);
             UINT __attribute__((__stdcall__)) GetWindowsDirectoryA (LPSTR lpBuffer, UINT uSize);
             UINT __attribute__((__stdcall__)) GetWindowsDirectoryW (LPWSTR lpBuffer, UINT uSize);
             UINT __attribute__((__stdcall__)) GetSystemWindowsDirectoryA (LPSTR lpBuffer, UINT uSize);
             UINT __attribute__((__stdcall__)) GetSystemWindowsDirectoryW (LPWSTR lpBuffer, UINT uSize);
             WINBOOL __attribute__((__stdcall__)) GetComputerNameExA (COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize);
             WINBOOL __attribute__((__stdcall__)) GetComputerNameExW (COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
             WINBOOL __attribute__((__stdcall__)) SetComputerNameExW (COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer);
             WINBOOL __attribute__((__stdcall__)) SetSystemTime (const SYSTEMTIME *lpSystemTime);
             WINBOOL __attribute__((__stdcall__)) GetVersionExA (LPOSVERSIONINFOA lpVersionInformation);
             WINBOOL __attribute__((__stdcall__)) GetVersionExW (LPOSVERSIONINFOW lpVersionInformation);
             WINBOOL __attribute__((__stdcall__)) GetLogicalProcessorInformation (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength);
           ULONGLONG __attribute__((__stdcall__)) VerSetConditionMask (ULONGLONG ConditionMask, ULONG TypeMask, UCHAR Condition);
             void __attribute__((__stdcall__)) GetSystemTimePreciseAsFileTime (LPFILETIME lpSystemTimeAsFileTime);
             UINT __attribute__((__stdcall__)) EnumSystemFirmwareTables (DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize);
             UINT __attribute__((__stdcall__)) GetSystemFirmwareTable (DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize);
}
extern "C" {



             WINBOOL __attribute__((__stdcall__)) GetNumaHighestNodeNumber (PULONG HighestNodeNumber);







}
extern "C" {



  typedef void (__attribute__((__stdcall__)) *PTP_WIN32_IO_CALLBACK) (PTP_CALLBACK_INSTANCE Instance, PVOID Context, PVOID Overlapped, ULONG IoResult, ULONG_PTR NumberOfBytesTransferred, PTP_IO Io);
}
extern "C" {



             WINBOOL __attribute__((__stdcall__)) CreateTimerQueueTimer (PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags);
             WINBOOL __attribute__((__stdcall__)) DeleteTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent);



             WINBOOL __attribute__((__stdcall__)) QueueUserWorkItem (LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags);
             WINBOOL __attribute__((__stdcall__)) UnregisterWaitEx (HANDLE WaitHandle, HANDLE CompletionEvent);
             HANDLE __attribute__((__stdcall__)) CreateTimerQueue (void);
             WINBOOL __attribute__((__stdcall__)) ChangeTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period);
             WINBOOL __attribute__((__stdcall__)) DeleteTimerQueueEx (HANDLE TimerQueue, HANDLE CompletionEvent);



}
extern "C" {



             PVOID __attribute__((__stdcall__)) EncodePointer (PVOID Ptr);
             PVOID __attribute__((__stdcall__)) DecodePointer (PVOID Ptr);



             PVOID __attribute__((__stdcall__)) EncodeSystemPointer (PVOID Ptr);
             PVOID __attribute__((__stdcall__)) DecodeSystemPointer (PVOID Ptr);
             WINBOOL __attribute__((__stdcall__)) Beep (DWORD dwFreq, DWORD dwDuration);



}
extern "C" {



             WINBOOL __attribute__((__stdcall__)) Wow64DisableWow64FsRedirection (PVOID *OldValue);
             WINBOOL __attribute__((__stdcall__)) Wow64RevertWow64FsRedirection (PVOID OlValue);
             WINBOOL __attribute__((__stdcall__)) IsWow64Process (HANDLE hProcess, PBOOL Wow64Process);



}
extern "C" {
}
extern "C" {
  typedef void (__attribute__((__stdcall__)) *PFIBER_START_ROUTINE) (LPVOID lpFiberParameter);
  typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;


  typedef PLDT_ENTRY LPLDT_ENTRY;
  typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
  } COMMPROP,*LPCOMMPROP;



  typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
  } COMSTAT,*LPCOMSTAT;
  typedef struct _DCB {
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary: 1;
    DWORD fParity: 1;
    DWORD fOutxCtsFlow:1;
    DWORD fOutxDsrFlow:1;
    DWORD fDtrControl:2;
    DWORD fDsrSensitivity:1;
    DWORD fTXContinueOnXoff: 1;
    DWORD fOutX: 1;
    DWORD fInX: 1;
    DWORD fErrorChar: 1;
    DWORD fNull: 1;
    DWORD fRtsControl:2;
    DWORD fAbortOnError:1;
    DWORD fDummy2:17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
  } DCB,*LPDCB;

  typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
  } COMMTIMEOUTS,*LPCOMMTIMEOUTS;

  typedef struct _COMMCONFIG {
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;
    DWORD dwProviderOffset;
    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
  } COMMCONFIG,*LPCOMMCONFIG;
  typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
  } MEMORYSTATUS,*LPMEMORYSTATUS;
  typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
  } JIT_DEBUG_INFO,*LPJIT_DEBUG_INFO;

  typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
  typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


  typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
  typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
  typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
  } OFSTRUCT, *LPOFSTRUCT,*POFSTRUCT;
  inline __attribute__((__always_inline__)) LONGLONG InterlockedAnd64 (LONGLONG volatile *Destination, LONGLONG Value) {
    LONGLONG Old;

    do {
      Old = *Destination;
    } while (InterlockedCompareExchange64 (Destination, Old &Value, Old) != Old);
    return Old;
  }

  inline __attribute__((__always_inline__)) LONGLONG InterlockedOr64 (LONGLONG volatile *Destination, LONGLONG Value) {
    LONGLONG Old;

    do {
      Old = *Destination;
    } while (InterlockedCompareExchange64 (Destination, Old | Value, Old) != Old);
    return Old;
  }

  inline __attribute__((__always_inline__)) LONGLONG InterlockedXor64 (LONGLONG volatile *Destination, LONGLONG Value) {
    LONGLONG Old;

    do {
      Old = *Destination;
    } while (InterlockedCompareExchange64 (Destination, Old ^ Value, Old) != Old);
    return Old;
  }

  inline __attribute__((__always_inline__)) LONGLONG InterlockedIncrement64 (LONGLONG volatile *Addend) {
    LONGLONG Old;

    do {
      Old = *Addend;
    } while (InterlockedCompareExchange64 (Addend, Old + 1, Old) != Old);
    return Old + 1;
  }

  inline __attribute__((__always_inline__)) LONGLONG InterlockedDecrement64 (LONGLONG volatile *Addend) {
    LONGLONG Old;

    do {
      Old = *Addend;
    } while (InterlockedCompareExchange64 (Addend, Old - 1, Old) != Old);
    return Old - 1;
  }

  inline __attribute__((__always_inline__)) LONGLONG InterlockedExchange64 (LONGLONG volatile *Target, LONGLONG Value) {
    LONGLONG Old;

    do {
      Old = *Target;
    } while (InterlockedCompareExchange64 (Target, Value, Old) != Old);
    return Old;
  }

  inline __attribute__((__always_inline__)) LONGLONG InterlockedExchangeAdd64 (LONGLONG volatile *Addend, LONGLONG Value) {
    LONGLONG Old;

    do {
      Old = *Addend;
    } while (InterlockedCompareExchange64 (Addend, Old + Value, Old) != Old);
    return Old;
  }



  inline __attribute__((__always_inline__)) PVOID __attribute__((__cdecl__)) __InlineInterlockedCompareExchangePointer (PVOID volatile *Destination, PVOID ExChange, PVOID Comperand) {
    return ((PVOID) (LONG_PTR)InterlockedCompareExchange ((LONG volatile *)Destination,(LONG) (LONG_PTR)ExChange,(LONG) (LONG_PTR)Comperand));
  }
  int __attribute__((__stdcall__)) WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
  int __attribute__((__stdcall__)) wWinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd);
             HGLOBAL __attribute__((__stdcall__)) GlobalAlloc (UINT uFlags, SIZE_T dwBytes);
             HGLOBAL __attribute__((__stdcall__)) GlobalReAlloc (HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
             SIZE_T __attribute__((__stdcall__)) GlobalSize (HGLOBAL hMem);
             UINT __attribute__((__stdcall__)) GlobalFlags (HGLOBAL hMem);
             LPVOID __attribute__((__stdcall__)) GlobalLock (HGLOBAL hMem);
             HGLOBAL __attribute__((__stdcall__)) GlobalHandle (LPCVOID pMem);
             WINBOOL __attribute__((__stdcall__)) GlobalUnlock (HGLOBAL hMem);
             HGLOBAL __attribute__((__stdcall__)) GlobalFree (HGLOBAL hMem);
             SIZE_T __attribute__((__stdcall__)) GlobalCompact (DWORD dwMinFree);
             void __attribute__((__stdcall__)) GlobalFix (HGLOBAL hMem);
             void __attribute__((__stdcall__)) GlobalUnfix (HGLOBAL hMem);
             LPVOID __attribute__((__stdcall__)) GlobalWire (HGLOBAL hMem);
             WINBOOL __attribute__((__stdcall__)) GlobalUnWire (HGLOBAL hMem);
             void __attribute__((__stdcall__)) GlobalMemoryStatus (LPMEMORYSTATUS lpBuffer);
             HLOCAL __attribute__((__stdcall__)) LocalAlloc (UINT uFlags, SIZE_T uBytes);
             HLOCAL __attribute__((__stdcall__)) LocalReAlloc (HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
             LPVOID __attribute__((__stdcall__)) LocalLock (HLOCAL hMem);
             HLOCAL __attribute__((__stdcall__)) LocalHandle (LPCVOID pMem);
             WINBOOL __attribute__((__stdcall__)) LocalUnlock (HLOCAL hMem);
             SIZE_T __attribute__((__stdcall__)) LocalSize (HLOCAL hMem);
             UINT __attribute__((__stdcall__)) LocalFlags (HLOCAL hMem);
             HLOCAL __attribute__((__stdcall__)) LocalFree (HLOCAL hMem);
             SIZE_T __attribute__((__stdcall__)) LocalShrink (HLOCAL hMem, UINT cbNewSize);
             SIZE_T __attribute__((__stdcall__)) LocalCompact (UINT uMinFree);
             WINBOOL __attribute__((__stdcall__)) GetBinaryTypeA (LPCSTR lpApplicationName, LPDWORD lpBinaryType);
             WINBOOL __attribute__((__stdcall__)) GetBinaryTypeW (LPCWSTR lpApplicationName, LPDWORD lpBinaryType);
             DWORD __attribute__((__stdcall__)) GetShortPathNameA (LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer);




             WINBOOL __attribute__((__stdcall__)) GetProcessAffinityMask (HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask);
             WINBOOL __attribute__((__stdcall__)) SetProcessAffinityMask (HANDLE hProcess, DWORD_PTR dwProcessAffinityMask);
             WINBOOL __attribute__((__stdcall__)) GetProcessIoCounters (HANDLE hProcess, PIO_COUNTERS lpIoCounters);
             WINBOOL __attribute__((__stdcall__)) GetProcessWorkingSetSize (HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize);
             WINBOOL __attribute__((__stdcall__)) SetProcessWorkingSetSize (HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize);
             void __attribute__((__stdcall__)) FatalExit (int ExitCode);
             WINBOOL __attribute__((__stdcall__)) SetEnvironmentStringsA (LPCH NewEnvironment);
             void __attribute__((__stdcall__)) RaiseFailFastException (PEXCEPTION_RECORD pExceptionRecord, PCONTEXT pContextRecord, DWORD dwFlags);
             DWORD __attribute__((__stdcall__)) SetThreadIdealProcessor (HANDLE hThread, DWORD dwIdealProcessor);






             LPVOID __attribute__((__stdcall__)) CreateFiber (SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
             LPVOID __attribute__((__stdcall__)) CreateFiberEx (SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
             void __attribute__((__stdcall__)) DeleteFiber (LPVOID lpFiber);
             LPVOID __attribute__((__stdcall__)) ConvertThreadToFiber (LPVOID lpParameter);
             LPVOID __attribute__((__stdcall__)) ConvertThreadToFiberEx (LPVOID lpParameter, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) ConvertFiberToThread (void);
             void __attribute__((__stdcall__)) SwitchToFiber (LPVOID lpFiber);
             DWORD_PTR __attribute__((__stdcall__)) SetThreadAffinityMask (HANDLE hThread, DWORD_PTR dwThreadAffinityMask);



  typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadInformationClassMax
  } THREAD_INFORMATION_CLASS;

  typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessInformationClassMax
  } PROCESS_INFORMATION_CLASS;
             WINBOOL __attribute__((__stdcall__)) SetProcessPriorityBoost (HANDLE hProcess, WINBOOL bDisablePriorityBoost);
             WINBOOL __attribute__((__stdcall__)) GetProcessPriorityBoost (HANDLE hProcess, PBOOL pDisablePriorityBoost);
             WINBOOL __attribute__((__stdcall__)) RequestWakeupLatency (LATENCY_TIME latency);
             WINBOOL __attribute__((__stdcall__)) IsSystemResumeAutomatic (void);
             WINBOOL __attribute__((__stdcall__)) GetThreadIOPendingFlag (HANDLE hThread, PBOOL lpIOIsPending);
             WINBOOL __attribute__((__stdcall__)) GetThreadSelectorEntry (HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry);
             EXECUTION_STATE __attribute__((__stdcall__)) SetThreadExecutionState (EXECUTION_STATE esFlags);
             DWORD __attribute__((__stdcall__)) GetThreadErrorMode (void);
             WINBOOL __attribute__((__stdcall__)) SetThreadErrorMode (DWORD dwNewMode, LPDWORD lpOldMode);
             WINBOOL __attribute__((__stdcall__)) DebugSetProcessKillOnExit (WINBOOL KillOnExit);
             WINBOOL __attribute__((__stdcall__)) DebugBreakProcess (HANDLE Process);







  typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
  } DEP_SYSTEM_POLICY_TYPE;
             WINBOOL __attribute__((__stdcall__)) PulseEvent (HANDLE hEvent);
             DWORD __attribute__((__stdcall__)) WaitForMultipleObjects (DWORD nCount, const HANDLE *lpHandles, WINBOOL bWaitAll, DWORD dwMilliseconds);
             ATOM __attribute__((__stdcall__)) GlobalDeleteAtom (ATOM nAtom);
             WINBOOL __attribute__((__stdcall__)) InitAtomTable (DWORD nSize);
             ATOM __attribute__((__stdcall__)) DeleteAtom (ATOM nAtom);
             UINT __attribute__((__stdcall__)) SetHandleCount (UINT uNumber);
             WINBOOL __attribute__((__stdcall__)) RequestDeviceWakeup (HANDLE hDevice);
             WINBOOL __attribute__((__stdcall__)) CancelDeviceWakeupRequest (HANDLE hDevice);
             WINBOOL __attribute__((__stdcall__)) GetDevicePowerState (HANDLE hDevice, WINBOOL *pfOn);
             WINBOOL __attribute__((__stdcall__)) SetMessageWaitingIndicator (HANDLE hMsgIndicator, ULONG ulMsgCount);
             WINBOOL __attribute__((__stdcall__)) SetFileShortNameA (HANDLE hFile, LPCSTR lpShortName);
             WINBOOL __attribute__((__stdcall__)) SetFileShortNameW (HANDLE hFile, LPCWSTR lpShortName);
             DWORD __attribute__((__stdcall__)) LoadModule (LPCSTR lpModuleName, LPVOID lpParameterBlock);
             UINT __attribute__((__stdcall__)) WinExec (LPCSTR lpCmdLine, UINT uCmdShow);
             WINBOOL __attribute__((__stdcall__)) ClearCommBreak (HANDLE hFile);
             WINBOOL __attribute__((__stdcall__)) ClearCommError (HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat);
             WINBOOL __attribute__((__stdcall__)) SetupComm (HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue);
             WINBOOL __attribute__((__stdcall__)) EscapeCommFunction (HANDLE hFile, DWORD dwFunc);
             WINBOOL __attribute__((__stdcall__)) GetCommConfig (HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
             WINBOOL __attribute__((__stdcall__)) GetCommMask (HANDLE hFile, LPDWORD lpEvtMask);
             WINBOOL __attribute__((__stdcall__)) GetCommProperties (HANDLE hFile, LPCOMMPROP lpCommProp);
             WINBOOL __attribute__((__stdcall__)) GetCommModemStatus (HANDLE hFile, LPDWORD lpModemStat);
             WINBOOL __attribute__((__stdcall__)) GetCommState (HANDLE hFile, LPDCB lpDCB);
             WINBOOL __attribute__((__stdcall__)) GetCommTimeouts (HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
             WINBOOL __attribute__((__stdcall__)) PurgeComm (HANDLE hFile, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) SetCommBreak (HANDLE hFile);
             WINBOOL __attribute__((__stdcall__)) SetCommConfig (HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize);
             WINBOOL __attribute__((__stdcall__)) SetCommMask (HANDLE hFile, DWORD dwEvtMask);
             WINBOOL __attribute__((__stdcall__)) SetCommState (HANDLE hFile, LPDCB lpDCB);
             WINBOOL __attribute__((__stdcall__)) SetCommTimeouts (HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
             WINBOOL __attribute__((__stdcall__)) TransmitCommChar (HANDLE hFile, char cChar);
             WINBOOL __attribute__((__stdcall__)) WaitCommEvent (HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped);
             DWORD __attribute__((__stdcall__)) SetTapePosition (HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, WINBOOL bImmediate);
             DWORD __attribute__((__stdcall__)) GetTapePosition (HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh);
             DWORD __attribute__((__stdcall__)) PrepareTape (HANDLE hDevice, DWORD dwOperation, WINBOOL bImmediate);
             DWORD __attribute__((__stdcall__)) EraseTape (HANDLE hDevice, DWORD dwEraseType, WINBOOL bImmediate);
             DWORD __attribute__((__stdcall__)) CreateTapePartition (HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize);
             DWORD __attribute__((__stdcall__)) WriteTapemark (HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, WINBOOL bImmediate);
             DWORD __attribute__((__stdcall__)) GetTapeStatus (HANDLE hDevice);
             DWORD __attribute__((__stdcall__)) GetTapeParameters (HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation);
             DWORD __attribute__((__stdcall__)) SetTapeParameters (HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation);
             DEP_SYSTEM_POLICY_TYPE __attribute__((__stdcall__)) GetSystemDEPPolicy (void);
             WINBOOL __attribute__((__stdcall__)) GetSystemRegistryQuota (PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed);
  WINBOOL __attribute__((__stdcall__)) GetSystemTimes (LPFILETIME lpIdleTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
             WINBOOL __attribute__((__stdcall__)) FileTimeToDosDateTime (const FILETIME *lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime);
             WINBOOL __attribute__((__stdcall__)) DosDateTimeToFileTime (WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime);
             WINBOOL __attribute__((__stdcall__)) SetSystemTimeAdjustment (DWORD dwTimeAdjustment, WINBOOL bTimeAdjustmentDisabled);






             int __attribute__((__stdcall__)) MulDiv (int nNumber, int nNumerator, int nDenominator);


             DWORD __attribute__((__stdcall__)) FormatMessageA (DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments);
             DWORD __attribute__((__stdcall__)) FormatMessageW (DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments);
  typedef DWORD (__attribute__((__stdcall__)) *PFE_EXPORT_FUNC) (PBYTE pbData, PVOID pvCallbackContext, ULONG ulLength);
  typedef DWORD (__attribute__((__stdcall__)) *PFE_IMPORT_FUNC) (PBYTE pbData, PVOID pvCallbackContext, PULONG ulLength);
             WINBOOL __attribute__((__stdcall__)) GetNamedPipeInfo (HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances);
             HANDLE __attribute__((__stdcall__)) CreateMailslotA (LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
             HANDLE __attribute__((__stdcall__)) CreateMailslotW (LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
             WINBOOL __attribute__((__stdcall__)) GetMailslotInfo (HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout);
             WINBOOL __attribute__((__stdcall__)) SetMailslotInfo (HANDLE hMailslot, DWORD lReadTimeout);
            WINBOOL __attribute__((__stdcall__)) EncryptFileA (LPCSTR lpFileName);
            WINBOOL __attribute__((__stdcall__)) EncryptFileW (LPCWSTR lpFileName);
            WINBOOL __attribute__((__stdcall__)) DecryptFileA (LPCSTR lpFileName, DWORD dwReserved);
            WINBOOL __attribute__((__stdcall__)) DecryptFileW (LPCWSTR lpFileName, DWORD dwReserved);
            WINBOOL __attribute__((__stdcall__)) FileEncryptionStatusA (LPCSTR lpFileName, LPDWORD lpStatus);
            WINBOOL __attribute__((__stdcall__)) FileEncryptionStatusW (LPCWSTR lpFileName, LPDWORD lpStatus);
            DWORD __attribute__((__stdcall__)) OpenEncryptedFileRawA (LPCSTR lpFileName, ULONG ulFlags, PVOID *pvContext);
            DWORD __attribute__((__stdcall__)) OpenEncryptedFileRawW (LPCWSTR lpFileName, ULONG ulFlags, PVOID *pvContext);
            DWORD __attribute__((__stdcall__)) ReadEncryptedFileRaw (PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext);
            DWORD __attribute__((__stdcall__)) WriteEncryptedFileRaw (PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext);
            void __attribute__((__stdcall__)) CloseEncryptedFileRaw (PVOID pvContext);
             int __attribute__((__stdcall__)) lstrcmpA (LPCSTR lpString1, LPCSTR lpString2);
             int __attribute__((__stdcall__)) lstrcmpW (LPCWSTR lpString1, LPCWSTR lpString2);
             int __attribute__((__stdcall__)) lstrcmpiA (LPCSTR lpString1, LPCSTR lpString2);
             int __attribute__((__stdcall__)) lstrcmpiW (LPCWSTR lpString1, LPCWSTR lpString2);
             LPSTR __attribute__((__stdcall__)) lstrcpynA (LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
             LPWSTR __attribute__((__stdcall__)) lstrcpynW (LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
             LPSTR __attribute__((__stdcall__)) lstrcpyA (LPSTR lpString1, LPCSTR lpString2);
             LPWSTR __attribute__((__stdcall__)) lstrcpyW (LPWSTR lpString1, LPCWSTR lpString2);
             LPSTR __attribute__((__stdcall__)) lstrcatA (LPSTR lpString1, LPCSTR lpString2);
             LPWSTR __attribute__((__stdcall__)) lstrcatW (LPWSTR lpString1, LPCWSTR lpString2);
             int __attribute__((__stdcall__)) lstrlenA (LPCSTR lpString);
             int __attribute__((__stdcall__)) lstrlenW (LPCWSTR lpString);
             HFILE __attribute__((__stdcall__)) OpenFile (LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle);
             HFILE __attribute__((__stdcall__)) _lopen (LPCSTR lpPathName, int iReadWrite);
             HFILE __attribute__((__stdcall__)) _lcreat (LPCSTR lpPathName, int iAttribute);
             UINT __attribute__((__stdcall__)) _lread (HFILE hFile, LPVOID lpBuffer, UINT uBytes);
             UINT __attribute__((__stdcall__)) _lwrite (HFILE hFile, LPCCH lpBuffer, UINT uBytes);
             long __attribute__((__stdcall__)) _hread (HFILE hFile, LPVOID lpBuffer, long lBytes);
             long __attribute__((__stdcall__)) _hwrite (HFILE hFile, LPCCH lpBuffer, long lBytes);
             HFILE __attribute__((__stdcall__)) _lclose (HFILE hFile);
             LONG __attribute__((__stdcall__)) _llseek (HFILE hFile, LONG lOffset, int iOrigin);
            WINBOOL __attribute__((__stdcall__)) IsTextUnicode (const void *lpv, int iSize, LPINT lpiResult);
             DWORD __attribute__((__stdcall__)) SignalObjectAndWait (HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, WINBOOL bAlertable);
             WINBOOL __attribute__((__stdcall__)) BackupRead (HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, WINBOOL bAbort, WINBOOL bProcessSecurity, LPVOID *lpContext);
             WINBOOL __attribute__((__stdcall__)) BackupSeek (HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID *lpContext);
             WINBOOL __attribute__((__stdcall__)) BackupWrite (HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, WINBOOL bAbort, WINBOOL bProcessSecurity, LPVOID *lpContext);
  typedef struct _WIN32_STREAM_ID {
    DWORD dwStreamId;
    DWORD dwStreamAttributes;
    LARGE_INTEGER Size;
    DWORD dwStreamNameSize;
    WCHAR cStreamName[1];
  } WIN32_STREAM_ID,*LPWIN32_STREAM_ID;
             HANDLE __attribute__((__stdcall__)) CreateSemaphoreW (LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName);
             HMODULE __attribute__((__stdcall__)) LoadLibraryW (LPCWSTR lpLibFileName);


             HANDLE __attribute__((__stdcall__)) OpenMutexA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
             HANDLE __attribute__((__stdcall__)) CreateSemaphoreA (LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName);
             HANDLE __attribute__((__stdcall__)) OpenSemaphoreA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
             HANDLE __attribute__((__stdcall__)) CreateWaitableTimerA (LPSECURITY_ATTRIBUTES lpTimerAttributes, WINBOOL bManualReset, LPCSTR lpTimerName);
             HANDLE __attribute__((__stdcall__)) CreateWaitableTimerW (LPSECURITY_ATTRIBUTES lpTimerAttributes, WINBOOL bManualReset, LPCWSTR lpTimerName);
             HANDLE __attribute__((__stdcall__)) OpenWaitableTimerA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpTimerName);
             HANDLE __attribute__((__stdcall__)) CreateFileMappingA (HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName);





             HANDLE __attribute__((__stdcall__)) OpenFileMappingA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
             DWORD __attribute__((__stdcall__)) GetLogicalDriveStringsA (DWORD nBufferLength, LPSTR lpBuffer);
             HMODULE __attribute__((__stdcall__)) LoadLibraryA (LPCSTR lpLibFileName);
             WINBOOL __attribute__((__stdcall__)) GetProcessShutdownParameters (LPDWORD lpdwLevel, LPDWORD lpdwFlags);
             void __attribute__((__stdcall__)) FatalAppExitA (UINT uAction, LPCSTR lpMessageText);
             void __attribute__((__stdcall__)) FatalAppExitW (UINT uAction, LPCWSTR lpMessageText);
             void __attribute__((__stdcall__)) GetStartupInfoA (LPSTARTUPINFOA lpStartupInfo);
             DWORD __attribute__((__stdcall__)) GetFirmwareEnvironmentVariableA (LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize);
             DWORD __attribute__((__stdcall__)) GetFirmwareEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize);
             WINBOOL __attribute__((__stdcall__)) SetFirmwareEnvironmentVariableA (LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize);
             WINBOOL __attribute__((__stdcall__)) SetFirmwareEnvironmentVariableW (LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize);
             HRSRC __attribute__((__stdcall__)) FindResourceA (HMODULE hModule, LPCSTR lpName, LPCSTR lpType);
             HRSRC __attribute__((__stdcall__)) FindResourceW (HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
             HRSRC __attribute__((__stdcall__)) FindResourceExA (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage);
             WINBOOL __attribute__((__stdcall__)) EnumResourceTypesA (HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumResourceTypesW (HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumResourceNamesA (HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumResourceNamesW (HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumResourceLanguagesA (HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumResourceLanguagesW (HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam);
             HANDLE __attribute__((__stdcall__)) BeginUpdateResourceA (LPCSTR pFileName, WINBOOL bDeleteExistingResources);
             HANDLE __attribute__((__stdcall__)) BeginUpdateResourceW (LPCWSTR pFileName, WINBOOL bDeleteExistingResources);
             WINBOOL __attribute__((__stdcall__)) UpdateResourceA (HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
             WINBOOL __attribute__((__stdcall__)) UpdateResourceW (HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
             WINBOOL __attribute__((__stdcall__)) EndUpdateResourceA (HANDLE hUpdate, WINBOOL fDiscard);
             WINBOOL __attribute__((__stdcall__)) EndUpdateResourceW (HANDLE hUpdate, WINBOOL fDiscard);
             ATOM __attribute__((__stdcall__)) GlobalAddAtomA (LPCSTR lpString);
             ATOM __attribute__((__stdcall__)) GlobalAddAtomW (LPCWSTR lpString);
             ATOM __attribute__((__stdcall__)) GlobalAddAtomExA (LPCSTR lpString, DWORD Flags);
             ATOM __attribute__((__stdcall__)) GlobalAddAtomExW (LPCWSTR lpString, DWORD Flags);
             ATOM __attribute__((__stdcall__)) GlobalFindAtomA (LPCSTR lpString);
             ATOM __attribute__((__stdcall__)) GlobalFindAtomW (LPCWSTR lpString);
             UINT __attribute__((__stdcall__)) GlobalGetAtomNameA (ATOM nAtom, LPSTR lpBuffer, int nSize);
             UINT __attribute__((__stdcall__)) GlobalGetAtomNameW (ATOM nAtom, LPWSTR lpBuffer, int nSize);
             ATOM __attribute__((__stdcall__)) AddAtomA (LPCSTR lpString);
             ATOM __attribute__((__stdcall__)) AddAtomW (LPCWSTR lpString);
             ATOM __attribute__((__stdcall__)) FindAtomA (LPCSTR lpString);
             ATOM __attribute__((__stdcall__)) FindAtomW (LPCWSTR lpString);
             UINT __attribute__((__stdcall__)) GetAtomNameA (ATOM nAtom, LPSTR lpBuffer, int nSize);
             UINT __attribute__((__stdcall__)) GetAtomNameW (ATOM nAtom, LPWSTR lpBuffer, int nSize);
             UINT __attribute__((__stdcall__)) GetProfileIntA (LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault);
             UINT __attribute__((__stdcall__)) GetProfileIntW (LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault);
             DWORD __attribute__((__stdcall__)) GetProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize);
             DWORD __attribute__((__stdcall__)) GetProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize);
             WINBOOL __attribute__((__stdcall__)) WriteProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString);
             WINBOOL __attribute__((__stdcall__)) WriteProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString);
             DWORD __attribute__((__stdcall__)) GetProfileSectionA (LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize);
             DWORD __attribute__((__stdcall__)) GetProfileSectionW (LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize);
             WINBOOL __attribute__((__stdcall__)) WriteProfileSectionA (LPCSTR lpAppName, LPCSTR lpString);
             WINBOOL __attribute__((__stdcall__)) WriteProfileSectionW (LPCWSTR lpAppName, LPCWSTR lpString);
             UINT __attribute__((__stdcall__)) GetPrivateProfileIntA (LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName);
             UINT __attribute__((__stdcall__)) GetPrivateProfileIntW (LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName);
             DWORD __attribute__((__stdcall__)) GetPrivateProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
             DWORD __attribute__((__stdcall__)) GetPrivateProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
             WINBOOL __attribute__((__stdcall__)) WritePrivateProfileStringA (LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName);
             WINBOOL __attribute__((__stdcall__)) WritePrivateProfileStringW (LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName);
             DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionA (LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
             DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionW (LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
             WINBOOL __attribute__((__stdcall__)) WritePrivateProfileSectionA (LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName);
             WINBOOL __attribute__((__stdcall__)) WritePrivateProfileSectionW (LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName);
             DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionNamesA (LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName);
             DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionNamesW (LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName);
             WINBOOL __attribute__((__stdcall__)) GetPrivateProfileStructA (LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
             WINBOOL __attribute__((__stdcall__)) GetPrivateProfileStructW (LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
             WINBOOL __attribute__((__stdcall__)) WritePrivateProfileStructA (LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
             WINBOOL __attribute__((__stdcall__)) WritePrivateProfileStructW (LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
             DWORD __attribute__((__stdcall__)) GetTempPathA (DWORD nBufferLength, LPSTR lpBuffer);
             UINT __attribute__((__stdcall__)) GetTempFileNameA (LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName);
             UINT __attribute__((__stdcall__)) GetSystemWow64DirectoryA (LPSTR lpBuffer, UINT uSize);
             UINT __attribute__((__stdcall__)) GetSystemWow64DirectoryW (LPWSTR lpBuffer, UINT uSize);



             BOOLEAN __attribute__((__stdcall__)) Wow64EnableWow64FsRedirection (BOOLEAN Wow64FsEnableRedirection);

  typedef UINT (__attribute__((__stdcall__)) *PGET_SYSTEM_WOW64_DIRECTORY_A) (LPSTR lpBuffer, UINT uSize);
  typedef UINT (__attribute__((__stdcall__)) *PGET_SYSTEM_WOW64_DIRECTORY_W) (LPWSTR lpBuffer, UINT uSize);
             WINBOOL __attribute__((__stdcall__)) SetDllDirectoryA (LPCSTR lpPathName);
             WINBOOL __attribute__((__stdcall__)) SetDllDirectoryW (LPCWSTR lpPathName);
             DWORD __attribute__((__stdcall__)) GetDllDirectoryA (DWORD nBufferLength, LPSTR lpBuffer);
             DWORD __attribute__((__stdcall__)) GetDllDirectoryW (DWORD nBufferLength, LPWSTR lpBuffer);
             WINBOOL __attribute__((__stdcall__)) SetSearchPathMode (DWORD Flags);



             WINBOOL __attribute__((__stdcall__)) CreateDirectoryExA (LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
             WINBOOL __attribute__((__stdcall__)) CreateDirectoryExW (LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
             WINBOOL __attribute__((__stdcall__)) DefineDosDeviceA (DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath);
             DWORD __attribute__((__stdcall__)) QueryDosDeviceA (LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax);
             HANDLE __attribute__((__stdcall__)) ReOpenFile (HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes);
             DWORD __attribute__((__stdcall__)) GetCompressedFileSizeA (LPCSTR lpFileName, LPDWORD lpFileSizeHigh);
             DWORD __attribute__((__stdcall__)) GetCompressedFileSizeW (LPCWSTR lpFileName, LPDWORD lpFileSizeHigh);
  typedef DWORD (__attribute__((__stdcall__)) *LPPROGRESS_ROUTINE) (LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData);

             WINBOOL __attribute__((__stdcall__)) CheckNameLegalDOS8Dot3A (LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
             WINBOOL __attribute__((__stdcall__)) CheckNameLegalDOS8Dot3W (LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
             WINBOOL __attribute__((__stdcall__)) CopyFileA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, WINBOOL bFailIfExists);
             WINBOOL __attribute__((__stdcall__)) CopyFileW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, WINBOOL bFailIfExists);
             WINBOOL __attribute__((__stdcall__)) CopyFileExA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
             WINBOOL __attribute__((__stdcall__)) CopyFileExW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
             WINBOOL __attribute__((__stdcall__)) MoveFileA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName);
             WINBOOL __attribute__((__stdcall__)) MoveFileW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName);





             WINBOOL __attribute__((__stdcall__)) MoveFileExA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) MoveFileExW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags);





             WINBOOL __attribute__((__stdcall__)) MoveFileWithProgressA (LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) MoveFileWithProgressW (LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) ReplaceFileA (LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
             WINBOOL __attribute__((__stdcall__)) ReplaceFileW (LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
             WINBOOL __attribute__((__stdcall__)) CreateHardLinkA (LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
             WINBOOL __attribute__((__stdcall__)) CreateHardLinkW (LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
  typedef enum _STREAM_INFO_LEVELS {
    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel
  } STREAM_INFO_LEVELS;

  typedef struct _WIN32_FIND_STREAM_DATA {
    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[260 + 36];
  } WIN32_FIND_STREAM_DATA,*PWIN32_FIND_STREAM_DATA;

             HANDLE __attribute__((__stdcall__)) FindFirstStreamW (LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) FindNextStreamW (HANDLE hFindStream, LPVOID lpFindStreamData);
             HANDLE __attribute__((__stdcall__)) CreateNamedPipeA (LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
             WINBOOL __attribute__((__stdcall__)) GetNamedPipeHandleStateA (HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize);
             WINBOOL __attribute__((__stdcall__)) GetNamedPipeHandleStateW (HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize);
             WINBOOL __attribute__((__stdcall__)) CallNamedPipeA (LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
             WINBOOL __attribute__((__stdcall__)) CallNamedPipeW (LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
             WINBOOL __attribute__((__stdcall__)) WaitNamedPipeA (LPCSTR lpNamedPipeName, DWORD nTimeOut);
             WINBOOL __attribute__((__stdcall__)) SetVolumeLabelA (LPCSTR lpRootPathName, LPCSTR lpVolumeName);
             WINBOOL __attribute__((__stdcall__)) SetVolumeLabelW (LPCWSTR lpRootPathName, LPCWSTR lpVolumeName);
             void __attribute__((__stdcall__)) SetFileApisToOEM (void);
             void __attribute__((__stdcall__)) SetFileApisToANSI (void);
             WINBOOL __attribute__((__stdcall__)) AreFileApisANSI (void);
             WINBOOL __attribute__((__stdcall__)) GetVolumeInformationA (LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
            WINBOOL __attribute__((__stdcall__)) ClearEventLogA (HANDLE hEventLog, LPCSTR lpBackupFileName);
            WINBOOL __attribute__((__stdcall__)) ClearEventLogW (HANDLE hEventLog, LPCWSTR lpBackupFileName);
            WINBOOL __attribute__((__stdcall__)) BackupEventLogA (HANDLE hEventLog, LPCSTR lpBackupFileName);
            WINBOOL __attribute__((__stdcall__)) BackupEventLogW (HANDLE hEventLog, LPCWSTR lpBackupFileName);
            WINBOOL __attribute__((__stdcall__)) CloseEventLog (HANDLE hEventLog);
            WINBOOL __attribute__((__stdcall__)) DeregisterEventSource (HANDLE hEventLog);
            WINBOOL __attribute__((__stdcall__)) NotifyChangeEventLog (HANDLE hEventLog, HANDLE hEvent);
            WINBOOL __attribute__((__stdcall__)) GetNumberOfEventLogRecords (HANDLE hEventLog, PDWORD NumberOfRecords);
            WINBOOL __attribute__((__stdcall__)) GetOldestEventLogRecord (HANDLE hEventLog, PDWORD OldestRecord);
            HANDLE __attribute__((__stdcall__)) OpenEventLogA (LPCSTR lpUNCServerName, LPCSTR lpSourceName);
            HANDLE __attribute__((__stdcall__)) OpenEventLogW (LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
            HANDLE __attribute__((__stdcall__)) RegisterEventSourceA (LPCSTR lpUNCServerName, LPCSTR lpSourceName);
            HANDLE __attribute__((__stdcall__)) RegisterEventSourceW (LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
            HANDLE __attribute__((__stdcall__)) OpenBackupEventLogA (LPCSTR lpUNCServerName, LPCSTR lpFileName);
            HANDLE __attribute__((__stdcall__)) OpenBackupEventLogW (LPCWSTR lpUNCServerName, LPCWSTR lpFileName);
            WINBOOL __attribute__((__stdcall__)) ReadEventLogA (HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded);
            WINBOOL __attribute__((__stdcall__)) ReadEventLogW (HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded);
            WINBOOL __attribute__((__stdcall__)) ReportEventA (HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR *lpStrings, LPVOID lpRawData);
            WINBOOL __attribute__((__stdcall__)) ReportEventW (HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR *lpStrings, LPVOID lpRawData);
  typedef struct _EVENTLOG_FULL_INFORMATION {
    DWORD dwFull;
  } EVENTLOG_FULL_INFORMATION,*LPEVENTLOG_FULL_INFORMATION;

            WINBOOL __attribute__((__stdcall__)) GetEventLogInformation (HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
            WINBOOL __attribute__((__stdcall__)) AccessCheckAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
            WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
            WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeResultListAndAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
            WINBOOL __attribute__((__stdcall__)) AccessCheckByTypeResultListAndAuditAlarmByHandleA (LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
            WINBOOL __attribute__((__stdcall__)) ObjectOpenAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, WINBOOL ObjectCreation, WINBOOL AccessGranted, LPBOOL GenerateOnClose);
            WINBOOL __attribute__((__stdcall__)) ObjectPrivilegeAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
            WINBOOL __attribute__((__stdcall__)) ObjectCloseAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
            WINBOOL __attribute__((__stdcall__)) ObjectDeleteAuditAlarmA (LPCSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
            WINBOOL __attribute__((__stdcall__)) PrivilegedServiceAuditAlarmA (LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
            WINBOOL __attribute__((__stdcall__)) SetFileSecurityA (LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
            WINBOOL __attribute__((__stdcall__)) GetFileSecurityA (LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
             WINBOOL __attribute__((__stdcall__)) ReadDirectoryChangesW (HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, WINBOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
             WINBOOL __attribute__((__stdcall__)) IsBadReadPtr (const void *lp, UINT_PTR ucb);
             WINBOOL __attribute__((__stdcall__)) IsBadWritePtr (LPVOID lp, UINT_PTR ucb);
             WINBOOL __attribute__((__stdcall__)) IsBadHugeReadPtr (const void *lp, UINT_PTR ucb);
             WINBOOL __attribute__((__stdcall__)) IsBadHugeWritePtr (LPVOID lp, UINT_PTR ucb);
             WINBOOL __attribute__((__stdcall__)) IsBadCodePtr (FARPROC lpfn);
             WINBOOL __attribute__((__stdcall__)) IsBadStringPtrA (LPCSTR lpsz, UINT_PTR ucchMax);
             WINBOOL __attribute__((__stdcall__)) IsBadStringPtrW (LPCWSTR lpsz, UINT_PTR ucchMax);






            WINBOOL __attribute__((__stdcall__)) LookupAccountSidA (LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
            WINBOOL __attribute__((__stdcall__)) LookupAccountSidW (LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
            WINBOOL __attribute__((__stdcall__)) LookupAccountNameA (LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
            WINBOOL __attribute__((__stdcall__)) LookupAccountNameW (LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
            WINBOOL __attribute__((__stdcall__)) LookupPrivilegeValueA (LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid);
            WINBOOL __attribute__((__stdcall__)) LookupPrivilegeValueW (LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
            WINBOOL __attribute__((__stdcall__)) LookupPrivilegeNameA (LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName);
            WINBOOL __attribute__((__stdcall__)) LookupPrivilegeNameW (LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName);
            WINBOOL __attribute__((__stdcall__)) LookupPrivilegeDisplayNameA (LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
            WINBOOL __attribute__((__stdcall__)) LookupPrivilegeDisplayNameW (LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
             WINBOOL __attribute__((__stdcall__)) BuildCommDCBA (LPCSTR lpDef, LPDCB lpDCB);
             WINBOOL __attribute__((__stdcall__)) BuildCommDCBW (LPCWSTR lpDef, LPDCB lpDCB);
             WINBOOL __attribute__((__stdcall__)) BuildCommDCBAndTimeoutsA (LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
             WINBOOL __attribute__((__stdcall__)) BuildCommDCBAndTimeoutsW (LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
             WINBOOL __attribute__((__stdcall__)) CommConfigDialogA (LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
             WINBOOL __attribute__((__stdcall__)) CommConfigDialogW (LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
             WINBOOL __attribute__((__stdcall__)) GetDefaultCommConfigA (LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
             WINBOOL __attribute__((__stdcall__)) GetDefaultCommConfigW (LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
             WINBOOL __attribute__((__stdcall__)) SetDefaultCommConfigA (LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
             WINBOOL __attribute__((__stdcall__)) SetDefaultCommConfigW (LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
             WINBOOL __attribute__((__stdcall__)) GetComputerNameA (LPSTR lpBuffer, LPDWORD nSize);
             WINBOOL __attribute__((__stdcall__)) GetComputerNameW (LPWSTR lpBuffer, LPDWORD nSize);
             WINBOOL __attribute__((__stdcall__)) SetComputerNameA (LPCSTR lpComputerName);
             WINBOOL __attribute__((__stdcall__)) SetComputerNameW (LPCWSTR lpComputerName);
             WINBOOL __attribute__((__stdcall__)) SetComputerNameExA (COMPUTER_NAME_FORMAT NameType, LPCTSTR lpBuffer);
             WINBOOL __attribute__((__stdcall__)) DnsHostnameToComputerNameA (LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize);
             WINBOOL __attribute__((__stdcall__)) DnsHostnameToComputerNameW (LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize);
            WINBOOL __attribute__((__stdcall__)) GetUserNameA (LPSTR lpBuffer, LPDWORD pcbBuffer);
            WINBOOL __attribute__((__stdcall__)) GetUserNameW (LPWSTR lpBuffer, LPDWORD pcbBuffer);
            WINBOOL __attribute__((__stdcall__)) LogonUserA (LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
            WINBOOL __attribute__((__stdcall__)) LogonUserW (LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
            WINBOOL __attribute__((__stdcall__)) LogonUserExA (LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
            WINBOOL __attribute__((__stdcall__)) LogonUserExW (LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
            WINBOOL __attribute__((__stdcall__)) CreateProcessAsUserA (HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
            WINBOOL __attribute__((__stdcall__)) CreateProcessWithLogonW (LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
            WINBOOL __attribute__((__stdcall__)) CreateProcessWithTokenW (HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
            WINBOOL __attribute__((__stdcall__)) IsTokenUntrusted (HANDLE TokenHandle);
             WINBOOL __attribute__((__stdcall__)) RegisterWaitForSingleObject (PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
             WINBOOL __attribute__((__stdcall__)) UnregisterWait (HANDLE WaitHandle);
             WINBOOL __attribute__((__stdcall__)) BindIoCompletionCallback (HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags);
             HANDLE __attribute__((__stdcall__)) SetTimerQueueTimer (HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, WINBOOL PreferIo);
             WINBOOL __attribute__((__stdcall__)) CancelTimerQueueTimer (HANDLE TimerQueue, HANDLE Timer);
             WINBOOL __attribute__((__stdcall__)) DeleteTimerQueue (HANDLE TimerQueue);




             HANDLE __attribute__((__stdcall__)) CreatePrivateNamespaceA (LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
             HANDLE __attribute__((__stdcall__)) OpenPrivateNamespaceA (LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
             HANDLE __attribute__((__stdcall__)) CreateBoundaryDescriptorA (LPCSTR Name, ULONG Flags);
             WINBOOL __attribute__((__stdcall__)) AddIntegrityLabelToBoundaryDescriptor (HANDLE *BoundaryDescriptor, PSID IntegrityLabel);
  typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
  } HW_PROFILE_INFOA,*LPHW_PROFILE_INFOA;

  typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
  } HW_PROFILE_INFOW,*LPHW_PROFILE_INFOW;

  typedef HW_PROFILE_INFOW HW_PROFILE_INFO;
  typedef LPHW_PROFILE_INFOW LPHW_PROFILE_INFO;

            WINBOOL __attribute__((__stdcall__)) GetCurrentHwProfileA (LPHW_PROFILE_INFOA lpHwProfileInfo);
            WINBOOL __attribute__((__stdcall__)) GetCurrentHwProfileW (LPHW_PROFILE_INFOW lpHwProfileInfo);
             WINBOOL __attribute__((__stdcall__)) VerifyVersionInfoA (LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
             WINBOOL __attribute__((__stdcall__)) VerifyVersionInfoW (LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
extern "C" {






  typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
  } TIME_ZONE_INFORMATION,*PTIME_ZONE_INFORMATION,*LPTIME_ZONE_INFORMATION;

  typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[128];
    BOOLEAN DynamicDaylightTimeDisabled;
  } DYNAMIC_TIME_ZONE_INFORMATION,*PDYNAMIC_TIME_ZONE_INFORMATION;

             WINBOOL __attribute__((__stdcall__)) SystemTimeToTzSpecificLocalTime (const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpUniversalTime, LPSYSTEMTIME lpLocalTime);
             WINBOOL __attribute__((__stdcall__)) TzSpecificLocalTimeToSystemTime (const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpLocalTime, LPSYSTEMTIME lpUniversalTime);
             WINBOOL __attribute__((__stdcall__)) FileTimeToSystemTime (const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime);
             WINBOOL __attribute__((__stdcall__)) SystemTimeToFileTime (const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
             DWORD __attribute__((__stdcall__)) GetTimeZoneInformation (LPTIME_ZONE_INFORMATION lpTimeZoneInformation);
             WINBOOL __attribute__((__stdcall__)) SetTimeZoneInformation (const TIME_ZONE_INFORMATION *lpTimeZoneInformation);






}
  typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
  } SYSTEM_POWER_STATUS,*LPSYSTEM_POWER_STATUS;

             WINBOOL __attribute__((__stdcall__)) GetSystemPowerStatus (LPSYSTEM_POWER_STATUS lpSystemPowerStatus);
             WINBOOL __attribute__((__stdcall__)) SetSystemPowerState (WINBOOL fSuspend, WINBOOL fForce);
             WINBOOL __attribute__((__stdcall__)) AllocateUserPhysicalPages (HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
             WINBOOL __attribute__((__stdcall__)) FreeUserPhysicalPages (HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
             WINBOOL __attribute__((__stdcall__)) MapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
             WINBOOL __attribute__((__stdcall__)) MapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
             HANDLE __attribute__((__stdcall__)) CreateJobObjectA (LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName);
             HANDLE __attribute__((__stdcall__)) CreateJobObjectW (LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName);
             HANDLE __attribute__((__stdcall__)) OpenJobObjectA (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
             HANDLE __attribute__((__stdcall__)) OpenJobObjectW (DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
             WINBOOL __attribute__((__stdcall__)) AssignProcessToJobObject (HANDLE hJob, HANDLE hProcess);
             WINBOOL __attribute__((__stdcall__)) TerminateJobObject (HANDLE hJob, UINT uExitCode);
             WINBOOL __attribute__((__stdcall__)) QueryInformationJobObject (HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength);
             WINBOOL __attribute__((__stdcall__)) SetInformationJobObject (HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength);
             WINBOOL __attribute__((__stdcall__)) CreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
             HANDLE __attribute__((__stdcall__)) FindFirstVolumeA (LPSTR lpszVolumeName, DWORD cchBufferLength);
             WINBOOL __attribute__((__stdcall__)) FindNextVolumeA (HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength);
             HANDLE __attribute__((__stdcall__)) FindFirstVolumeMountPointA (LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
             HANDLE __attribute__((__stdcall__)) FindFirstVolumeMountPointW (LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
             WINBOOL __attribute__((__stdcall__)) FindNextVolumeMountPointA (HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
             WINBOOL __attribute__((__stdcall__)) FindNextVolumeMountPointW (HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
             WINBOOL __attribute__((__stdcall__)) FindVolumeMountPointClose (HANDLE hFindVolumeMountPoint);
             WINBOOL __attribute__((__stdcall__)) SetVolumeMountPointA (LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName);
             WINBOOL __attribute__((__stdcall__)) SetVolumeMountPointW (LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName);
             WINBOOL __attribute__((__stdcall__)) DeleteVolumeMountPointA (LPCSTR lpszVolumeMountPoint);
             WINBOOL __attribute__((__stdcall__)) GetVolumeNameForVolumeMountPointA (LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength);
             WINBOOL __attribute__((__stdcall__)) GetVolumePathNameA (LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength);
             WINBOOL __attribute__((__stdcall__)) GetVolumePathNamesForVolumeNameA (LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
  typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
  } ACTCTXA,*PACTCTXA;

  typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
  } ACTCTXW,*PACTCTXW;

  typedef ACTCTXW ACTCTX;
  typedef PACTCTXW PACTCTX;

  typedef const ACTCTXA *PCACTCTXA;
  typedef const ACTCTXW *PCACTCTXW;

  typedef PCACTCTXW PCACTCTX;

             HANDLE __attribute__((__stdcall__)) CreateActCtxA (PCACTCTXA pActCtx);
             HANDLE __attribute__((__stdcall__)) CreateActCtxW (PCACTCTXW pActCtx);
             void __attribute__((__stdcall__)) AddRefActCtx (HANDLE hActCtx);
             void __attribute__((__stdcall__)) ReleaseActCtx (HANDLE hActCtx);
             WINBOOL __attribute__((__stdcall__)) ZombifyActCtx (HANDLE hActCtx);
             WINBOOL __attribute__((__stdcall__)) ActivateActCtx (HANDLE hActCtx, ULONG_PTR *lpCookie);
             WINBOOL __attribute__((__stdcall__)) DeactivateActCtx (DWORD dwFlags, ULONG_PTR ulCookie);
             WINBOOL __attribute__((__stdcall__)) GetCurrentActCtx (HANDLE *lphActCtx);




  typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
  } ACTCTX_SECTION_KEYED_DATA_2600,*PACTCTX_SECTION_KEYED_DATA_2600;

  typedef const ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;

  typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
  } ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,*PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

  typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

  typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
  } ACTCTX_SECTION_KEYED_DATA,*PACTCTX_SECTION_KEYED_DATA;

  typedef const ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;





             WINBOOL __attribute__((__stdcall__)) FindActCtxSectionStringA (DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
             WINBOOL __attribute__((__stdcall__)) FindActCtxSectionStringW (DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
             WINBOOL __attribute__((__stdcall__)) FindActCtxSectionGuid (DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, const GUID *lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);




  typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
  } ACTIVATION_CONTEXT_BASIC_INFORMATION,*PACTIVATION_CONTEXT_BASIC_INFORMATION;

  typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
             WINBOOL __attribute__((__stdcall__)) QueryActCtxW (DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired);

  typedef WINBOOL (__attribute__((__stdcall__)) *PQUERYACTCTXW_FUNC) (DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired);

             DWORD __attribute__((__stdcall__)) WTSGetActiveConsoleSessionId (void);
             WINBOOL __attribute__((__stdcall__)) GetNumaProcessorNode (UCHAR Processor, PUCHAR NodeNumber);
             WINBOOL __attribute__((__stdcall__)) GetNumaNodeProcessorMask (UCHAR Node, PULONGLONG ProcessorMask);
             WINBOOL __attribute__((__stdcall__)) GetNumaAvailableMemoryNode (UCHAR Node, PULONGLONG AvailableBytes);
  typedef DWORD (__attribute__((__stdcall__)) *APPLICATION_RECOVERY_CALLBACK) (PVOID pvParameter);
             WINBOOL __attribute__((__stdcall__)) CopyContext (PCONTEXT Destination, DWORD ContextFlags, PCONTEXT Source);



             WINBOOL __attribute__((__stdcall__)) InitializeContext (PVOID Buffer, DWORD ContextFlags, PCONTEXT *Context, PDWORD ContextLength);

             DWORD64 __attribute__((__stdcall__)) GetEnabledXStateFeatures (void);
             WINBOOL __attribute__((__stdcall__)) GetXStateFeaturesMask (PCONTEXT Context, PDWORD64 FeatureMask);
             PVOID __attribute__((__stdcall__)) LocateXStateFeature (PCONTEXT Context, DWORD FeatureId, PDWORD Length);





             WINBOOL __attribute__((__stdcall__)) SetXStateFeaturesMask (PCONTEXT Context, DWORD64 FeatureMask);
}
extern "C" {
  typedef struct _DRAWPATRECT {
    POINT ptPosition;
    POINT ptSize;
    WORD wStyle;
    WORD wPattern;
  } DRAWPATRECT,*PDRAWPATRECT;
  typedef struct _PSINJECTDATA {
    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;
  } PSINJECTDATA,*PPSINJECTDATA;
  typedef struct _PSFEATURE_OUTPUT {
    WINBOOL bPageIndependent;
    WINBOOL bSetPageDevice;
  } PSFEATURE_OUTPUT,*PPSFEATURE_OUTPUT;

  typedef struct _PSFEATURE_CUSTPAPER {
    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;
  } PSFEATURE_CUSTPAPER,*PPSFEATURE_CUSTPAPER;
  typedef struct tagXFORM {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM,*PXFORM,*LPXFORM;

  typedef struct tagBITMAP {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP,*PBITMAP,*NPBITMAP,*LPBITMAP;
#pragma pack(push,1)

 typedef struct tagRGBTRIPLE {
    BYTE rgbtBlue;
    BYTE rgbtGreen;
    BYTE rgbtRed;
  } RGBTRIPLE;
#pragma pack(pop)


 typedef struct tagRGBQUAD {
    BYTE rgbBlue;
    BYTE rgbGreen;
    BYTE rgbRed;
    BYTE rgbReserved;
  } RGBQUAD;



  typedef RGBQUAD *LPRGBQUAD;
  typedef LONG LCSCSTYPE;


  typedef LONG LCSGAMUTMATCH;
  typedef long FXPT16DOT16,*LPFXPT16DOT16;
  typedef long FXPT2DOT30,*LPFXPT2DOT30;

  typedef struct tagCIEXYZ {
    FXPT2DOT30 ciexyzX;
    FXPT2DOT30 ciexyzY;
    FXPT2DOT30 ciexyzZ;
  } CIEXYZ;


  typedef CIEXYZ *LPCIEXYZ;


  typedef struct tagICEXYZTRIPLE {
    CIEXYZ ciexyzRed;
    CIEXYZ ciexyzGreen;
    CIEXYZ ciexyzBlue;
  } CIEXYZTRIPLE;


  typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;



  typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
  } LOGCOLORSPACEA,*LPLOGCOLORSPACEA;

  typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
  } LOGCOLORSPACEW,*LPLOGCOLORSPACEW;

  typedef LOGCOLORSPACEW LOGCOLORSPACE;
  typedef LPLOGCOLORSPACEW LPLOGCOLORSPACE;



  typedef struct tagBITMAPCOREHEADER {
    DWORD bcSize;
    WORD bcWidth;
    WORD bcHeight;
    WORD bcPlanes;
    WORD bcBitCount;
  } BITMAPCOREHEADER,*LPBITMAPCOREHEADER,*PBITMAPCOREHEADER;



  typedef struct tagBITMAPINFOHEADER {
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
  } BITMAPINFOHEADER,*LPBITMAPINFOHEADER,*PBITMAPINFOHEADER;



  typedef struct {
    DWORD bV4Size;
    LONG bV4Width;
    LONG bV4Height;
    WORD bV4Planes;
    WORD bV4BitCount;
    DWORD bV4V4Compression;
    DWORD bV4SizeImage;
    LONG bV4XPelsPerMeter;
    LONG bV4YPelsPerMeter;
    DWORD bV4ClrUsed;
    DWORD bV4ClrImportant;
    DWORD bV4RedMask;
    DWORD bV4GreenMask;
    DWORD bV4BlueMask;
    DWORD bV4AlphaMask;
    DWORD bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD bV4GammaRed;
    DWORD bV4GammaGreen;
    DWORD bV4GammaBlue;
  } BITMAPV4HEADER,*LPBITMAPV4HEADER,*PBITMAPV4HEADER;

  typedef struct {
    DWORD bV5Size;
    LONG bV5Width;
    LONG bV5Height;
    WORD bV5Planes;
    WORD bV5BitCount;
    DWORD bV5Compression;
    DWORD bV5SizeImage;
    LONG bV5XPelsPerMeter;
    LONG bV5YPelsPerMeter;
    DWORD bV5ClrUsed;
    DWORD bV5ClrImportant;
    DWORD bV5RedMask;
    DWORD bV5GreenMask;
    DWORD bV5BlueMask;
    DWORD bV5AlphaMask;
    DWORD bV5CSType;
    CIEXYZTRIPLE bV5Endpoints;
    DWORD bV5GammaRed;
    DWORD bV5GammaGreen;
    DWORD bV5GammaBlue;
    DWORD bV5Intent;
    DWORD bV5ProfileData;
    DWORD bV5ProfileSize;
    DWORD bV5Reserved;
  } BITMAPV5HEADER,*LPBITMAPV5HEADER,*PBITMAPV5HEADER;
  typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
  } BITMAPINFO,*LPBITMAPINFO,*PBITMAPINFO;



  typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
  } BITMAPCOREINFO,*LPBITMAPCOREINFO,*PBITMAPCOREINFO;
#pragma pack(push,2)

 typedef struct tagBITMAPFILEHEADER {
    WORD bfType;
    DWORD bfSize;
    WORD bfReserved1;
    WORD bfReserved2;
    DWORD bfOffBits;
  } BITMAPFILEHEADER,*LPBITMAPFILEHEADER,*PBITMAPFILEHEADER;
#pragma pack(pop)








 typedef struct tagFONTSIGNATURE {
    DWORD fsUsb[4];
    DWORD fsCsb[2];
  } FONTSIGNATURE,*PFONTSIGNATURE,*LPFONTSIGNATURE;

  typedef struct tagCHARSETINFO {
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
  } CHARSETINFO,*PCHARSETINFO,*NPCHARSETINFO,*LPCHARSETINFO;
  typedef struct tagLOCALESIGNATURE {
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
  } LOCALESIGNATURE,*PLOCALESIGNATURE,*LPLOCALESIGNATURE;





  typedef struct tagHANDLETABLE {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE,*PHANDLETABLE,*LPHANDLETABLE;

  typedef struct tagMETARECORD {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;


  typedef struct tagMETARECORD *PMETARECORD;


  typedef struct tagMETARECORD *LPMETARECORD;

  typedef struct tagMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT,*LPMETAFILEPICT;
#pragma pack(push,2)

 typedef struct tagMETAHEADER {
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
  } METAHEADER;
  typedef struct tagMETAHEADER *PMETAHEADER;
  typedef struct tagMETAHEADER *LPMETAHEADER;
#pragma pack(pop)




 typedef struct tagENHMETARECORD {
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
  } ENHMETARECORD,*PENHMETARECORD,*LPENHMETARECORD;

  typedef struct tagENHMETAHEADER {
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;
    WORD sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    DWORD cbPixelFormat;
    DWORD offPixelFormat;
    DWORD bOpenGL;
    SIZEL szlMicrometers;
  } ENHMETAHEADER,*PENHMETAHEADER,*LPENHMETAHEADER;
  typedef WCHAR BCHAR;
#pragma pack(push,4)


 typedef struct tagTEXTMETRICA {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
  } TEXTMETRICA,*PTEXTMETRICA,*NPTEXTMETRICA,*LPTEXTMETRICA;

  typedef struct tagTEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
  } TEXTMETRICW,*PTEXTMETRICW,*NPTEXTMETRICW,*LPTEXTMETRICW;

  typedef TEXTMETRICW TEXTMETRIC;
  typedef PTEXTMETRICW PTEXTMETRIC;
  typedef NPTEXTMETRICW NPTEXTMETRIC;
  typedef LPTEXTMETRICW LPTEXTMETRIC;
#pragma pack(pop)
#pragma pack(push,4)

 typedef struct tagNEWTEXTMETRICA {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
  } NEWTEXTMETRICA,*PNEWTEXTMETRICA,*NPNEWTEXTMETRICA,*LPNEWTEXTMETRICA;

  typedef struct tagNEWTEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
  } NEWTEXTMETRICW,*PNEWTEXTMETRICW,*NPNEWTEXTMETRICW,*LPNEWTEXTMETRICW;

  typedef NEWTEXTMETRICW NEWTEXTMETRIC;
  typedef PNEWTEXTMETRICW PNEWTEXTMETRIC;
  typedef NPNEWTEXTMETRICW NPNEWTEXTMETRIC;
  typedef LPNEWTEXTMETRICW LPNEWTEXTMETRIC;
#pragma pack(pop)


 typedef struct tagNEWTEXTMETRICEXA {
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
  } NEWTEXTMETRICEXA;

  typedef struct tagNEWTEXTMETRICEXW {
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
  } NEWTEXTMETRICEXW;

  typedef NEWTEXTMETRICEXW NEWTEXTMETRICEX;




  typedef struct tagPELARRAY {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY,*PPELARRAY,*NPPELARRAY,*LPPELARRAY;


  typedef struct tagLOGBRUSH {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH,*PLOGBRUSH,*NPLOGBRUSH,*LPLOGBRUSH;

  typedef struct tagLOGBRUSH32 {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32,*PLOGBRUSH32,*NPLOGBRUSH32,*LPLOGBRUSH32;


  typedef LOGBRUSH PATTERN;
  typedef PATTERN *PPATTERN;
  typedef PATTERN *NPPATTERN;
  typedef PATTERN *LPPATTERN;



  typedef struct tagLOGPEN {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN,*PLOGPEN,*NPLOGPEN,*LPLOGPEN;



  typedef struct tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
  } EXTLOGPEN,*PEXTLOGPEN,*NPEXTLOGPEN,*LPEXTLOGPEN;



  typedef struct tagEXTLOGPEN32 {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
  } EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;



  typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
  } PALETTEENTRY,*PPALETTEENTRY,*LPPALETTEENTRY;




  typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
  } LOGPALETTE,*PLOGPALETTE,*NPLOGPALETTE,*LPLOGPALETTE;






  typedef struct tagLOGFONTA {
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
  } LOGFONTA,*PLOGFONTA,*NPLOGFONTA,*LPLOGFONTA;

  typedef struct tagLOGFONTW {
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
  } LOGFONTW,*PLOGFONTW,*NPLOGFONTW,*LPLOGFONTW;

  typedef LOGFONTW LOGFONT;
  typedef PLOGFONTW PLOGFONT;
  typedef NPLOGFONTW NPLOGFONT;
  typedef LPLOGFONTW LPLOGFONT;





  typedef struct tagENUMLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
  } ENUMLOGFONTA,*LPENUMLOGFONTA;

  typedef struct tagENUMLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
  } ENUMLOGFONTW,*LPENUMLOGFONTW;

  typedef ENUMLOGFONTW ENUMLOGFONT;
  typedef LPENUMLOGFONTW LPENUMLOGFONT;

  typedef struct tagENUMLOGFONTEXA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
  } ENUMLOGFONTEXA,*LPENUMLOGFONTEXA;

  typedef struct tagENUMLOGFONTEXW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
  } ENUMLOGFONTEXW,*LPENUMLOGFONTEXW;

  typedef ENUMLOGFONTEXW ENUMLOGFONTEX;
  typedef LPENUMLOGFONTEXW LPENUMLOGFONTEX;
  typedef struct tagPANOSE {
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
  } PANOSE,*LPPANOSE;
  typedef struct tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
  } EXTLOGFONTA,*PEXTLOGFONTA,*NPEXTLOGFONTA,*LPEXTLOGFONTA;

  typedef struct tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
  } EXTLOGFONTW,*PEXTLOGFONTW,*NPEXTLOGFONTW,*LPEXTLOGFONTW;

  typedef EXTLOGFONTW EXTLOGFONT;
  typedef PEXTLOGFONTW PEXTLOGFONT;
  typedef NPEXTLOGFONTW NPEXTLOGFONT;
  typedef LPEXTLOGFONTW LPEXTLOGFONT;
  typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    __extension__ union {
      __extension__ struct {
 short dmOrientation;
 short dmPaperSize;
 short dmPaperLength;
 short dmPaperWidth;
 short dmScale;
 short dmCopies;
 short dmDefaultSource;
 short dmPrintQuality;
      };
      struct {
 POINTL dmPosition;
 DWORD dmDisplayOrientation;
 DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    __extension__ union {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
  } DEVMODEA,*PDEVMODEA,*NPDEVMODEA,*LPDEVMODEA;

  typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    __extension__ union {
      __extension__ struct {
 short dmOrientation;
 short dmPaperSize;
 short dmPaperLength;
 short dmPaperWidth;
 short dmScale;
 short dmCopies;
 short dmDefaultSource;
 short dmPrintQuality;
      };
      __extension__ struct {
 POINTL dmPosition;
 DWORD dmDisplayOrientation;
 DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    __extension__ union {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
  } DEVMODEW,*PDEVMODEW,*NPDEVMODEW,*LPDEVMODEW;

  typedef DEVMODEW DEVMODE;
  typedef PDEVMODEW PDEVMODE;
  typedef NPDEVMODEW NPDEVMODE;
  typedef LPDEVMODEW LPDEVMODE;
  typedef struct _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
  } DISPLAY_DEVICEA,*PDISPLAY_DEVICEA,*LPDISPLAY_DEVICEA;

  typedef struct _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
  } DISPLAY_DEVICEW,*PDISPLAY_DEVICEW,*LPDISPLAY_DEVICEW;

  typedef DISPLAY_DEVICEW DISPLAY_DEVICE;
  typedef PDISPLAY_DEVICEW PDISPLAY_DEVICE;
  typedef LPDISPLAY_DEVICEW LPDISPLAY_DEVICE;
  typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
  } RGNDATAHEADER,*PRGNDATAHEADER;

  typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
  } RGNDATA,*PRGNDATA,*NPRGNDATA,*LPRGNDATA;





  typedef struct _ABC {
    int abcA;
    UINT abcB;
    int abcC;
  } ABC,*PABC,*NPABC,*LPABC;

  typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
  } ABCFLOAT,*PABCFLOAT,*NPABCFLOAT,*LPABCFLOAT;





  typedef struct _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
  } OUTLINETEXTMETRICA,*POUTLINETEXTMETRICA,*NPOUTLINETEXTMETRICA,*LPOUTLINETEXTMETRICA;

  typedef struct _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
  } OUTLINETEXTMETRICW,*POUTLINETEXTMETRICW,*NPOUTLINETEXTMETRICW,*LPOUTLINETEXTMETRICW;

  typedef OUTLINETEXTMETRICW OUTLINETEXTMETRIC;
  typedef POUTLINETEXTMETRICW POUTLINETEXTMETRIC;
  typedef NPOUTLINETEXTMETRICW NPOUTLINETEXTMETRIC;
  typedef LPOUTLINETEXTMETRICW LPOUTLINETEXTMETRIC;




  typedef struct tagPOLYTEXTA {
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
  } POLYTEXTA,*PPOLYTEXTA,*NPPOLYTEXTA,*LPPOLYTEXTA;

  typedef struct tagPOLYTEXTW {
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
  } POLYTEXTW,*PPOLYTEXTW,*NPPOLYTEXTW,*LPPOLYTEXTW;

  typedef POLYTEXTW POLYTEXT;
  typedef PPOLYTEXTW PPOLYTEXT;
  typedef NPPOLYTEXTW NPPOLYTEXT;
  typedef LPPOLYTEXTW LPPOLYTEXT;



  typedef struct _FIXED {
    WORD fract;
    short value;
  } FIXED;

  typedef struct _MAT2 {
    FIXED eM11;
    FIXED eM12;
    FIXED eM21;
    FIXED eM22;
  } MAT2,*LPMAT2;

  typedef struct _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
  } GLYPHMETRICS,*LPGLYPHMETRICS;
  typedef struct tagPOINTFX {
    FIXED x;
    FIXED y;
  } POINTFX,*LPPOINTFX;

  typedef struct tagTTPOLYCURVE {
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
  } TTPOLYCURVE,*LPTTPOLYCURVE;

  typedef struct tagTTPOLYGONHEADER {
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
  } TTPOLYGONHEADER,*LPTTPOLYGONHEADER;
  typedef struct tagGCP_RESULTSA {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
  } GCP_RESULTSA,*LPGCP_RESULTSA;
  typedef struct tagGCP_RESULTSW {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
  } GCP_RESULTSW,*LPGCP_RESULTSW;

  typedef GCP_RESULTSW GCP_RESULTS;
  typedef LPGCP_RESULTSW LPGCP_RESULTS;

  typedef struct _RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
  } RASTERIZER_STATUS,*LPRASTERIZER_STATUS;






  typedef struct tagPIXELFORMATDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
  } PIXELFORMATDESCRIPTOR,*PPIXELFORMATDESCRIPTOR,*LPPIXELFORMATDESCRIPTOR;
  typedef int (__attribute__((__stdcall__)) *OLDFONTENUMPROCA)(const LOGFONTA *,const TEXTMETRICA *,DWORD,LPARAM);
  typedef int (__attribute__((__stdcall__)) *OLDFONTENUMPROCW)(const LOGFONTW *,const TEXTMETRICW *,DWORD,LPARAM);
  typedef OLDFONTENUMPROCA FONTENUMPROCA;
  typedef OLDFONTENUMPROCW FONTENUMPROCW;

  typedef FONTENUMPROCW FONTENUMPROC;

  typedef int (__attribute__((__stdcall__)) *GOBJENUMPROC)(LPVOID,LPARAM);
  typedef void (__attribute__((__stdcall__)) *LINEDDAPROC)(int,int,LPARAM);
            int __attribute__((__stdcall__)) AddFontResourceA(LPCSTR);
            int __attribute__((__stdcall__)) AddFontResourceW(LPCWSTR);
            WINBOOL __attribute__((__stdcall__)) AnimatePalette(HPALETTE hPal,UINT iStartIndex,UINT cEntries,const PALETTEENTRY *ppe);
            WINBOOL __attribute__((__stdcall__)) Arc(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4);
            WINBOOL __attribute__((__stdcall__)) BitBlt(HDC hdc,int x,int y,int cx,int cy,HDC hdcSrc,int x1,int y1,DWORD rop);
            WINBOOL __attribute__((__stdcall__)) CancelDC(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) Chord(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4);
            int __attribute__((__stdcall__)) ChoosePixelFormat(HDC hdc,const PIXELFORMATDESCRIPTOR *ppfd);
            HMETAFILE __attribute__((__stdcall__)) CloseMetaFile(HDC hdc);
            int __attribute__((__stdcall__)) CombineRgn(HRGN hrgnDst,HRGN hrgnSrc1,HRGN hrgnSrc2,int iMode);
            HMETAFILE __attribute__((__stdcall__)) CopyMetaFileA(HMETAFILE,LPCSTR);
            HMETAFILE __attribute__((__stdcall__)) CopyMetaFileW(HMETAFILE,LPCWSTR);
            HBITMAP __attribute__((__stdcall__)) CreateBitmap(int nWidth,int nHeight,UINT nPlanes,UINT nBitCount,const void *lpBits);
            HBITMAP __attribute__((__stdcall__)) CreateBitmapIndirect(const BITMAP *pbm);
            HBRUSH __attribute__((__stdcall__)) CreateBrushIndirect(const LOGBRUSH *plbrush);
            HBITMAP __attribute__((__stdcall__)) CreateCompatibleBitmap(HDC hdc,int cx,int cy);
            HBITMAP __attribute__((__stdcall__)) CreateDiscardableBitmap(HDC hdc,int cx,int cy);
            HDC __attribute__((__stdcall__)) CreateCompatibleDC(HDC hdc);
            HDC __attribute__((__stdcall__)) CreateDCA(LPCSTR pwszDriver,LPCSTR pwszDevice,LPCSTR pszPort,const DEVMODEA *pdm);
            HDC __attribute__((__stdcall__)) CreateDCW(LPCWSTR pwszDriver,LPCWSTR pwszDevice,LPCWSTR pszPort,const DEVMODEW *pdm);
            HBITMAP __attribute__((__stdcall__)) CreateDIBitmap(HDC hdc,const BITMAPINFOHEADER *pbmih,DWORD flInit,const void *pjBits,const BITMAPINFO *pbmi,UINT iUsage);
            HBRUSH __attribute__((__stdcall__)) CreateDIBPatternBrush(HGLOBAL h,UINT iUsage);
            HBRUSH __attribute__((__stdcall__)) CreateDIBPatternBrushPt(const void *lpPackedDIB,UINT iUsage);
            HRGN __attribute__((__stdcall__)) CreateEllipticRgn(int x1,int y1,int x2,int y2);
            HRGN __attribute__((__stdcall__)) CreateEllipticRgnIndirect(const RECT *lprect);
            HFONT __attribute__((__stdcall__)) CreateFontIndirectA(const LOGFONTA *lplf);
            HFONT __attribute__((__stdcall__)) CreateFontIndirectW(const LOGFONTW *lplf);
            HFONT __attribute__((__stdcall__)) CreateFontA(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCSTR pszFaceName);
            HFONT __attribute__((__stdcall__)) CreateFontW(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCWSTR pszFaceName);
            HBRUSH __attribute__((__stdcall__)) CreateHatchBrush(int iHatch,COLORREF color);
            HDC __attribute__((__stdcall__)) CreateICA(LPCSTR pszDriver,LPCSTR pszDevice,LPCSTR pszPort,const DEVMODEA *pdm);
            HDC __attribute__((__stdcall__)) CreateICW(LPCWSTR pszDriver,LPCWSTR pszDevice,LPCWSTR pszPort,const DEVMODEW *pdm);
            HDC __attribute__((__stdcall__)) CreateMetaFileA(LPCSTR pszFile);
            HDC __attribute__((__stdcall__)) CreateMetaFileW(LPCWSTR pszFile);
            HPALETTE __attribute__((__stdcall__)) CreatePalette(const LOGPALETTE *plpal);
            HPEN __attribute__((__stdcall__)) CreatePen(int iStyle,int cWidth,COLORREF color);
            HPEN __attribute__((__stdcall__)) CreatePenIndirect(const LOGPEN *plpen);
            HRGN __attribute__((__stdcall__)) CreatePolyPolygonRgn(const POINT *pptl,const INT *pc,int cPoly,int iMode);
            HBRUSH __attribute__((__stdcall__)) CreatePatternBrush(HBITMAP hbm);
            HRGN __attribute__((__stdcall__)) CreateRectRgn(int x1,int y1,int x2,int y2);
            HRGN __attribute__((__stdcall__)) CreateRectRgnIndirect(const RECT *lprect);
            HRGN __attribute__((__stdcall__)) CreateRoundRectRgn(int x1,int y1,int x2,int y2,int w,int h);
            WINBOOL __attribute__((__stdcall__)) CreateScalableFontResourceA(DWORD fdwHidden,LPCSTR lpszFont,LPCSTR lpszFile,LPCSTR lpszPath);
            WINBOOL __attribute__((__stdcall__)) CreateScalableFontResourceW(DWORD fdwHidden,LPCWSTR lpszFont,LPCWSTR lpszFile,LPCWSTR lpszPath);
            HBRUSH __attribute__((__stdcall__)) CreateSolidBrush(COLORREF color);
            WINBOOL __attribute__((__stdcall__)) DeleteDC(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) DeleteMetaFile(HMETAFILE hmf);
            WINBOOL __attribute__((__stdcall__)) DeleteObject(HGDIOBJ ho);
            int __attribute__((__stdcall__)) DescribePixelFormat(HDC hdc,int iPixelFormat,UINT nBytes,LPPIXELFORMATDESCRIPTOR ppfd);

  typedef UINT (__attribute__((__stdcall__)) *LPFNDEVMODE)(HWND,HMODULE,LPDEVMODE,LPSTR,LPSTR,LPDEVMODE,LPSTR,UINT);
  typedef DWORD (__attribute__((__stdcall__)) *LPFNDEVCAPS)(LPSTR,LPSTR,UINT,LPSTR,LPDEVMODE);
              int __attribute__((__stdcall__)) DeviceCapabilitiesA(LPCSTR pDevice,LPCSTR pPort,WORD fwCapability,LPSTR pOutput,const DEVMODEA *pDevMode);
              int __attribute__((__stdcall__)) DeviceCapabilitiesW(LPCWSTR pDevice,LPCWSTR pPort,WORD fwCapability,LPWSTR pOutput,const DEVMODEW *pDevMode);
            int __attribute__((__stdcall__)) DrawEscape(HDC hdc,int iEscape,int cjIn,LPCSTR lpIn);
            WINBOOL __attribute__((__stdcall__)) Ellipse(HDC hdc,int left,int top,int right,int bottom);
            int __attribute__((__stdcall__)) EnumFontFamiliesExA(HDC hdc,LPLOGFONTA lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam,DWORD dwFlags);
            int __attribute__((__stdcall__)) EnumFontFamiliesExW(HDC hdc,LPLOGFONTW lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam,DWORD dwFlags);
            int __attribute__((__stdcall__)) EnumFontFamiliesA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam);
            int __attribute__((__stdcall__)) EnumFontFamiliesW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam);
            int __attribute__((__stdcall__)) EnumFontsA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam);
            int __attribute__((__stdcall__)) EnumFontsW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam);
            int __attribute__((__stdcall__)) EnumObjects(HDC hdc,int nType,GOBJENUMPROC lpFunc,LPARAM lParam);
            WINBOOL __attribute__((__stdcall__)) EqualRgn(HRGN hrgn1,HRGN hrgn2);
            int __attribute__((__stdcall__)) Escape(HDC hdc,int iEscape,int cjIn,LPCSTR pvIn,LPVOID pvOut);
            int __attribute__((__stdcall__)) ExtEscape(HDC hdc,int iEscape,int cjInput,LPCSTR lpInData,int cjOutput,LPSTR lpOutData);
            int __attribute__((__stdcall__)) ExcludeClipRect(HDC hdc,int left,int top,int right,int bottom);
            HRGN __attribute__((__stdcall__)) ExtCreateRegion(const XFORM *lpx,DWORD nCount,const RGNDATA *lpData);
            WINBOOL __attribute__((__stdcall__)) ExtFloodFill(HDC hdc,int x,int y,COLORREF color,UINT type);
            WINBOOL __attribute__((__stdcall__)) FillRgn(HDC hdc,HRGN hrgn,HBRUSH hbr);
            WINBOOL __attribute__((__stdcall__)) FloodFill(HDC hdc,int x,int y,COLORREF color);
            WINBOOL __attribute__((__stdcall__)) FrameRgn(HDC hdc,HRGN hrgn,HBRUSH hbr,int w,int h);
            int __attribute__((__stdcall__)) GetROP2(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) GetAspectRatioFilterEx(HDC hdc,LPSIZE lpsize);
            COLORREF __attribute__((__stdcall__)) GetBkColor(HDC hdc);
            COLORREF __attribute__((__stdcall__)) GetDCBrushColor(HDC hdc);
            COLORREF __attribute__((__stdcall__)) GetDCPenColor(HDC hdc);
            int __attribute__((__stdcall__)) GetBkMode(HDC hdc);
            LONG __attribute__((__stdcall__)) GetBitmapBits(HBITMAP hbit,LONG cb,LPVOID lpvBits);
            WINBOOL __attribute__((__stdcall__)) GetBitmapDimensionEx(HBITMAP hbit,LPSIZE lpsize);
            UINT __attribute__((__stdcall__)) GetBoundsRect(HDC hdc,LPRECT lprect,UINT flags);
            WINBOOL __attribute__((__stdcall__)) GetBrushOrgEx(HDC hdc,LPPOINT lppt);
            WINBOOL __attribute__((__stdcall__)) GetCharWidthA(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
            WINBOOL __attribute__((__stdcall__)) GetCharWidthW(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
            WINBOOL __attribute__((__stdcall__)) GetCharWidth32A(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
            WINBOOL __attribute__((__stdcall__)) GetCharWidth32W(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
            WINBOOL __attribute__((__stdcall__)) GetCharWidthFloatA(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer);
            WINBOOL __attribute__((__stdcall__)) GetCharWidthFloatW(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer);
            WINBOOL __attribute__((__stdcall__)) GetCharABCWidthsA(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC);
            WINBOOL __attribute__((__stdcall__)) GetCharABCWidthsW(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC);
            WINBOOL __attribute__((__stdcall__)) GetCharABCWidthsFloatA(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC);
            WINBOOL __attribute__((__stdcall__)) GetCharABCWidthsFloatW(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC);
            int __attribute__((__stdcall__)) GetClipBox(HDC hdc,LPRECT lprect);
            int __attribute__((__stdcall__)) GetClipRgn(HDC hdc,HRGN hrgn);
            int __attribute__((__stdcall__)) GetMetaRgn(HDC hdc,HRGN hrgn);
            HGDIOBJ __attribute__((__stdcall__)) GetCurrentObject(HDC hdc,UINT type);
            WINBOOL __attribute__((__stdcall__)) GetCurrentPositionEx(HDC hdc,LPPOINT lppt);
            int __attribute__((__stdcall__)) GetDeviceCaps(HDC hdc,int index);
            int __attribute__((__stdcall__)) GetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,LPVOID lpvBits,LPBITMAPINFO lpbmi,UINT usage);
            DWORD __attribute__((__stdcall__)) GetFontData (HDC hdc,DWORD dwTable,DWORD dwOffset,PVOID pvBuffer,DWORD cjBuffer);
            DWORD __attribute__((__stdcall__)) GetGlyphOutlineA(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,const MAT2 *lpmat2);
            DWORD __attribute__((__stdcall__)) GetGlyphOutlineW(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,const MAT2 *lpmat2);
            int __attribute__((__stdcall__)) GetGraphicsMode(HDC hdc);
            int __attribute__((__stdcall__)) GetMapMode(HDC hdc);
            UINT __attribute__((__stdcall__)) GetMetaFileBitsEx(HMETAFILE hMF,UINT cbBuffer,LPVOID lpData);
            HMETAFILE __attribute__((__stdcall__)) GetMetaFileA(LPCSTR lpName);
            HMETAFILE __attribute__((__stdcall__)) GetMetaFileW(LPCWSTR lpName);
            COLORREF __attribute__((__stdcall__)) GetNearestColor(HDC hdc,COLORREF color);
            UINT __attribute__((__stdcall__)) GetNearestPaletteIndex(HPALETTE h,COLORREF color);
            DWORD __attribute__((__stdcall__)) GetObjectType(HGDIOBJ h);





            UINT __attribute__((__stdcall__)) GetOutlineTextMetricsA(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICA potm);
            UINT __attribute__((__stdcall__)) GetOutlineTextMetricsW(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICW potm);







            UINT __attribute__((__stdcall__)) GetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries);
            COLORREF __attribute__((__stdcall__)) GetPixel(HDC hdc,int x,int y);
            int __attribute__((__stdcall__)) GetPixelFormat(HDC hdc);
            int __attribute__((__stdcall__)) GetPolyFillMode(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) GetRasterizerCaps(LPRASTERIZER_STATUS lpraststat,UINT cjBytes);
            int __attribute__((__stdcall__)) GetRandomRgn (HDC hdc,HRGN hrgn,INT i);
            DWORD __attribute__((__stdcall__)) GetRegionData(HRGN hrgn,DWORD nCount,LPRGNDATA lpRgnData);
            int __attribute__((__stdcall__)) GetRgnBox(HRGN hrgn,LPRECT lprc);
            HGDIOBJ __attribute__((__stdcall__)) GetStockObject(int i);
            int __attribute__((__stdcall__)) GetStretchBltMode(HDC hdc);
            UINT __attribute__((__stdcall__)) GetSystemPaletteEntries(HDC hdc,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries);
            UINT __attribute__((__stdcall__)) GetSystemPaletteUse(HDC hdc);
            int __attribute__((__stdcall__)) GetTextCharacterExtra(HDC hdc);
            UINT __attribute__((__stdcall__)) GetTextAlign(HDC hdc);
            COLORREF __attribute__((__stdcall__)) GetTextColor(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) GetTextExtentPointA(HDC hdc,LPCSTR lpString,int c,LPSIZE lpsz);
            WINBOOL __attribute__((__stdcall__)) GetTextExtentPointW(HDC hdc,LPCWSTR lpString,int c,LPSIZE lpsz);
            WINBOOL __attribute__((__stdcall__)) GetTextExtentPoint32A(HDC hdc,LPCSTR lpString,int c,LPSIZE psizl);
            WINBOOL __attribute__((__stdcall__)) GetTextExtentPoint32W(HDC hdc,LPCWSTR lpString,int c,LPSIZE psizl);
            WINBOOL __attribute__((__stdcall__)) GetTextExtentExPointA(HDC hdc,LPCSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
            WINBOOL __attribute__((__stdcall__)) GetTextExtentExPointW(HDC hdc,LPCWSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
            int __attribute__((__stdcall__)) GetTextCharset(HDC hdc);
            int __attribute__((__stdcall__)) GetTextCharsetInfo(HDC hdc,LPFONTSIGNATURE lpSig,DWORD dwFlags);
            WINBOOL __attribute__((__stdcall__)) TranslateCharsetInfo(DWORD *lpSrc,LPCHARSETINFO lpCs,DWORD dwFlags);
            DWORD __attribute__((__stdcall__)) GetFontLanguageInfo(HDC hdc);
            DWORD __attribute__((__stdcall__)) GetCharacterPlacementA(HDC hdc,LPCSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSA lpResults,DWORD dwFlags);
            DWORD __attribute__((__stdcall__)) GetCharacterPlacementW(HDC hdc,LPCWSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSW lpResults,DWORD dwFlags);

  typedef struct tagWCRANGE {
    WCHAR wcLow;
    USHORT cGlyphs;
  } WCRANGE,*PWCRANGE,*LPWCRANGE;

  typedef struct tagGLYPHSET {
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
  } GLYPHSET,*PGLYPHSET,*LPGLYPHSET;







            DWORD __attribute__((__stdcall__)) GetFontUnicodeRanges(HDC hdc,LPGLYPHSET lpgs);
            DWORD __attribute__((__stdcall__)) GetGlyphIndicesA(HDC hdc,LPCSTR lpstr,int c,LPWORD pgi,DWORD fl);
            DWORD __attribute__((__stdcall__)) GetGlyphIndicesW(HDC hdc,LPCWSTR lpstr,int c,LPWORD pgi,DWORD fl);
            WINBOOL __attribute__((__stdcall__)) GetTextExtentPointI(HDC hdc,LPWORD pgiIn,int cgi,LPSIZE psize);
            WINBOOL __attribute__((__stdcall__)) GetTextExtentExPointI (HDC hdc,LPWORD lpwszString,int cwchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
            WINBOOL __attribute__((__stdcall__)) GetCharWidthI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPINT piWidths);
            WINBOOL __attribute__((__stdcall__)) GetCharABCWidthsI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPABC pabc);





  typedef struct tagDESIGNVECTOR {
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
  } DESIGNVECTOR,*PDESIGNVECTOR,*LPDESIGNVECTOR;




            int __attribute__((__stdcall__)) AddFontResourceExA(LPCSTR name,DWORD fl,PVOID res);
            int __attribute__((__stdcall__)) AddFontResourceExW(LPCWSTR name,DWORD fl,PVOID res);
            WINBOOL __attribute__((__stdcall__)) RemoveFontResourceExA(LPCSTR name,DWORD fl,PVOID pdv);
            WINBOOL __attribute__((__stdcall__)) RemoveFontResourceExW(LPCWSTR name,DWORD fl,PVOID pdv);
            HANDLE __attribute__((__stdcall__)) AddFontMemResourceEx(PVOID pFileView,DWORD cjSize,PVOID pvResrved,DWORD *pNumFonts);
            WINBOOL __attribute__((__stdcall__)) RemoveFontMemResourceEx(HANDLE h);






  typedef struct tagAXISINFOA {
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
  } AXISINFOA,*PAXISINFOA,*LPAXISINFOA;

  typedef struct tagAXISINFOW {
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
  } AXISINFOW,*PAXISINFOW,*LPAXISINFOW;

  typedef AXISINFOW AXISINFO;
  typedef PAXISINFOW PAXISINFO;
  typedef LPAXISINFOW LPAXISINFO;

  typedef struct tagAXESLISTA {
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
  } AXESLISTA,*PAXESLISTA,*LPAXESLISTA;

  typedef struct tagAXESLISTW {
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
  } AXESLISTW,*PAXESLISTW,*LPAXESLISTW;

  typedef AXESLISTW AXESLIST;
  typedef PAXESLISTW PAXESLIST;
  typedef LPAXESLISTW LPAXESLIST;

  typedef struct tagENUMLOGFONTEXDVA {
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
  } ENUMLOGFONTEXDVA,*PENUMLOGFONTEXDVA,*LPENUMLOGFONTEXDVA;

  typedef struct tagENUMLOGFONTEXDVW {
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
  } ENUMLOGFONTEXDVW,*PENUMLOGFONTEXDVW,*LPENUMLOGFONTEXDVW;

  typedef ENUMLOGFONTEXDVW ENUMLOGFONTEXDV;
  typedef PENUMLOGFONTEXDVW PENUMLOGFONTEXDV;
  typedef LPENUMLOGFONTEXDVW LPENUMLOGFONTEXDV;



            HFONT __attribute__((__stdcall__)) CreateFontIndirectExA(const ENUMLOGFONTEXDVA *);
            HFONT __attribute__((__stdcall__)) CreateFontIndirectExW(const ENUMLOGFONTEXDVW *);


  typedef struct tagENUMTEXTMETRICA {
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
  } ENUMTEXTMETRICA,*PENUMTEXTMETRICA,*LPENUMTEXTMETRICA;
  typedef struct tagENUMTEXTMETRICW
  {
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
  } ENUMTEXTMETRICW,*PENUMTEXTMETRICW,*LPENUMTEXTMETRICW;

  typedef ENUMTEXTMETRICW ENUMTEXTMETRIC;
  typedef PENUMTEXTMETRICW PENUMTEXTMETRIC;
  typedef LPENUMTEXTMETRICW LPENUMTEXTMETRIC;





            WINBOOL __attribute__((__stdcall__)) GetViewportExtEx(HDC hdc,LPSIZE lpsize);
            WINBOOL __attribute__((__stdcall__)) GetViewportOrgEx(HDC hdc,LPPOINT lppoint);
            WINBOOL __attribute__((__stdcall__)) GetWindowExtEx(HDC hdc,LPSIZE lpsize);
            WINBOOL __attribute__((__stdcall__)) GetWindowOrgEx(HDC hdc,LPPOINT lppoint);
            int __attribute__((__stdcall__)) IntersectClipRect(HDC hdc,int left,int top,int right,int bottom);
            WINBOOL __attribute__((__stdcall__)) InvertRgn(HDC hdc,HRGN hrgn);
            WINBOOL __attribute__((__stdcall__)) LineDDA(int xStart,int yStart,int xEnd,int yEnd,LINEDDAPROC lpProc,LPARAM data);
            WINBOOL __attribute__((__stdcall__)) LineTo(HDC hdc,int x,int y);
            WINBOOL __attribute__((__stdcall__)) MaskBlt(HDC hdcDest,int xDest,int yDest,int width,int height,HDC hdcSrc,int xSrc,int ySrc,HBITMAP hbmMask,int xMask,int yMask,DWORD rop);
            WINBOOL __attribute__((__stdcall__)) PlgBlt(HDC hdcDest,const POINT *lpPoint,HDC hdcSrc,int xSrc,int ySrc,int width,int height,HBITMAP hbmMask,int xMask,int yMask);
            int __attribute__((__stdcall__)) OffsetClipRgn(HDC hdc,int x,int y);
            int __attribute__((__stdcall__)) OffsetRgn(HRGN hrgn,int x,int y);
            WINBOOL __attribute__((__stdcall__)) PatBlt(HDC hdc,int x,int y,int w,int h,DWORD rop);
            WINBOOL __attribute__((__stdcall__)) Pie(HDC hdc,int left,int top,int right,int bottom,int xr1,int yr1,int xr2,int yr2);
            WINBOOL __attribute__((__stdcall__)) PlayMetaFile(HDC hdc,HMETAFILE hmf);
            WINBOOL __attribute__((__stdcall__)) PaintRgn(HDC hdc,HRGN hrgn);
            WINBOOL __attribute__((__stdcall__)) PolyPolygon(HDC hdc,const POINT *apt,const INT *asz,int csz);
            WINBOOL __attribute__((__stdcall__)) PtInRegion(HRGN hrgn,int x,int y);
            WINBOOL __attribute__((__stdcall__)) PtVisible(HDC hdc,int x,int y);
            WINBOOL __attribute__((__stdcall__)) RectInRegion(HRGN hrgn,const RECT *lprect);
            WINBOOL __attribute__((__stdcall__)) RectVisible(HDC hdc,const RECT *lprect);
            WINBOOL __attribute__((__stdcall__)) Rectangle(HDC hdc,int left,int top,int right,int bottom);
            WINBOOL __attribute__((__stdcall__)) RestoreDC(HDC hdc,int nSavedDC);
            HDC __attribute__((__stdcall__)) ResetDCA(HDC hdc,const DEVMODEA *lpdm);
            HDC __attribute__((__stdcall__)) ResetDCW(HDC hdc,const DEVMODEW *lpdm);
            UINT __attribute__((__stdcall__)) RealizePalette(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) RemoveFontResourceA(LPCSTR lpFileName);
            WINBOOL __attribute__((__stdcall__)) RemoveFontResourceW(LPCWSTR lpFileName);
            WINBOOL __attribute__((__stdcall__)) RoundRect(HDC hdc,int left,int top,int right,int bottom,int width,int height);
            WINBOOL __attribute__((__stdcall__)) ResizePalette(HPALETTE hpal,UINT n);
            int __attribute__((__stdcall__)) SaveDC(HDC hdc);
            int __attribute__((__stdcall__)) SelectClipRgn(HDC hdc,HRGN hrgn);
            int __attribute__((__stdcall__)) ExtSelectClipRgn(HDC hdc,HRGN hrgn,int mode);
            int __attribute__((__stdcall__)) SetMetaRgn(HDC hdc);
            HGDIOBJ __attribute__((__stdcall__)) SelectObject(HDC hdc,HGDIOBJ h);
            HPALETTE __attribute__((__stdcall__)) SelectPalette(HDC hdc,HPALETTE hPal,WINBOOL bForceBkgd);
            COLORREF __attribute__((__stdcall__)) SetBkColor(HDC hdc,COLORREF color);
            COLORREF __attribute__((__stdcall__)) SetDCBrushColor(HDC hdc,COLORREF color);
            COLORREF __attribute__((__stdcall__)) SetDCPenColor(HDC hdc,COLORREF color);
            int __attribute__((__stdcall__)) SetBkMode(HDC hdc,int mode);
            LONG __attribute__((__stdcall__)) SetBitmapBits(HBITMAP hbm,DWORD cb,const void *pvBits);
            UINT __attribute__((__stdcall__)) SetBoundsRect(HDC hdc,const RECT *lprect,UINT flags);
            int __attribute__((__stdcall__)) SetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,const void *lpBits,const BITMAPINFO *lpbmi,UINT ColorUse);
            int __attribute__((__stdcall__)) SetDIBitsToDevice(HDC hdc,int xDest,int yDest,DWORD w,DWORD h,int xSrc,int ySrc,UINT StartScan,UINT cLines,const void *lpvBits,const BITMAPINFO *lpbmi,UINT ColorUse);
            DWORD __attribute__((__stdcall__)) SetMapperFlags(HDC hdc,DWORD flags);
            int __attribute__((__stdcall__)) SetGraphicsMode(HDC hdc,int iMode);
            int __attribute__((__stdcall__)) SetMapMode(HDC hdc,int iMode);
            DWORD __attribute__((__stdcall__)) SetLayout(HDC hdc,DWORD l);
            DWORD __attribute__((__stdcall__)) GetLayout(HDC hdc);
            HMETAFILE __attribute__((__stdcall__)) SetMetaFileBitsEx(UINT cbBuffer,const BYTE *lpData);
            UINT __attribute__((__stdcall__)) SetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,const PALETTEENTRY *pPalEntries);
            COLORREF __attribute__((__stdcall__)) SetPixel(HDC hdc,int x,int y,COLORREF color);
            WINBOOL __attribute__((__stdcall__)) SetPixelV(HDC hdc,int x,int y,COLORREF color);
            WINBOOL __attribute__((__stdcall__)) SetPixelFormat(HDC hdc,int format,const PIXELFORMATDESCRIPTOR *ppfd);
            int __attribute__((__stdcall__)) SetPolyFillMode(HDC hdc,int mode);
            WINBOOL __attribute__((__stdcall__)) StretchBlt(HDC hdcDest,int xDest,int yDest,int wDest,int hDest,HDC hdcSrc,int xSrc,int ySrc,int wSrc,int hSrc,DWORD rop);
            WINBOOL __attribute__((__stdcall__)) SetRectRgn(HRGN hrgn,int left,int top,int right,int bottom);
            int __attribute__((__stdcall__)) StretchDIBits(HDC hdc,int xDest,int yDest,int DestWidth,int DestHeight,int xSrc,int ySrc,int SrcWidth,int SrcHeight,const void *lpBits,const BITMAPINFO *lpbmi,UINT iUsage,DWORD rop);
            int __attribute__((__stdcall__)) SetROP2(HDC hdc,int rop2);
            int __attribute__((__stdcall__)) SetStretchBltMode(HDC hdc,int mode);
            UINT __attribute__((__stdcall__)) SetSystemPaletteUse(HDC hdc,UINT use);
            int __attribute__((__stdcall__)) SetTextCharacterExtra(HDC hdc,int extra);
            COLORREF __attribute__((__stdcall__)) SetTextColor(HDC hdc,COLORREF color);
            UINT __attribute__((__stdcall__)) SetTextAlign(HDC hdc,UINT align);
            WINBOOL __attribute__((__stdcall__)) SetTextJustification(HDC hdc,int extra,int count);
            WINBOOL __attribute__((__stdcall__)) UpdateColors(HDC hdc);
  typedef USHORT COLOR16;

  typedef struct _TRIVERTEX {
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
  } TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;


  typedef struct _GRADIENT_TRIANGLE {
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
  } GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

  typedef struct _GRADIENT_RECT {
    ULONG UpperLeft;
    ULONG LowerRight;
  } GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;


  typedef struct _BLENDFUNCTION {
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
  } BLENDFUNCTION,*PBLENDFUNCTION;





            WINBOOL __attribute__((__stdcall__)) AlphaBlend(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,BLENDFUNCTION ftn);
            WINBOOL __attribute__((__stdcall__)) GdiAlphaBlend(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,BLENDFUNCTION ftn);
            WINBOOL __attribute__((__stdcall__)) TransparentBlt(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,UINT crTransparent);
            WINBOOL __attribute__((__stdcall__)) GdiTransparentBlt(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,UINT crTransparent);






            WINBOOL __attribute__((__stdcall__)) GradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode);
            WINBOOL __attribute__((__stdcall__)) GdiGradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode);
            WINBOOL __attribute__((__stdcall__)) PlayMetaFileRecord(HDC hdc,LPHANDLETABLE lpHandleTable,LPMETARECORD lpMR,UINT noObjs);

  typedef int (__attribute__((__stdcall__)) *MFENUMPROC)(HDC hdc,HANDLETABLE *lpht,METARECORD *lpMR,int nObj,LPARAM lParam);

            WINBOOL __attribute__((__stdcall__)) EnumMetaFile(HDC hdc,HMETAFILE hmf,MFENUMPROC lpProc,LPARAM lParam);

  typedef int (__attribute__((__stdcall__)) *ENHMFENUMPROC)(HDC hdc,HANDLETABLE *lpht,const ENHMETARECORD *lpmr,int hHandles,LPARAM data);

            HENHMETAFILE __attribute__((__stdcall__)) CloseEnhMetaFile(HDC hdc);
            HENHMETAFILE __attribute__((__stdcall__)) CopyEnhMetaFileA(HENHMETAFILE hEnh,LPCSTR lpFileName);
            HENHMETAFILE __attribute__((__stdcall__)) CopyEnhMetaFileW(HENHMETAFILE hEnh,LPCWSTR lpFileName);
            HDC __attribute__((__stdcall__)) CreateEnhMetaFileA(HDC hdc,LPCSTR lpFilename,const RECT *lprc,LPCSTR lpDesc);
            HDC __attribute__((__stdcall__)) CreateEnhMetaFileW(HDC hdc,LPCWSTR lpFilename,const RECT *lprc,LPCWSTR lpDesc);
            WINBOOL __attribute__((__stdcall__)) DeleteEnhMetaFile(HENHMETAFILE hmf);
            WINBOOL __attribute__((__stdcall__)) EnumEnhMetaFile(HDC hdc,HENHMETAFILE hmf,ENHMFENUMPROC lpProc,LPVOID lpParam,const RECT *lpRect);
            HENHMETAFILE __attribute__((__stdcall__)) GetEnhMetaFileA(LPCSTR lpName);
            HENHMETAFILE __attribute__((__stdcall__)) GetEnhMetaFileW(LPCWSTR lpName);
            UINT __attribute__((__stdcall__)) GetEnhMetaFileBits(HENHMETAFILE hEMF,UINT nSize,LPBYTE lpData);
            UINT __attribute__((__stdcall__)) GetEnhMetaFileDescriptionA(HENHMETAFILE hemf,UINT cchBuffer,LPSTR lpDescription);
            UINT __attribute__((__stdcall__)) GetEnhMetaFileDescriptionW(HENHMETAFILE hemf,UINT cchBuffer,LPWSTR lpDescription);
            UINT __attribute__((__stdcall__)) GetEnhMetaFileHeader(HENHMETAFILE hemf,UINT nSize,LPENHMETAHEADER lpEnhMetaHeader);
            UINT __attribute__((__stdcall__)) GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf,UINT nNumEntries,LPPALETTEENTRY lpPaletteEntries);
            UINT __attribute__((__stdcall__)) GetEnhMetaFilePixelFormat(HENHMETAFILE hemf,UINT cbBuffer,PIXELFORMATDESCRIPTOR *ppfd);
            UINT __attribute__((__stdcall__)) GetWinMetaFileBits(HENHMETAFILE hemf,UINT cbData16,LPBYTE pData16,INT iMapMode,HDC hdcRef);
            WINBOOL __attribute__((__stdcall__)) PlayEnhMetaFile(HDC hdc,HENHMETAFILE hmf,const RECT *lprect);
            WINBOOL __attribute__((__stdcall__)) PlayEnhMetaFileRecord(HDC hdc,LPHANDLETABLE pht,const ENHMETARECORD *pmr,UINT cht);
            HENHMETAFILE __attribute__((__stdcall__)) SetEnhMetaFileBits(UINT nSize,const BYTE *pb);
            HENHMETAFILE __attribute__((__stdcall__)) SetWinMetaFileBits(UINT nSize,const BYTE *lpMeta16Data,HDC hdcRef,const METAFILEPICT *lpMFP);
            WINBOOL __attribute__((__stdcall__)) GdiComment(HDC hdc,UINT nSize,const BYTE *lpData);





            WINBOOL __attribute__((__stdcall__)) GetTextMetricsA(HDC hdc,LPTEXTMETRICA lptm);
            WINBOOL __attribute__((__stdcall__)) GetTextMetricsW(HDC hdc,LPTEXTMETRICW lptm);


  typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
  } DIBSECTION,*LPDIBSECTION,*PDIBSECTION;

            WINBOOL __attribute__((__stdcall__)) AngleArc(HDC hdc,int x,int y,DWORD r,FLOAT StartAngle,FLOAT SweepAngle);
            WINBOOL __attribute__((__stdcall__)) PolyPolyline(HDC hdc,const POINT *apt,const DWORD *asz,DWORD csz);
            WINBOOL __attribute__((__stdcall__)) GetWorldTransform(HDC hdc,LPXFORM lpxf);
            WINBOOL __attribute__((__stdcall__)) SetWorldTransform(HDC hdc,const XFORM *lpxf);
            WINBOOL __attribute__((__stdcall__)) ModifyWorldTransform(HDC hdc,const XFORM *lpxf,DWORD mode);
            WINBOOL __attribute__((__stdcall__)) CombineTransform(LPXFORM lpxfOut,const XFORM *lpxf1,const XFORM *lpxf2);
            HBITMAP __attribute__((__stdcall__)) CreateDIBSection(HDC hdc,const BITMAPINFO *lpbmi,UINT usage,void **ppvBits,HANDLE hSection,DWORD offset);
            UINT __attribute__((__stdcall__)) GetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,RGBQUAD *prgbq);
            UINT __attribute__((__stdcall__)) SetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,const RGBQUAD *prgbq);
  typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
  } COLORADJUSTMENT,*PCOLORADJUSTMENT,*LPCOLORADJUSTMENT;

            WINBOOL __attribute__((__stdcall__)) SetColorAdjustment(HDC hdc,const COLORADJUSTMENT *lpca);
            WINBOOL __attribute__((__stdcall__)) GetColorAdjustment(HDC hdc,LPCOLORADJUSTMENT lpca);
            HPALETTE __attribute__((__stdcall__)) CreateHalftonePalette(HDC hdc);

  typedef WINBOOL (__attribute__((__stdcall__)) *ABORTPROC)(HDC,int);

  typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
  } DOCINFOA,*LPDOCINFOA;

  typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
  } DOCINFOW,*LPDOCINFOW;

  typedef DOCINFOW DOCINFO;
  typedef LPDOCINFOW LPDOCINFO;
            int __attribute__((__stdcall__)) StartDocA(HDC hdc,const DOCINFOA *lpdi);
            int __attribute__((__stdcall__)) StartDocW(HDC hdc,const DOCINFOW *lpdi);
            int __attribute__((__stdcall__)) EndDoc(HDC hdc);
            int __attribute__((__stdcall__)) StartPage(HDC hdc);
            int __attribute__((__stdcall__)) EndPage(HDC hdc);
            int __attribute__((__stdcall__)) AbortDoc(HDC hdc);
            int __attribute__((__stdcall__)) SetAbortProc(HDC hdc,ABORTPROC lpProc);
            WINBOOL __attribute__((__stdcall__)) AbortPath(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) ArcTo(HDC hdc,int left,int top,int right,int bottom,int xr1,int yr1,int xr2,int yr2);
            WINBOOL __attribute__((__stdcall__)) BeginPath(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) CloseFigure(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) EndPath(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) FillPath(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) FlattenPath(HDC hdc);
            int __attribute__((__stdcall__)) GetPath(HDC hdc,LPPOINT apt,LPBYTE aj,int cpt);
            HRGN __attribute__((__stdcall__)) PathToRegion(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) PolyDraw(HDC hdc,const POINT *apt,const BYTE *aj,int cpt);
            WINBOOL __attribute__((__stdcall__)) SelectClipPath(HDC hdc,int mode);
            int __attribute__((__stdcall__)) SetArcDirection(HDC hdc,int dir);
            WINBOOL __attribute__((__stdcall__)) SetMiterLimit(HDC hdc,FLOAT limit,PFLOAT old);
            WINBOOL __attribute__((__stdcall__)) StrokeAndFillPath(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) StrokePath(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) WidenPath(HDC hdc);
            HPEN __attribute__((__stdcall__)) ExtCreatePen(DWORD iPenStyle,DWORD cWidth,const LOGBRUSH *plbrush,DWORD cStyle,const DWORD *pstyle);
            WINBOOL __attribute__((__stdcall__)) GetMiterLimit(HDC hdc,PFLOAT plimit);
            int __attribute__((__stdcall__)) GetArcDirection(HDC hdc);
            int __attribute__((__stdcall__)) GetObjectA(HANDLE h,int c,LPVOID pv);
            int __attribute__((__stdcall__)) GetObjectW(HANDLE h,int c,LPVOID pv);
            WINBOOL __attribute__((__stdcall__)) MoveToEx(HDC hdc,int x,int y,LPPOINT lppt);
            WINBOOL __attribute__((__stdcall__)) TextOutA(HDC hdc,int x,int y,LPCSTR lpString,int c);
            WINBOOL __attribute__((__stdcall__)) TextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int c);
            WINBOOL __attribute__((__stdcall__)) ExtTextOutA(HDC hdc,int x,int y,UINT options,const RECT *lprect,LPCSTR lpString,UINT c,const INT *lpDx);
            WINBOOL __attribute__((__stdcall__)) ExtTextOutW(HDC hdc,int x,int y,UINT options,const RECT *lprect,LPCWSTR lpString,UINT c,const INT *lpDx);
            WINBOOL __attribute__((__stdcall__)) PolyTextOutA(HDC hdc,const POLYTEXTA *ppt,int nstrings);
            WINBOOL __attribute__((__stdcall__)) PolyTextOutW(HDC hdc,const POLYTEXTW *ppt,int nstrings);
            HRGN __attribute__((__stdcall__)) CreatePolygonRgn(const POINT *pptl,int cPoint,int iMode);
            WINBOOL __attribute__((__stdcall__)) DPtoLP(HDC hdc,LPPOINT lppt,int c);
            WINBOOL __attribute__((__stdcall__)) LPtoDP(HDC hdc,LPPOINT lppt,int c);
            WINBOOL __attribute__((__stdcall__)) Polygon(HDC hdc,const POINT *apt,int cpt);
            WINBOOL __attribute__((__stdcall__)) Polyline(HDC hdc,const POINT *apt,int cpt);
            WINBOOL __attribute__((__stdcall__)) PolyBezier(HDC hdc,const POINT *apt,DWORD cpt);
            WINBOOL __attribute__((__stdcall__)) PolyBezierTo(HDC hdc,const POINT *apt,DWORD cpt);
            WINBOOL __attribute__((__stdcall__)) PolylineTo(HDC hdc,const POINT *apt,DWORD cpt);
            WINBOOL __attribute__((__stdcall__)) SetViewportExtEx(HDC hdc,int x,int y,LPSIZE lpsz);
            WINBOOL __attribute__((__stdcall__)) SetViewportOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
            WINBOOL __attribute__((__stdcall__)) SetWindowExtEx(HDC hdc,int x,int y,LPSIZE lpsz);
            WINBOOL __attribute__((__stdcall__)) SetWindowOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
            WINBOOL __attribute__((__stdcall__)) OffsetViewportOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
            WINBOOL __attribute__((__stdcall__)) OffsetWindowOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
            WINBOOL __attribute__((__stdcall__)) ScaleViewportExtEx(HDC hdc,int xn,int dx,int yn,int yd,LPSIZE lpsz);
            WINBOOL __attribute__((__stdcall__)) ScaleWindowExtEx(HDC hdc,int xn,int xd,int yn,int yd,LPSIZE lpsz);
            WINBOOL __attribute__((__stdcall__)) SetBitmapDimensionEx(HBITMAP hbm,int w,int h,LPSIZE lpsz);
            WINBOOL __attribute__((__stdcall__)) SetBrushOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
            int __attribute__((__stdcall__)) GetTextFaceA(HDC hdc,int c,LPSTR lpName);
            int __attribute__((__stdcall__)) GetTextFaceW(HDC hdc,int c,LPWSTR lpName);



  typedef struct tagKERNINGPAIR {
    WORD wFirst;
    WORD wSecond;
    int iKernAmount;
  } KERNINGPAIR,*LPKERNINGPAIR;



            DWORD __attribute__((__stdcall__)) GetKerningPairsA(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair);
            DWORD __attribute__((__stdcall__)) GetKerningPairsW(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair);
            WINBOOL __attribute__((__stdcall__)) GetDCOrgEx(HDC hdc,LPPOINT lppt);
            WINBOOL __attribute__((__stdcall__)) FixBrushOrgEx(HDC hdc,int x,int y,LPPOINT ptl);
            WINBOOL __attribute__((__stdcall__)) UnrealizeObject(HGDIOBJ h);
            WINBOOL __attribute__((__stdcall__)) GdiFlush();
            DWORD __attribute__((__stdcall__)) GdiSetBatchLimit(DWORD dw);
            DWORD __attribute__((__stdcall__)) GdiGetBatchLimit();






  typedef int (__attribute__((__stdcall__)) *ICMENUMPROCA)(LPSTR,LPARAM);
  typedef int (__attribute__((__stdcall__)) *ICMENUMPROCW)(LPWSTR,LPARAM);
            int __attribute__((__stdcall__)) SetICMMode(HDC hdc,int mode);
            WINBOOL __attribute__((__stdcall__)) CheckColorsInGamut(HDC hdc,LPVOID lpRGBTriple,LPVOID dlpBuffer,DWORD nCount);
            HCOLORSPACE __attribute__((__stdcall__)) GetColorSpace(HDC hdc);
            WINBOOL __attribute__((__stdcall__)) GetLogColorSpaceA(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEA lpBuffer,DWORD nSize);
            WINBOOL __attribute__((__stdcall__)) GetLogColorSpaceW(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEW lpBuffer,DWORD nSize);
            HCOLORSPACE __attribute__((__stdcall__)) CreateColorSpaceA(LPLOGCOLORSPACEA lplcs);
            HCOLORSPACE __attribute__((__stdcall__)) CreateColorSpaceW(LPLOGCOLORSPACEW lplcs);
            HCOLORSPACE __attribute__((__stdcall__)) SetColorSpace(HDC hdc,HCOLORSPACE hcs);
            WINBOOL __attribute__((__stdcall__)) DeleteColorSpace(HCOLORSPACE hcs);
            WINBOOL __attribute__((__stdcall__)) GetICMProfileA(HDC hdc,LPDWORD pBufSize,LPSTR pszFilename);
            WINBOOL __attribute__((__stdcall__)) GetICMProfileW(HDC hdc,LPDWORD pBufSize,LPWSTR pszFilename);
            WINBOOL __attribute__((__stdcall__)) SetICMProfileA(HDC hdc,LPSTR lpFileName);
            WINBOOL __attribute__((__stdcall__)) SetICMProfileW(HDC hdc,LPWSTR lpFileName);
            WINBOOL __attribute__((__stdcall__)) GetDeviceGammaRamp(HDC hdc,LPVOID lpRamp);
            WINBOOL __attribute__((__stdcall__)) SetDeviceGammaRamp(HDC hdc,LPVOID lpRamp);
            WINBOOL __attribute__((__stdcall__)) ColorMatchToTarget(HDC hdc,HDC hdcTarget,DWORD action);
            int __attribute__((__stdcall__)) EnumICMProfilesA(HDC hdc,ICMENUMPROCA lpProc,LPARAM lParam);
            int __attribute__((__stdcall__)) EnumICMProfilesW(HDC hdc,ICMENUMPROCW lpProc,LPARAM lParam);
            WINBOOL __attribute__((__stdcall__)) UpdateICMRegKeyA(DWORD reserved,LPSTR lpszCMID,LPSTR lpszFileName,UINT command);
            WINBOOL __attribute__((__stdcall__)) UpdateICMRegKeyW(DWORD reserved,LPWSTR lpszCMID,LPWSTR lpszFileName,UINT command);
            WINBOOL __attribute__((__stdcall__)) ColorCorrectPalette(HDC hdc,HPALETTE hPal,DWORD deFirst,DWORD num);
  typedef struct tagEMR {
    DWORD iType;
    DWORD nSize;
  } EMR,*PEMR;

  typedef struct tagEMRTEXT {
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;
  } EMRTEXT,*PEMRTEXT;

  typedef struct tagABORTPATH {
    EMR emr;
  } EMRABORTPATH,*PEMRABORTPATH,EMRBEGINPATH,*PEMRBEGINPATH,EMRENDPATH,*PEMRENDPATH,EMRCLOSEFIGURE,*PEMRCLOSEFIGURE,EMRFLATTENPATH,*PEMRFLATTENPATH,EMRWIDENPATH,*PEMRWIDENPATH,EMRSETMETARGN,*PEMRSETMETARGN,EMRSAVEDC,*PEMRSAVEDC,EMRREALIZEPALETTE,*PEMRREALIZEPALETTE;

  typedef struct tagEMRSELECTCLIPPATH {
    EMR emr;
    DWORD iMode;
  } EMRSELECTCLIPPATH,*PEMRSELECTCLIPPATH,EMRSETBKMODE,*PEMRSETBKMODE,EMRSETMAPMODE,*PEMRSETMAPMODE,EMRSETLAYOUT,*PEMRSETLAYOUT,
    EMRSETPOLYFILLMODE,*PEMRSETPOLYFILLMODE,EMRSETROP2,*PEMRSETROP2,EMRSETSTRETCHBLTMODE,*PEMRSETSTRETCHBLTMODE,EMRSETICMMODE,
    *PEMRSETICMMODE,EMRSETTEXTALIGN,*PEMRSETTEXTALIGN;

  typedef struct tagEMRSETMITERLIMIT {
    EMR emr;
    FLOAT eMiterLimit;
  } EMRSETMITERLIMIT,*PEMRSETMITERLIMIT;

  typedef struct tagEMRRESTOREDC {
    EMR emr;
    LONG iRelative;
  } EMRRESTOREDC,*PEMRRESTOREDC;

  typedef struct tagEMRSETARCDIRECTION {
    EMR emr;
    DWORD iArcDirection;

  } EMRSETARCDIRECTION,*PEMRSETARCDIRECTION;

  typedef struct tagEMRSETMAPPERFLAGS {
    EMR emr;
    DWORD dwFlags;
  } EMRSETMAPPERFLAGS,*PEMRSETMAPPERFLAGS;

  typedef struct tagEMRSETTEXTCOLOR {
    EMR emr;
    COLORREF crColor;
  } EMRSETBKCOLOR,*PEMRSETBKCOLOR,EMRSETTEXTCOLOR,*PEMRSETTEXTCOLOR;

  typedef struct tagEMRSELECTOBJECT {
    EMR emr;
    DWORD ihObject;
  } EMRSELECTOBJECT,*PEMRSELECTOBJECT,EMRDELETEOBJECT,*PEMRDELETEOBJECT;

  typedef struct tagEMRSELECTPALETTE {
    EMR emr;
    DWORD ihPal;
  } EMRSELECTPALETTE,*PEMRSELECTPALETTE;

  typedef struct tagEMRRESIZEPALETTE {
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
  } EMRRESIZEPALETTE,*PEMRRESIZEPALETTE;

  typedef struct tagEMRSETPALETTEENTRIES {
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
  } EMRSETPALETTEENTRIES,*PEMRSETPALETTEENTRIES;

  typedef struct tagEMRSETCOLORADJUSTMENT {
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
  } EMRSETCOLORADJUSTMENT,*PEMRSETCOLORADJUSTMENT;

  typedef struct tagEMRGDICOMMENT {
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
  } EMRGDICOMMENT,*PEMRGDICOMMENT;

  typedef struct tagEMREOF {
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;
  } EMREOF,*PEMREOF;

  typedef struct tagEMRLINETO {
    EMR emr;
    POINTL ptl;
  } EMRLINETO,*PEMRLINETO,EMRMOVETOEX,*PEMRMOVETOEX;

  typedef struct tagEMROFFSETCLIPRGN {
    EMR emr;
    POINTL ptlOffset;
  } EMROFFSETCLIPRGN,*PEMROFFSETCLIPRGN;

  typedef struct tagEMRFILLPATH {
    EMR emr;
    RECTL rclBounds;
  } EMRFILLPATH,*PEMRFILLPATH,EMRSTROKEANDFILLPATH,*PEMRSTROKEANDFILLPATH,EMRSTROKEPATH,*PEMRSTROKEPATH;

  typedef struct tagEMREXCLUDECLIPRECT {
    EMR emr;
    RECTL rclClip;
  } EMREXCLUDECLIPRECT,*PEMREXCLUDECLIPRECT,EMRINTERSECTCLIPRECT,*PEMRINTERSECTCLIPRECT;

  typedef struct tagEMRSETVIEWPORTORGEX {
    EMR emr;
    POINTL ptlOrigin;
  } EMRSETVIEWPORTORGEX,*PEMRSETVIEWPORTORGEX,EMRSETWINDOWORGEX,*PEMRSETWINDOWORGEX,EMRSETBRUSHORGEX,*PEMRSETBRUSHORGEX;

  typedef struct tagEMRSETVIEWPORTEXTEX {
    EMR emr;
    SIZEL szlExtent;
  } EMRSETVIEWPORTEXTEX,*PEMRSETVIEWPORTEXTEX,EMRSETWINDOWEXTEX,*PEMRSETWINDOWEXTEX;

  typedef struct tagEMRSCALEVIEWPORTEXTEX {
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
  } EMRSCALEVIEWPORTEXTEX,*PEMRSCALEVIEWPORTEXTEX,EMRSCALEWINDOWEXTEX,*PEMRSCALEWINDOWEXTEX;

  typedef struct tagEMRSETWORLDTRANSFORM {
    EMR emr;
    XFORM xform;
  } EMRSETWORLDTRANSFORM,*PEMRSETWORLDTRANSFORM;

  typedef struct tagEMRMODIFYWORLDTRANSFORM {
    EMR emr;
    XFORM xform;
    DWORD iMode;
  } EMRMODIFYWORLDTRANSFORM,*PEMRMODIFYWORLDTRANSFORM;

  typedef struct tagEMRSETPIXELV {
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
  } EMRSETPIXELV,*PEMRSETPIXELV;

  typedef struct tagEMREXTFLOODFILL {
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
  } EMREXTFLOODFILL,*PEMREXTFLOODFILL;

  typedef struct tagEMRELLIPSE {
    EMR emr;
    RECTL rclBox;
  } EMRELLIPSE,*PEMRELLIPSE,EMRRECTANGLE,*PEMRRECTANGLE;

  typedef struct tagEMRROUNDRECT {
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
  } EMRROUNDRECT,*PEMRROUNDRECT;

  typedef struct tagEMRARC {
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
  } EMRARC,*PEMRARC,EMRARCTO,*PEMRARCTO,EMRCHORD,*PEMRCHORD,EMRPIE,*PEMRPIE;

  typedef struct tagEMRANGLEARC {
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
  } EMRANGLEARC,*PEMRANGLEARC;

  typedef struct tagEMRPOLYLINE {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
  } EMRPOLYLINE,*PEMRPOLYLINE,EMRPOLYBEZIER,*PEMRPOLYBEZIER,EMRPOLYGON,*PEMRPOLYGON,EMRPOLYBEZIERTO,*PEMRPOLYBEZIERTO,EMRPOLYLINETO,*PEMRPOLYLINETO;

  typedef struct tagEMRPOLYLINE16 {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
  } EMRPOLYLINE16,*PEMRPOLYLINE16,EMRPOLYBEZIER16,*PEMRPOLYBEZIER16,EMRPOLYGON16,*PEMRPOLYGON16,EMRPOLYBEZIERTO16,*PEMRPOLYBEZIERTO16,EMRPOLYLINETO16,*PEMRPOLYLINETO16;

  typedef struct tagEMRPOLYDRAW {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
  } EMRPOLYDRAW,*PEMRPOLYDRAW;

  typedef struct tagEMRPOLYDRAW16 {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
  } EMRPOLYDRAW16,*PEMRPOLYDRAW16;

  typedef struct tagEMRPOLYPOLYLINE {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
  } EMRPOLYPOLYLINE,*PEMRPOLYPOLYLINE,EMRPOLYPOLYGON,*PEMRPOLYPOLYGON;

  typedef struct tagEMRPOLYPOLYLINE16 {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
  } EMRPOLYPOLYLINE16,*PEMRPOLYPOLYLINE16,EMRPOLYPOLYGON16,*PEMRPOLYPOLYGON16;

  typedef struct tagEMRINVERTRGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
  } EMRINVERTRGN,*PEMRINVERTRGN,EMRPAINTRGN,*PEMRPAINTRGN;

  typedef struct tagEMRFILLRGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
  } EMRFILLRGN,*PEMRFILLRGN;

  typedef struct tagEMRFRAMERGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
  } EMRFRAMERGN,*PEMRFRAMERGN;

  typedef struct tagEMREXTSELECTCLIPRGN {
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
  } EMREXTSELECTCLIPRGN,*PEMREXTSELECTCLIPRGN;

  typedef struct tagEMREXTTEXTOUTA {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;
  } EMREXTTEXTOUTA,*PEMREXTTEXTOUTA,EMREXTTEXTOUTW,*PEMREXTTEXTOUTW;

  typedef struct tagEMRPOLYTEXTOUTA {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];
  } EMRPOLYTEXTOUTA,*PEMRPOLYTEXTOUTA,EMRPOLYTEXTOUTW,*PEMRPOLYTEXTOUTW;

  typedef struct tagEMRBITBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
  } EMRBITBLT,*PEMRBITBLT;

  typedef struct tagEMRSTRETCHBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRSTRETCHBLT,*PEMRSTRETCHBLT;

  typedef struct tagEMRMASKBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
  } EMRMASKBLT,*PEMRMASKBLT;

  typedef struct tagEMRPLGBLT {
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
  } EMRPLGBLT,*PEMRPLGBLT;

  typedef struct tagEMRSETDIBITSTODEVICE {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
  } EMRSETDIBITSTODEVICE,*PEMRSETDIBITSTODEVICE;

  typedef struct tagEMRSTRETCHDIBITS {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
  } EMRSTRETCHDIBITS,*PEMRSTRETCHDIBITS;

  typedef struct tagEMREXTCREATEFONTINDIRECTW {
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
  } EMREXTCREATEFONTINDIRECTW,*PEMREXTCREATEFONTINDIRECTW;

  typedef struct tagEMRCREATEPALETTE {
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;
  } EMRCREATEPALETTE,*PEMRCREATEPALETTE;

  typedef struct tagEMRCREATEPEN {
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
  } EMRCREATEPEN,*PEMRCREATEPEN;

  typedef struct tagEMREXTCREATEPEN {
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN elp;
  } EMREXTCREATEPEN,*PEMREXTCREATEPEN;

  typedef struct tagEMRCREATEBRUSHINDIRECT {
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;
  } EMRCREATEBRUSHINDIRECT,*PEMRCREATEBRUSHINDIRECT;

  typedef struct tagEMRCREATEMONOBRUSH {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
  } EMRCREATEMONOBRUSH,*PEMRCREATEMONOBRUSH;

  typedef struct tagEMRCREATEDIBPATTERNBRUSHPT {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
  } EMRCREATEDIBPATTERNBRUSHPT,*PEMRCREATEDIBPATTERNBRUSHPT;

  typedef struct tagEMRFORMAT {
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;
  } EMRFORMAT,*PEMRFORMAT;

  typedef struct tagEMRGLSRECORD {
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
  } EMRGLSRECORD,*PEMRGLSRECORD;

  typedef struct tagEMRGLSBOUNDEDRECORD {
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
  } EMRGLSBOUNDEDRECORD,*PEMRGLSBOUNDEDRECORD;

  typedef struct tagEMRPIXELFORMAT {
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
  } EMRPIXELFORMAT,*PEMRPIXELFORMAT;

  typedef struct tagEMRCREATECOLORSPACE {
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
  } EMRCREATECOLORSPACE,*PEMRCREATECOLORSPACE;

  typedef struct tagEMRSETCOLORSPACE {
    EMR emr;
    DWORD ihCS;
  } EMRSETCOLORSPACE,*PEMRSETCOLORSPACE,EMRSELECTCOLORSPACE,*PEMRSELECTCOLORSPACE,EMRDELETECOLORSPACE,*PEMRDELETECOLORSPACE;

  typedef struct tagEMREXTESCAPE {
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
  } EMREXTESCAPE,*PEMREXTESCAPE,EMRDRAWESCAPE,*PEMRDRAWESCAPE;

  typedef struct tagEMRNAMEDESCAPE {
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
  } EMRNAMEDESCAPE,*PEMRNAMEDESCAPE;



  typedef struct tagEMRSETICMPROFILE {
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
  } EMRSETICMPROFILE,*PEMRSETICMPROFILE,EMRSETICMPROFILEA,*PEMRSETICMPROFILEA,EMRSETICMPROFILEW,*PEMRSETICMPROFILEW;



  typedef struct tagEMRCREATECOLORSPACEW {
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
  } EMRCREATECOLORSPACEW,*PEMRCREATECOLORSPACEW;



  typedef struct tagCOLORMATCHTOTARGET {
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
  } EMRCOLORMATCHTOTARGET,*PEMRCOLORMATCHTOTARGET;

  typedef struct tagCOLORCORRECTPALETTE {
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
  } EMRCOLORCORRECTPALETTE,*PEMRCOLORCORRECTPALETTE;

  typedef struct tagEMRALPHABLEND {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRALPHABLEND,*PEMRALPHABLEND;

  typedef struct tagEMRGRADIENTFILL {
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
  } EMRGRADIENTFILL,*PEMRGRADIENTFILL;

  typedef struct tagEMRTRANSPARENTBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRTRANSPARENTBLT,*PEMRTRANSPARENTBLT;
            WINBOOL __attribute__((__stdcall__)) wglCopyContext(HGLRC,HGLRC,UINT);
            HGLRC __attribute__((__stdcall__)) wglCreateContext(HDC);
            HGLRC __attribute__((__stdcall__)) wglCreateLayerContext(HDC,int);
            WINBOOL __attribute__((__stdcall__)) wglDeleteContext(HGLRC);
            HGLRC __attribute__((__stdcall__)) wglGetCurrentContext(void);
            HDC __attribute__((__stdcall__)) wglGetCurrentDC(void);
            PROC __attribute__((__stdcall__)) wglGetProcAddress(LPCSTR);
            WINBOOL __attribute__((__stdcall__)) wglMakeCurrent(HDC,HGLRC);
            WINBOOL __attribute__((__stdcall__)) wglShareLists(HGLRC,HGLRC);
            WINBOOL __attribute__((__stdcall__)) wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD);
            WINBOOL __attribute__((__stdcall__)) wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD);
            WINBOOL __attribute__((__stdcall__)) SwapBuffers(HDC);

  typedef struct _POINTFLOAT {
    FLOAT x;
    FLOAT y;
  } POINTFLOAT,*PPOINTFLOAT;

  typedef struct _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
  } GLYPHMETRICSFLOAT,*PGLYPHMETRICSFLOAT,*LPGLYPHMETRICSFLOAT;






            WINBOOL __attribute__((__stdcall__)) wglUseFontOutlinesA(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);
            WINBOOL __attribute__((__stdcall__)) wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);

  typedef struct tagLAYERPLANEDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
  } LAYERPLANEDESCRIPTOR,*PLAYERPLANEDESCRIPTOR,*LPLAYERPLANEDESCRIPTOR;
            WINBOOL __attribute__((__stdcall__)) wglDescribeLayerPlane(HDC,int,int,UINT,LPLAYERPLANEDESCRIPTOR);
            int __attribute__((__stdcall__)) wglSetLayerPaletteEntries(HDC,int,int,int,const COLORREF *);
            int __attribute__((__stdcall__)) wglGetLayerPaletteEntries(HDC,int,int,int,COLORREF *);
            WINBOOL __attribute__((__stdcall__)) wglRealizeLayerPalette(HDC,int,WINBOOL);
            WINBOOL __attribute__((__stdcall__)) wglSwapLayerBuffers(HDC,UINT);

  typedef struct _WGLSWAP {
    HDC hdc;
    UINT uiFlags;
  } WGLSWAP,*PWGLSWAP,*LPWGLSWAP;



            DWORD __attribute__((__stdcall__)) wglSwapMultipleBuffers(UINT,const WGLSWAP *);





}
extern "C" {
extern "C++" {
__extension__ template<typename T> const GUID &__mingw_uuidof();
}
  typedef HANDLE HDWP;
  typedef void MENUTEMPLATEA;
  typedef void MENUTEMPLATEW;
  typedef PVOID LPMENUTEMPLATEA;
  typedef PVOID LPMENUTEMPLATEW;

  typedef MENUTEMPLATEW MENUTEMPLATE;
  typedef LPMENUTEMPLATEW LPMENUTEMPLATE;

  typedef LRESULT (__attribute__((__stdcall__)) *WNDPROC)(HWND,UINT,WPARAM,LPARAM);




  typedef INT_PTR (__attribute__((__stdcall__)) *DLGPROC) (HWND, UINT, WPARAM, LPARAM);



  typedef void (__attribute__((__stdcall__)) *TIMERPROC) (HWND, UINT, UINT_PTR, DWORD);
  typedef WINBOOL (__attribute__((__stdcall__)) *GRAYSTRINGPROC) (HDC, LPARAM, int);
  typedef WINBOOL (__attribute__((__stdcall__)) *WNDENUMPROC) (HWND, LPARAM);
  typedef LRESULT (__attribute__((__stdcall__)) *HOOKPROC) (int code, WPARAM wParam, LPARAM lParam);
  typedef void (__attribute__((__stdcall__)) *SENDASYNCPROC) (HWND, UINT, ULONG_PTR, LRESULT);

  typedef WINBOOL (__attribute__((__stdcall__)) *PROPENUMPROCA) (HWND, LPCSTR, HANDLE);
  typedef WINBOOL (__attribute__((__stdcall__)) *PROPENUMPROCW) (HWND, LPCWSTR, HANDLE);

  typedef WINBOOL (__attribute__((__stdcall__)) *PROPENUMPROCEXA) (HWND, LPSTR, HANDLE, ULONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *PROPENUMPROCEXW) (HWND, LPWSTR, HANDLE, ULONG_PTR);

  typedef int (__attribute__((__stdcall__)) *EDITWORDBREAKPROCA) (LPSTR lpch, int ichCurrent, int cch, int code);
  typedef int (__attribute__((__stdcall__)) *EDITWORDBREAKPROCW) (LPWSTR lpch, int ichCurrent, int cch, int code);

  typedef WINBOOL (__attribute__((__stdcall__)) *DRAWSTATEPROC) (HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
  typedef PROPENUMPROCW PROPENUMPROC;
  typedef PROPENUMPROCEXW PROPENUMPROCEX;
  typedef EDITWORDBREAKPROCW EDITWORDBREAKPROC;


  typedef WINBOOL (__attribute__((__stdcall__)) *NAMEENUMPROCA) (LPSTR, LPARAM);
  typedef WINBOOL (__attribute__((__stdcall__)) *NAMEENUMPROCW) (LPWSTR, LPARAM);
  typedef NAMEENUMPROCA WINSTAENUMPROCA;
  typedef NAMEENUMPROCW WINSTAENUMPROCW;
  typedef NAMEENUMPROCA DESKTOPENUMPROCA;
  typedef NAMEENUMPROCW DESKTOPENUMPROCW;
  typedef WINSTAENUMPROCW WINSTAENUMPROC;
  typedef DESKTOPENUMPROCW DESKTOPENUMPROC;
             int __attribute__((__stdcall__)) wvsprintfA(LPSTR,LPCSTR,va_list arglist);
             int __attribute__((__stdcall__)) wvsprintfW(LPWSTR,LPCWSTR,va_list arglist);
             int __attribute__((__cdecl__)) wsprintfA(LPSTR,LPCSTR,...);
             int __attribute__((__cdecl__)) wsprintfW(LPWSTR,LPCWSTR,...);
  typedef struct tagCBT_CREATEWNDA {
    struct tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
  } CBT_CREATEWNDA,*LPCBT_CREATEWNDA;

  typedef struct tagCBT_CREATEWNDW {
    struct tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
  } CBT_CREATEWNDW,*LPCBT_CREATEWNDW;

  typedef CBT_CREATEWNDW CBT_CREATEWND;
  typedef LPCBT_CREATEWNDW LPCBT_CREATEWND;

  typedef struct tagCBTACTIVATESTRUCT {
    WINBOOL fMouse;
    HWND hWndActive;
  } CBTACTIVATESTRUCT,*LPCBTACTIVATESTRUCT;



  typedef struct tagWTSSESSION_NOTIFICATION {
    DWORD cbSize;
    DWORD dwSessionId;
  } WTSSESSION_NOTIFICATION,*PWTSSESSION_NOTIFICATION;
  typedef struct {
    HWND hwnd;
    RECT rc;
  } SHELLHOOKINFO,*LPSHELLHOOKINFO;

  typedef struct tagEVENTMSG {
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
  } EVENTMSG,*PEVENTMSGMSG,*NPEVENTMSGMSG,*LPEVENTMSGMSG;

  typedef struct tagEVENTMSG *PEVENTMSG,*NPEVENTMSG,*LPEVENTMSG;

  typedef struct tagCWPSTRUCT {
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
  } CWPSTRUCT,*PCWPSTRUCT,*NPCWPSTRUCT,*LPCWPSTRUCT;

  typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
  } CWPRETSTRUCT,*PCWPRETSTRUCT,*NPCWPRETSTRUCT,*LPCWPRETSTRUCT;
  typedef struct tagKBDLLHOOKSTRUCT {
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } KBDLLHOOKSTRUCT,*LPKBDLLHOOKSTRUCT,*PKBDLLHOOKSTRUCT;

  typedef struct tagMSLLHOOKSTRUCT {
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } MSLLHOOKSTRUCT,*LPMSLLHOOKSTRUCT,*PMSLLHOOKSTRUCT;

  typedef struct tagDEBUGHOOKINFO {
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
  } DEBUGHOOKINFO,*PDEBUGHOOKINFO,*NPDEBUGHOOKINFO,*LPDEBUGHOOKINFO;

  typedef struct tagMOUSEHOOKSTRUCT {
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
  } MOUSEHOOKSTRUCT,*LPMOUSEHOOKSTRUCT,*PMOUSEHOOKSTRUCT;


  typedef struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT {
    DWORD mouseData;
  } MOUSEHOOKSTRUCTEX,*LPMOUSEHOOKSTRUCTEX,*PMOUSEHOOKSTRUCTEX;







  typedef struct tagHARDWAREHOOKSTRUCT {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
  } HARDWAREHOOKSTRUCT,*LPHARDWAREHOOKSTRUCT,*PHARDWAREHOOKSTRUCT;
             HKL __attribute__((__stdcall__)) LoadKeyboardLayoutA(LPCSTR pwszKLID,UINT Flags);
             HKL __attribute__((__stdcall__)) LoadKeyboardLayoutW(LPCWSTR pwszKLID,UINT Flags);
             HKL __attribute__((__stdcall__)) ActivateKeyboardLayout(HKL hkl,UINT Flags);
             int __attribute__((__stdcall__)) ToUnicodeEx(UINT wVirtKey,UINT wScanCode,const BYTE *lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags,HKL dwhkl);
             WINBOOL __attribute__((__stdcall__)) UnloadKeyboardLayout(HKL hkl);
             WINBOOL __attribute__((__stdcall__)) GetKeyboardLayoutNameA(LPSTR pwszKLID);
             WINBOOL __attribute__((__stdcall__)) GetKeyboardLayoutNameW(LPWSTR pwszKLID);
             int __attribute__((__stdcall__)) GetKeyboardLayoutList(int nBuff,HKL *lpList);
             HKL __attribute__((__stdcall__)) GetKeyboardLayout(DWORD idThread);

  typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } MOUSEMOVEPOINT,*PMOUSEMOVEPOINT,*LPMOUSEMOVEPOINT;

             int __attribute__((__stdcall__)) GetMouseMovePointsEx(UINT cbSize,LPMOUSEMOVEPOINT lppt,LPMOUSEMOVEPOINT lpptBuf,int nBufPoints,DWORD resolution);
             HDESK __attribute__((__stdcall__)) CreateDesktopA(LPCSTR lpszDesktop,LPCSTR lpszDevice,LPDEVMODEA pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
             HDESK __attribute__((__stdcall__)) CreateDesktopW(LPCWSTR lpszDesktop,LPCWSTR lpszDevice,LPDEVMODEW pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
             HDESK __attribute__((__stdcall__)) CreateDesktopExA (LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA *pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);
             HDESK __attribute__((__stdcall__)) CreateDesktopExW (LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW *pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);






             HDESK __attribute__((__stdcall__)) OpenDesktopA(LPCSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
             HDESK __attribute__((__stdcall__)) OpenDesktopW(LPCWSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
             HDESK __attribute__((__stdcall__)) OpenInputDesktop(DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
             WINBOOL __attribute__((__stdcall__)) EnumDesktopsA(HWINSTA hwinsta,DESKTOPENUMPROCA lpEnumFunc,LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) EnumDesktopsW(HWINSTA hwinsta,DESKTOPENUMPROCW lpEnumFunc,LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) EnumDesktopWindows(HDESK hDesktop,WNDENUMPROC lpfn,LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) SwitchDesktop(HDESK hDesktop);
             WINBOOL __attribute__((__stdcall__)) SetThreadDesktop(HDESK hDesktop);
             WINBOOL __attribute__((__stdcall__)) CloseDesktop(HDESK hDesktop);
             HDESK __attribute__((__stdcall__)) GetThreadDesktop(DWORD dwThreadId);
             HWINSTA __attribute__((__stdcall__)) CreateWindowStationA(LPCSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
             HWINSTA __attribute__((__stdcall__)) CreateWindowStationW(LPCWSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
             HWINSTA __attribute__((__stdcall__)) OpenWindowStationA(LPCSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
             HWINSTA __attribute__((__stdcall__)) OpenWindowStationW(LPCWSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
             WINBOOL __attribute__((__stdcall__)) EnumWindowStationsA(WINSTAENUMPROCA lpEnumFunc,LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) EnumWindowStationsW(WINSTAENUMPROCW lpEnumFunc,LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) CloseWindowStation(HWINSTA hWinSta);
             WINBOOL __attribute__((__stdcall__)) SetProcessWindowStation(HWINSTA hWinSta);
             HWINSTA __attribute__((__stdcall__)) GetProcessWindowStation(void);





             WINBOOL __attribute__((__stdcall__)) SetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID);
             WINBOOL __attribute__((__stdcall__)) GetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID,DWORD nLength,LPDWORD lpnLengthNeeded);
  typedef struct tagUSEROBJECTFLAGS {
    WINBOOL fInherit;
    WINBOOL fReserved;
    DWORD dwFlags;
  } USEROBJECTFLAGS,*PUSEROBJECTFLAGS;




             WINBOOL __attribute__((__stdcall__)) GetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded);
             WINBOOL __attribute__((__stdcall__)) GetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded);
             WINBOOL __attribute__((__stdcall__)) SetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength);
             WINBOOL __attribute__((__stdcall__)) SetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength);




  typedef struct tagWNDCLASSEXA {
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
    HICON hIconSm;
  } WNDCLASSEXA,*PWNDCLASSEXA,*NPWNDCLASSEXA,*LPWNDCLASSEXA;

  typedef struct tagWNDCLASSEXW {
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
    HICON hIconSm;
  } WNDCLASSEXW,*PWNDCLASSEXW,*NPWNDCLASSEXW,*LPWNDCLASSEXW;

  typedef WNDCLASSEXW WNDCLASSEX;
  typedef PWNDCLASSEXW PWNDCLASSEX;
  typedef NPWNDCLASSEXW NPWNDCLASSEX;
  typedef LPWNDCLASSEXW LPWNDCLASSEX;

  typedef struct tagWNDCLASSA {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
  } WNDCLASSA,*PWNDCLASSA,*NPWNDCLASSA,*LPWNDCLASSA;

  typedef struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
  } WNDCLASSW,*PWNDCLASSW,*NPWNDCLASSW,*LPWNDCLASSW;

  typedef WNDCLASSW WNDCLASS;
  typedef PWNDCLASSW PWNDCLASS;
  typedef NPWNDCLASSW NPWNDCLASS;
  typedef LPWNDCLASSW LPWNDCLASS;

             WINBOOL __attribute__((__stdcall__)) IsHungAppWindow(HWND hwnd);
             void __attribute__((__stdcall__)) DisableProcessWindowsGhosting(void);




  typedef struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
  } MSG,*PMSG,*NPMSG,*LPMSG;
  typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
  } MINMAXINFO,*PMINMAXINFO,*LPMINMAXINFO;
  typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
  } COPYDATASTRUCT,*PCOPYDATASTRUCT;

  typedef struct tagMDINEXTMENU {
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
  } MDINEXTMENU,*PMDINEXTMENU,*LPMDINEXTMENU;
             UINT __attribute__((__stdcall__)) RegisterWindowMessageA(LPCSTR lpString);
             UINT __attribute__((__stdcall__)) RegisterWindowMessageW(LPCWSTR lpString);
  typedef struct tagWINDOWPOS {
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
  } WINDOWPOS,*LPWINDOWPOS,*PWINDOWPOS;

  typedef struct tagNCCALCSIZE_PARAMS {
    RECT rgrc[3];
    PWINDOWPOS lppos;
  } NCCALCSIZE_PARAMS,*LPNCCALCSIZE_PARAMS;
  typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
  } TRACKMOUSEEVENT,*LPTRACKMOUSEEVENT;

             WINBOOL __attribute__((__stdcall__)) TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack);
             WINBOOL __attribute__((__stdcall__)) DrawEdge(HDC hdc,LPRECT qrc,UINT edge,UINT grfFlags);
             WINBOOL __attribute__((__stdcall__)) DrawFrameControl(HDC,LPRECT,UINT,UINT);
             WINBOOL __attribute__((__stdcall__)) DrawCaption(HWND hwnd,HDC hdc,const RECT *lprect,UINT flags);






             WINBOOL __attribute__((__stdcall__)) DrawAnimatedRects(HWND hwnd,int idAni,const RECT *lprcFrom,const RECT *lprcTo);
  typedef struct tagACCEL {
    BYTE fVirt;
    WORD key;
    WORD cmd;
  } ACCEL,*LPACCEL;

  typedef struct tagPAINTSTRUCT {
    HDC hdc;
    WINBOOL fErase;
    RECT rcPaint;
    WINBOOL fRestore;
    WINBOOL fIncUpdate;
    BYTE rgbReserved[32];
  } PAINTSTRUCT,*PPAINTSTRUCT,*NPPAINTSTRUCT,*LPPAINTSTRUCT;

  typedef struct tagCREATESTRUCTA {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
  } CREATESTRUCTA,*LPCREATESTRUCTA;

  typedef struct tagCREATESTRUCTW {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
  } CREATESTRUCTW,*LPCREATESTRUCTW;

  typedef CREATESTRUCTW CREATESTRUCT;
  typedef LPCREATESTRUCTW LPCREATESTRUCT;

  typedef struct tagWINDOWPLACEMENT {
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;
  } WINDOWPLACEMENT;
  typedef WINDOWPLACEMENT *PWINDOWPLACEMENT,*LPWINDOWPLACEMENT;







  typedef struct tagNMHDR {
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
  } NMHDR;



  typedef NMHDR *LPNMHDR;

  typedef struct tagSTYLESTRUCT {
    DWORD styleOld;
    DWORD styleNew;
  } STYLESTRUCT,*LPSTYLESTRUCT;
  typedef struct tagMEASUREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
  } MEASUREITEMSTRUCT,*PMEASUREITEMSTRUCT,*LPMEASUREITEMSTRUCT;

  typedef struct tagDRAWITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
  } DRAWITEMSTRUCT,*PDRAWITEMSTRUCT,*LPDRAWITEMSTRUCT;

  typedef struct tagDELETEITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
  } DELETEITEMSTRUCT,*PDELETEITEMSTRUCT,*LPDELETEITEMSTRUCT;

  typedef struct tagCOMPAREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
  } COMPAREITEMSTRUCT,*PCOMPAREITEMSTRUCT,*LPCOMPAREITEMSTRUCT;
             WINBOOL __attribute__((__stdcall__)) GetMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
             WINBOOL __attribute__((__stdcall__)) GetMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
             WINBOOL __attribute__((__stdcall__)) TranslateMessage(const MSG *lpMsg);
             LRESULT __attribute__((__stdcall__)) DispatchMessageA(const MSG *lpMsg);
             LRESULT __attribute__((__stdcall__)) DispatchMessageW(const MSG *lpMsg);
             WINBOOL __attribute__((__stdcall__)) SetMessageQueue(int cMessagesMax);
             WINBOOL __attribute__((__stdcall__)) PeekMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg);
             WINBOOL __attribute__((__stdcall__)) PeekMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg);
             WINBOOL __attribute__((__stdcall__)) RegisterHotKey(HWND hWnd,int id,UINT fsModifiers,UINT vk);
             WINBOOL __attribute__((__stdcall__)) UnregisterHotKey(HWND hWnd,int id);
             WINBOOL __attribute__((__stdcall__)) ExitWindowsEx(UINT uFlags,DWORD dwReason);
             WINBOOL __attribute__((__stdcall__)) SwapMouseButton(WINBOOL fSwap);
             DWORD __attribute__((__stdcall__)) GetMessagePos(void);
             LONG __attribute__((__stdcall__)) GetMessageTime(void);
             LPARAM __attribute__((__stdcall__)) GetMessageExtraInfo(void);



             WINBOOL __attribute__((__stdcall__)) IsWow64Message(void);
             LPARAM __attribute__((__stdcall__)) SetMessageExtraInfo(LPARAM lParam);
             LRESULT __attribute__((__stdcall__)) SendMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
             LRESULT __attribute__((__stdcall__)) SendMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
             LRESULT __attribute__((__stdcall__)) SendMessageTimeoutA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult);
             LRESULT __attribute__((__stdcall__)) SendMessageTimeoutW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult);
             WINBOOL __attribute__((__stdcall__)) SendNotifyMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) SendNotifyMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) SendMessageCallbackA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData);
             WINBOOL __attribute__((__stdcall__)) SendMessageCallbackW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData);

  typedef struct {
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
  } BSMINFO,*PBSMINFO;




             long __attribute__((__stdcall__)) BroadcastSystemMessageExA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo);
             long __attribute__((__stdcall__)) BroadcastSystemMessageExW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo);
             long __attribute__((__stdcall__)) BroadcastSystemMessageA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);
             long __attribute__((__stdcall__)) BroadcastSystemMessageW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);
  typedef PVOID HDEVNOTIFY;
  typedef HDEVNOTIFY *PHDEVNOTIFY;
             WINBOOL __attribute__((__stdcall__)) PostMessageA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) PostMessageW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) PostThreadMessageA (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) PostThreadMessageW (DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);




             WINBOOL __attribute__((__stdcall__)) AttachThreadInput (DWORD idAttach, DWORD idAttachTo, WINBOOL fAttach);
             WINBOOL __attribute__((__stdcall__)) ReplyMessage (LRESULT lResult);
             WINBOOL __attribute__((__stdcall__)) WaitMessage (void);
             DWORD __attribute__((__stdcall__)) WaitForInputIdle (HANDLE hProcess, DWORD dwMilliseconds);
             LRESULT __attribute__((__stdcall__)) DefWindowProcA (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
             LRESULT __attribute__((__stdcall__)) DefWindowProcW (HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
             void __attribute__((__stdcall__)) PostQuitMessage (int nExitCode);
             WINBOOL __attribute__((__stdcall__)) InSendMessage (void);
             DWORD __attribute__((__stdcall__)) InSendMessageEx (LPVOID lpReserved);
             UINT __attribute__((__stdcall__)) GetDoubleClickTime (void);
             WINBOOL __attribute__((__stdcall__)) SetDoubleClickTime (UINT);
             ATOM __attribute__((__stdcall__)) RegisterClassA (const WNDCLASSA *lpWndClass);
             ATOM __attribute__((__stdcall__)) RegisterClassW (const WNDCLASSW *lpWndClass);
             WINBOOL __attribute__((__stdcall__)) UnregisterClassA (LPCSTR lpClassName, HINSTANCE hInstance);
             WINBOOL __attribute__((__stdcall__)) UnregisterClassW (LPCWSTR lpClassName, HINSTANCE hInstance);
             WINBOOL __attribute__((__stdcall__)) GetClassInfoA (HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass);
             WINBOOL __attribute__((__stdcall__)) GetClassInfoW (HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass);
             ATOM __attribute__((__stdcall__)) RegisterClassExA (const WNDCLASSEXA *);
             ATOM __attribute__((__stdcall__)) RegisterClassExW (const WNDCLASSEXW *);
             WINBOOL __attribute__((__stdcall__)) GetClassInfoExA (HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx);
             WINBOOL __attribute__((__stdcall__)) GetClassInfoExW (HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx);


             LRESULT __attribute__((__stdcall__)) CallWindowProcA (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
             LRESULT __attribute__((__stdcall__)) CallWindowProcW (WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
             HDEVNOTIFY __attribute__((__stdcall__)) RegisterDeviceNotificationA(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags);
             HDEVNOTIFY __attribute__((__stdcall__)) RegisterDeviceNotificationW(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags);
             WINBOOL __attribute__((__stdcall__)) UnregisterDeviceNotification(HDEVNOTIFY Handle);

  typedef BOOLEAN (__attribute__((__stdcall__)) *PREGISTERCLASSNAMEW)(LPCWSTR);




             HWND __attribute__((__stdcall__)) CreateWindowExA(DWORD dwExStyle,LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam);
             HWND __attribute__((__stdcall__)) CreateWindowExW(DWORD dwExStyle,LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam);




             WINBOOL __attribute__((__stdcall__)) IsWindow(HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) IsMenu(HMENU hMenu);
             WINBOOL __attribute__((__stdcall__)) IsChild(HWND hWndParent,HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) DestroyWindow(HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) ShowWindow(HWND hWnd,int nCmdShow);
             WINBOOL __attribute__((__stdcall__)) AnimateWindow(HWND hWnd,DWORD dwTime,DWORD dwFlags);




             WINBOOL __attribute__((__stdcall__)) UpdateLayeredWindow (HWND hWnd, HDC hdcDst, POINT *pptDst, SIZE *psize, HDC hdcSrc, POINT *pptSrc, COLORREF crKey, BLENDFUNCTION *pblend, DWORD dwFlags);

  typedef struct tagUPDATELAYEREDWINDOWINFO {
    DWORD cbSize;
    HDC hdcDst;
    const POINT *pptDst;
    const SIZE *psize;
    HDC hdcSrc;
    const POINT *pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION *pblend;
    DWORD dwFlags;
    const RECT *prcDirty;
  } UPDATELAYEREDWINDOWINFO,*PUPDATELAYEREDWINDOWINFO;


  typedef

             WINBOOL __attribute__((__stdcall__)) UpdateLayeredWindowIndirect (HWND hWnd, const UPDATELAYEREDWINDOWINFO *pULWInfo);




             WINBOOL __attribute__((__stdcall__)) GetLayeredWindowAttributes (HWND hwnd, COLORREF *pcrKey, BYTE *pbAlpha, DWORD *pdwFlags);



             WINBOOL __attribute__((__stdcall__)) PrintWindow (HWND hwnd, HDC hdcBlt, UINT nFlags);
             WINBOOL __attribute__((__stdcall__)) SetLayeredWindowAttributes (HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags);
  typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
  } FLASHWINFO,*PFLASHWINFO;

             WINBOOL __attribute__((__stdcall__)) ShowWindowAsync (HWND hWnd, int nCmdShow);
             WINBOOL __attribute__((__stdcall__)) FlashWindow (HWND hWnd, WINBOOL bInvert);
             WINBOOL __attribute__((__stdcall__)) FlashWindowEx (PFLASHWINFO pfwi);
             WINBOOL __attribute__((__stdcall__)) ShowOwnedPopups (HWND hWnd, WINBOOL fShow);
             WINBOOL __attribute__((__stdcall__)) OpenIcon (HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) CloseWindow (HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) MoveWindow (HWND hWnd, int X, int Y, int nWidth, int nHeight, WINBOOL bRepaint);
             WINBOOL __attribute__((__stdcall__)) SetWindowPos (HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
             WINBOOL __attribute__((__stdcall__)) GetWindowPlacement (HWND hWnd, WINDOWPLACEMENT *lpwndpl);
             WINBOOL __attribute__((__stdcall__)) SetWindowPlacement (HWND hWnd, const WINDOWPLACEMENT *lpwndpl);
             HDWP __attribute__((__stdcall__)) BeginDeferWindowPos (int nNumWindows);
             HDWP __attribute__((__stdcall__)) DeferWindowPos (HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags);
             WINBOOL __attribute__((__stdcall__)) EndDeferWindowPos (HDWP hWinPosInfo);




             WINBOOL __attribute__((__stdcall__)) IsWindowVisible (HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) IsIconic (HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) AnyPopup (void);
             WINBOOL __attribute__((__stdcall__)) BringWindowToTop (HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) IsZoomed (HWND hWnd);
#pragma pack(push,2)



 typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
  } DLGTEMPLATE;



  typedef DLGTEMPLATE *LPDLGTEMPLATEA;
  typedef DLGTEMPLATE *LPDLGTEMPLATEW;

  typedef LPDLGTEMPLATEW LPDLGTEMPLATE;



  typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
  typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;

  typedef LPCDLGTEMPLATEW LPCDLGTEMPLATE;



  typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
  } DLGITEMTEMPLATE;

  typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
  typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

  typedef PDLGITEMTEMPLATEW PDLGITEMTEMPLATE;

  typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
  typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

  typedef LPDLGITEMTEMPLATEW LPDLGITEMTEMPLATE;
#pragma pack(pop)
 HWND __attribute__((__stdcall__)) CreateDialogParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
             HWND __attribute__((__stdcall__)) CreateDialogParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
             HWND __attribute__((__stdcall__)) CreateDialogIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
             HWND __attribute__((__stdcall__)) CreateDialogIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);






             INT_PTR __attribute__((__stdcall__)) DialogBoxParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
             INT_PTR __attribute__((__stdcall__)) DialogBoxParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
             INT_PTR __attribute__((__stdcall__)) DialogBoxIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
             INT_PTR __attribute__((__stdcall__)) DialogBoxIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);




             WINBOOL __attribute__((__stdcall__)) EndDialog(HWND hDlg,INT_PTR nResult);
             HWND __attribute__((__stdcall__)) GetDlgItem(HWND hDlg,int nIDDlgItem);
             WINBOOL __attribute__((__stdcall__)) SetDlgItemInt(HWND hDlg,int nIDDlgItem,UINT uValue,WINBOOL bSigned);
             UINT __attribute__((__stdcall__)) GetDlgItemInt(HWND hDlg,int nIDDlgItem,WINBOOL *lpTranslated,WINBOOL bSigned);
             WINBOOL __attribute__((__stdcall__)) SetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPCSTR lpString);
             WINBOOL __attribute__((__stdcall__)) SetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPCWSTR lpString);
             UINT __attribute__((__stdcall__)) GetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPSTR lpString,int cchMax);
             UINT __attribute__((__stdcall__)) GetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPWSTR lpString,int cchMax);
             WINBOOL __attribute__((__stdcall__)) CheckDlgButton(HWND hDlg,int nIDButton,UINT uCheck);
             WINBOOL __attribute__((__stdcall__)) CheckRadioButton(HWND hDlg,int nIDFirstButton,int nIDLastButton,int nIDCheckButton);
             UINT __attribute__((__stdcall__)) IsDlgButtonChecked(HWND hDlg,int nIDButton);
             LRESULT __attribute__((__stdcall__)) SendDlgItemMessageA(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
             LRESULT __attribute__((__stdcall__)) SendDlgItemMessageW(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
             HWND __attribute__((__stdcall__)) GetNextDlgGroupItem(HWND hDlg,HWND hCtl,WINBOOL bPrevious);
             HWND __attribute__((__stdcall__)) GetNextDlgTabItem(HWND hDlg,HWND hCtl,WINBOOL bPrevious);
             int __attribute__((__stdcall__)) GetDlgCtrlID(HWND hWnd);
             long __attribute__((__stdcall__)) GetDialogBaseUnits(void);
             LRESULT __attribute__((__stdcall__)) DefDlgProcA(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam);
             LRESULT __attribute__((__stdcall__)) DefDlgProcW(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) CallMsgFilterA(LPMSG lpMsg,int nCode);
             WINBOOL __attribute__((__stdcall__)) CallMsgFilterW(LPMSG lpMsg,int nCode);
             WINBOOL __attribute__((__stdcall__)) OpenClipboard(HWND hWndNewOwner);
             WINBOOL __attribute__((__stdcall__)) CloseClipboard(void);
             DWORD __attribute__((__stdcall__)) GetClipboardSequenceNumber(void);
             HWND __attribute__((__stdcall__)) GetClipboardOwner(void);
             HWND __attribute__((__stdcall__)) SetClipboardViewer(HWND hWndNewViewer);
             HWND __attribute__((__stdcall__)) GetClipboardViewer(void);
             WINBOOL __attribute__((__stdcall__)) ChangeClipboardChain(HWND hWndRemove, HWND hWndNewNext);
             HANDLE __attribute__((__stdcall__)) SetClipboardData(UINT uFormat, HANDLE hMem);
             HANDLE __attribute__((__stdcall__)) GetClipboardData(UINT uFormat);
             UINT __attribute__((__stdcall__)) RegisterClipboardFormatA(LPCSTR lpszFormat);
             UINT __attribute__((__stdcall__)) RegisterClipboardFormatW(LPCWSTR lpszFormat);
             int __attribute__((__stdcall__)) CountClipboardFormats(void);
             UINT __attribute__((__stdcall__)) EnumClipboardFormats(UINT format);
             int __attribute__((__stdcall__)) GetClipboardFormatNameA(UINT format, LPSTR lpszFormatName, int cchMaxCount);
             int __attribute__((__stdcall__)) GetClipboardFormatNameW(UINT format, LPWSTR lpszFormatName, int cchMaxCount);
             WINBOOL __attribute__((__stdcall__)) EmptyClipboard(void);
             WINBOOL __attribute__((__stdcall__)) IsClipboardFormatAvailable(UINT format);
             int __attribute__((__stdcall__)) GetPriorityClipboardFormat(UINT *paFormatPriorityList, int cFormats);
             HWND __attribute__((__stdcall__)) GetOpenClipboardWindow(void);
             WINBOOL __attribute__((__stdcall__)) CharToOemA(LPCSTR lpszSrc,LPSTR lpszDst);
             WINBOOL __attribute__((__stdcall__)) CharToOemW(LPCWSTR lpszSrc,LPSTR lpszDst);
             WINBOOL __attribute__((__stdcall__)) OemToCharA(LPCSTR lpszSrc,LPSTR lpszDst);
             WINBOOL __attribute__((__stdcall__)) OemToCharW(LPCSTR lpszSrc,LPWSTR lpszDst);
             WINBOOL __attribute__((__stdcall__)) CharToOemBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
             WINBOOL __attribute__((__stdcall__)) CharToOemBuffW(LPCWSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
             WINBOOL __attribute__((__stdcall__)) OemToCharBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
             WINBOOL __attribute__((__stdcall__)) OemToCharBuffW(LPCSTR lpszSrc,LPWSTR lpszDst,DWORD cchDstLength);
             LPSTR __attribute__((__stdcall__)) CharUpperA(LPSTR lpsz);
             LPWSTR __attribute__((__stdcall__)) CharUpperW(LPWSTR lpsz);
             DWORD __attribute__((__stdcall__)) CharUpperBuffA(LPSTR lpsz,DWORD cchLength);
             DWORD __attribute__((__stdcall__)) CharUpperBuffW(LPWSTR lpsz,DWORD cchLength);
             LPSTR __attribute__((__stdcall__)) CharLowerA(LPSTR lpsz);
             LPWSTR __attribute__((__stdcall__)) CharLowerW(LPWSTR lpsz);
             DWORD __attribute__((__stdcall__)) CharLowerBuffA(LPSTR lpsz,DWORD cchLength);
             DWORD __attribute__((__stdcall__)) CharLowerBuffW(LPWSTR lpsz,DWORD cchLength);
             LPSTR __attribute__((__stdcall__)) CharNextA(LPCSTR lpsz);
             LPWSTR __attribute__((__stdcall__)) CharNextW(LPCWSTR lpsz);
             LPSTR __attribute__((__stdcall__)) CharPrevA(LPCSTR lpszStart,LPCSTR lpszCurrent);
             LPWSTR __attribute__((__stdcall__)) CharPrevW(LPCWSTR lpszStart,LPCWSTR lpszCurrent);
             LPSTR __attribute__((__stdcall__)) CharNextExA(WORD CodePage,LPCSTR lpCurrentChar,DWORD dwFlags);
             LPSTR __attribute__((__stdcall__)) CharPrevExA(WORD CodePage,LPCSTR lpStart,LPCSTR lpCurrentChar,DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) IsCharAlphaA(CHAR ch);
             WINBOOL __attribute__((__stdcall__)) IsCharAlphaW(WCHAR ch);
             WINBOOL __attribute__((__stdcall__)) IsCharAlphaNumericA(CHAR ch);
             WINBOOL __attribute__((__stdcall__)) IsCharAlphaNumericW(WCHAR ch);
             WINBOOL __attribute__((__stdcall__)) IsCharUpperA(CHAR ch);
             WINBOOL __attribute__((__stdcall__)) IsCharUpperW(WCHAR ch);
             WINBOOL __attribute__((__stdcall__)) IsCharLowerA(CHAR ch);
             WINBOOL __attribute__((__stdcall__)) IsCharLowerW(WCHAR ch);
             HWND __attribute__((__stdcall__)) SetFocus(HWND hWnd);
             HWND __attribute__((__stdcall__)) GetActiveWindow(void);
             HWND __attribute__((__stdcall__)) GetFocus(void);
             UINT __attribute__((__stdcall__)) GetKBCodePage(void);
             SHORT __attribute__((__stdcall__)) GetKeyState(int nVirtKey);
             SHORT __attribute__((__stdcall__)) GetAsyncKeyState(int vKey);
             WINBOOL __attribute__((__stdcall__)) GetKeyboardState(PBYTE lpKeyState);
             WINBOOL __attribute__((__stdcall__)) SetKeyboardState(LPBYTE lpKeyState);
             int __attribute__((__stdcall__)) GetKeyNameTextA(LONG lParam,LPSTR lpString,int cchSize);
             int __attribute__((__stdcall__)) GetKeyNameTextW(LONG lParam,LPWSTR lpString,int cchSize);
             int __attribute__((__stdcall__)) GetKeyboardType(int nTypeFlag);
             int __attribute__((__stdcall__)) ToAscii(UINT uVirtKey,UINT uScanCode,const BYTE *lpKeyState,LPWORD lpChar,UINT uFlags);
             int __attribute__((__stdcall__)) ToAsciiEx(UINT uVirtKey,UINT uScanCode,const BYTE *lpKeyState,LPWORD lpChar,UINT uFlags,HKL dwhkl);
             int __attribute__((__stdcall__)) ToUnicode(UINT wVirtKey,UINT wScanCode,const BYTE *lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags);
             DWORD __attribute__((__stdcall__)) OemKeyScan(WORD wOemChar);
             SHORT __attribute__((__stdcall__)) VkKeyScanA(CHAR ch);
             SHORT __attribute__((__stdcall__)) VkKeyScanW(WCHAR ch);
             SHORT __attribute__((__stdcall__)) VkKeyScanExA(CHAR ch,HKL dwhkl);
             SHORT __attribute__((__stdcall__)) VkKeyScanExW(WCHAR ch,HKL dwhkl);
             void __attribute__((__stdcall__)) keybd_event(BYTE bVk,BYTE bScan,DWORD dwFlags,ULONG_PTR dwExtraInfo);
             void __attribute__((__stdcall__)) mouse_event(DWORD dwFlags,DWORD dx,DWORD dy,DWORD dwData,ULONG_PTR dwExtraInfo);

  typedef struct tagMOUSEINPUT {
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } MOUSEINPUT,*PMOUSEINPUT,*LPMOUSEINPUT;

  typedef struct tagKEYBDINPUT {
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
  } KEYBDINPUT,*PKEYBDINPUT,*LPKEYBDINPUT;

  typedef struct tagHARDWAREINPUT {
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
  } HARDWAREINPUT,*PHARDWAREINPUT,*LPHARDWAREINPUT;

  typedef struct tagINPUT {
    DWORD type;
    __extension__ union {
      MOUSEINPUT mi;
      KEYBDINPUT ki;
      HARDWAREINPUT hi;
    } ;
  } INPUT,*PINPUT,*LPINPUT;

             UINT __attribute__((__stdcall__)) SendInput(UINT cInputs,LPINPUT pInputs,int cbSize);
  typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
  } LASTINPUTINFO,*PLASTINPUTINFO;




             WINBOOL __attribute__((__stdcall__)) GetLastInputInfo(PLASTINPUTINFO plii);
             UINT __attribute__((__stdcall__)) MapVirtualKeyA(UINT uCode,UINT uMapType);
             UINT __attribute__((__stdcall__)) MapVirtualKeyW(UINT uCode,UINT uMapType);
             UINT __attribute__((__stdcall__)) MapVirtualKeyExA(UINT uCode,UINT uMapType,HKL dwhkl);
             UINT __attribute__((__stdcall__)) MapVirtualKeyExW(UINT uCode,UINT uMapType,HKL dwhkl);
             WINBOOL __attribute__((__stdcall__)) GetInputState(void);
             DWORD __attribute__((__stdcall__)) GetQueueStatus(UINT flags);
             HWND __attribute__((__stdcall__)) GetCapture(void);
             HWND __attribute__((__stdcall__)) SetCapture(HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) ReleaseCapture(void);
             DWORD __attribute__((__stdcall__)) MsgWaitForMultipleObjects(DWORD nCount,const HANDLE *pHandles,WINBOOL fWaitAll,DWORD dwMilliseconds,DWORD dwWakeMask);
             DWORD __attribute__((__stdcall__)) MsgWaitForMultipleObjectsEx(DWORD nCount,const HANDLE *pHandles,DWORD dwMilliseconds,DWORD dwWakeMask,DWORD dwFlags);
             UINT_PTR __attribute__((__stdcall__)) SetTimer(HWND hWnd,UINT_PTR nIDEvent,UINT uElapse,TIMERPROC lpTimerFunc);
             WINBOOL __attribute__((__stdcall__)) KillTimer(HWND hWnd,UINT_PTR uIDEvent);
             WINBOOL __attribute__((__stdcall__)) IsWindowUnicode(HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) EnableWindow(HWND hWnd,WINBOOL bEnable);
             WINBOOL __attribute__((__stdcall__)) IsWindowEnabled(HWND hWnd);
             HACCEL __attribute__((__stdcall__)) LoadAcceleratorsA(HINSTANCE hInstance,LPCSTR lpTableName);
             HACCEL __attribute__((__stdcall__)) LoadAcceleratorsW(HINSTANCE hInstance,LPCWSTR lpTableName);
             HACCEL __attribute__((__stdcall__)) CreateAcceleratorTableA(LPACCEL paccel,int cAccel);
             HACCEL __attribute__((__stdcall__)) CreateAcceleratorTableW(LPACCEL paccel,int cAccel);
             WINBOOL __attribute__((__stdcall__)) DestroyAcceleratorTable(HACCEL hAccel);
             int __attribute__((__stdcall__)) CopyAcceleratorTableA(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries);
             int __attribute__((__stdcall__)) CopyAcceleratorTableW(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries);




             int __attribute__((__stdcall__)) TranslateAcceleratorA(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);
             int __attribute__((__stdcall__)) TranslateAcceleratorW(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);
             int __attribute__((__stdcall__)) GetSystemMetrics(int nIndex);
             HMENU __attribute__((__stdcall__)) LoadMenuA(HINSTANCE hInstance,LPCSTR lpMenuName);
             HMENU __attribute__((__stdcall__)) LoadMenuW(HINSTANCE hInstance,LPCWSTR lpMenuName);
             HMENU __attribute__((__stdcall__)) LoadMenuIndirectA(const MENUTEMPLATEA *lpMenuTemplate);
             HMENU __attribute__((__stdcall__)) LoadMenuIndirectW(const MENUTEMPLATEW *lpMenuTemplate);
             HMENU __attribute__((__stdcall__)) GetMenu(HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) SetMenu(HWND hWnd,HMENU hMenu);
             WINBOOL __attribute__((__stdcall__)) ChangeMenuA(HMENU hMenu,UINT cmd,LPCSTR lpszNewItem,UINT cmdInsert,UINT flags);
             WINBOOL __attribute__((__stdcall__)) ChangeMenuW(HMENU hMenu,UINT cmd,LPCWSTR lpszNewItem,UINT cmdInsert,UINT flags);
             WINBOOL __attribute__((__stdcall__)) HiliteMenuItem(HWND hWnd,HMENU hMenu,UINT uIDHiliteItem,UINT uHilite);
             int __attribute__((__stdcall__)) GetMenuStringA(HMENU hMenu,UINT uIDItem,LPSTR lpString,int cchMax,UINT flags);
             int __attribute__((__stdcall__)) GetMenuStringW(HMENU hMenu,UINT uIDItem,LPWSTR lpString,int cchMax,UINT flags);
             UINT __attribute__((__stdcall__)) GetMenuState(HMENU hMenu,UINT uId,UINT uFlags);
             WINBOOL __attribute__((__stdcall__)) DrawMenuBar(HWND hWnd);

             HMENU __attribute__((__stdcall__)) GetSystemMenu(HWND hWnd,WINBOOL bRevert);
             HMENU __attribute__((__stdcall__)) CreateMenu(void);
             HMENU __attribute__((__stdcall__)) CreatePopupMenu(void);
             WINBOOL __attribute__((__stdcall__)) DestroyMenu(HMENU hMenu);
             DWORD __attribute__((__stdcall__)) CheckMenuItem(HMENU hMenu,UINT uIDCheckItem,UINT uCheck);
             WINBOOL __attribute__((__stdcall__)) EnableMenuItem(HMENU hMenu,UINT uIDEnableItem,UINT uEnable);
             HMENU __attribute__((__stdcall__)) GetSubMenu(HMENU hMenu,int nPos);
             UINT __attribute__((__stdcall__)) GetMenuItemID(HMENU hMenu,int nPos);
             int __attribute__((__stdcall__)) GetMenuItemCount(HMENU hMenu);
             WINBOOL __attribute__((__stdcall__)) InsertMenuA(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
             WINBOOL __attribute__((__stdcall__)) InsertMenuW(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
             WINBOOL __attribute__((__stdcall__)) AppendMenuA(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
             WINBOOL __attribute__((__stdcall__)) AppendMenuW(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
             WINBOOL __attribute__((__stdcall__)) ModifyMenuA(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
             WINBOOL __attribute__((__stdcall__)) ModifyMenuW(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
             WINBOOL __attribute__((__stdcall__)) RemoveMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
             WINBOOL __attribute__((__stdcall__)) DeleteMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
             WINBOOL __attribute__((__stdcall__)) SetMenuItemBitmaps(HMENU hMenu,UINT uPosition,UINT uFlags,HBITMAP hBitmapUnchecked,HBITMAP hBitmapChecked);
             LONG __attribute__((__stdcall__)) GetMenuCheckMarkDimensions(void);
             WINBOOL __attribute__((__stdcall__)) TrackPopupMenu(HMENU hMenu,UINT uFlags,int x,int y,int nReserved,HWND hWnd,const RECT *prcRect);

  typedef struct tagTPMPARAMS {
    UINT cbSize;
    RECT rcExclude;
  } TPMPARAMS;

  typedef struct tagMENUINFO {
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
  } MENUINFO,*LPMENUINFO;

  typedef TPMPARAMS *LPTPMPARAMS;
  typedef MENUINFO const *LPCMENUINFO;

             WINBOOL __attribute__((__stdcall__)) TrackPopupMenuEx(HMENU,UINT,int,int,HWND,LPTPMPARAMS);
             WINBOOL __attribute__((__stdcall__)) GetMenuInfo(HMENU,LPMENUINFO);
             WINBOOL __attribute__((__stdcall__)) SetMenuInfo(HMENU,LPCMENUINFO);
             WINBOOL __attribute__((__stdcall__)) EndMenu(void);




  typedef struct tagMENUGETOBJECTINFO {
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
  } MENUGETOBJECTINFO,*PMENUGETOBJECTINFO;

  typedef struct tagMENUITEMINFOA {
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
  } MENUITEMINFOA,*LPMENUITEMINFOA;

  typedef struct tagMENUITEMINFOW {
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
  } MENUITEMINFOW,*LPMENUITEMINFOW;

  typedef MENUITEMINFOW MENUITEMINFO;
  typedef LPMENUITEMINFOW LPMENUITEMINFO;

  typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
  typedef MENUITEMINFOW const *LPCMENUITEMINFOW;

  typedef LPCMENUITEMINFOW LPCMENUITEMINFO;





             WINBOOL __attribute__((__stdcall__)) InsertMenuItemA(HMENU hmenu,UINT item,WINBOOL fByPosition,LPCMENUITEMINFOA lpmi);
             WINBOOL __attribute__((__stdcall__)) InsertMenuItemW(HMENU hmenu,UINT item,WINBOOL fByPosition,LPCMENUITEMINFOW lpmi);
             WINBOOL __attribute__((__stdcall__)) GetMenuItemInfoA(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOA lpmii);
             WINBOOL __attribute__((__stdcall__)) GetMenuItemInfoW(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOW lpmii);
             WINBOOL __attribute__((__stdcall__)) SetMenuItemInfoA(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOA lpmii);
             WINBOOL __attribute__((__stdcall__)) SetMenuItemInfoW(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOW lpmii);




             UINT __attribute__((__stdcall__)) GetMenuDefaultItem(HMENU hMenu,UINT fByPos,UINT gmdiFlags);
             WINBOOL __attribute__((__stdcall__)) SetMenuDefaultItem(HMENU hMenu,UINT uItem,UINT fByPos);
             WINBOOL __attribute__((__stdcall__)) GetMenuItemRect(HWND hWnd,HMENU hMenu,UINT uItem,LPRECT lprcItem);
             int __attribute__((__stdcall__)) MenuItemFromPoint(HWND hWnd,HMENU hMenu,POINT ptScreen);
  typedef struct tagDROPSTRUCT {
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
  } DROPSTRUCT,*PDROPSTRUCT,*LPDROPSTRUCT;
             DWORD __attribute__((__stdcall__)) DragObject(HWND hwndParent,HWND hwndFrom,UINT fmt,ULONG_PTR data,HCURSOR hcur);
             WINBOOL __attribute__((__stdcall__)) DragDetect(HWND hwnd,POINT pt);
             WINBOOL __attribute__((__stdcall__)) DrawIcon(HDC hDC,int X,int Y,HICON hIcon);
  typedef struct tagDRAWTEXTPARAMS {
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
  } DRAWTEXTPARAMS,*LPDRAWTEXTPARAMS;




             int __attribute__((__stdcall__)) DrawTextA(HDC hdc,LPCSTR lpchText,int cchText,LPRECT lprc,UINT format);
             int __attribute__((__stdcall__)) DrawTextW(HDC hdc,LPCWSTR lpchText,int cchText,LPRECT lprc,UINT format);
             int __attribute__((__stdcall__)) DrawTextExA(HDC hdc,LPSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp);
             int __attribute__((__stdcall__)) DrawTextExW(HDC hdc,LPWSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp);
             WINBOOL __attribute__((__stdcall__)) GrayStringA(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);
             WINBOOL __attribute__((__stdcall__)) GrayStringW(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);
             WINBOOL __attribute__((__stdcall__)) DrawStateA(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags);
             WINBOOL __attribute__((__stdcall__)) DrawStateW(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags);
             LONG __attribute__((__stdcall__)) TabbedTextOutA(HDC hdc,int x,int y,LPCSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions,int nTabOrigin);
             LONG __attribute__((__stdcall__)) TabbedTextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions,int nTabOrigin);
             DWORD __attribute__((__stdcall__)) GetTabbedTextExtentA(HDC hdc,LPCSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions);
             DWORD __attribute__((__stdcall__)) GetTabbedTextExtentW(HDC hdc,LPCWSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions);
             WINBOOL __attribute__((__stdcall__)) UpdateWindow(HWND hWnd);
             HWND __attribute__((__stdcall__)) SetActiveWindow(HWND hWnd);
             HWND __attribute__((__stdcall__)) GetForegroundWindow(void);
             WINBOOL __attribute__((__stdcall__)) PaintDesktop(HDC hdc);
             void __attribute__((__stdcall__)) SwitchToThisWindow(HWND hwnd,WINBOOL fUnknown);
             WINBOOL __attribute__((__stdcall__)) SetForegroundWindow(HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) AllowSetForegroundWindow(DWORD dwProcessId);
             WINBOOL __attribute__((__stdcall__)) LockSetForegroundWindow(UINT uLockCode);
             HWND __attribute__((__stdcall__)) WindowFromDC(HDC hDC);
             HDC __attribute__((__stdcall__)) GetDC(HWND hWnd);
             HDC __attribute__((__stdcall__)) GetDCEx(HWND hWnd,HRGN hrgnClip,DWORD flags);
             HDC __attribute__((__stdcall__)) GetWindowDC(HWND hWnd);
             int __attribute__((__stdcall__)) ReleaseDC(HWND hWnd,HDC hDC);
             HDC __attribute__((__stdcall__)) BeginPaint(HWND hWnd,LPPAINTSTRUCT lpPaint);
             WINBOOL __attribute__((__stdcall__)) EndPaint(HWND hWnd,const PAINTSTRUCT *lpPaint);
             WINBOOL __attribute__((__stdcall__)) GetUpdateRect(HWND hWnd,LPRECT lpRect,WINBOOL bErase);
             int __attribute__((__stdcall__)) GetUpdateRgn(HWND hWnd,HRGN hRgn,WINBOOL bErase);
             int __attribute__((__stdcall__)) SetWindowRgn(HWND hWnd,HRGN hRgn,WINBOOL bRedraw);
             int __attribute__((__stdcall__)) GetWindowRgn(HWND hWnd,HRGN hRgn);
             int __attribute__((__stdcall__)) GetWindowRgnBox(HWND hWnd,LPRECT lprc);
             int __attribute__((__stdcall__)) ExcludeUpdateRgn(HDC hDC,HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) InvalidateRect(HWND hWnd,const RECT *lpRect,WINBOOL bErase);
             WINBOOL __attribute__((__stdcall__)) ValidateRect(HWND hWnd,const RECT *lpRect);
             WINBOOL __attribute__((__stdcall__)) InvalidateRgn(HWND hWnd,HRGN hRgn,WINBOOL bErase);
             WINBOOL __attribute__((__stdcall__)) ValidateRgn(HWND hWnd,HRGN hRgn);
             WINBOOL __attribute__((__stdcall__)) RedrawWindow(HWND hWnd,const RECT *lprcUpdate,HRGN hrgnUpdate,UINT flags);
             WINBOOL __attribute__((__stdcall__)) LockWindowUpdate(HWND hWndLock);
             WINBOOL __attribute__((__stdcall__)) ScrollWindow(HWND hWnd,int XAmount,int YAmount,const RECT *lpRect,const RECT *lpClipRect);
             WINBOOL __attribute__((__stdcall__)) ScrollDC(HDC hDC,int dx,int dy,const RECT *lprcScroll,const RECT *lprcClip,HRGN hrgnUpdate,LPRECT lprcUpdate);
             int __attribute__((__stdcall__)) ScrollWindowEx(HWND hWnd,int dx,int dy,const RECT *prcScroll,const RECT *prcClip,HRGN hrgnUpdate,LPRECT prcUpdate,UINT flags);
             int __attribute__((__stdcall__)) SetScrollPos(HWND hWnd,int nBar,int nPos,WINBOOL bRedraw);
             int __attribute__((__stdcall__)) GetScrollPos(HWND hWnd,int nBar);
             WINBOOL __attribute__((__stdcall__)) SetScrollRange(HWND hWnd,int nBar,int nMinPos,int nMaxPos,WINBOOL bRedraw);
             WINBOOL __attribute__((__stdcall__)) GetScrollRange(HWND hWnd,int nBar,LPINT lpMinPos,LPINT lpMaxPos);
             WINBOOL __attribute__((__stdcall__)) ShowScrollBar(HWND hWnd,int wBar,WINBOOL bShow);
             WINBOOL __attribute__((__stdcall__)) EnableScrollBar(HWND hWnd,UINT wSBflags,UINT wArrows);
             WINBOOL __attribute__((__stdcall__)) SetPropA(HWND hWnd,LPCSTR lpString,HANDLE hData);
             WINBOOL __attribute__((__stdcall__)) SetPropW(HWND hWnd,LPCWSTR lpString,HANDLE hData);
             HANDLE __attribute__((__stdcall__)) GetPropA(HWND hWnd,LPCSTR lpString);
             HANDLE __attribute__((__stdcall__)) GetPropW(HWND hWnd,LPCWSTR lpString);
             HANDLE __attribute__((__stdcall__)) RemovePropA(HWND hWnd,LPCSTR lpString);
             HANDLE __attribute__((__stdcall__)) RemovePropW(HWND hWnd,LPCWSTR lpString);
             int __attribute__((__stdcall__)) EnumPropsExA(HWND hWnd,PROPENUMPROCEXA lpEnumFunc,LPARAM lParam);
             int __attribute__((__stdcall__)) EnumPropsExW(HWND hWnd,PROPENUMPROCEXW lpEnumFunc,LPARAM lParam);
             int __attribute__((__stdcall__)) EnumPropsA(HWND hWnd,PROPENUMPROCA lpEnumFunc);
             int __attribute__((__stdcall__)) EnumPropsW(HWND hWnd,PROPENUMPROCW lpEnumFunc);
             WINBOOL __attribute__((__stdcall__)) SetWindowTextA(HWND hWnd,LPCSTR lpString);
             WINBOOL __attribute__((__stdcall__)) SetWindowTextW(HWND hWnd,LPCWSTR lpString);
             int __attribute__((__stdcall__)) GetWindowTextA(HWND hWnd,LPSTR lpString,int nMaxCount);
             int __attribute__((__stdcall__)) GetWindowTextW(HWND hWnd,LPWSTR lpString,int nMaxCount);
             int __attribute__((__stdcall__)) GetWindowTextLengthA(HWND hWnd);
             int __attribute__((__stdcall__)) GetWindowTextLengthW(HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) GetClientRect(HWND hWnd,LPRECT lpRect);
             WINBOOL __attribute__((__stdcall__)) GetWindowRect(HWND hWnd,LPRECT lpRect);
             WINBOOL __attribute__((__stdcall__)) AdjustWindowRect(LPRECT lpRect,DWORD dwStyle,WINBOOL bMenu);
             WINBOOL __attribute__((__stdcall__)) AdjustWindowRectEx(LPRECT lpRect,DWORD dwStyle,WINBOOL bMenu,DWORD dwExStyle);






  typedef struct tagHELPINFO {
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
  } HELPINFO,*LPHELPINFO;

             WINBOOL __attribute__((__stdcall__)) SetWindowContextHelpId(HWND,DWORD);
             DWORD __attribute__((__stdcall__)) GetWindowContextHelpId(HWND);
             WINBOOL __attribute__((__stdcall__)) SetMenuContextHelpId(HMENU,DWORD);
             DWORD __attribute__((__stdcall__)) GetMenuContextHelpId(HMENU);
             int __attribute__((__stdcall__)) MessageBoxA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType);
             int __attribute__((__stdcall__)) MessageBoxW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType);
             int __attribute__((__stdcall__)) MessageBoxExA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType,WORD wLanguageId);
             int __attribute__((__stdcall__)) MessageBoxExW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType,WORD wLanguageId);

  typedef void (__attribute__((__stdcall__)) *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

  typedef struct tagMSGBOXPARAMSA {
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
  } MSGBOXPARAMSA,*PMSGBOXPARAMSA,*LPMSGBOXPARAMSA;

  typedef struct tagMSGBOXPARAMSW {
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
  } MSGBOXPARAMSW,*PMSGBOXPARAMSW,*LPMSGBOXPARAMSW;

  typedef MSGBOXPARAMSW MSGBOXPARAMS;
  typedef PMSGBOXPARAMSW PMSGBOXPARAMS;
  typedef LPMSGBOXPARAMSW LPMSGBOXPARAMS;



             int __attribute__((__stdcall__)) MessageBoxIndirectA(const MSGBOXPARAMSA *lpmbp);
             int __attribute__((__stdcall__)) MessageBoxIndirectW(const MSGBOXPARAMSW *lpmbp);
             WINBOOL __attribute__((__stdcall__)) MessageBeep(UINT uType);




             int __attribute__((__stdcall__)) ShowCursor(WINBOOL bShow);
             WINBOOL __attribute__((__stdcall__)) SetCursorPos(int X,int Y);
             HCURSOR __attribute__((__stdcall__)) SetCursor(HCURSOR hCursor);
             WINBOOL __attribute__((__stdcall__)) GetCursorPos(LPPOINT lpPoint);
             WINBOOL __attribute__((__stdcall__)) ClipCursor(const RECT *lpRect);
             WINBOOL __attribute__((__stdcall__)) GetClipCursor(LPRECT lpRect);
             HCURSOR __attribute__((__stdcall__)) GetCursor(void);
             WINBOOL __attribute__((__stdcall__)) CreateCaret(HWND hWnd,HBITMAP hBitmap,int nWidth,int nHeight);
             UINT __attribute__((__stdcall__)) GetCaretBlinkTime(void);
             WINBOOL __attribute__((__stdcall__)) SetCaretBlinkTime(UINT uMSeconds);
             WINBOOL __attribute__((__stdcall__)) DestroyCaret(void);
             WINBOOL __attribute__((__stdcall__)) HideCaret(HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) ShowCaret(HWND hWnd);
             WINBOOL __attribute__((__stdcall__)) SetCaretPos(int X,int Y);
             WINBOOL __attribute__((__stdcall__)) GetCaretPos(LPPOINT lpPoint);
             WINBOOL __attribute__((__stdcall__)) ClientToScreen(HWND hWnd,LPPOINT lpPoint);
             WINBOOL __attribute__((__stdcall__)) ScreenToClient(HWND hWnd,LPPOINT lpPoint);
             int __attribute__((__stdcall__)) MapWindowPoints(HWND hWndFrom,HWND hWndTo,LPPOINT lpPoints,UINT cPoints);
             HWND __attribute__((__stdcall__)) WindowFromPoint(POINT Point);
             HWND __attribute__((__stdcall__)) ChildWindowFromPoint(HWND hWndParent,POINT Point);
             HWND __attribute__((__stdcall__)) ChildWindowFromPointEx(HWND hwnd,POINT pt,UINT flags);
             DWORD __attribute__((__stdcall__)) GetSysColor(int nIndex);
             HBRUSH __attribute__((__stdcall__)) GetSysColorBrush(int nIndex);
             WINBOOL __attribute__((__stdcall__)) SetSysColors(int cElements,const INT *lpaElements,const COLORREF *lpaRgbValues);




             WINBOOL __attribute__((__stdcall__)) DrawFocusRect(HDC hDC,const RECT *lprc);
             int __attribute__((__stdcall__)) FillRect(HDC hDC,const RECT *lprc,HBRUSH hbr);
             int __attribute__((__stdcall__)) FrameRect(HDC hDC,const RECT *lprc,HBRUSH hbr);
             WINBOOL __attribute__((__stdcall__)) InvertRect(HDC hDC,const RECT *lprc);
             WINBOOL __attribute__((__stdcall__)) SetRect(LPRECT lprc,int xLeft,int yTop,int xRight,int yBottom);
             WINBOOL __attribute__((__stdcall__)) SetRectEmpty(LPRECT lprc);
             WINBOOL __attribute__((__stdcall__)) CopyRect(LPRECT lprcDst,const RECT *lprcSrc);
             WINBOOL __attribute__((__stdcall__)) InflateRect(LPRECT lprc,int dx,int dy);
             WINBOOL __attribute__((__stdcall__)) IntersectRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
             WINBOOL __attribute__((__stdcall__)) UnionRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
             WINBOOL __attribute__((__stdcall__)) SubtractRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
             WINBOOL __attribute__((__stdcall__)) OffsetRect(LPRECT lprc,int dx,int dy);
             WINBOOL __attribute__((__stdcall__)) IsRectEmpty(const RECT *lprc);
             WINBOOL __attribute__((__stdcall__)) EqualRect(const RECT *lprc1,const RECT *lprc2);
             WINBOOL __attribute__((__stdcall__)) PtInRect(const RECT *lprc,POINT pt);
             WORD __attribute__((__stdcall__)) GetWindowWord(HWND hWnd,int nIndex);
             WORD __attribute__((__stdcall__)) SetWindowWord(HWND hWnd,int nIndex,WORD wNewWord);
             LONG __attribute__((__stdcall__)) GetWindowLongA(HWND hWnd,int nIndex);
             LONG __attribute__((__stdcall__)) GetWindowLongW(HWND hWnd,int nIndex);
             LONG __attribute__((__stdcall__)) SetWindowLongA(HWND hWnd,int nIndex,LONG dwNewLong);
             LONG __attribute__((__stdcall__)) SetWindowLongW(HWND hWnd,int nIndex,LONG dwNewLong);
             WORD __attribute__((__stdcall__)) GetClassWord(HWND hWnd,int nIndex);
             WORD __attribute__((__stdcall__)) SetClassWord(HWND hWnd,int nIndex,WORD wNewWord);
             DWORD __attribute__((__stdcall__)) GetClassLongA(HWND hWnd,int nIndex);
             DWORD __attribute__((__stdcall__)) GetClassLongW(HWND hWnd,int nIndex);
             DWORD __attribute__((__stdcall__)) SetClassLongA(HWND hWnd,int nIndex,LONG dwNewLong);
             DWORD __attribute__((__stdcall__)) SetClassLongW(HWND hWnd,int nIndex,LONG dwNewLong);
             WINBOOL __attribute__((__stdcall__)) GetProcessDefaultLayout(DWORD *pdwDefaultLayout);
             WINBOOL __attribute__((__stdcall__)) SetProcessDefaultLayout(DWORD dwDefaultLayout);
             HWND __attribute__((__stdcall__)) GetDesktopWindow(void);
             HWND __attribute__((__stdcall__)) GetParent(HWND hWnd);
             HWND __attribute__((__stdcall__)) SetParent(HWND hWndChild,HWND hWndNewParent);
             WINBOOL __attribute__((__stdcall__)) EnumChildWindows(HWND hWndParent,WNDENUMPROC lpEnumFunc,LPARAM lParam);
             HWND __attribute__((__stdcall__)) FindWindowA(LPCSTR lpClassName,LPCSTR lpWindowName);
             HWND __attribute__((__stdcall__)) FindWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName);
             HWND __attribute__((__stdcall__)) FindWindowExA(HWND hWndParent,HWND hWndChildAfter,LPCSTR lpszClass,LPCSTR lpszWindow);
             HWND __attribute__((__stdcall__)) FindWindowExW(HWND hWndParent,HWND hWndChildAfter,LPCWSTR lpszClass,LPCWSTR lpszWindow);
             HWND __attribute__((__stdcall__)) GetShellWindow(void);
             WINBOOL __attribute__((__stdcall__)) RegisterShellHookWindow(HWND hwnd);
             WINBOOL __attribute__((__stdcall__)) DeregisterShellHookWindow(HWND hwnd);
             WINBOOL __attribute__((__stdcall__)) EnumWindows(WNDENUMPROC lpEnumFunc,LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) EnumThreadWindows(DWORD dwThreadId,WNDENUMPROC lpfn,LPARAM lParam);



             int __attribute__((__stdcall__)) GetClassNameA(HWND hWnd,LPSTR lpClassName,int nMaxCount);
             int __attribute__((__stdcall__)) GetClassNameW(HWND hWnd,LPWSTR lpClassName,int nMaxCount);
             HWND __attribute__((__stdcall__)) GetTopWindow(HWND hWnd);





             DWORD __attribute__((__stdcall__)) GetWindowThreadProcessId(HWND hWnd,LPDWORD lpdwProcessId);
             WINBOOL __attribute__((__stdcall__)) IsGUIThread(WINBOOL bConvert);



             HWND __attribute__((__stdcall__)) GetLastActivePopup(HWND hWnd);
             HWND __attribute__((__stdcall__)) GetWindow(HWND hWnd,UINT uCmd);






             HHOOK __attribute__((__stdcall__)) SetWindowsHookA (int nFilterType, HOOKPROC pfnFilterProc);
             HHOOK __attribute__((__stdcall__)) SetWindowsHookW (int nFilterType, HOOKPROC pfnFilterProc);
             WINBOOL __attribute__((__stdcall__)) UnhookWindowsHook (int nCode, HOOKPROC pfnFilterProc);
             HHOOK __attribute__((__stdcall__)) SetWindowsHookExA (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
             HHOOK __attribute__((__stdcall__)) SetWindowsHookExW (int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
             WINBOOL __attribute__((__stdcall__)) UnhookWindowsHookEx (HHOOK hhk);
             LRESULT __attribute__((__stdcall__)) CallNextHookEx (HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
             WINBOOL __attribute__((__stdcall__)) CheckMenuRadioItem(HMENU hmenu,UINT first,UINT last,UINT check,UINT flags);

  typedef struct {
    WORD versionNumber;
    WORD offset;
  } MENUITEMTEMPLATEHEADER,*PMENUITEMTEMPLATEHEADER;

  typedef struct {
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
  } MENUITEMTEMPLATE,*PMENUITEMTEMPLATE;
             HBITMAP __attribute__((__stdcall__)) LoadBitmapA(HINSTANCE hInstance,LPCSTR lpBitmapName);
             HBITMAP __attribute__((__stdcall__)) LoadBitmapW(HINSTANCE hInstance,LPCWSTR lpBitmapName);
             HCURSOR __attribute__((__stdcall__)) LoadCursorA(HINSTANCE hInstance,LPCSTR lpCursorName);
             HCURSOR __attribute__((__stdcall__)) LoadCursorW(HINSTANCE hInstance,LPCWSTR lpCursorName);
             HCURSOR __attribute__((__stdcall__)) LoadCursorFromFileA(LPCSTR lpFileName);
             HCURSOR __attribute__((__stdcall__)) LoadCursorFromFileW(LPCWSTR lpFileName);
             HCURSOR __attribute__((__stdcall__)) CreateCursor(HINSTANCE hInst,int xHotSpot,int yHotSpot,int nWidth,int nHeight,const void *pvANDPlane,const void *pvXORPlane);
             WINBOOL __attribute__((__stdcall__)) DestroyCursor(HCURSOR hCursor);
  typedef struct _ICONINFO {
    WINBOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
  } ICONINFO;
  typedef ICONINFO *PICONINFO;




             WINBOOL __attribute__((__stdcall__)) SetSystemCursor(HCURSOR hcur,DWORD id);
             HICON __attribute__((__stdcall__)) LoadIconA(HINSTANCE hInstance,LPCSTR lpIconName);
             HICON __attribute__((__stdcall__)) LoadIconW(HINSTANCE hInstance,LPCWSTR lpIconName);
             UINT __attribute__((__stdcall__)) PrivateExtractIconsA(LPCSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON *phicon,UINT *piconid,UINT nIcons,UINT flags);
             UINT __attribute__((__stdcall__)) PrivateExtractIconsW(LPCWSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON *phicon,UINT *piconid,UINT nIcons,UINT flags);
             HICON __attribute__((__stdcall__)) CreateIcon(HINSTANCE hInstance,int nWidth,int nHeight,BYTE cPlanes,BYTE cBitsPixel,const BYTE *lpbANDbits,const BYTE *lpbXORbits);
             WINBOOL __attribute__((__stdcall__)) DestroyIcon(HICON hIcon);
             int __attribute__((__stdcall__)) LookupIconIdFromDirectory(PBYTE presbits,WINBOOL fIcon);
             int __attribute__((__stdcall__)) LookupIconIdFromDirectoryEx(PBYTE presbits,WINBOOL fIcon,int cxDesired,int cyDesired,UINT Flags);
             HICON __attribute__((__stdcall__)) CreateIconFromResource(PBYTE presbits,DWORD dwResSize,WINBOOL fIcon,DWORD dwVer);
             HICON __attribute__((__stdcall__)) CreateIconFromResourceEx(PBYTE presbits,DWORD dwResSize,WINBOOL fIcon,DWORD dwVer,int cxDesired,int cyDesired,UINT Flags);

  typedef struct tagCURSORSHAPE {
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
  } CURSORSHAPE,*LPCURSORSHAPE;
             HANDLE __attribute__((__stdcall__)) LoadImageA(HINSTANCE hInst,LPCSTR name,UINT type,int cx,int cy,UINT fuLoad);
             HANDLE __attribute__((__stdcall__)) LoadImageW(HINSTANCE hInst,LPCWSTR name,UINT type,int cx,int cy,UINT fuLoad);
             HANDLE __attribute__((__stdcall__)) CopyImage(HANDLE h,UINT type,int cx,int cy,UINT flags);
             WINBOOL __attribute__((__stdcall__)) DrawIconEx(HDC hdc,int xLeft,int yTop,HICON hIcon,int cxWidth,int cyWidth,UINT istepIfAniCur,HBRUSH hbrFlickerFreeDraw,UINT diFlags);
             HICON __attribute__((__stdcall__)) CreateIconIndirect(PICONINFO piconinfo);
             HICON __attribute__((__stdcall__)) CopyIcon(HICON hIcon);
             WINBOOL __attribute__((__stdcall__)) GetIconInfo(HICON hIcon,PICONINFO piconinfo);
             WINBOOL __attribute__((__stdcall__)) IsDialogMessageA(HWND hDlg,LPMSG lpMsg);
             WINBOOL __attribute__((__stdcall__)) IsDialogMessageW(HWND hDlg,LPMSG lpMsg);







             WINBOOL __attribute__((__stdcall__)) MapDialogRect(HWND hDlg,LPRECT lpRect);
             int __attribute__((__stdcall__)) DlgDirListA(HWND hDlg,LPSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType);
             int __attribute__((__stdcall__)) DlgDirListW(HWND hDlg,LPWSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType);
             WINBOOL __attribute__((__stdcall__)) DlgDirSelectExA(HWND hwndDlg,LPSTR lpString,int chCount,int idListBox);
             WINBOOL __attribute__((__stdcall__)) DlgDirSelectExW(HWND hwndDlg,LPWSTR lpString,int chCount,int idListBox);
             int __attribute__((__stdcall__)) DlgDirListComboBoxA(HWND hDlg,LPSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype);
             int __attribute__((__stdcall__)) DlgDirListComboBoxW(HWND hDlg,LPWSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype);
             WINBOOL __attribute__((__stdcall__)) DlgDirSelectComboBoxExA(HWND hwndDlg,LPSTR lpString,int cchOut,int idComboBox);
             WINBOOL __attribute__((__stdcall__)) DlgDirSelectComboBoxExW(HWND hwndDlg,LPWSTR lpString,int cchOut,int idComboBox);
  typedef struct tagSCROLLINFO {
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
  } SCROLLINFO,*LPSCROLLINFO;
  typedef SCROLLINFO const *LPCSCROLLINFO;

             int __attribute__((__stdcall__)) SetScrollInfo(HWND hwnd,int nBar,LPCSCROLLINFO lpsi,WINBOOL redraw);
             WINBOOL __attribute__((__stdcall__)) GetScrollInfo(HWND hwnd,int nBar,LPSCROLLINFO lpsi);
  typedef struct tagMDICREATESTRUCTA {
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
  } MDICREATESTRUCTA,*LPMDICREATESTRUCTA;

  typedef struct tagMDICREATESTRUCTW {
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
  } MDICREATESTRUCTW,*LPMDICREATESTRUCTW;

  typedef MDICREATESTRUCTW MDICREATESTRUCT;
  typedef LPMDICREATESTRUCTW LPMDICREATESTRUCT;

  typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
  } CLIENTCREATESTRUCT,*LPCLIENTCREATESTRUCT;





             LRESULT __attribute__((__stdcall__)) DefFrameProcA(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam);
             LRESULT __attribute__((__stdcall__)) DefFrameProcW(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam);
             LRESULT __attribute__((__stdcall__)) DefMDIChildProcA(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);
             LRESULT __attribute__((__stdcall__)) DefMDIChildProcW(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);


             WINBOOL __attribute__((__stdcall__)) TranslateMDISysAccel(HWND hWndClient,LPMSG lpMsg);


             UINT __attribute__((__stdcall__)) ArrangeIconicWindows(HWND hWnd);
             HWND __attribute__((__stdcall__)) CreateMDIWindowA(LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam);
             HWND __attribute__((__stdcall__)) CreateMDIWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam);
             WORD __attribute__((__stdcall__)) TileWindows(HWND hwndParent,UINT wHow,const RECT *lpRect,UINT cKids,const HWND *lpKids);
             WORD __attribute__((__stdcall__)) CascadeWindows(HWND hwndParent,UINT wHow,const RECT *lpRect,UINT cKids,const HWND *lpKids);






  typedef DWORD HELPPOLY;

  typedef struct tagMULTIKEYHELPA {
    DWORD mkSize;
    CHAR mkKeylist;
    CHAR szKeyphrase[1];
  } MULTIKEYHELPA,*PMULTIKEYHELPA,*LPMULTIKEYHELPA;

  typedef struct tagMULTIKEYHELPW {
    DWORD mkSize;
    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
  } MULTIKEYHELPW,*PMULTIKEYHELPW,*LPMULTIKEYHELPW;

  typedef MULTIKEYHELPW MULTIKEYHELP;
  typedef PMULTIKEYHELPW PMULTIKEYHELP;
  typedef LPMULTIKEYHELPW LPMULTIKEYHELP;

  typedef struct tagHELPWININFOA {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
  } HELPWININFOA,*PHELPWININFOA,*LPHELPWININFOA;

  typedef struct tagHELPWININFOW {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
  } HELPWININFOW,*PHELPWININFOW,*LPHELPWININFOW;

  typedef HELPWININFOW HELPWININFO;
  typedef PHELPWININFOW PHELPWININFO;
  typedef LPHELPWININFOW LPHELPWININFO;



             WINBOOL __attribute__((__stdcall__)) WinHelpA(HWND hWndMain,LPCSTR lpszHelp,UINT uCommand,ULONG_PTR dwData);
             WINBOOL __attribute__((__stdcall__)) WinHelpW(HWND hWndMain,LPCWSTR lpszHelp,UINT uCommand,ULONG_PTR dwData);
             DWORD __attribute__((__stdcall__)) GetGuiResources(HANDLE hProcess,DWORD uiFlags);
  typedef struct tagNONCLIENTMETRICSA {
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;



  } NONCLIENTMETRICSA,*PNONCLIENTMETRICSA,*LPNONCLIENTMETRICSA;

  typedef struct tagNONCLIENTMETRICSW {
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;



  } NONCLIENTMETRICSW,*PNONCLIENTMETRICSW,*LPNONCLIENTMETRICSW;

  typedef NONCLIENTMETRICSW NONCLIENTMETRICS;
  typedef PNONCLIENTMETRICSW PNONCLIENTMETRICS;
  typedef LPNONCLIENTMETRICSW LPNONCLIENTMETRICS;
  typedef struct tagMINIMIZEDMETRICS {
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
  } MINIMIZEDMETRICS,*PMINIMIZEDMETRICS,*LPMINIMIZEDMETRICS;



  typedef struct tagICONMETRICSA {
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
  } ICONMETRICSA,*PICONMETRICSA,*LPICONMETRICSA;

  typedef struct tagICONMETRICSW {
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
  } ICONMETRICSW,*PICONMETRICSW,*LPICONMETRICSW;

  typedef ICONMETRICSW ICONMETRICS;
  typedef PICONMETRICSW PICONMETRICS;
  typedef LPICONMETRICSW LPICONMETRICS;



  typedef struct tagANIMATIONINFO {
    UINT cbSize;
    int iMinAnimate;
  } ANIMATIONINFO,*LPANIMATIONINFO;

  typedef struct tagSERIALKEYSA {
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
  } SERIALKEYSA,*LPSERIALKEYSA;

  typedef struct tagSERIALKEYSW {
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
  } SERIALKEYSW,*LPSERIALKEYSW;

  typedef SERIALKEYSW SERIALKEYS;
  typedef LPSERIALKEYSW LPSERIALKEYS;

  typedef struct tagHIGHCONTRASTA {
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
  } HIGHCONTRASTA,*LPHIGHCONTRASTA;

  typedef struct tagHIGHCONTRASTW {
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
  } HIGHCONTRASTW,*LPHIGHCONTRASTW;

  typedef HIGHCONTRASTW HIGHCONTRAST;
  typedef LPHIGHCONTRASTW LPHIGHCONTRAST;
extern "C++" {
__extension__ template<typename T> const GUID &__mingw_uuidof();
}
typedef struct _VIDEOPARAMETERS {
  GUID Guid;
  ULONG dwOffset;
  ULONG dwCommand;
  ULONG dwFlags;
  ULONG dwMode;
  ULONG dwTVStandard;
  ULONG dwAvailableModes;
  ULONG dwAvailableTVStandard;
  ULONG dwFlickerFilter;
  ULONG dwOverScanX;
  ULONG dwOverScanY;
  ULONG dwMaxUnscaledX;
  ULONG dwMaxUnscaledY;
  ULONG dwPositionX;
  ULONG dwPositionY;
  ULONG dwBrightness;
  ULONG dwContrast;
  ULONG dwCPType;
  ULONG dwCPCommand;
  ULONG dwCPStandard;
  ULONG dwCPKey;
  ULONG bCP_APSTriggerBits;
  UCHAR bOEMCopyProtection[256];
} VIDEOPARAMETERS,*PVIDEOPARAMETERS,*LPVIDEOPARAMETERS;
             LONG __attribute__((__stdcall__)) ChangeDisplaySettingsA(LPDEVMODEA lpDevMode,DWORD dwFlags);
             LONG __attribute__((__stdcall__)) ChangeDisplaySettingsW(LPDEVMODEW lpDevMode,DWORD dwFlags);
             LONG __attribute__((__stdcall__)) ChangeDisplaySettingsExA(LPCSTR lpszDeviceName,LPDEVMODEA lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam);
             LONG __attribute__((__stdcall__)) ChangeDisplaySettingsExW(LPCWSTR lpszDeviceName,LPDEVMODEW lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam);




             WINBOOL __attribute__((__stdcall__)) EnumDisplaySettingsA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode);
             WINBOOL __attribute__((__stdcall__)) EnumDisplaySettingsW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode);
             WINBOOL __attribute__((__stdcall__)) EnumDisplaySettingsExA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode,DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) EnumDisplaySettingsExW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode,DWORD dwFlags);



             WINBOOL __attribute__((__stdcall__)) EnumDisplayDevicesA(LPCSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEA lpDisplayDevice,DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) EnumDisplayDevicesW(LPCWSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEW lpDisplayDevice,DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) SystemParametersInfoA(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);
             WINBOOL __attribute__((__stdcall__)) SystemParametersInfoW(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);




  typedef struct tagFILTERKEYS {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
  } FILTERKEYS,*LPFILTERKEYS;
  typedef struct tagSTICKYKEYS {
    UINT cbSize;
    DWORD dwFlags;
  } STICKYKEYS,*LPSTICKYKEYS;
  typedef struct tagMOUSEKEYS {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
  } MOUSEKEYS,*LPMOUSEKEYS;
  typedef struct tagACCESSTIMEOUT {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
  } ACCESSTIMEOUT,*LPACCESSTIMEOUT;
  typedef struct tagSOUNDSENTRYA {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
  } SOUNDSENTRYA,*LPSOUNDSENTRYA;

  typedef struct tagSOUNDSENTRYW {
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
  } SOUNDSENTRYW,*LPSOUNDSENTRYW;

  typedef SOUNDSENTRYW SOUNDSENTRY;
  typedef LPSOUNDSENTRYW LPSOUNDSENTRY;
  typedef struct tagTOGGLEKEYS {
    UINT cbSize;
    DWORD dwFlags;
  } TOGGLEKEYS,*LPTOGGLEKEYS;

  typedef struct tagMONITORINFO {
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
  } MONITORINFO,*LPMONITORINFO;
  typedef struct tagMONITORINFOEXA : public tagMONITORINFO {
    CHAR szDevice[32];
  } MONITORINFOEXA,*LPMONITORINFOEXA;

  typedef struct tagMONITORINFOEXW : public tagMONITORINFO {
    WCHAR szDevice[32];
  } MONITORINFOEXW,*LPMONITORINFOEXW;

  typedef MONITORINFOEXW MONITORINFOEX;
  typedef LPMONITORINFOEXW LPMONITORINFOEX;
  typedef WINBOOL (__attribute__((__stdcall__)) *MONITORENUMPROC)(HMONITOR,HDC,LPRECT,LPARAM);

             void __attribute__((__stdcall__)) SetDebugErrorLevel (DWORD dwLevel);
             void __attribute__((__stdcall__)) SetLastErrorEx (DWORD dwErrCode, DWORD dwType);
             int __attribute__((__stdcall__)) InternalGetWindowText (HWND hWnd, LPWSTR pString, int cchMaxCount);
             WINBOOL __attribute__((__stdcall__)) CancelShutdown (void);
             HMONITOR __attribute__((__stdcall__)) MonitorFromPoint(POINT pt,DWORD dwFlags);
             HMONITOR __attribute__((__stdcall__)) MonitorFromRect(LPCRECT lprc,DWORD dwFlags);
             HMONITOR __attribute__((__stdcall__)) MonitorFromWindow(HWND hwnd,DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) GetMonitorInfoA(HMONITOR hMonitor,LPMONITORINFO lpmi);
             WINBOOL __attribute__((__stdcall__)) GetMonitorInfoW(HMONITOR hMonitor,LPMONITORINFO lpmi);
             WINBOOL __attribute__((__stdcall__)) EnumDisplayMonitors(HDC hdc,LPCRECT lprcClip,MONITORENUMPROC lpfnEnum,LPARAM dwData);
  typedef void (__attribute__((__stdcall__)) *WINEVENTPROC)(HWINEVENTHOOK hWinEventHook,DWORD event,HWND hwnd,LONG idObject,LONG idChild,DWORD idEventThread,DWORD dwmsEventTime);

             void __attribute__((__stdcall__)) NotifyWinEvent(DWORD event,HWND hwnd,LONG idObject,LONG idChild);
             HWINEVENTHOOK __attribute__((__stdcall__)) SetWinEventHook(DWORD eventMin,DWORD eventMax,HMODULE hmodWinEventProc,WINEVENTPROC pfnWinEventProc,DWORD idProcess,DWORD idThread,DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) IsWinEventHookInstalled(DWORD event);
             WINBOOL __attribute__((__stdcall__)) UnhookWinEvent(HWINEVENTHOOK hWinEventHook);
  typedef struct tagGUITHREADINFO {
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
  } GUITHREADINFO,*PGUITHREADINFO,*LPGUITHREADINFO;
             WINBOOL __attribute__((__stdcall__)) GetGUIThreadInfo(DWORD idThread,PGUITHREADINFO pgui);
             WINBOOL __attribute__((__stdcall__)) BlockInput (WINBOOL fBlockIt);
             UINT __attribute__((__stdcall__)) GetWindowModuleFileNameA(HWND hwnd,LPSTR pszFileName,UINT cchFileNameMax);
             UINT __attribute__((__stdcall__)) GetWindowModuleFileNameW(HWND hwnd,LPWSTR pszFileName,UINT cchFileNameMax);
  typedef struct tagCURSORINFO {
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
  } CURSORINFO,*PCURSORINFO,*LPCURSORINFO;






             WINBOOL __attribute__((__stdcall__)) GetCursorInfo(PCURSORINFO pci);

  typedef struct tagWINDOWINFO {
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
  } WINDOWINFO,*PWINDOWINFO,*LPWINDOWINFO;



             WINBOOL __attribute__((__stdcall__)) GetWindowInfo(HWND hwnd,PWINDOWINFO pwi);

  typedef struct tagTITLEBARINFO {
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
  } TITLEBARINFO,*PTITLEBARINFO,*LPTITLEBARINFO;

             WINBOOL __attribute__((__stdcall__)) GetTitleBarInfo(HWND hwnd,PTITLEBARINFO pti);
  typedef struct tagMENUBARINFO {
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    WINBOOL fBarFocused:1;
    WINBOOL fFocused:1;
  } MENUBARINFO,*PMENUBARINFO,*LPMENUBARINFO;

             WINBOOL __attribute__((__stdcall__)) GetMenuBarInfo(HWND hwnd,LONG idObject,LONG idItem,PMENUBARINFO pmbi);

  typedef struct tagSCROLLBARINFO {
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
  } SCROLLBARINFO,*PSCROLLBARINFO,*LPSCROLLBARINFO;

             WINBOOL __attribute__((__stdcall__)) GetScrollBarInfo(HWND hwnd,LONG idObject,PSCROLLBARINFO psbi);

  typedef struct tagCOMBOBOXINFO {
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
  } COMBOBOXINFO,*PCOMBOBOXINFO,*LPCOMBOBOXINFO;

             WINBOOL __attribute__((__stdcall__)) GetComboBoxInfo(HWND hwndCombo,PCOMBOBOXINFO pcbi);
             HWND __attribute__((__stdcall__)) GetAncestor(HWND hwnd,UINT gaFlags);
             HWND __attribute__((__stdcall__)) RealChildWindowFromPoint(HWND hwndParent,POINT ptParentClientCoords);
             UINT __attribute__((__stdcall__)) RealGetWindowClassA(HWND hwnd,LPSTR ptszClassName,UINT cchClassNameMax);
             UINT __attribute__((__stdcall__)) RealGetWindowClassW(HWND hwnd,LPWSTR ptszClassName,UINT cchClassNameMax);

  typedef struct tagALTTABINFO {
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
  } ALTTABINFO,*PALTTABINFO,*LPALTTABINFO;



             WINBOOL __attribute__((__stdcall__)) GetAltTabInfoA(HWND hwnd,int iItem,PALTTABINFO pati,LPSTR pszItemText,UINT cchItemText);
             WINBOOL __attribute__((__stdcall__)) GetAltTabInfoW(HWND hwnd,int iItem,PALTTABINFO pati,LPWSTR pszItemText,UINT cchItemText);
             DWORD __attribute__((__stdcall__)) GetListBoxInfo(HWND hwnd);




             WINBOOL __attribute__((__stdcall__)) LockWorkStation(void);
             WINBOOL __attribute__((__stdcall__)) UserHandleGrantAccess(HANDLE hUserHandle,HANDLE hJob,WINBOOL bGrant);

  struct HRAWINPUT__ { int unused; }; typedef struct HRAWINPUT__ *HRAWINPUT;
  typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
  } RAWINPUTHEADER,*PRAWINPUTHEADER,*LPRAWINPUTHEADER;







  typedef struct tagRAWMOUSE {
    USHORT usFlags;
    __extension__ union {
      ULONG ulButtons;
      __extension__ struct {
 USHORT usButtonFlags;
 USHORT usButtonData;
      };
    };
    ULONG ulRawButtons;
    LONG lLastX;
    LONG lLastY;
    ULONG ulExtraInformation;
  } RAWMOUSE,*PRAWMOUSE,*LPRAWMOUSE;
  typedef struct tagRAWKEYBOARD {
    USHORT MakeCode;
    USHORT Flags;
    USHORT Reserved;
    USHORT VKey;
    UINT Message;
    ULONG ExtraInformation;
  } RAWKEYBOARD,*PRAWKEYBOARD,*LPRAWKEYBOARD;
  typedef struct tagRAWHID {
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
  } RAWHID,*PRAWHID,*LPRAWHID;

  typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
      RAWMOUSE mouse;
      RAWKEYBOARD keyboard;
      RAWHID hid;
    } data;
  } RAWINPUT,*PRAWINPUT,*LPRAWINPUT;
             UINT __attribute__((__stdcall__)) GetRawInputData(HRAWINPUT hRawInput,UINT uiCommand,LPVOID pData,PUINT pcbSize,UINT cbSizeHeader);







  typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    WINBOOL fHasHorizontalWheel;
  } RID_DEVICE_INFO_MOUSE,*PRID_DEVICE_INFO_MOUSE;

  typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
  } RID_DEVICE_INFO_KEYBOARD,*PRID_DEVICE_INFO_KEYBOARD;

  typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;
    USHORT usUsagePage;
    USHORT usUsage;
  } RID_DEVICE_INFO_HID,*PRID_DEVICE_INFO_HID;

  typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    __extension__ union {
      RID_DEVICE_INFO_MOUSE mouse;
      RID_DEVICE_INFO_KEYBOARD keyboard;
      RID_DEVICE_INFO_HID hid;
    } ;
  } RID_DEVICE_INFO,*PRID_DEVICE_INFO,*LPRID_DEVICE_INFO;



             UINT __attribute__((__stdcall__)) GetRawInputDeviceInfoA(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize);
             UINT __attribute__((__stdcall__)) GetRawInputDeviceInfoW(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize);
             UINT __attribute__((__stdcall__)) GetRawInputBuffer(PRAWINPUT pData,PUINT pcbSize,UINT cbSizeHeader);

  typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
  } RAWINPUTDEVICE,*PRAWINPUTDEVICE,*LPRAWINPUTDEVICE;

  typedef const RAWINPUTDEVICE *PCRAWINPUTDEVICE;
  typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
  } RAWINPUTDEVICELIST,*PRAWINPUTDEVICELIST;

             WINBOOL __attribute__((__stdcall__)) RegisterRawInputDevices (PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize);
             UINT __attribute__((__stdcall__)) GetRegisteredRawInputDevices (PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize);
             UINT __attribute__((__stdcall__)) GetRawInputDeviceList (PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize);
             LRESULT __attribute__((__stdcall__)) DefRawInputProc (PRAWINPUT *paRawInput, INT nInput, UINT cbSizeHeader);
             WINBOOL __attribute__((__stdcall__)) ShutdownBlockReasonCreate (HWND hWnd, LPCWSTR pwszReason);
             WINBOOL __attribute__((__stdcall__)) ShutdownBlockReasonQuery (HWND hWnd, LPWSTR pwszBuff, DWORD *pcchBuff);
             WINBOOL __attribute__((__stdcall__)) ShutdownBlockReasonDestroy (HWND hWnd);
}
extern "C" {
extern "C" {



             int __attribute__((__stdcall__)) GetTimeFormatEx (LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);
             int __attribute__((__stdcall__)) GetDateFormatEx (LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate, LPCWSTR lpCalendar);



             int __attribute__((__stdcall__)) GetDateFormatA (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCSTR lpFormat, LPSTR lpDateStr, int cchDate);
             int __attribute__((__stdcall__)) GetDateFormatW (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate);
             int __attribute__((__stdcall__)) GetTimeFormatA (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, int cchTime);
             int __attribute__((__stdcall__)) GetTimeFormatW (LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);







}
  typedef DWORD LGRPID;
  typedef DWORD LCTYPE;
  typedef DWORD CALTYPE;
  typedef DWORD CALID;

  typedef struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
  } CPINFO,*LPCPINFO;
  typedef struct _cpinfoexA {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
  } CPINFOEXA,*LPCPINFOEXA;

  typedef struct _cpinfoexW {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
  } CPINFOEXW,*LPCPINFOEXW;

  typedef CPINFOEXW CPINFOEX;
  typedef LPCPINFOEXW LPCPINFOEX;

  typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
  } NUMBERFMTA,*LPNUMBERFMTA;
  typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
  } NUMBERFMTW,*LPNUMBERFMTW;

  typedef NUMBERFMTW NUMBERFMT;
  typedef LPNUMBERFMTW LPNUMBERFMT;

  typedef struct _currencyfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
  } CURRENCYFMTA,*LPCURRENCYFMTA;

  typedef struct _currencyfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
  } CURRENCYFMTW,*LPCURRENCYFMTW;

  typedef CURRENCYFMTW CURRENCYFMT;
  typedef LPCURRENCYFMTW LPCURRENCYFMT;

  enum SYSNLS_FUNCTION {
    COMPARE_STRING = 0x1
  };

  typedef DWORD NLS_FUNCTION;
  typedef struct _nlsversioninfo {
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
  } NLSVERSIONINFO,*LPNLSVERSIONINFO;


  typedef struct _nlsversioninfoex {
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
  } NLSVERSIONINFOEX,*LPNLSVERSIONINFOEX;

  typedef LONG GEOID;
  typedef DWORD GEOTYPE;
  typedef DWORD GEOCLASS;



  enum SYSGEOTYPE {
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME= 0x0008,
    GEO_OFFICIALNAME= 0x0009,
    GEO_TIMEZONES = 0x000a,
    GEO_OFFICIALLANGUAGES = 0x000b,
    GEO_ISO_UN_NUMBER = 0x000c,
    GEO_PARENT = 0x000d
  };

  enum SYSGEOCLASS {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0
  };
  typedef WINBOOL (__attribute__((__stdcall__)) *LANGUAGEGROUP_ENUMPROCA) (LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *LANGGROUPLOCALE_ENUMPROCA) (LGRPID, LCID, LPSTR, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *UILANGUAGE_ENUMPROCA) (LPSTR, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CODEPAGE_ENUMPROCA) (LPSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCA) (LPSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCEXA) (LPSTR, CALID);
  typedef WINBOOL (__attribute__((__stdcall__)) *TIMEFMT_ENUMPROCA) (LPSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCA) (LPSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCEXA) (LPSTR, CALID);
  typedef WINBOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCA) (LPSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCW) (LPWSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *LANGUAGEGROUP_ENUMPROCW) (LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *LANGGROUPLOCALE_ENUMPROCW) (LGRPID, LCID, LPWSTR, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *UILANGUAGE_ENUMPROCW) (LPWSTR, LONG_PTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CODEPAGE_ENUMPROCW) (LPWSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCW) (LPWSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCEXW) (LPWSTR, CALID);
  typedef WINBOOL (__attribute__((__stdcall__)) *TIMEFMT_ENUMPROCW) (LPWSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCW) (LPWSTR);
  typedef WINBOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCEXW) (LPWSTR, CALID);
  typedef WINBOOL (__attribute__((__stdcall__)) *GEO_ENUMPROC) (GEOID);
  typedef struct _FILEMUIINFO {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
  } FILEMUIINFO,*PFILEMUIINFO;
extern "C" {



             int __attribute__((__stdcall__)) CompareStringW (LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2);
             int __attribute__((__stdcall__)) FoldStringW (DWORD dwMapFlags, LPCWCH lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
             WINBOOL __attribute__((__stdcall__)) GetStringTypeExW (LCID Locale, DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);
             WINBOOL __attribute__((__stdcall__)) GetStringTypeW (DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);
             int __attribute__((__stdcall__)) MultiByteToWideChar (UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
             int __attribute__((__stdcall__)) WideCharToMultiByte (UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);



}
             WINBOOL __attribute__((__stdcall__)) IsValidCodePage (UINT CodePage);



             UINT __attribute__((__stdcall__)) GetACP (void);



             UINT __attribute__((__stdcall__)) GetOEMCP (void);
             int __attribute__((__stdcall__)) CompareStringA (LCID Locale, DWORD dwCmpFlags, PCNZCH lpString1, int cchCount1, PCNZCH lpString2, int cchCount2);
             int __attribute__((__stdcall__)) LCMapStringW (LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
             int __attribute__((__stdcall__)) LCMapStringA (LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
             int __attribute__((__stdcall__)) GetLocaleInfoW (LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData);
             int __attribute__((__stdcall__)) GetLocaleInfoA (LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData);
             WINBOOL __attribute__((__stdcall__)) IsDBCSLeadByte (BYTE TestChar);
             WINBOOL __attribute__((__stdcall__)) IsDBCSLeadByteEx (UINT CodePage, BYTE TestChar);
             int __attribute__((__stdcall__)) GetNumberFormatA (LCID Locale, DWORD dwFlags, LPCSTR lpValue, const NUMBERFMTA *lpFormat, LPSTR lpNumberStr, int cchNumber);
             int __attribute__((__stdcall__)) GetNumberFormatW (LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW *lpFormat, LPWSTR lpNumberStr, int cchNumber);
             int __attribute__((__stdcall__)) GetCurrencyFormatA (LCID Locale, DWORD dwFlags, LPCSTR lpValue, const CURRENCYFMTA *lpFormat, LPSTR lpCurrencyStr, int cchCurrency);
             int __attribute__((__stdcall__)) GetCurrencyFormatW (LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW *lpFormat, LPWSTR lpCurrencyStr, int cchCurrency);
             WINBOOL __attribute__((__stdcall__)) EnumCalendarInfoA (CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
             WINBOOL __attribute__((__stdcall__)) EnumCalendarInfoW (CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
             WINBOOL __attribute__((__stdcall__)) EnumCalendarInfoExA (CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
             WINBOOL __attribute__((__stdcall__)) EnumCalendarInfoExW (CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
             WINBOOL __attribute__((__stdcall__)) EnumTimeFormatsA (TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) EnumTimeFormatsW (TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) EnumDateFormatsA (DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) EnumDateFormatsW (DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) EnumDateFormatsExA (DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) EnumDateFormatsExW (DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) IsValidLanguageGroup (LGRPID LanguageGroup, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) GetNLSVersion (NLS_FUNCTION Function, LCID Locale, LPNLSVERSIONINFO lpVersionInformation);
             WINBOOL __attribute__((__stdcall__)) IsNLSDefinedString (NLS_FUNCTION Function, DWORD dwFlags, LPNLSVERSIONINFO lpVersionInformation, LPCWSTR lpString, INT cchStr);
             WINBOOL __attribute__((__stdcall__)) IsValidLocale (LCID Locale, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) SetLocaleInfoA (LCID Locale, LCTYPE LCType, LPCSTR lpLCData);
             WINBOOL __attribute__((__stdcall__)) SetLocaleInfoW (LCID Locale, LCTYPE LCType, LPCWSTR lpLCData);
             int __attribute__((__stdcall__)) GetCalendarInfoA (LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, int cchData, LPDWORD lpValue);
             int __attribute__((__stdcall__)) GetCalendarInfoW (LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue);
             WINBOOL __attribute__((__stdcall__)) SetCalendarInfoA (LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData);
             WINBOOL __attribute__((__stdcall__)) SetCalendarInfoW (LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData);
             int __attribute__((__stdcall__)) GetGeoInfoA (GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, int cchData, LANGID LangId);
             int __attribute__((__stdcall__)) GetGeoInfoW (GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int cchData, LANGID LangId);
             WINBOOL __attribute__((__stdcall__)) EnumSystemGeoID (GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc);
             GEOID __attribute__((__stdcall__)) GetUserGeoID (GEOCLASS GeoClass);
             WINBOOL __attribute__((__stdcall__)) GetCPInfo (UINT CodePage, LPCPINFO lpCPInfo);
             WINBOOL __attribute__((__stdcall__)) GetCPInfoExA (UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx);
             WINBOOL __attribute__((__stdcall__)) GetCPInfoExW (UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx);
             WINBOOL __attribute__((__stdcall__)) SetUserGeoID (GEOID GeoId);
             LCID __attribute__((__stdcall__)) ConvertDefaultLocale (LCID Locale);
             LCID __attribute__((__stdcall__)) GetThreadLocale (void);
             WINBOOL __attribute__((__stdcall__)) SetThreadLocale (LCID Locale);
             LANGID __attribute__((__stdcall__)) GetSystemDefaultUILanguage (void);
             LANGID __attribute__((__stdcall__)) GetUserDefaultUILanguage (void);
             LANGID __attribute__((__stdcall__)) GetSystemDefaultLangID (void);
             LANGID __attribute__((__stdcall__)) GetUserDefaultLangID (void);
             LCID __attribute__((__stdcall__)) GetSystemDefaultLCID (void);
             LCID __attribute__((__stdcall__)) GetUserDefaultLCID (void);
             LANGID __attribute__((__stdcall__)) SetThreadUILanguage (LANGID LangId);
             WINBOOL __attribute__((__stdcall__)) GetStringTypeExA (LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
             WINBOOL __attribute__((__stdcall__)) GetStringTypeA (LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
             int __attribute__((__stdcall__)) FoldStringA (DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
             WINBOOL __attribute__((__stdcall__)) EnumSystemLocalesA (LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) EnumSystemLocalesW (LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) EnumSystemLanguageGroupsA (LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumSystemLanguageGroupsW (LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumLanguageGroupLocalesA (LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumLanguageGroupLocalesW (LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumUILanguagesA (UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumUILanguagesW (UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
             WINBOOL __attribute__((__stdcall__)) EnumSystemCodePagesA (CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags);
             WINBOOL __attribute__((__stdcall__)) EnumSystemCodePagesW (CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags);
}
extern "C" {


  typedef struct _COORD {
    SHORT X;
    SHORT Y;
  } COORD,*PCOORD;

  typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
  } SMALL_RECT,*PSMALL_RECT;

  typedef struct _KEY_EVENT_RECORD {
    WINBOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
      WCHAR UnicodeChar;
      CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
  } KEY_EVENT_RECORD,*PKEY_EVENT_RECORD;
  typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
  } MOUSE_EVENT_RECORD,*PMOUSE_EVENT_RECORD;
  typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
  } WINDOW_BUFFER_SIZE_RECORD,*PWINDOW_BUFFER_SIZE_RECORD;

  typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
  } MENU_EVENT_RECORD,*PMENU_EVENT_RECORD;

  typedef struct _FOCUS_EVENT_RECORD {
    WINBOOL bSetFocus;
  } FOCUS_EVENT_RECORD,*PFOCUS_EVENT_RECORD;

  typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
      KEY_EVENT_RECORD KeyEvent;
      MOUSE_EVENT_RECORD MouseEvent;
      WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
      MENU_EVENT_RECORD MenuEvent;
      FOCUS_EVENT_RECORD FocusEvent;
    } Event;
  } INPUT_RECORD,*PINPUT_RECORD;







  typedef struct _CHAR_INFO {
    union {
      WCHAR UnicodeChar;
      CHAR AsciiChar;
    } Char;
    WORD Attributes;
  } CHAR_INFO,*PCHAR_INFO;
  typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
  } CONSOLE_SCREEN_BUFFER_INFO,*PCONSOLE_SCREEN_BUFFER_INFO;

  typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    WINBOOL bVisible;
  } CONSOLE_CURSOR_INFO,*PCONSOLE_CURSOR_INFO;

  typedef struct _CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
  } CONSOLE_FONT_INFO,*PCONSOLE_FONT_INFO;

  typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
  } CONSOLE_SELECTION_INFO,*PCONSOLE_SELECTION_INFO;







  typedef WINBOOL (__attribute__((__stdcall__)) *PHANDLER_ROUTINE)(DWORD CtrlType);
             WINBOOL __attribute__((__stdcall__)) PeekConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
             WINBOOL __attribute__((__stdcall__)) PeekConsoleInputW(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
             WINBOOL __attribute__((__stdcall__)) ReadConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
             WINBOOL __attribute__((__stdcall__)) ReadConsoleInputW(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
             WINBOOL __attribute__((__stdcall__)) WriteConsoleInputA(HANDLE hConsoleInput,const INPUT_RECORD *lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten);
             WINBOOL __attribute__((__stdcall__)) WriteConsoleInputW(HANDLE hConsoleInput,const INPUT_RECORD *lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten);
             WINBOOL __attribute__((__stdcall__)) ReadConsoleOutputA(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion);
             WINBOOL __attribute__((__stdcall__)) ReadConsoleOutputW(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion);
             WINBOOL __attribute__((__stdcall__)) WriteConsoleOutputA(HANDLE hConsoleOutput,const CHAR_INFO *lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion);
             WINBOOL __attribute__((__stdcall__)) WriteConsoleOutputW(HANDLE hConsoleOutput,const CHAR_INFO *lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion);
             WINBOOL __attribute__((__stdcall__)) ReadConsoleOutputCharacterA(HANDLE hConsoleOutput,LPSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead);
             WINBOOL __attribute__((__stdcall__)) ReadConsoleOutputCharacterW(HANDLE hConsoleOutput,LPWSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead);
             WINBOOL __attribute__((__stdcall__)) ReadConsoleOutputAttribute(HANDLE hConsoleOutput,LPWORD lpAttribute,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfAttrsRead);
             WINBOOL __attribute__((__stdcall__)) WriteConsoleOutputCharacterA(HANDLE hConsoleOutput,LPCSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
             WINBOOL __attribute__((__stdcall__)) WriteConsoleOutputCharacterW(HANDLE hConsoleOutput,LPCWSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
             WINBOOL __attribute__((__stdcall__)) WriteConsoleOutputAttribute(HANDLE hConsoleOutput,const WORD *lpAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten);
             WINBOOL __attribute__((__stdcall__)) FillConsoleOutputCharacterA(HANDLE hConsoleOutput,CHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
             WINBOOL __attribute__((__stdcall__)) FillConsoleOutputCharacterW(HANDLE hConsoleOutput,WCHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
             WINBOOL __attribute__((__stdcall__)) FillConsoleOutputAttribute(HANDLE hConsoleOutput,WORD wAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten);
             WINBOOL __attribute__((__stdcall__)) GetConsoleMode(HANDLE hConsoleHandle,LPDWORD lpMode);
             WINBOOL __attribute__((__stdcall__)) GetNumberOfConsoleInputEvents(HANDLE hConsoleInput,LPDWORD lpNumberOfEvents);
             WINBOOL __attribute__((__stdcall__)) GetConsoleScreenBufferInfo(HANDLE hConsoleOutput,PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo);
             COORD __attribute__((__stdcall__)) GetLargestConsoleWindowSize(HANDLE hConsoleOutput);
             WINBOOL __attribute__((__stdcall__)) GetConsoleCursorInfo(HANDLE hConsoleOutput,PCONSOLE_CURSOR_INFO lpConsoleCursorInfo);
             WINBOOL __attribute__((__stdcall__)) GetCurrentConsoleFont(HANDLE hConsoleOutput,WINBOOL bMaximumWindow,PCONSOLE_FONT_INFO lpConsoleCurrentFont);
             COORD __attribute__((__stdcall__)) GetConsoleFontSize(HANDLE hConsoleOutput,DWORD nFont);
             WINBOOL __attribute__((__stdcall__)) GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo);
             WINBOOL __attribute__((__stdcall__)) GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons);
             WINBOOL __attribute__((__stdcall__)) SetConsoleMode(HANDLE hConsoleHandle,DWORD dwMode);
             WINBOOL __attribute__((__stdcall__)) SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput);
             WINBOOL __attribute__((__stdcall__)) FlushConsoleInputBuffer(HANDLE hConsoleInput);
             WINBOOL __attribute__((__stdcall__)) SetConsoleScreenBufferSize(HANDLE hConsoleOutput,COORD dwSize);
             WINBOOL __attribute__((__stdcall__)) SetConsoleCursorPosition(HANDLE hConsoleOutput,COORD dwCursorPosition);
             WINBOOL __attribute__((__stdcall__)) SetConsoleCursorInfo(HANDLE hConsoleOutput,const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo);
             WINBOOL __attribute__((__stdcall__)) ScrollConsoleScreenBufferA(HANDLE hConsoleOutput,const SMALL_RECT *lpScrollRectangle,const SMALL_RECT *lpClipRectangle,COORD dwDestinationOrigin,const CHAR_INFO *lpFill);
             WINBOOL __attribute__((__stdcall__)) ScrollConsoleScreenBufferW(HANDLE hConsoleOutput,const SMALL_RECT *lpScrollRectangle,const SMALL_RECT *lpClipRectangle,COORD dwDestinationOrigin,const CHAR_INFO *lpFill);
             WINBOOL __attribute__((__stdcall__)) SetConsoleWindowInfo(HANDLE hConsoleOutput,WINBOOL bAbsolute,const SMALL_RECT *lpConsoleWindow);
             WINBOOL __attribute__((__stdcall__)) SetConsoleTextAttribute(HANDLE hConsoleOutput,WORD wAttributes);
             WINBOOL __attribute__((__stdcall__)) SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine,WINBOOL Add);
             WINBOOL __attribute__((__stdcall__)) GenerateConsoleCtrlEvent(DWORD dwCtrlEvent,DWORD dwProcessGroupId);
             WINBOOL __attribute__((__stdcall__)) AllocConsole(void);
             WINBOOL __attribute__((__stdcall__)) FreeConsole(void);
             WINBOOL __attribute__((__stdcall__)) AttachConsole(DWORD dwProcessId);



             DWORD __attribute__((__stdcall__)) GetConsoleTitleA(LPSTR lpConsoleTitle,DWORD nSize);
             DWORD __attribute__((__stdcall__)) GetConsoleTitleW(LPWSTR lpConsoleTitle,DWORD nSize);
             WINBOOL __attribute__((__stdcall__)) SetConsoleTitleA(LPCSTR lpConsoleTitle);
             WINBOOL __attribute__((__stdcall__)) SetConsoleTitleW(LPCWSTR lpConsoleTitle);
             WINBOOL __attribute__((__stdcall__)) ReadConsoleA(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved);
             WINBOOL __attribute__((__stdcall__)) ReadConsoleW(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved);
             WINBOOL __attribute__((__stdcall__)) WriteConsoleA(HANDLE hConsoleOutput,const void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);
             WINBOOL __attribute__((__stdcall__)) WriteConsoleW(HANDLE hConsoleOutput,const void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);



             HANDLE __attribute__((__stdcall__)) CreateConsoleScreenBuffer(DWORD dwDesiredAccess,DWORD dwShareMode,const SECURITY_ATTRIBUTES *lpSecurityAttributes,DWORD dwFlags,LPVOID lpScreenBufferData);
             UINT __attribute__((__stdcall__)) GetConsoleCP(void);
             WINBOOL __attribute__((__stdcall__)) SetConsoleCP(UINT wCodePageID);
             UINT __attribute__((__stdcall__)) GetConsoleOutputCP(void);
             WINBOOL __attribute__((__stdcall__)) SetConsoleOutputCP(UINT wCodePageID);



             WINBOOL __attribute__((__stdcall__)) GetConsoleDisplayMode(LPDWORD lpModeFlags);



             WINBOOL __attribute__((__stdcall__)) SetConsoleDisplayMode(HANDLE hConsoleOutput, DWORD dwFlags, PCOORD lpNewScreenBufferDimensions);

             HWND __attribute__((__stdcall__)) GetConsoleWindow(void);
             DWORD __attribute__((__stdcall__)) GetConsoleProcessList(LPDWORD lpdwProcessList,DWORD dwProcessCount);
             WINBOOL __attribute__((__stdcall__)) AddConsoleAliasA(LPSTR Source,LPSTR Target,LPSTR ExeName);
             WINBOOL __attribute__((__stdcall__)) AddConsoleAliasW(LPWSTR Source,LPWSTR Target,LPWSTR ExeName);
             DWORD __attribute__((__stdcall__)) GetConsoleAliasA(LPSTR Source,LPSTR TargetBuffer,DWORD TargetBufferLength,LPSTR ExeName);
             DWORD __attribute__((__stdcall__)) GetConsoleAliasW(LPWSTR Source,LPWSTR TargetBuffer,DWORD TargetBufferLength,LPWSTR ExeName);
             DWORD __attribute__((__stdcall__)) GetConsoleAliasesLengthA(LPSTR ExeName);
             DWORD __attribute__((__stdcall__)) GetConsoleAliasesLengthW(LPWSTR ExeName);
             DWORD __attribute__((__stdcall__)) GetConsoleAliasExesLengthA(void);
             DWORD __attribute__((__stdcall__)) GetConsoleAliasExesLengthW(void);
             DWORD __attribute__((__stdcall__)) GetConsoleAliasesA(LPSTR AliasBuffer,DWORD AliasBufferLength,LPSTR ExeName);
             DWORD __attribute__((__stdcall__)) GetConsoleAliasesW(LPWSTR AliasBuffer,DWORD AliasBufferLength,LPWSTR ExeName);
             DWORD __attribute__((__stdcall__)) GetConsoleAliasExesA(LPSTR ExeNameBuffer,DWORD ExeNameBufferLength);
             DWORD __attribute__((__stdcall__)) GetConsoleAliasExesW(LPWSTR ExeNameBuffer,DWORD ExeNameBufferLength);





typedef struct _CONSOLE_FONT_INFOEX {
  ULONG cbSize;
  DWORD nFont;
  COORD dwFontSize;
  UINT FontFamily;
  UINT FontWeight;
  WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;

typedef struct _CONSOLE_HISTORY_INFO {
  UINT cbSize;
  UINT HistoryBufferSize;
  UINT NumberOfHistoryBuffers;
  DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;

typedef struct _CONSOLE_READCONSOLE_CONTROL {
  ULONG nLength;
  ULONG nInitialChars;
  ULONG dwCtrlWakeupMask;
  ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
  ULONG cbSize;
  COORD dwSize;
  COORD dwCursorPosition;
  WORD wAttributes;
  SMALL_RECT srWindow;
  COORD dwMaximumWindowSize;
  WORD wPopupAttributes;
  WINBOOL bFullscreenSupported;
  COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

WINBOOL __attribute__((__stdcall__)) GetConsoleHistoryInfo(
  PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
);
           WINBOOL __attribute__((__stdcall__)) GetConsoleScreenBufferInfoEx(
  HANDLE hConsoleOutput,
  PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
);

           WINBOOL __attribute__((__stdcall__)) GetCurrentConsoleFontEx(
  HANDLE hConsoleOutput,
  WINBOOL bMaximumWindow,
  PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
);

           WINBOOL __attribute__((__stdcall__)) SetConsoleHistoryInfo(
  PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
);

           WINBOOL __attribute__((__stdcall__)) SetConsoleScreenBufferInfoEx(
  HANDLE hConsoleOutput,
  PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
);

           WINBOOL __attribute__((__stdcall__)) SetCurrentConsoleFontEx(
  HANDLE hConsoleOutput,
  WINBOOL bMaximumWindow,
  PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
);




}
extern "C" {
  typedef struct tagVS_FIXEDFILEINFO
  {
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
  } VS_FIXEDFILEINFO;
  DWORD __attribute__((__stdcall__)) VerFindFileA(DWORD uFlags,LPSTR szFileName,LPSTR szWinDir,LPSTR szAppDir,LPSTR szCurDir,PUINT lpuCurDirLen,LPSTR szDestDir,PUINT lpuDestDirLen);
  DWORD __attribute__((__stdcall__)) VerFindFileW(DWORD uFlags,LPWSTR szFileName,LPWSTR szWinDir,LPWSTR szAppDir,LPWSTR szCurDir,PUINT lpuCurDirLen,LPWSTR szDestDir,PUINT lpuDestDirLen);
  DWORD __attribute__((__stdcall__)) VerInstallFileA(DWORD uFlags,LPSTR szSrcFileName,LPSTR szDestFileName,LPSTR szSrcDir,LPSTR szDestDir,LPSTR szCurDir,LPSTR szTmpFile,PUINT lpuTmpFileLen);
  DWORD __attribute__((__stdcall__)) VerInstallFileW(DWORD uFlags,LPWSTR szSrcFileName,LPWSTR szDestFileName,LPWSTR szSrcDir,LPWSTR szDestDir,LPWSTR szCurDir,LPWSTR szTmpFile,PUINT lpuTmpFileLen);
  DWORD __attribute__((__stdcall__)) GetFileVersionInfoSizeA(LPCSTR lptstrFilename,LPDWORD lpdwHandle);
  DWORD __attribute__((__stdcall__)) GetFileVersionInfoSizeW(LPCWSTR lptstrFilename,LPDWORD lpdwHandle);
  WINBOOL __attribute__((__stdcall__)) GetFileVersionInfoA(LPCSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData);
  WINBOOL __attribute__((__stdcall__)) GetFileVersionInfoW(LPCWSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData);
  DWORD __attribute__((__stdcall__)) VerLanguageNameA(DWORD wLang,LPSTR szLang,DWORD nSize);
  DWORD __attribute__((__stdcall__)) VerLanguageNameW(DWORD wLang,LPWSTR szLang,DWORD nSize);
  WINBOOL __attribute__((__stdcall__)) VerQueryValueA(const LPVOID pBlock,LPCSTR lpSubBlock,LPVOID *lplpBuffer,PUINT puLen);
  WINBOOL __attribute__((__stdcall__)) VerQueryValueW(const LPVOID pBlock,LPCWSTR lpSubBlock,LPVOID *lplpBuffer,PUINT puLen);



}
extern "C" {
  typedef ACCESS_MASK REGSAM;
  typedef LONG LSTATUS;
  struct val_context {
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
  };

  typedef struct val_context *PVALCONTEXT;

  typedef struct pvalueA {
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
  }PVALUEA,*PPVALUEA;

  typedef struct pvalueW {
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
  }PVALUEW,*PPVALUEW;

  typedef PVALUEW PVALUE;
  typedef PPVALUEW PPVALUE;

  typedef DWORD __attribute__((__cdecl__)) QUERYHANDLER(LPVOID keycontext,PVALCONTEXT val_list,DWORD num_vals,LPVOID outputbuffer,DWORD *total_outlen,DWORD input_blen);

  typedef QUERYHANDLER *PQUERYHANDLER;

  typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
  } REG_PROVIDER;

  typedef struct provider_info *PPROVIDER;

  typedef struct value_entA {
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
  } VALENTA,*PVALENTA;

  typedef struct value_entW {
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
  } VALENTW,*PVALENTW;

  typedef VALENTW VALENT;
  typedef PVALENTW PVALENT;
            LONG __attribute__((__stdcall__)) RegCloseKey(HKEY hKey);
            LONG __attribute__((__stdcall__)) RegOverridePredefKey(HKEY hKey,HKEY hNewHKey);
            LONG __attribute__((__stdcall__)) RegOpenUserClassesRoot(HANDLE hToken,DWORD dwOptions,REGSAM samDesired,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegOpenCurrentUser(REGSAM samDesired,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegDisablePredefinedCache();
            LONG __attribute__((__stdcall__)) RegConnectRegistryA(LPCSTR lpMachineName,HKEY hKey,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegConnectRegistryW(LPCWSTR lpMachineName,HKEY hKey,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegConnectRegistryExA(LPCSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegConnectRegistryExW(LPCWSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegCreateKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegCreateKeyW(HKEY hKey,LPCWSTR lpSubKey,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegCreateKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
            LONG __attribute__((__stdcall__)) RegCreateKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD Reserved,LPWSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
            LONG __attribute__((__stdcall__)) RegDeleteKeyA(HKEY hKey,LPCSTR lpSubKey);
            LONG __attribute__((__stdcall__)) RegDeleteKeyW(HKEY hKey,LPCWSTR lpSubKey);
            LONG __attribute__((__stdcall__)) RegDeleteKeyExA(HKEY hKey,LPCSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
            LONG __attribute__((__stdcall__)) RegDeleteKeyExW(HKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
            LONG __attribute__((__stdcall__)) RegDisableReflectionKey(HKEY hBase);
            LONG __attribute__((__stdcall__)) RegEnableReflectionKey(HKEY hBase);
            LONG __attribute__((__stdcall__)) RegQueryReflectionKey(HKEY hBase,WINBOOL *bIsReflectionDisabled);
            LONG __attribute__((__stdcall__)) RegDeleteValueA(HKEY hKey,LPCSTR lpValueName);
            LONG __attribute__((__stdcall__)) RegDeleteValueW(HKEY hKey,LPCWSTR lpValueName);
            LONG __attribute__((__stdcall__)) RegEnumKeyA(HKEY hKey,DWORD dwIndex,LPSTR lpName,DWORD cchName);
            LONG __attribute__((__stdcall__)) RegEnumKeyW(HKEY hKey,DWORD dwIndex,LPWSTR lpName,DWORD cchName);
            LONG __attribute__((__stdcall__)) RegEnumKeyExA(HKEY hKey,DWORD dwIndex,LPSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime);
            LONG __attribute__((__stdcall__)) RegEnumKeyExW(HKEY hKey,DWORD dwIndex,LPWSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPWSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime);
            LONG __attribute__((__stdcall__)) RegEnumValueA(HKEY hKey,DWORD dwIndex,LPSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
            LONG __attribute__((__stdcall__)) RegEnumValueW(HKEY hKey,DWORD dwIndex,LPWSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
            LONG __attribute__((__stdcall__)) RegFlushKey(HKEY hKey);
            LONG __attribute__((__stdcall__)) RegGetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,LPDWORD lpcbSecurityDescriptor);
            LONG __attribute__((__stdcall__)) RegLoadKeyA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpFile);
            LONG __attribute__((__stdcall__)) RegLoadKeyW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpFile);
            LONG __attribute__((__stdcall__)) RegNotifyChangeKeyValue(HKEY hKey,WINBOOL bWatchSubtree,DWORD dwNotifyFilter,HANDLE hEvent,WINBOOL fAsynchronous);
            LONG __attribute__((__stdcall__)) RegOpenKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegOpenKeyW(HKEY hKey,LPCWSTR lpSubKey,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegOpenKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegOpenKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
            LONG __attribute__((__stdcall__)) RegQueryInfoKeyA(HKEY hKey,LPSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
            LONG __attribute__((__stdcall__)) RegQueryInfoKeyW(HKEY hKey,LPWSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
            LONG __attribute__((__stdcall__)) RegQueryValueA(HKEY hKey,LPCSTR lpSubKey,LPSTR lpData,PLONG lpcbData);
            LONG __attribute__((__stdcall__)) RegQueryValueW(HKEY hKey,LPCWSTR lpSubKey,LPWSTR lpData,PLONG lpcbData);
            LONG __attribute__((__stdcall__)) RegQueryMultipleValuesA(HKEY hKey,PVALENTA val_list,DWORD num_vals,LPSTR lpValueBuf,LPDWORD ldwTotsize);
            LONG __attribute__((__stdcall__)) RegQueryMultipleValuesW(HKEY hKey,PVALENTW val_list,DWORD num_vals,LPWSTR lpValueBuf,LPDWORD ldwTotsize);
            LONG __attribute__((__stdcall__)) RegQueryValueExA(HKEY hKey,LPCSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
            LONG __attribute__((__stdcall__)) RegQueryValueExW(HKEY hKey,LPCWSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
            LONG __attribute__((__stdcall__)) RegReplaceKeyA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpNewFile,LPCSTR lpOldFile);
            LONG __attribute__((__stdcall__)) RegReplaceKeyW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpNewFile,LPCWSTR lpOldFile);
            LONG __attribute__((__stdcall__)) RegRestoreKeyA(HKEY hKey,LPCSTR lpFile,DWORD dwFlags);
            LONG __attribute__((__stdcall__)) RegRestoreKeyW(HKEY hKey,LPCWSTR lpFile,DWORD dwFlags);
            LONG __attribute__((__stdcall__)) RegSaveKeyA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
            LONG __attribute__((__stdcall__)) RegSaveKeyW(HKEY hKey,LPCWSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
            LONG __attribute__((__stdcall__)) RegSetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor);
            LONG __attribute__((__stdcall__)) RegSetValueA(HKEY hKey,LPCSTR lpSubKey,DWORD dwType,LPCSTR lpData,DWORD cbData);
            LONG __attribute__((__stdcall__)) RegSetValueW(HKEY hKey,LPCWSTR lpSubKey,DWORD dwType,LPCWSTR lpData,DWORD cbData);
            LONG __attribute__((__stdcall__)) RegSetValueExA(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData);
            LONG __attribute__((__stdcall__)) RegSetValueExW(HKEY hKey,LPCWSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData);
            LONG __attribute__((__stdcall__)) RegUnLoadKeyA(HKEY hKey,LPCSTR lpSubKey);
            LONG __attribute__((__stdcall__)) RegUnLoadKeyW(HKEY hKey,LPCWSTR lpSubKey);
            LONG __attribute__((__stdcall__)) RegGetValueA(HKEY hkey,LPCSTR lpSubKey,LPCSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData);
            LONG __attribute__((__stdcall__)) RegGetValueW(HKEY hkey,LPCWSTR lpSubKey,LPCWSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData);
            WINBOOL __attribute__((__stdcall__)) InitiateSystemShutdownA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown);
            WINBOOL __attribute__((__stdcall__)) InitiateSystemShutdownW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown);
            WINBOOL __attribute__((__stdcall__)) AbortSystemShutdownA(LPSTR lpMachineName);
            WINBOOL __attribute__((__stdcall__)) AbortSystemShutdownW(LPWSTR lpMachineName);
            WINBOOL __attribute__((__stdcall__)) InitiateSystemShutdownExA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason);
            WINBOOL __attribute__((__stdcall__)) InitiateSystemShutdownExW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason);
            LONG __attribute__((__stdcall__)) RegSaveKeyExA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
            LONG __attribute__((__stdcall__)) RegSaveKeyExW(HKEY hKey,LPCWSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
            LONG __attribute__((__stdcall__)) Wow64Win32ApiEntry (DWORD dwFuncNumber,DWORD dwFlag,DWORD dwRes);
}
extern "C" {
  typedef struct _NETRESOURCEA {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment;
    LPSTR lpProvider;
  } NETRESOURCEA,*LPNETRESOURCEA;
  typedef struct _NETRESOURCEW {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment;
    LPWSTR lpProvider;
  } NETRESOURCEW,*LPNETRESOURCEW;

  typedef NETRESOURCEW NETRESOURCE;
  typedef LPNETRESOURCEW LPNETRESOURCE;
  DWORD __attribute__((__stdcall__)) WNetAddConnectionA(LPCSTR lpRemoteName,LPCSTR lpPassword,LPCSTR lpLocalName);
  DWORD __attribute__((__stdcall__)) WNetAddConnectionW(LPCWSTR lpRemoteName,LPCWSTR lpPassword,LPCWSTR lpLocalName);
  DWORD __attribute__((__stdcall__)) WNetAddConnection2A(LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags);
  DWORD __attribute__((__stdcall__)) WNetAddConnection2W(LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserName,DWORD dwFlags);
  DWORD __attribute__((__stdcall__)) WNetAddConnection3A(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags);
  DWORD __attribute__((__stdcall__)) WNetAddConnection3W(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserName,DWORD dwFlags);
  DWORD __attribute__((__stdcall__)) WNetCancelConnectionA(LPCSTR lpName,WINBOOL fForce);
  DWORD __attribute__((__stdcall__)) WNetCancelConnectionW(LPCWSTR lpName,WINBOOL fForce);
  DWORD __attribute__((__stdcall__)) WNetCancelConnection2A(LPCSTR lpName,DWORD dwFlags,WINBOOL fForce);
  DWORD __attribute__((__stdcall__)) WNetCancelConnection2W(LPCWSTR lpName,DWORD dwFlags,WINBOOL fForce);
  DWORD __attribute__((__stdcall__)) WNetGetConnectionA(LPCSTR lpLocalName,LPSTR lpRemoteName,LPDWORD lpnLength);
  DWORD __attribute__((__stdcall__)) WNetGetConnectionW(LPCWSTR lpLocalName,LPWSTR lpRemoteName,LPDWORD lpnLength);
  DWORD __attribute__((__stdcall__)) WNetRestoreConnectionA(HWND hwndParent,LPCSTR lpDevice);
  DWORD __attribute__((__stdcall__)) WNetUseConnectionA(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserID,DWORD dwFlags,LPSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult);
  DWORD __attribute__((__stdcall__)) WNetUseConnectionW(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserID,DWORD dwFlags,LPWSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult);
  DWORD __attribute__((__stdcall__)) WNetConnectionDialog(HWND hwnd,DWORD dwType);
  DWORD __attribute__((__stdcall__)) WNetDisconnectDialog(HWND hwnd,DWORD dwType);



  DWORD __attribute__((__stdcall__)) WNetRestoreConnectionW(HWND hwndParent,LPCWSTR lpDevice);


  typedef struct _CONNECTDLGSTRUCTA {
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
  } CONNECTDLGSTRUCTA,*LPCONNECTDLGSTRUCTA;

  typedef struct _CONNECTDLGSTRUCTW {
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
  } CONNECTDLGSTRUCTW,*LPCONNECTDLGSTRUCTW;

  typedef CONNECTDLGSTRUCTW CONNECTDLGSTRUCT;
  typedef LPCONNECTDLGSTRUCTW LPCONNECTDLGSTRUCT;
  DWORD __attribute__((__stdcall__)) WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA lpConnDlgStruct);
  DWORD __attribute__((__stdcall__)) WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW lpConnDlgStruct);

  typedef struct _DISCDLGSTRUCTA {
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
  } DISCDLGSTRUCTA,*LPDISCDLGSTRUCTA;

  typedef struct _DISCDLGSTRUCTW {
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
  } DISCDLGSTRUCTW,*LPDISCDLGSTRUCTW;

  typedef DISCDLGSTRUCTW DISCDLGSTRUCT;
  typedef LPDISCDLGSTRUCTW LPDISCDLGSTRUCT;
  DWORD __attribute__((__stdcall__)) WNetDisconnectDialog1A(LPDISCDLGSTRUCTA lpConnDlgStruct);
  DWORD __attribute__((__stdcall__)) WNetDisconnectDialog1W(LPDISCDLGSTRUCTW lpConnDlgStruct);
  DWORD __attribute__((__stdcall__)) WNetOpenEnumA(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEA lpNetResource,LPHANDLE lphEnum);
  DWORD __attribute__((__stdcall__)) WNetOpenEnumW(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEW lpNetResource,LPHANDLE lphEnum);
  DWORD __attribute__((__stdcall__)) WNetEnumResourceA(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD __attribute__((__stdcall__)) WNetEnumResourceW(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD __attribute__((__stdcall__)) WNetCloseEnum(HANDLE hEnum);
  DWORD __attribute__((__stdcall__)) WNetGetResourceParentA(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer);
  DWORD __attribute__((__stdcall__)) WNetGetResourceParentW(LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer);
  DWORD __attribute__((__stdcall__)) WNetGetResourceInformationA(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPSTR *lplpSystem);
  DWORD __attribute__((__stdcall__)) WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPWSTR *lplpSystem);




  typedef struct _UNIVERSAL_NAME_INFOA {
    LPSTR lpUniversalName;
  } UNIVERSAL_NAME_INFOA,*LPUNIVERSAL_NAME_INFOA;

  typedef struct _UNIVERSAL_NAME_INFOW {
    LPWSTR lpUniversalName;
  } UNIVERSAL_NAME_INFOW,*LPUNIVERSAL_NAME_INFOW;

  typedef UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFO;
  typedef LPUNIVERSAL_NAME_INFOW LPUNIVERSAL_NAME_INFO;

  typedef struct _REMOTE_NAME_INFOA {
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
  } REMOTE_NAME_INFOA,*LPREMOTE_NAME_INFOA;

  typedef struct _REMOTE_NAME_INFOW {
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
  } REMOTE_NAME_INFOW,*LPREMOTE_NAME_INFOW;

  typedef REMOTE_NAME_INFOW REMOTE_NAME_INFO;
  typedef LPREMOTE_NAME_INFOW LPREMOTE_NAME_INFO;





  DWORD __attribute__((__stdcall__)) WNetGetUniversalNameA(LPCSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD __attribute__((__stdcall__)) WNetGetUniversalNameW(LPCWSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpBufferSize);
  DWORD __attribute__((__stdcall__)) WNetGetUserA(LPCSTR lpName,LPSTR lpUserName,LPDWORD lpnLength);
  DWORD __attribute__((__stdcall__)) WNetGetUserW(LPCWSTR lpName,LPWSTR lpUserName,LPDWORD lpnLength);






  DWORD __attribute__((__stdcall__)) WNetGetProviderNameA(DWORD dwNetType,LPSTR lpProviderName,LPDWORD lpBufferSize);
  DWORD __attribute__((__stdcall__)) WNetGetProviderNameW(DWORD dwNetType,LPWSTR lpProviderName,LPDWORD lpBufferSize);

  typedef struct _NETINFOSTRUCT {
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
  } NETINFOSTRUCT,*LPNETINFOSTRUCT;







  DWORD __attribute__((__stdcall__)) WNetGetNetworkInformationA(LPCSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct);
  DWORD __attribute__((__stdcall__)) WNetGetNetworkInformationW(LPCWSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct);

  typedef UINT (__attribute__((__stdcall__)) *PFNGETPROFILEPATHA) (LPCSTR pszUsername,LPSTR pszBuffer,UINT cbBuffer);
  typedef UINT (__attribute__((__stdcall__)) *PFNGETPROFILEPATHW) (LPCWSTR pszUsername,LPWSTR pszBuffer,UINT cbBuffer);



  typedef UINT (__attribute__((__stdcall__)) *PFNRECONCILEPROFILEA) (LPCSTR pszCentralFile,LPCSTR pszLocalFile,DWORD dwFlags);
  typedef UINT (__attribute__((__stdcall__)) *PFNRECONCILEPROFILEW) (LPCWSTR pszCentralFile,LPCWSTR pszLocalFile,DWORD dwFlags);






  typedef WINBOOL (__attribute__((__stdcall__)) *PFNPROCESSPOLICIESA) (HWND hwnd,LPCSTR pszPath,LPCSTR pszUsername,LPCSTR pszComputerName,DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFNPROCESSPOLICIESW) (HWND hwnd,LPCWSTR pszPath,LPCWSTR pszUsername,LPCWSTR pszComputerName,DWORD dwFlags);







  DWORD __attribute__((__stdcall__)) WNetGetLastErrorA(LPDWORD lpError,LPSTR lpErrorBuf,DWORD nErrorBufSize,LPSTR lpNameBuf,DWORD nNameBufSize);
  DWORD __attribute__((__stdcall__)) WNetGetLastErrorW(LPDWORD lpError,LPWSTR lpErrorBuf,DWORD nErrorBufSize,LPWSTR lpNameBuf,DWORD nNameBufSize);
  typedef struct _NETCONNECTINFOSTRUCT {
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
  } NETCONNECTINFOSTRUCT,*LPNETCONNECTINFOSTRUCT;
  DWORD __attribute__((__stdcall__)) MultinetGetConnectionPerformanceA(LPNETRESOURCEA lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);
  DWORD __attribute__((__stdcall__)) MultinetGetConnectionPerformanceW(LPNETRESOURCEW lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);


}
extern "C" {
  typedef struct {
    unsigned short bAppReturnCode:8,reserved:6,fBusy:1,fAck:1;
  } DDEACK;

  typedef struct {
    unsigned short reserved:14,fDeferUpd:1,fAckReq:1;
    short cfFormat;
  } DDEADVISE;

  typedef struct {
    unsigned short unused:12,fResponse:1,fRelease:1,reserved:1,fAckReq:1;
    short cfFormat;
    BYTE Value[1];
  } DDEDATA;

  typedef struct {
    unsigned short unused:13,fRelease:1,fReserved:2;
    short cfFormat;
    BYTE Value[1];

  } DDEPOKE;

  typedef struct {
    unsigned short unused:13,fRelease:1,fDeferUpd:1,fAckReq:1;
    short cfFormat;
  } DDELN;

  typedef struct {
    unsigned short unused:12,fAck:1,fRelease:1,fReserved:1,fAckReq:1;
    short cfFormat;
    BYTE rgb[1];
  } DDEUP;

  WINBOOL __attribute__((__stdcall__)) DdeSetQualityOfService(HWND hwndClient,const SECURITY_QUALITY_OF_SERVICE *pqosNew,PSECURITY_QUALITY_OF_SERVICE pqosPrev);
  WINBOOL __attribute__((__stdcall__)) ImpersonateDdeClientWindow(HWND hWndClient,HWND hWndServer);
  LPARAM __attribute__((__stdcall__)) PackDDElParam(UINT msg,UINT_PTR uiLo,UINT_PTR uiHi);
  WINBOOL __attribute__((__stdcall__)) UnpackDDElParam(UINT msg,LPARAM lParam,PUINT_PTR puiLo,PUINT_PTR puiHi);
  WINBOOL __attribute__((__stdcall__)) FreeDDElParam(UINT msg,LPARAM lParam);
  LPARAM __attribute__((__stdcall__)) ReuseDDElParam(LPARAM lParam,UINT msgIn,UINT msgOut,UINT_PTR uiLo,UINT_PTR uiHi);


}
extern "C" {


  struct HCONVLIST__ { int unused; }; typedef struct HCONVLIST__ *HCONVLIST;
  struct HCONV__ { int unused; }; typedef struct HCONV__ *HCONV;
  struct HSZ__ { int unused; }; typedef struct HSZ__ *HSZ;
  struct HDDEDATA__ { int unused; }; typedef struct HDDEDATA__ *HDDEDATA;


  typedef struct tagHSZPAIR {
    HSZ hszSvc;
    HSZ hszTopic;
  } HSZPAIR, *PHSZPAIR;

  typedef struct tagCONVCONTEXT {
    UINT cb;
    UINT wFlags;
    UINT wCountryID;
    int iCodePage;
    DWORD dwLangID;
    DWORD dwSecurity;
    SECURITY_QUALITY_OF_SERVICE qos;
  } CONVCONTEXT, *PCONVCONTEXT;

  typedef struct tagCONVINFO {
    DWORD cb;
    DWORD_PTR hUser;
    HCONV hConvPartner;
    HSZ hszSvcPartner;
    HSZ hszServiceReq;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    UINT wType;
    UINT wStatus;
    UINT wConvst;
    UINT wLastError;
    HCONVLIST hConvList;
    CONVCONTEXT ConvCtxt;
    HWND hwnd;
    HWND hwndPartner;
  } CONVINFO, *PCONVINFO;
  typedef HDDEDATA __attribute__((__stdcall__)) FNCALLBACK(UINT wType,UINT wFmt,HCONV hConv,HSZ hsz1,HSZ hsz2,HDDEDATA hData,ULONG_PTR dwData1,ULONG_PTR dwData2);
  typedef HDDEDATA (__attribute__((__stdcall__)) *PFNCALLBACK)(UINT wType,UINT wFmt,HCONV hConv,HSZ hsz1,HSZ hsz2,HDDEDATA hData,ULONG_PTR dwData1,ULONG_PTR dwData2);



  UINT __attribute__((__stdcall__)) DdeInitializeA(LPDWORD pidInst,PFNCALLBACK pfnCallback,DWORD afCmd,DWORD ulRes);
  UINT __attribute__((__stdcall__)) DdeInitializeW(LPDWORD pidInst,PFNCALLBACK pfnCallback,DWORD afCmd,DWORD ulRes);
  WINBOOL __attribute__((__stdcall__)) DdeUninitialize(DWORD idInst);
  HCONVLIST __attribute__((__stdcall__)) DdeConnectList(DWORD idInst,HSZ hszService,HSZ hszTopic,HCONVLIST hConvList,PCONVCONTEXT pCC);
  HCONV __attribute__((__stdcall__)) DdeQueryNextServer(HCONVLIST hConvList,HCONV hConvPrev);
  WINBOOL __attribute__((__stdcall__)) DdeDisconnectList(HCONVLIST hConvList);
  HCONV __attribute__((__stdcall__)) DdeConnect(DWORD idInst,HSZ hszService,HSZ hszTopic,PCONVCONTEXT pCC);
  WINBOOL __attribute__((__stdcall__)) DdeDisconnect(HCONV hConv);
  HCONV __attribute__((__stdcall__)) DdeReconnect(HCONV hConv);
  UINT __attribute__((__stdcall__)) DdeQueryConvInfo(HCONV hConv,DWORD idTransaction,PCONVINFO pConvInfo);
  WINBOOL __attribute__((__stdcall__)) DdeSetUserHandle(HCONV hConv,DWORD id,DWORD_PTR hUser);
  WINBOOL __attribute__((__stdcall__)) DdeAbandonTransaction(DWORD idInst,HCONV hConv,DWORD idTransaction);
  WINBOOL __attribute__((__stdcall__)) DdePostAdvise(DWORD idInst,HSZ hszTopic,HSZ hszItem);
  WINBOOL __attribute__((__stdcall__)) DdeEnableCallback(DWORD idInst,HCONV hConv,UINT wCmd);
  WINBOOL __attribute__((__stdcall__)) DdeImpersonateClient(HCONV hConv);
  HDDEDATA __attribute__((__stdcall__)) DdeNameService(DWORD idInst,HSZ hsz1,HSZ hsz2,UINT afCmd);
  HDDEDATA __attribute__((__stdcall__)) DdeClientTransaction(LPBYTE pData,DWORD cbData,HCONV hConv,HSZ hszItem,UINT wFmt,UINT wType,DWORD dwTimeout,LPDWORD pdwResult);
  HDDEDATA __attribute__((__stdcall__)) DdeCreateDataHandle(DWORD idInst,LPBYTE pSrc,DWORD cb,DWORD cbOff,HSZ hszItem,UINT wFmt,UINT afCmd);
  HDDEDATA __attribute__((__stdcall__)) DdeAddData(HDDEDATA hData,LPBYTE pSrc,DWORD cb,DWORD cbOff);
  DWORD __attribute__((__stdcall__)) DdeGetData(HDDEDATA hData,LPBYTE pDst,DWORD cbMax,DWORD cbOff);
  LPBYTE __attribute__((__stdcall__)) DdeAccessData(HDDEDATA hData,LPDWORD pcbDataSize);
  WINBOOL __attribute__((__stdcall__)) DdeUnaccessData(HDDEDATA hData);
  WINBOOL __attribute__((__stdcall__)) DdeFreeDataHandle(HDDEDATA hData);



  UINT __attribute__((__stdcall__)) DdeGetLastError(DWORD idInst);
  HSZ __attribute__((__stdcall__)) DdeCreateStringHandleA(DWORD idInst,LPCSTR psz,int iCodePage);
  HSZ __attribute__((__stdcall__)) DdeCreateStringHandleW(DWORD idInst,LPCWSTR psz,int iCodePage);
  DWORD __attribute__((__stdcall__)) DdeQueryStringA(DWORD idInst,HSZ hsz,LPSTR psz,DWORD cchMax,int iCodePage);
  DWORD __attribute__((__stdcall__)) DdeQueryStringW(DWORD idInst,HSZ hsz,LPWSTR psz,DWORD cchMax,int iCodePage);
  WINBOOL __attribute__((__stdcall__)) DdeFreeStringHandle(DWORD idInst,HSZ hsz);
  WINBOOL __attribute__((__stdcall__)) DdeKeepStringHandle(DWORD idInst,HSZ hsz);
  int __attribute__((__stdcall__)) DdeCmpStringHandles(HSZ hsz1,HSZ hsz2);





  typedef struct tagDDEML_MSG_HOOK_DATA {
    UINT_PTR uiLo;
    UINT_PTR uiHi;
    DWORD cbData;
    DWORD Data[8];
  } DDEML_MSG_HOOK_DATA,*PDDEML_MSG_HOOK_DATA;

  typedef struct tagMONMSGSTRUCT {
    UINT cb;
    HWND hwndTo;
    DWORD dwTime;
    HANDLE hTask;
    UINT wMsg;
    WPARAM wParam;
    LPARAM lParam;
    DDEML_MSG_HOOK_DATA dmhd;
  } MONMSGSTRUCT,*PMONMSGSTRUCT;

  typedef struct tagMONCBSTRUCT {
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    DWORD dwRet;
    UINT wType;
    UINT wFmt;
    HCONV hConv;
    HSZ hsz1;
    HSZ hsz2;
    HDDEDATA hData;
    ULONG_PTR dwData1;
    ULONG_PTR dwData2;
    CONVCONTEXT cc;
    DWORD cbData;
    DWORD Data[8];
  } MONCBSTRUCT,*PMONCBSTRUCT;

  typedef struct tagMONHSZSTRUCTA {
    UINT cb;
    WINBOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    CHAR str[1];
  } MONHSZSTRUCTA,*PMONHSZSTRUCTA;

  typedef struct tagMONHSZSTRUCTW {
    UINT cb;
    WINBOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    WCHAR str[1];
  } MONHSZSTRUCTW,*PMONHSZSTRUCTW;

  typedef MONHSZSTRUCTW MONHSZSTRUCT;
  typedef PMONHSZSTRUCTW PMONHSZSTRUCT;






  typedef struct tagMONERRSTRUCT {
    UINT cb;
    UINT wLastError;
    DWORD dwTime;
    HANDLE hTask;
  } MONERRSTRUCT,*PMONERRSTRUCT;

  typedef struct tagMONLINKSTRUCT {
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    WINBOOL fEstablished;
    WINBOOL fNoData;
    HSZ hszSvc;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    WINBOOL fServer;
    HCONV hConvServer;
    HCONV hConvClient;
  } MONLINKSTRUCT,*PMONLINKSTRUCT;

  typedef struct tagMONCONVSTRUCT {
    UINT cb;
    WINBOOL fConnect;
    DWORD dwTime;
    HANDLE hTask;
    HSZ hszSvc;
    HSZ hszTopic;
    HCONV hConvClient;
    HCONV hConvServer;
  } MONCONVSTRUCT,*PMONCONVSTRUCT;
}
typedef struct tagCRGB {
  BYTE bRed;
  BYTE bGreen;
  BYTE bBlue;
  BYTE bExtra;
} CRGB;
extern "C" {
  INT __attribute__((__stdcall__)) LZStart(void);
  void __attribute__((__stdcall__)) LZDone(void);
  LONG __attribute__((__stdcall__)) CopyLZFile(INT,INT);
  LONG __attribute__((__stdcall__)) LZCopy(INT,INT);
  INT __attribute__((__stdcall__)) LZInit(INT);
  INT __attribute__((__stdcall__)) GetExpandedNameA(LPSTR,LPSTR);
  INT __attribute__((__stdcall__)) GetExpandedNameW(LPWSTR,LPWSTR);
  INT __attribute__((__stdcall__)) LZOpenFileA(LPSTR,LPOFSTRUCT,WORD);
  INT __attribute__((__stdcall__)) LZOpenFileW(LPWSTR,LPOFSTRUCT,WORD);
  LONG __attribute__((__stdcall__)) LZSeek(INT,LONG,INT);
  INT __attribute__((__stdcall__)) LZRead(INT,LPSTR,INT);
  void __attribute__((__stdcall__)) LZClose(INT);


}
#pragma pack(push,1)



extern "C" {
  typedef UINT MMVERSION;
  typedef UINT MMRESULT;





  typedef UINT *LPUINT;


  typedef struct mmtime_tag {
    UINT wType;
    union {
      DWORD ms;
      DWORD sample;
      DWORD cb;
      DWORD ticks;
      struct {
 BYTE hour;
 BYTE min;
 BYTE sec;
 BYTE frame;
 BYTE fps;
 BYTE dummy;
 BYTE pad[2];
      } smpte;
      struct {
 DWORD songptrpos;
      } midi;
    } u;
  } MMTIME,*PMMTIME, *NPMMTIME,*LPMMTIME;
  struct HDRVR__ { int unused; }; typedef struct HDRVR__ *HDRVR;



  typedef struct DRVCONFIGINFOEX {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
    DWORD dnDevNode;
  } DRVCONFIGINFOEX,*PDRVCONFIGINFOEX, *NPDRVCONFIGINFOEX,*LPDRVCONFIGINFOEX;
  typedef struct tagDRVCONFIGINFO {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
  } DRVCONFIGINFO,*PDRVCONFIGINFO, *NPDRVCONFIGINFO,*LPDRVCONFIGINFO;





  typedef LRESULT (__attribute__((__stdcall__)) *DRIVERPROC)(DWORD_PTR,HDRVR,UINT,LPARAM,LPARAM);

           LRESULT __attribute__((__stdcall__)) CloseDriver(HDRVR hDriver,LPARAM lParam1,LPARAM lParam2);
           HDRVR __attribute__((__stdcall__)) OpenDriver(LPCWSTR szDriverName,LPCWSTR szSectionName,LPARAM lParam2);
           LRESULT __attribute__((__stdcall__)) SendDriverMessage(HDRVR hDriver,UINT message,LPARAM lParam1,LPARAM lParam2);
           HMODULE __attribute__((__stdcall__)) DrvGetModuleHandle(HDRVR hDriver);
           HMODULE __attribute__((__stdcall__)) GetDriverModuleHandle(HDRVR hDriver);
           LRESULT __attribute__((__stdcall__)) DefDriverProc(DWORD_PTR dwDriverIdentifier,HDRVR hdrvr,UINT uMsg,LPARAM lParam1,LPARAM lParam2);
  typedef void (__attribute__((__stdcall__)) DRVCALLBACK)(HDRVR hdrvr,UINT uMsg,DWORD_PTR dwUser,DWORD_PTR dw1,DWORD_PTR dw2);

  typedef DRVCALLBACK *LPDRVCALLBACK;
  typedef DRVCALLBACK *PDRVCALLBACK;







           WINBOOL __attribute__((__stdcall__)) sndPlaySoundA(LPCSTR pszSound,UINT fuSound);
           WINBOOL __attribute__((__stdcall__)) sndPlaySoundW(LPCWSTR pszSound,UINT fuSound);
           WINBOOL __attribute__((__stdcall__)) PlaySoundA(LPCSTR pszSound,HMODULE hmod,DWORD fdwSound);
           WINBOOL __attribute__((__stdcall__)) PlaySoundW(LPCWSTR pszSound,HMODULE hmod,DWORD fdwSound);
  struct HWAVE__ { int unused; }; typedef struct HWAVE__ *HWAVE;
  struct HWAVEIN__ { int unused; }; typedef struct HWAVEIN__ *HWAVEIN;
  struct HWAVEOUT__ { int unused; }; typedef struct HWAVEOUT__ *HWAVEOUT;
  typedef HWAVEIN *LPHWAVEIN;
  typedef HWAVEOUT *LPHWAVEOUT;
  typedef DRVCALLBACK WAVECALLBACK;
  typedef WAVECALLBACK *LPWAVECALLBACK;
  typedef struct wavehdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    DWORD dwLoops;
    struct wavehdr_tag *lpNext;
    DWORD_PTR reserved;
  } WAVEHDR,*PWAVEHDR, *NPWAVEHDR,*LPWAVEHDR;







  typedef struct tagWAVEOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
  } WAVEOUTCAPSA,*PWAVEOUTCAPSA,*NPWAVEOUTCAPSA,*LPWAVEOUTCAPSA;

  typedef struct tagWAVEOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
  } WAVEOUTCAPSW,*PWAVEOUTCAPSW,*NPWAVEOUTCAPSW,*LPWAVEOUTCAPSW;

  typedef WAVEOUTCAPSW WAVEOUTCAPS;
  typedef PWAVEOUTCAPSW PWAVEOUTCAPS;
  typedef NPWAVEOUTCAPSW NPWAVEOUTCAPS;
  typedef LPWAVEOUTCAPSW LPWAVEOUTCAPS;

  typedef struct tagWAVEOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } WAVEOUTCAPS2A,*PWAVEOUTCAPS2A,*NPWAVEOUTCAPS2A,*LPWAVEOUTCAPS2A;

  typedef struct tagWAVEOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } WAVEOUTCAPS2W,*PWAVEOUTCAPS2W,*NPWAVEOUTCAPS2W,*LPWAVEOUTCAPS2W;

  typedef WAVEOUTCAPS2W WAVEOUTCAPS2;
  typedef PWAVEOUTCAPS2W PWAVEOUTCAPS2;
  typedef NPWAVEOUTCAPS2W NPWAVEOUTCAPS2;
  typedef LPWAVEOUTCAPS2W LPWAVEOUTCAPS2;
  typedef struct tagWAVEINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
  } WAVEINCAPSA,*PWAVEINCAPSA,*NPWAVEINCAPSA,*LPWAVEINCAPSA;

  typedef struct tagWAVEINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
  } WAVEINCAPSW,*PWAVEINCAPSW,*NPWAVEINCAPSW,*LPWAVEINCAPSW;

  typedef WAVEINCAPSW WAVEINCAPS;
  typedef PWAVEINCAPSW PWAVEINCAPS;
  typedef NPWAVEINCAPSW NPWAVEINCAPS;
  typedef LPWAVEINCAPSW LPWAVEINCAPS;

  typedef struct tagWAVEINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } WAVEINCAPS2A,*PWAVEINCAPS2A,*NPWAVEINCAPS2A,*LPWAVEINCAPS2A;

  typedef struct tagWAVEINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } WAVEINCAPS2W,*PWAVEINCAPS2W,*NPWAVEINCAPS2W,*LPWAVEINCAPS2W;

  typedef WAVEINCAPS2W WAVEINCAPS2;
  typedef PWAVEINCAPS2W PWAVEINCAPS2;
  typedef NPWAVEINCAPS2W NPWAVEINCAPS2;
  typedef LPWAVEINCAPS2W LPWAVEINCAPS2;
  typedef struct waveformat_tag {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
  } WAVEFORMAT,*PWAVEFORMAT, *NPWAVEFORMAT,*LPWAVEFORMAT;



  typedef struct pcmwaveformat_tag {
    WAVEFORMAT wf;
    WORD wBitsPerSample;
  } PCMWAVEFORMAT,*PPCMWAVEFORMAT, *NPPCMWAVEFORMAT,*LPPCMWAVEFORMAT;





  typedef struct tWAVEFORMATEX {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;
  } WAVEFORMATEX,*PWAVEFORMATEX, *NPWAVEFORMATEX,*LPWAVEFORMATEX;

  typedef const WAVEFORMATEX *LPCWAVEFORMATEX;

           UINT __attribute__((__stdcall__)) waveOutGetNumDevs(void);
           MMRESULT __attribute__((__stdcall__)) waveOutGetDevCapsA(UINT_PTR uDeviceID,LPWAVEOUTCAPSA pwoc,UINT cbwoc);
           MMRESULT __attribute__((__stdcall__)) waveOutGetDevCapsW(UINT_PTR uDeviceID,LPWAVEOUTCAPSW pwoc,UINT cbwoc);



           MMRESULT __attribute__((__stdcall__)) waveOutGetVolume(HWAVEOUT hwo,LPDWORD pdwVolume);
           MMRESULT __attribute__((__stdcall__)) waveOutSetVolume(HWAVEOUT hwo,DWORD dwVolume);
           MMRESULT __attribute__((__stdcall__)) waveOutGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
           MMRESULT __attribute__((__stdcall__)) waveOutGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);



           MMRESULT __attribute__((__stdcall__)) waveOutOpen(LPHWAVEOUT phwo,UINT uDeviceID,LPCWAVEFORMATEX pwfx,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
           MMRESULT __attribute__((__stdcall__)) waveOutClose(HWAVEOUT hwo);
           MMRESULT __attribute__((__stdcall__)) waveOutPrepareHeader(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh);
           MMRESULT __attribute__((__stdcall__)) waveOutUnprepareHeader(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh);
           MMRESULT __attribute__((__stdcall__)) waveOutWrite(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh);
           MMRESULT __attribute__((__stdcall__)) waveOutPause(HWAVEOUT hwo);
           MMRESULT __attribute__((__stdcall__)) waveOutRestart(HWAVEOUT hwo);
           MMRESULT __attribute__((__stdcall__)) waveOutReset(HWAVEOUT hwo);
           MMRESULT __attribute__((__stdcall__)) waveOutBreakLoop(HWAVEOUT hwo);
           MMRESULT __attribute__((__stdcall__)) waveOutGetPosition(HWAVEOUT hwo,LPMMTIME pmmt,UINT cbmmt);
           MMRESULT __attribute__((__stdcall__)) waveOutGetPitch(HWAVEOUT hwo,LPDWORD pdwPitch);
           MMRESULT __attribute__((__stdcall__)) waveOutSetPitch(HWAVEOUT hwo,DWORD dwPitch);
           MMRESULT __attribute__((__stdcall__)) waveOutGetPlaybackRate(HWAVEOUT hwo,LPDWORD pdwRate);
           MMRESULT __attribute__((__stdcall__)) waveOutSetPlaybackRate(HWAVEOUT hwo,DWORD dwRate);
           MMRESULT __attribute__((__stdcall__)) waveOutGetID(HWAVEOUT hwo,LPUINT puDeviceID);
           MMRESULT __attribute__((__stdcall__)) waveOutMessage(HWAVEOUT hwo,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);
           UINT __attribute__((__stdcall__)) waveInGetNumDevs(void);
           MMRESULT __attribute__((__stdcall__)) waveInGetDevCapsA(UINT_PTR uDeviceID,LPWAVEINCAPSA pwic,UINT cbwic);
           MMRESULT __attribute__((__stdcall__)) waveInGetDevCapsW(UINT_PTR uDeviceID,LPWAVEINCAPSW pwic,UINT cbwic);



           MMRESULT __attribute__((__stdcall__)) waveInGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
           MMRESULT __attribute__((__stdcall__)) waveInGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);



           MMRESULT __attribute__((__stdcall__)) waveInOpen(LPHWAVEIN phwi,UINT uDeviceID,LPCWAVEFORMATEX pwfx,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
           MMRESULT __attribute__((__stdcall__)) waveInClose(HWAVEIN hwi);
           MMRESULT __attribute__((__stdcall__)) waveInPrepareHeader(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh);
           MMRESULT __attribute__((__stdcall__)) waveInUnprepareHeader(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh);
           MMRESULT __attribute__((__stdcall__)) waveInAddBuffer(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh);
           MMRESULT __attribute__((__stdcall__)) waveInStart(HWAVEIN hwi);
           MMRESULT __attribute__((__stdcall__)) waveInStop(HWAVEIN hwi);
           MMRESULT __attribute__((__stdcall__)) waveInReset(HWAVEIN hwi);
           MMRESULT __attribute__((__stdcall__)) waveInGetPosition(HWAVEIN hwi,LPMMTIME pmmt,UINT cbmmt);
           MMRESULT __attribute__((__stdcall__)) waveInGetID(HWAVEIN hwi,LPUINT puDeviceID);
           MMRESULT __attribute__((__stdcall__)) waveInMessage(HWAVEIN hwi,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);
  struct HMIDI__ { int unused; }; typedef struct HMIDI__ *HMIDI;
  struct HMIDIIN__ { int unused; }; typedef struct HMIDIIN__ *HMIDIIN;
  struct HMIDIOUT__ { int unused; }; typedef struct HMIDIOUT__ *HMIDIOUT;
  struct HMIDISTRM__ { int unused; }; typedef struct HMIDISTRM__ *HMIDISTRM;
  typedef HMIDI *LPHMIDI;
  typedef HMIDIIN *LPHMIDIIN;
  typedef HMIDIOUT *LPHMIDIOUT;
  typedef HMIDISTRM *LPHMIDISTRM;
  typedef DRVCALLBACK MIDICALLBACK;
  typedef MIDICALLBACK *LPMIDICALLBACK;

  typedef WORD PATCHARRAY[128];
  typedef WORD *LPPATCHARRAY;
  typedef WORD KEYARRAY[128];
  typedef WORD *LPKEYARRAY;
  typedef struct tagMIDIOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
  } MIDIOUTCAPSA,*PMIDIOUTCAPSA,*NPMIDIOUTCAPSA,*LPMIDIOUTCAPSA;

  typedef struct tagMIDIOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
  } MIDIOUTCAPSW,*PMIDIOUTCAPSW,*NPMIDIOUTCAPSW,*LPMIDIOUTCAPSW;

  typedef MIDIOUTCAPSW MIDIOUTCAPS;
  typedef PMIDIOUTCAPSW PMIDIOUTCAPS;
  typedef NPMIDIOUTCAPSW NPMIDIOUTCAPS;
  typedef LPMIDIOUTCAPSW LPMIDIOUTCAPS;

  typedef struct tagMIDIOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIDIOUTCAPS2A,*PMIDIOUTCAPS2A,*NPMIDIOUTCAPS2A,*LPMIDIOUTCAPS2A;

  typedef struct tagMIDIOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIDIOUTCAPS2W,*PMIDIOUTCAPS2W,*NPMIDIOUTCAPS2W,*LPMIDIOUTCAPS2W;

  typedef MIDIOUTCAPS2W MIDIOUTCAPS2;
  typedef PMIDIOUTCAPS2W PMIDIOUTCAPS2;
  typedef NPMIDIOUTCAPS2W NPMIDIOUTCAPS2;
  typedef LPMIDIOUTCAPS2W LPMIDIOUTCAPS2;
  typedef struct tagMIDIINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwSupport;
  } MIDIINCAPSA,*PMIDIINCAPSA,*NPMIDIINCAPSA,*LPMIDIINCAPSA;

  typedef struct tagMIDIINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwSupport;
  } MIDIINCAPSW,*PMIDIINCAPSW,*NPMIDIINCAPSW,*LPMIDIINCAPSW;

  typedef MIDIINCAPSW MIDIINCAPS;
  typedef PMIDIINCAPSW PMIDIINCAPS;
  typedef NPMIDIINCAPSW NPMIDIINCAPS;
  typedef LPMIDIINCAPSW LPMIDIINCAPS;

  typedef struct tagMIDIINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIDIINCAPS2A,*PMIDIINCAPS2A,*NPMIDIINCAPS2A,*LPMIDIINCAPS2A;

  typedef struct tagMIDIINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIDIINCAPS2W,*PMIDIINCAPS2W,*NPMIDIINCAPS2W,*LPMIDIINCAPS2W;

  typedef MIDIINCAPS2W MIDIINCAPS2;
  typedef PMIDIINCAPS2W PMIDIINCAPS2;
  typedef NPMIDIINCAPS2W NPMIDIINCAPS2;
  typedef LPMIDIINCAPS2W LPMIDIINCAPS2;

  typedef struct midihdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    struct midihdr_tag *lpNext;
    DWORD_PTR reserved;
    DWORD dwOffset;
    DWORD_PTR dwReserved[8];
  } MIDIHDR,*PMIDIHDR, *NPMIDIHDR,*LPMIDIHDR;

  typedef struct midievent_tag {
    DWORD dwDeltaTime;
    DWORD dwStreamID;
    DWORD dwEvent;
    DWORD dwParms[1];
  } MIDIEVENT;

  typedef struct midistrmbuffver_tag {
    DWORD dwVersion;
    DWORD dwMid;
    DWORD dwOEMVersion;
  } MIDISTRMBUFFVER;
  typedef struct midiproptimediv_tag {
    DWORD cbStruct;
    DWORD dwTimeDiv;
  } MIDIPROPTIMEDIV,*LPMIDIPROPTIMEDIV;

  typedef struct midiproptempo_tag {
    DWORD cbStruct;
    DWORD dwTempo;
  } MIDIPROPTEMPO,*LPMIDIPROPTEMPO;

           UINT __attribute__((__stdcall__)) midiOutGetNumDevs(void);
           MMRESULT __attribute__((__stdcall__)) midiStreamOpen(LPHMIDISTRM phms,LPUINT puDeviceID,DWORD cMidi,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
           MMRESULT __attribute__((__stdcall__)) midiStreamClose(HMIDISTRM hms);
           MMRESULT __attribute__((__stdcall__)) midiStreamProperty(HMIDISTRM hms,LPBYTE lppropdata,DWORD dwProperty);
           MMRESULT __attribute__((__stdcall__)) midiStreamPosition(HMIDISTRM hms,LPMMTIME lpmmt,UINT cbmmt);
           MMRESULT __attribute__((__stdcall__)) midiStreamOut(HMIDISTRM hms,LPMIDIHDR pmh,UINT cbmh);
           MMRESULT __attribute__((__stdcall__)) midiStreamPause(HMIDISTRM hms);
           MMRESULT __attribute__((__stdcall__)) midiStreamRestart(HMIDISTRM hms);
           MMRESULT __attribute__((__stdcall__)) midiStreamStop(HMIDISTRM hms);
           MMRESULT __attribute__((__stdcall__)) midiConnect(HMIDI hmi,HMIDIOUT hmo,LPVOID pReserved);
           MMRESULT __attribute__((__stdcall__)) midiDisconnect(HMIDI hmi,HMIDIOUT hmo,LPVOID pReserved);
           MMRESULT __attribute__((__stdcall__)) midiOutGetDevCapsA(UINT_PTR uDeviceID,LPMIDIOUTCAPSA pmoc,UINT cbmoc);
           MMRESULT __attribute__((__stdcall__)) midiOutGetDevCapsW(UINT_PTR uDeviceID,LPMIDIOUTCAPSW pmoc,UINT cbmoc);



           MMRESULT __attribute__((__stdcall__)) midiOutGetVolume(HMIDIOUT hmo,LPDWORD pdwVolume);
           MMRESULT __attribute__((__stdcall__)) midiOutSetVolume(HMIDIOUT hmo,DWORD dwVolume);
           MMRESULT __attribute__((__stdcall__)) midiOutGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
           MMRESULT __attribute__((__stdcall__)) midiOutGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);



           MMRESULT __attribute__((__stdcall__)) midiOutOpen(LPHMIDIOUT phmo,UINT uDeviceID,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
           MMRESULT __attribute__((__stdcall__)) midiOutClose(HMIDIOUT hmo);
           MMRESULT __attribute__((__stdcall__)) midiOutPrepareHeader(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh);
           MMRESULT __attribute__((__stdcall__)) midiOutUnprepareHeader(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh);
           MMRESULT __attribute__((__stdcall__)) midiOutShortMsg(HMIDIOUT hmo,DWORD dwMsg);
           MMRESULT __attribute__((__stdcall__)) midiOutLongMsg(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh);
           MMRESULT __attribute__((__stdcall__)) midiOutReset(HMIDIOUT hmo);
           MMRESULT __attribute__((__stdcall__)) midiOutCachePatches(HMIDIOUT hmo,UINT uBank,LPWORD pwpa,UINT fuCache);
           MMRESULT __attribute__((__stdcall__)) midiOutCacheDrumPatches(HMIDIOUT hmo,UINT uPatch,LPWORD pwkya,UINT fuCache);
           MMRESULT __attribute__((__stdcall__)) midiOutGetID(HMIDIOUT hmo,LPUINT puDeviceID);
           MMRESULT __attribute__((__stdcall__)) midiOutMessage(HMIDIOUT hmo,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);
           UINT __attribute__((__stdcall__)) midiInGetNumDevs(void);
           MMRESULT __attribute__((__stdcall__)) midiInGetDevCapsA(UINT_PTR uDeviceID,LPMIDIINCAPSA pmic,UINT cbmic);
           MMRESULT __attribute__((__stdcall__)) midiInGetDevCapsW(UINT_PTR uDeviceID,LPMIDIINCAPSW pmic,UINT cbmic);



           MMRESULT __attribute__((__stdcall__)) midiInGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
           MMRESULT __attribute__((__stdcall__)) midiInGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);



           MMRESULT __attribute__((__stdcall__)) midiInOpen(LPHMIDIIN phmi,UINT uDeviceID,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
           MMRESULT __attribute__((__stdcall__)) midiInClose(HMIDIIN hmi);
           MMRESULT __attribute__((__stdcall__)) midiInPrepareHeader(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh);
           MMRESULT __attribute__((__stdcall__)) midiInUnprepareHeader(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh);
           MMRESULT __attribute__((__stdcall__)) midiInAddBuffer(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh);
           MMRESULT __attribute__((__stdcall__)) midiInStart(HMIDIIN hmi);
           MMRESULT __attribute__((__stdcall__)) midiInStop(HMIDIIN hmi);
           MMRESULT __attribute__((__stdcall__)) midiInReset(HMIDIIN hmi);
           MMRESULT __attribute__((__stdcall__)) midiInGetID(HMIDIIN hmi,LPUINT puDeviceID);
           MMRESULT __attribute__((__stdcall__)) midiInMessage(HMIDIIN hmi,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);






  typedef struct tagAUXCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
  } AUXCAPSA,*PAUXCAPSA,*NPAUXCAPSA,*LPAUXCAPSA;

  typedef struct tagAUXCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
  } AUXCAPSW,*PAUXCAPSW,*NPAUXCAPSW,*LPAUXCAPSW;

  typedef AUXCAPSW AUXCAPS;
  typedef PAUXCAPSW PAUXCAPS;
  typedef NPAUXCAPSW NPAUXCAPS;
  typedef LPAUXCAPSW LPAUXCAPS;

  typedef struct tagAUXCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } AUXCAPS2A,*PAUXCAPS2A,*NPAUXCAPS2A,*LPAUXCAPS2A;

  typedef struct tagAUXCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } AUXCAPS2W,*PAUXCAPS2W,*NPAUXCAPS2W,*LPAUXCAPS2W;

  typedef AUXCAPS2W AUXCAPS2;
  typedef PAUXCAPS2W PAUXCAPS2;
  typedef NPAUXCAPS2W NPAUXCAPS2;
  typedef LPAUXCAPS2W LPAUXCAPS2;







           UINT __attribute__((__stdcall__)) auxGetNumDevs(void);
           MMRESULT __attribute__((__stdcall__)) auxGetDevCapsA(UINT_PTR uDeviceID,LPAUXCAPSA pac,UINT cbac);
           MMRESULT __attribute__((__stdcall__)) auxGetDevCapsW(UINT_PTR uDeviceID,LPAUXCAPSW pac,UINT cbac);



           MMRESULT __attribute__((__stdcall__)) auxSetVolume(UINT uDeviceID,DWORD dwVolume);
           MMRESULT __attribute__((__stdcall__)) auxGetVolume(UINT uDeviceID,LPDWORD pdwVolume);
           MMRESULT __attribute__((__stdcall__)) auxOutMessage(UINT uDeviceID,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);




  struct HMIXEROBJ__ { int unused; }; typedef struct HMIXEROBJ__ *HMIXEROBJ;
  typedef HMIXEROBJ *LPHMIXEROBJ;

  struct HMIXER__ { int unused; }; typedef struct HMIXER__ *HMIXER;
  typedef HMIXER *LPHMIXER;
           UINT __attribute__((__stdcall__)) mixerGetNumDevs(void);

  typedef struct tagMIXERCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
  } MIXERCAPSA,*PMIXERCAPSA,*LPMIXERCAPSA;

  typedef struct tagMIXERCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
  } MIXERCAPSW,*PMIXERCAPSW,*LPMIXERCAPSW;

  typedef MIXERCAPSW MIXERCAPS;
  typedef PMIXERCAPSW PMIXERCAPS;
  typedef LPMIXERCAPSW LPMIXERCAPS;

  typedef struct tagMIXERCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIXERCAPS2A,*PMIXERCAPS2A,*LPMIXERCAPS2A;

  typedef struct tagMIXERCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } MIXERCAPS2W,*PMIXERCAPS2W,*LPMIXERCAPS2W;

  typedef MIXERCAPS2W MIXERCAPS2;
  typedef PMIXERCAPS2W PMIXERCAPS2;
  typedef LPMIXERCAPS2W LPMIXERCAPS2;

           MMRESULT __attribute__((__stdcall__)) mixerGetDevCapsA(UINT_PTR uMxId,LPMIXERCAPSA pmxcaps,UINT cbmxcaps);
           MMRESULT __attribute__((__stdcall__)) mixerGetDevCapsW(UINT_PTR uMxId,LPMIXERCAPSW pmxcaps,UINT cbmxcaps);



           MMRESULT __attribute__((__stdcall__)) mixerOpen(LPHMIXER phmx,UINT uMxId,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
           MMRESULT __attribute__((__stdcall__)) mixerClose(HMIXER hmx);
           DWORD __attribute__((__stdcall__)) mixerMessage(HMIXER hmx,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2);

  typedef struct tagMIXERLINEA {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    CHAR szShortName[16];
    CHAR szName[64];
    struct {
      DWORD dwType;
      DWORD dwDeviceID;
      WORD wMid;
      WORD wPid;
      MMVERSION vDriverVersion;
      CHAR szPname[32];
    } Target;
  } MIXERLINEA,*PMIXERLINEA,*LPMIXERLINEA;

  typedef struct tagMIXERLINEW {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    WCHAR szShortName[16];
    WCHAR szName[64];
    struct {
      DWORD dwType;
      DWORD dwDeviceID;
      WORD wMid;
      WORD wPid;
      MMVERSION vDriverVersion;
      WCHAR szPname[32];
    } Target;
  } MIXERLINEW,*PMIXERLINEW,*LPMIXERLINEW;

  typedef MIXERLINEW MIXERLINE;
  typedef PMIXERLINEW PMIXERLINE;
  typedef LPMIXERLINEW LPMIXERLINE;
           MMRESULT __attribute__((__stdcall__)) mixerGetLineInfoA(HMIXEROBJ hmxobj,LPMIXERLINEA pmxl,DWORD fdwInfo);
           MMRESULT __attribute__((__stdcall__)) mixerGetLineInfoW(HMIXEROBJ hmxobj,LPMIXERLINEW pmxl,DWORD fdwInfo);
           MMRESULT __attribute__((__stdcall__)) mixerGetID(HMIXEROBJ hmxobj,UINT *puMxId,DWORD fdwId);

  typedef struct tagMIXERCONTROLA {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    CHAR szShortName[16];
    CHAR szName[64];
    union {
      __extension__ struct {
 LONG lMinimum;
 LONG lMaximum;
      } ;
      __extension__ struct {
 DWORD dwMinimum;
 DWORD dwMaximum;
      } ;
      DWORD dwReserved[6];
    } Bounds;
    union {
      DWORD cSteps;
      DWORD cbCustomData;
      DWORD dwReserved[6];
    } Metrics;
  } MIXERCONTROLA,*PMIXERCONTROLA,*LPMIXERCONTROLA;

  typedef struct tagMIXERCONTROLW {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    WCHAR szShortName[16];
    WCHAR szName[64];
    union {
      __extension__ struct {
 LONG lMinimum;
 LONG lMaximum;
      } ;
      __extension__ struct {
 DWORD dwMinimum;
 DWORD dwMaximum;
      } ;
      DWORD dwReserved[6];
    } Bounds;
    union {
      DWORD cSteps;
      DWORD cbCustomData;
      DWORD dwReserved[6];
    } Metrics;
  } MIXERCONTROLW,*PMIXERCONTROLW,*LPMIXERCONTROLW;

  typedef MIXERCONTROLW MIXERCONTROL;
  typedef PMIXERCONTROLW PMIXERCONTROL;
  typedef LPMIXERCONTROLW LPMIXERCONTROL;
  typedef struct tagMIXERLINECONTROLSA {
    DWORD cbStruct;
    DWORD dwLineID;
    __extension__ union {
      DWORD dwControlID;
      DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLA pamxctrl;
  } MIXERLINECONTROLSA,*PMIXERLINECONTROLSA,*LPMIXERLINECONTROLSA;

  typedef struct tagMIXERLINECONTROLSW {
    DWORD cbStruct;
    DWORD dwLineID;
    __extension__ union {
      DWORD dwControlID;
      DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLW pamxctrl;
  } MIXERLINECONTROLSW,*PMIXERLINECONTROLSW,*LPMIXERLINECONTROLSW;

  typedef MIXERLINECONTROLSW MIXERLINECONTROLS;
  typedef PMIXERLINECONTROLSW PMIXERLINECONTROLS;
  typedef LPMIXERLINECONTROLSW LPMIXERLINECONTROLS;

           MMRESULT __attribute__((__stdcall__)) mixerGetLineControlsA(HMIXEROBJ hmxobj,LPMIXERLINECONTROLSA pmxlc,DWORD fdwControls);
           MMRESULT __attribute__((__stdcall__)) mixerGetLineControlsW(HMIXEROBJ hmxobj,LPMIXERLINECONTROLSW pmxlc,DWORD fdwControls);
  typedef struct tMIXERCONTROLDETAILS {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD cChannels;
    __extension__ union {
      HWND hwndOwner;
      DWORD cMultipleItems;
    } ;
    DWORD cbDetails;
    LPVOID paDetails;
  } MIXERCONTROLDETAILS,*PMIXERCONTROLDETAILS,*LPMIXERCONTROLDETAILS;

  typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
    DWORD dwParam1;
    DWORD dwParam2;
    CHAR szName[64];
  } MIXERCONTROLDETAILS_LISTTEXTA,*PMIXERCONTROLDETAILS_LISTTEXTA,*LPMIXERCONTROLDETAILS_LISTTEXTA;
  typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
    DWORD dwParam1;
    DWORD dwParam2;
    WCHAR szName[64];
  } MIXERCONTROLDETAILS_LISTTEXTW,*PMIXERCONTROLDETAILS_LISTTEXTW,*LPMIXERCONTROLDETAILS_LISTTEXTW;

  typedef MIXERCONTROLDETAILS_LISTTEXTW MIXERCONTROLDETAILS_LISTTEXT;
  typedef PMIXERCONTROLDETAILS_LISTTEXTW PMIXERCONTROLDETAILS_LISTTEXT;
  typedef LPMIXERCONTROLDETAILS_LISTTEXTW LPMIXERCONTROLDETAILS_LISTTEXT;

  typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
    LONG fValue;
  } MIXERCONTROLDETAILS_BOOLEAN,*PMIXERCONTROLDETAILS_BOOLEAN,*LPMIXERCONTROLDETAILS_BOOLEAN;

  typedef struct tMIXERCONTROLDETAILS_SIGNED {
    LONG lValue;
  } MIXERCONTROLDETAILS_SIGNED,*PMIXERCONTROLDETAILS_SIGNED,*LPMIXERCONTROLDETAILS_SIGNED;

  typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
    DWORD dwValue;
  } MIXERCONTROLDETAILS_UNSIGNED,*PMIXERCONTROLDETAILS_UNSIGNED,*LPMIXERCONTROLDETAILS_UNSIGNED;

           MMRESULT __attribute__((__stdcall__)) mixerGetControlDetailsA(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails);
           MMRESULT __attribute__((__stdcall__)) mixerGetControlDetailsW(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails);
           MMRESULT __attribute__((__stdcall__)) mixerSetControlDetails(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails);
  typedef void (__attribute__((__stdcall__)) TIMECALLBACK)(UINT uTimerID,UINT uMsg,DWORD_PTR dwUser,DWORD_PTR dw1,DWORD_PTR dw2);
  typedef TIMECALLBACK *LPTIMECALLBACK;
  typedef struct timecaps_tag {
    UINT wPeriodMin;
    UINT wPeriodMax;
  } TIMECAPS,*PTIMECAPS, *NPTIMECAPS,*LPTIMECAPS;

           MMRESULT __attribute__((__stdcall__)) timeGetSystemTime(LPMMTIME pmmt,UINT cbmmt);
           DWORD __attribute__((__stdcall__)) timeGetTime(void);
           MMRESULT __attribute__((__stdcall__)) timeSetEvent(UINT uDelay,UINT uResolution,LPTIMECALLBACK fptc,DWORD_PTR dwUser,UINT fuEvent);
           MMRESULT __attribute__((__stdcall__)) timeKillEvent(UINT uTimerID);
           MMRESULT __attribute__((__stdcall__)) timeGetDevCaps(LPTIMECAPS ptc,UINT cbtc);
           MMRESULT __attribute__((__stdcall__)) timeBeginPeriod(UINT uPeriod);
           MMRESULT __attribute__((__stdcall__)) timeEndPeriod(UINT uPeriod);
  typedef struct tagJOYCAPSA {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];
  } JOYCAPSA,*PJOYCAPSA,*NPJOYCAPSA,*LPJOYCAPSA;

  typedef struct tagJOYCAPSW {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];
  } JOYCAPSW,*PJOYCAPSW,*NPJOYCAPSW,*LPJOYCAPSW;

  typedef JOYCAPSW JOYCAPS;
  typedef PJOYCAPSW PJOYCAPS;
  typedef NPJOYCAPSW NPJOYCAPS;
  typedef LPJOYCAPSW LPJOYCAPS;

  typedef struct tagJOYCAPS2A {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } JOYCAPS2A,*PJOYCAPS2A,*NPJOYCAPS2A,*LPJOYCAPS2A;

  typedef struct tagJOYCAPS2W {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
  } JOYCAPS2W,*PJOYCAPS2W,*NPJOYCAPS2W,*LPJOYCAPS2W;

  typedef JOYCAPS2W JOYCAPS2;
  typedef PJOYCAPS2W PJOYCAPS2;
  typedef NPJOYCAPS2W NPJOYCAPS2;
  typedef LPJOYCAPS2W LPJOYCAPS2;

  typedef struct joyinfo_tag {
    UINT wXpos;
    UINT wYpos;
    UINT wZpos;
    UINT wButtons;
  } JOYINFO,*PJOYINFO, *NPJOYINFO,*LPJOYINFO;

  typedef struct joyinfoex_tag {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwXpos;
    DWORD dwYpos;
    DWORD dwZpos;
    DWORD dwRpos;
    DWORD dwUpos;
    DWORD dwVpos;
    DWORD dwButtons;
    DWORD dwButtonNumber;
    DWORD dwPOV;
    DWORD dwReserved1;
    DWORD dwReserved2;
  } JOYINFOEX,*PJOYINFOEX, *NPJOYINFOEX,*LPJOYINFOEX;

           UINT __attribute__((__stdcall__)) joyGetNumDevs(void);
           MMRESULT __attribute__((__stdcall__)) joyGetDevCapsA(UINT_PTR uJoyID,LPJOYCAPSA pjc,UINT cbjc);
           MMRESULT __attribute__((__stdcall__)) joyGetDevCapsW(UINT_PTR uJoyID,LPJOYCAPSW pjc,UINT cbjc);



           MMRESULT __attribute__((__stdcall__)) joyGetPos(UINT uJoyID,LPJOYINFO pji);
           MMRESULT __attribute__((__stdcall__)) joyGetPosEx(UINT uJoyID,LPJOYINFOEX pji);
           MMRESULT __attribute__((__stdcall__)) joyGetThreshold(UINT uJoyID,LPUINT puThreshold);
           MMRESULT __attribute__((__stdcall__)) joyReleaseCapture(UINT uJoyID);
           MMRESULT __attribute__((__stdcall__)) joySetCapture(HWND hwnd,UINT uJoyID,UINT uPeriod,WINBOOL fChanged);
           MMRESULT __attribute__((__stdcall__)) joySetThreshold(UINT uJoyID,UINT uThreshold);
  typedef DWORD FOURCC;
  typedef char *HPSTR;
  struct HMMIO__ { int unused; }; typedef struct HMMIO__ *HMMIO;
  typedef LRESULT (__attribute__((__stdcall__)) MMIOPROC)(LPSTR lpmmioinfo,UINT uMsg,LPARAM lParam1,LPARAM lParam2);
  typedef MMIOPROC *LPMMIOPROC;

  typedef struct _MMIOINFO {
    DWORD dwFlags;
    FOURCC fccIOProc;
    LPMMIOPROC pIOProc;
    UINT wErrorRet;
    HTASK htask;
    LONG cchBuffer;
    HPSTR pchBuffer;
    HPSTR pchNext;
    HPSTR pchEndRead;
    HPSTR pchEndWrite;
    LONG lBufOffset;
    LONG lDiskOffset;
    DWORD adwInfo[3];
    DWORD dwReserved1;
    DWORD dwReserved2;
    HMMIO hmmio;
  } MMIOINFO,*PMMIOINFO, *NPMMIOINFO,*LPMMIOINFO;

  typedef const MMIOINFO *LPCMMIOINFO;

  typedef struct _MMCKINFO {
    FOURCC ckid;
    DWORD cksize;
    FOURCC fccType;
    DWORD dwDataOffset;
    DWORD dwFlags;
  } MMCKINFO,*PMMCKINFO, *NPMMCKINFO,*LPMMCKINFO;

  typedef const MMCKINFO *LPCMMCKINFO;
           FOURCC __attribute__((__stdcall__)) mmioStringToFOURCCA(LPCSTR sz,UINT uFlags);
           FOURCC __attribute__((__stdcall__)) mmioStringToFOURCCW(LPCWSTR sz,UINT uFlags);



           LPMMIOPROC __attribute__((__stdcall__)) mmioInstallIOProcA(FOURCC fccIOProc,LPMMIOPROC pIOProc,DWORD dwFlags);
           LPMMIOPROC __attribute__((__stdcall__)) mmioInstallIOProcW(FOURCC fccIOProc,LPMMIOPROC pIOProc,DWORD dwFlags);



           HMMIO __attribute__((__stdcall__)) mmioOpenA(LPSTR pszFileName,LPMMIOINFO pmmioinfo,DWORD fdwOpen);
           HMMIO __attribute__((__stdcall__)) mmioOpenW(LPWSTR pszFileName,LPMMIOINFO pmmioinfo,DWORD fdwOpen);



           MMRESULT __attribute__((__stdcall__)) mmioRenameA(LPCSTR pszFileName,LPCSTR pszNewFileName,LPCMMIOINFO pmmioinfo,DWORD fdwRename);
           MMRESULT __attribute__((__stdcall__)) mmioRenameW(LPCWSTR pszFileName,LPCWSTR pszNewFileName,LPCMMIOINFO pmmioinfo,DWORD fdwRename);



           MMRESULT __attribute__((__stdcall__)) mmioClose(HMMIO hmmio,UINT fuClose);
           LONG __attribute__((__stdcall__)) mmioRead(HMMIO hmmio,HPSTR pch,LONG cch);
           LONG __attribute__((__stdcall__)) mmioWrite(HMMIO hmmio,const char *pch,LONG cch);
           LONG __attribute__((__stdcall__)) mmioSeek(HMMIO hmmio,LONG lOffset,int iOrigin);
           MMRESULT __attribute__((__stdcall__)) mmioGetInfo(HMMIO hmmio,LPMMIOINFO pmmioinfo,UINT fuInfo);
           MMRESULT __attribute__((__stdcall__)) mmioSetInfo(HMMIO hmmio,LPCMMIOINFO pmmioinfo,UINT fuInfo);
           MMRESULT __attribute__((__stdcall__)) mmioSetBuffer(HMMIO hmmio,LPSTR pchBuffer,LONG cchBuffer,UINT fuBuffer);
           MMRESULT __attribute__((__stdcall__)) mmioFlush(HMMIO hmmio,UINT fuFlush);
           MMRESULT __attribute__((__stdcall__)) mmioAdvance(HMMIO hmmio,LPMMIOINFO pmmioinfo,UINT fuAdvance);
           LRESULT __attribute__((__stdcall__)) mmioSendMessage(HMMIO hmmio,UINT uMsg,LPARAM lParam1,LPARAM lParam2);
           MMRESULT __attribute__((__stdcall__)) mmioDescend(HMMIO hmmio,LPMMCKINFO pmmcki,const MMCKINFO *pmmckiParent,UINT fuDescend);
           MMRESULT __attribute__((__stdcall__)) mmioAscend(HMMIO hmmio,LPMMCKINFO pmmcki,UINT fuAscend);
           MMRESULT __attribute__((__stdcall__)) mmioCreateChunk(HMMIO hmmio,LPMMCKINFO pmmcki,UINT fuCreate);






  typedef DWORD MCIERROR;




  typedef UINT MCIDEVICEID;


  typedef UINT (__attribute__((__stdcall__)) *YIELDPROC)(MCIDEVICEID mciId,DWORD dwYieldData);

           MCIERROR __attribute__((__stdcall__)) mciSendCommandA(MCIDEVICEID mciId,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2);
           MCIERROR __attribute__((__stdcall__)) mciSendCommandW(MCIDEVICEID mciId,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2);



           MCIERROR __attribute__((__stdcall__)) mciSendStringA(LPCSTR lpstrCommand,LPSTR lpstrReturnString,UINT uReturnLength,HWND hwndCallback);
           MCIERROR __attribute__((__stdcall__)) mciSendStringW(LPCWSTR lpstrCommand,LPWSTR lpstrReturnString,UINT uReturnLength,HWND hwndCallback);



           MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDA(LPCSTR pszDevice);
           MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDW(LPCWSTR pszDevice);



           MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDFromElementIDA(DWORD dwElementID,LPCSTR lpstrType);
           MCIDEVICEID __attribute__((__stdcall__)) mciGetDeviceIDFromElementIDW(DWORD dwElementID,LPCWSTR lpstrType);



           WINBOOL __attribute__((__stdcall__)) mciGetErrorStringA(MCIERROR mcierr,LPSTR pszText,UINT cchText);
           WINBOOL __attribute__((__stdcall__)) mciGetErrorStringW(MCIERROR mcierr,LPWSTR pszText,UINT cchText);



           WINBOOL __attribute__((__stdcall__)) mciSetYieldProc(MCIDEVICEID mciId,YIELDPROC fpYieldProc,DWORD dwYieldData);
           HTASK __attribute__((__stdcall__)) mciGetCreatorTask(MCIDEVICEID mciId);
           YIELDPROC __attribute__((__stdcall__)) mciGetYieldProc(MCIDEVICEID mciId,LPDWORD pdwYieldData);
  typedef struct tagMCI_GENERIC_PARMS {
    DWORD_PTR dwCallback;
  } MCI_GENERIC_PARMS,*PMCI_GENERIC_PARMS,*LPMCI_GENERIC_PARMS;

  typedef struct tagMCI_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
  } MCI_OPEN_PARMSA,*PMCI_OPEN_PARMSA,*LPMCI_OPEN_PARMSA;

  typedef struct tagMCI_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
  } MCI_OPEN_PARMSW,*PMCI_OPEN_PARMSW,*LPMCI_OPEN_PARMSW;

  typedef MCI_OPEN_PARMSW MCI_OPEN_PARMS;
  typedef PMCI_OPEN_PARMSW PMCI_OPEN_PARMS;
  typedef LPMCI_OPEN_PARMSW LPMCI_OPEN_PARMS;

  typedef struct tagMCI_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
  } MCI_PLAY_PARMS,*PMCI_PLAY_PARMS,*LPMCI_PLAY_PARMS;

  typedef struct tagMCI_SEEK_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTo;
  } MCI_SEEK_PARMS,*PMCI_SEEK_PARMS,*LPMCI_SEEK_PARMS;

  typedef struct tagMCI_STATUS_PARMS {
    DWORD_PTR dwCallback;
    DWORD_PTR dwReturn;
    DWORD dwItem;
    DWORD dwTrack;
  } MCI_STATUS_PARMS,*PMCI_STATUS_PARMS,*LPMCI_STATUS_PARMS;

  typedef struct tagMCI_INFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
  } MCI_INFO_PARMSA,*LPMCI_INFO_PARMSA;
  typedef struct tagMCI_INFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
  } MCI_INFO_PARMSW,*LPMCI_INFO_PARMSW;

  typedef MCI_INFO_PARMSW MCI_INFO_PARMS;
  typedef LPMCI_INFO_PARMSW LPMCI_INFO_PARMS;

  typedef struct tagMCI_GETDEVCAPS_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwReturn;
    DWORD dwItem;
  } MCI_GETDEVCAPS_PARMS,*PMCI_GETDEVCAPS_PARMS,*LPMCI_GETDEVCAPS_PARMS;

  typedef struct tagMCI_SYSINFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
  } MCI_SYSINFO_PARMSA,*PMCI_SYSINFO_PARMSA,*LPMCI_SYSINFO_PARMSA;

  typedef struct tagMCI_SYSINFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
  } MCI_SYSINFO_PARMSW,*PMCI_SYSINFO_PARMSW,*LPMCI_SYSINFO_PARMSW;

  typedef MCI_SYSINFO_PARMSW MCI_SYSINFO_PARMS;
  typedef PMCI_SYSINFO_PARMSW PMCI_SYSINFO_PARMS;
  typedef LPMCI_SYSINFO_PARMSW LPMCI_SYSINFO_PARMS;

  typedef struct tagMCI_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
  } MCI_SET_PARMS,*PMCI_SET_PARMS,*LPMCI_SET_PARMS;

  typedef struct tagMCI_BREAK_PARMS {
    DWORD_PTR dwCallback;
    int nVirtKey;
    HWND hwndBreak;
  } MCI_BREAK_PARMS,*PMCI_BREAK_PARMS,*LPMCI_BREAK_PARMS;

  typedef struct tagMCI_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
  } MCI_SAVE_PARMSA,*PMCI_SAVE_PARMSA,*LPMCI_SAVE_PARMSA;

  typedef struct tagMCI_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
  } MCI_SAVE_PARMSW,*PMCI_SAVE_PARMSW,*LPMCI_SAVE_PARMSW;

  typedef MCI_SAVE_PARMSW MCI_SAVE_PARMS;
  typedef PMCI_SAVE_PARMSW PMCI_SAVE_PARMS;
  typedef LPMCI_SAVE_PARMSW LPMCI_SAVE_PARMS;

  typedef struct tagMCI_LOAD_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
  } MCI_LOAD_PARMSA,*PMCI_LOAD_PARMSA,*LPMCI_LOAD_PARMSA;

  typedef struct tagMCI_LOAD_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
  } MCI_LOAD_PARMSW,*PMCI_LOAD_PARMSW,*LPMCI_LOAD_PARMSW;

  typedef MCI_LOAD_PARMSW MCI_LOAD_PARMS;
  typedef PMCI_LOAD_PARMSW PMCI_LOAD_PARMS;
  typedef LPMCI_LOAD_PARMSW LPMCI_LOAD_PARMS;

  typedef struct tagMCI_RECORD_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
  } MCI_RECORD_PARMS,*LPMCI_RECORD_PARMS;
  typedef struct tagMCI_VD_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
  } MCI_VD_PLAY_PARMS,*PMCI_VD_PLAY_PARMS,*LPMCI_VD_PLAY_PARMS;

  typedef struct tagMCI_VD_STEP_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrames;
  } MCI_VD_STEP_PARMS,*PMCI_VD_STEP_PARMS,*LPMCI_VD_STEP_PARMS;

  typedef struct tagMCI_VD_ESCAPE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpstrCommand;
  } MCI_VD_ESCAPE_PARMSA,*PMCI_VD_ESCAPE_PARMSA,*LPMCI_VD_ESCAPE_PARMSA;

  typedef struct tagMCI_VD_ESCAPE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpstrCommand;
  } MCI_VD_ESCAPE_PARMSW,*PMCI_VD_ESCAPE_PARMSW,*LPMCI_VD_ESCAPE_PARMSW;

  typedef MCI_VD_ESCAPE_PARMSW MCI_VD_ESCAPE_PARMS;
  typedef PMCI_VD_ESCAPE_PARMSW PMCI_VD_ESCAPE_PARMS;
  typedef LPMCI_VD_ESCAPE_PARMSW LPMCI_VD_ESCAPE_PARMS;
  typedef struct tagMCI_WAVE_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwBufferSeconds;
  } MCI_WAVE_OPEN_PARMSA,*PMCI_WAVE_OPEN_PARMSA,*LPMCI_WAVE_OPEN_PARMSA;

  typedef struct tagMCI_WAVE_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwBufferSeconds;
  } MCI_WAVE_OPEN_PARMSW,*PMCI_WAVE_OPEN_PARMSW,*LPMCI_WAVE_OPEN_PARMSW;

  typedef MCI_WAVE_OPEN_PARMSW MCI_WAVE_OPEN_PARMS;
  typedef PMCI_WAVE_OPEN_PARMSW PMCI_WAVE_OPEN_PARMS;
  typedef LPMCI_WAVE_OPEN_PARMSW LPMCI_WAVE_OPEN_PARMS;

  typedef struct tagMCI_WAVE_DELETE_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
  } MCI_WAVE_DELETE_PARMS,*PMCI_WAVE_DELETE_PARMS,*LPMCI_WAVE_DELETE_PARMS;

  typedef struct tagMCI_WAVE_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    UINT wInput;
    UINT wOutput;
    WORD wFormatTag;
    WORD wReserved2;
    WORD nChannels;
    WORD wReserved3;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wReserved4;
    WORD wBitsPerSample;
    WORD wReserved5;
  } MCI_WAVE_SET_PARMS,*PMCI_WAVE_SET_PARMS,*LPMCI_WAVE_SET_PARMS;
  typedef struct tagMCI_SEQ_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    DWORD dwTempo;
    DWORD dwPort;
    DWORD dwSlave;
    DWORD dwMaster;
    DWORD dwOffset;
  } MCI_SEQ_SET_PARMS,*PMCI_SEQ_SET_PARMS,*LPMCI_SEQ_SET_PARMS;
  typedef struct tagMCI_ANIM_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
  } MCI_ANIM_OPEN_PARMSA,*PMCI_ANIM_OPEN_PARMSA,*LPMCI_ANIM_OPEN_PARMSA;

  typedef struct tagMCI_ANIM_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
  } MCI_ANIM_OPEN_PARMSW,*PMCI_ANIM_OPEN_PARMSW,*LPMCI_ANIM_OPEN_PARMSW;

  typedef MCI_ANIM_OPEN_PARMSW MCI_ANIM_OPEN_PARMS;
  typedef PMCI_ANIM_OPEN_PARMSW PMCI_ANIM_OPEN_PARMS;
  typedef LPMCI_ANIM_OPEN_PARMSW LPMCI_ANIM_OPEN_PARMS;

  typedef struct tagMCI_ANIM_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
  } MCI_ANIM_PLAY_PARMS,*PMCI_ANIM_PLAY_PARMS,*LPMCI_ANIM_PLAY_PARMS;

  typedef struct tagMCI_ANIM_STEP_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrames;
  } MCI_ANIM_STEP_PARMS,*PMCI_ANIM_STEP_PARMS,*LPMCI_ANIM_STEP_PARMS;

  typedef struct tagMCI_ANIM_WINDOW_PARMSA {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
  } MCI_ANIM_WINDOW_PARMSA,*PMCI_ANIM_WINDOW_PARMSA,*LPMCI_ANIM_WINDOW_PARMSA;

  typedef struct tagMCI_ANIM_WINDOW_PARMSW {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
  } MCI_ANIM_WINDOW_PARMSW,*PMCI_ANIM_WINDOW_PARMSW,*LPMCI_ANIM_WINDOW_PARMSW;

  typedef MCI_ANIM_WINDOW_PARMSW MCI_ANIM_WINDOW_PARMS;
  typedef PMCI_ANIM_WINDOW_PARMSW PMCI_ANIM_WINDOW_PARMS;
  typedef LPMCI_ANIM_WINDOW_PARMSW LPMCI_ANIM_WINDOW_PARMS;

  typedef struct tagMCI_ANIM_RECT_PARMS {
    DWORD_PTR dwCallback;




    RECT rc;

  } MCI_ANIM_RECT_PARMS;

  typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;
  typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;

  typedef struct tagMCI_ANIM_UPDATE_PARMS {
    DWORD_PTR dwCallback;
    RECT rc;
    HDC hDC;
  } MCI_ANIM_UPDATE_PARMS,*PMCI_ANIM_UPDATE_PARMS,*LPMCI_ANIM_UPDATE_PARMS;
  typedef struct tagMCI_OVLY_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
  } MCI_OVLY_OPEN_PARMSA,*PMCI_OVLY_OPEN_PARMSA,*LPMCI_OVLY_OPEN_PARMSA;

  typedef struct tagMCI_OVLY_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
  } MCI_OVLY_OPEN_PARMSW,*PMCI_OVLY_OPEN_PARMSW,*LPMCI_OVLY_OPEN_PARMSW;

  typedef MCI_OVLY_OPEN_PARMSW MCI_OVLY_OPEN_PARMS;
  typedef PMCI_OVLY_OPEN_PARMSW PMCI_OVLY_OPEN_PARMS;
  typedef LPMCI_OVLY_OPEN_PARMSW LPMCI_OVLY_OPEN_PARMS;

  typedef struct tagMCI_OVLY_WINDOW_PARMSA {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
  } MCI_OVLY_WINDOW_PARMSA,*PMCI_OVLY_WINDOW_PARMSA,*LPMCI_OVLY_WINDOW_PARMSA;

  typedef struct tagMCI_OVLY_WINDOW_PARMSW {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
  } MCI_OVLY_WINDOW_PARMSW,*PMCI_OVLY_WINDOW_PARMSW,*LPMCI_OVLY_WINDOW_PARMSW;

  typedef MCI_OVLY_WINDOW_PARMSW MCI_OVLY_WINDOW_PARMS;
  typedef PMCI_OVLY_WINDOW_PARMSW PMCI_OVLY_WINDOW_PARMS;
  typedef LPMCI_OVLY_WINDOW_PARMSW LPMCI_OVLY_WINDOW_PARMS;

  typedef struct tagMCI_OVLY_RECT_PARMS {
    DWORD_PTR dwCallback;




    RECT rc;

  } MCI_OVLY_RECT_PARMS,*PMCI_OVLY_RECT_PARMS,*LPMCI_OVLY_RECT_PARMS;

  typedef struct tagMCI_OVLY_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
  } MCI_OVLY_SAVE_PARMSA,*PMCI_OVLY_SAVE_PARMSA,*LPMCI_OVLY_SAVE_PARMSA;

  typedef struct tagMCI_OVLY_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
  } MCI_OVLY_SAVE_PARMSW,*PMCI_OVLY_SAVE_PARMSW,*LPMCI_OVLY_SAVE_PARMSW;

  typedef MCI_OVLY_SAVE_PARMSW MCI_OVLY_SAVE_PARMS;
  typedef PMCI_OVLY_SAVE_PARMSW PMCI_OVLY_SAVE_PARMS;
  typedef LPMCI_OVLY_SAVE_PARMSW LPMCI_OVLY_SAVE_PARMS;

  typedef struct tagMCI_OVLY_LOAD_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
  } MCI_OVLY_LOAD_PARMSA,*PMCI_OVLY_LOAD_PARMSA,*LPMCI_OVLY_LOAD_PARMSA;

  typedef struct tagMCI_OVLY_LOAD_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
  } MCI_OVLY_LOAD_PARMSW,*PMCI_OVLY_LOAD_PARMSW,*LPMCI_OVLY_LOAD_PARMSW;

  typedef MCI_OVLY_LOAD_PARMSW MCI_OVLY_LOAD_PARMS;
  typedef PMCI_OVLY_LOAD_PARMSW PMCI_OVLY_LOAD_PARMS;
  typedef LPMCI_OVLY_LOAD_PARMSW LPMCI_OVLY_LOAD_PARMS;
}
#pragma pack(pop)
extern "C" {





  typedef struct _NCB {
    UCHAR ncb_command;
    UCHAR ncb_retcode;
    UCHAR ncb_lsn;
    UCHAR ncb_num;
    PUCHAR ncb_buffer;
    WORD ncb_length;
    UCHAR ncb_callname[16];
    UCHAR ncb_name[16];
    UCHAR ncb_rto;
    UCHAR ncb_sto;
    void (__attribute__((__stdcall__)) *ncb_post)(struct _NCB *);
    UCHAR ncb_lana_num;
    UCHAR ncb_cmd_cplt;



    UCHAR ncb_reserve[10];

    HANDLE ncb_event;

  } NCB,*PNCB;

  typedef struct _ADAPTER_STATUS {
    UCHAR adapter_address[6];
    UCHAR rev_major;
    UCHAR reserved0;
    UCHAR adapter_type;
    UCHAR rev_minor;
    WORD duration;
    WORD frmr_recv;
    WORD frmr_xmit;
    WORD iframe_recv_err;
    WORD xmit_aborts;
    DWORD xmit_success;
    DWORD recv_success;
    WORD iframe_xmit_err;
    WORD recv_buff_unavail;
    WORD t1_timeouts;
    WORD ti_timeouts;
    DWORD reserved1;
    WORD free_ncbs;
    WORD max_cfg_ncbs;
    WORD max_ncbs;
    WORD xmit_buf_unavail;
    WORD max_dgram_size;
    WORD pending_sess;
    WORD max_cfg_sess;
    WORD max_sess;
    WORD max_sess_pkt_size;
    WORD name_count;
  } ADAPTER_STATUS,*PADAPTER_STATUS;

  typedef struct _NAME_BUFFER {
    UCHAR name[16];
    UCHAR name_num;
    UCHAR name_flags;
  } NAME_BUFFER,*PNAME_BUFFER;
  typedef struct _SESSION_HEADER {
    UCHAR sess_name;
    UCHAR num_sess;
    UCHAR rcv_dg_outstanding;
    UCHAR rcv_any_outstanding;
  } SESSION_HEADER,*PSESSION_HEADER;

  typedef struct _SESSION_BUFFER {
    UCHAR lsn;
    UCHAR state;
    UCHAR local_name[16];
    UCHAR remote_name[16];
    UCHAR rcvs_outstanding;
    UCHAR sends_outstanding;
  } SESSION_BUFFER,*PSESSION_BUFFER;
  typedef struct _LANA_ENUM {
    UCHAR length;
    UCHAR lana[254 +1];
  } LANA_ENUM,*PLANA_ENUM;

  typedef struct _FIND_NAME_HEADER {
    WORD node_count;
    UCHAR reserved;
    UCHAR unique_group;
  } FIND_NAME_HEADER,*PFIND_NAME_HEADER;

  typedef struct _FIND_NAME_BUFFER {
    UCHAR length;
    UCHAR access_control;
    UCHAR frame_control;
    UCHAR destination_addr[6];
    UCHAR source_addr[6];
    UCHAR routing_info[18];
  } FIND_NAME_BUFFER,*PFIND_NAME_BUFFER;

  typedef struct _ACTION_HEADER {
    ULONG transport_id;
    USHORT action_code;
    USHORT reserved;
  } ACTION_HEADER,*PACTION_HEADER;
  UCHAR __attribute__((__stdcall__)) Netbios(PNCB pncb);




}
extern "C" {
  typedef void *I_RPC_HANDLE;
  typedef long RPC_STATUS;
extern "C" {
extern "C" {
}


  typedef unsigned char *RPC_CSTR;
  typedef unsigned short *RPC_WSTR;
  typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
  typedef RPC_BINDING_HANDLE handle_t;
extern "C++" {
__extension__ template<typename T> const GUID &__mingw_uuidof();
}
  typedef GUID UUID;





  typedef struct _RPC_BINDING_VECTOR {
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
  } RPC_BINDING_VECTOR;




  typedef struct _UUID_VECTOR {
    unsigned long Count;
    UUID *Uuid[1];
  } UUID_VECTOR;




  typedef void *RPC_IF_HANDLE;



  typedef struct _RPC_IF_ID {
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
  } RPC_IF_ID;
  typedef struct _RPC_PROTSEQ_VECTORA {
    unsigned int Count;
    unsigned char *Protseq[1];
  } RPC_PROTSEQ_VECTORA;

  typedef struct _RPC_PROTSEQ_VECTORW {
    unsigned int Count;
    unsigned short *Protseq[1];
  } RPC_PROTSEQ_VECTORW;



  typedef struct _RPC_POLICY {
    unsigned int Length;
    unsigned long EndpointFlags;
    unsigned long NICFlags;
  } RPC_POLICY,*PRPC_POLICY;

  typedef void __attribute__((__stdcall__)) RPC_OBJECT_INQ_FN(UUID *ObjectUuid,UUID *TypeUuid,RPC_STATUS *Status);
  typedef RPC_STATUS __attribute__((__stdcall__)) RPC_IF_CALLBACK_FN(RPC_IF_HANDLE InterfaceUuid,void *Context);
  typedef void __attribute__((__stdcall__)) RPC_SECURITY_CALLBACK_FN(void *Context);



  typedef struct {
    unsigned int Count;
    unsigned long Stats[1];
  } RPC_STATS_VECTOR;






  typedef struct {
    unsigned long Count;
    RPC_IF_ID *IfId[1];
  } RPC_IF_ID_VECTOR;
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding,RPC_BINDING_HANDLE *DestinationBinding);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingFree(RPC_BINDING_HANDLE *Binding);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetOption(RPC_BINDING_HANDLE hBinding,unsigned long option,ULONG_PTR optionValue);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqOption(RPC_BINDING_HANDLE hBinding,unsigned long option,ULONG_PTR *pOptionValue);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingFromStringBindingA(RPC_CSTR StringBinding,RPC_BINDING_HANDLE *Binding);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingFromStringBindingW(RPC_WSTR StringBinding,RPC_BINDING_HANDLE *Binding);
           RPC_STATUS __attribute__((__stdcall__)) RpcSsGetContextBinding(void *ContextHandle,RPC_BINDING_HANDLE *Binding);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqObject(RPC_BINDING_HANDLE Binding,UUID *ObjectUuid);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingReset(RPC_BINDING_HANDLE Binding);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetObject(RPC_BINDING_HANDLE Binding,UUID *ObjectUuid);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc,unsigned long *AuthnLevel);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding,RPC_CSTR *StringBinding);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding,RPC_WSTR *StringBinding);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector);
           RPC_STATUS __attribute__((__stdcall__)) RpcStringBindingComposeA(RPC_CSTR ObjUuid,RPC_CSTR Protseq,RPC_CSTR NetworkAddr,RPC_CSTR Endpoint,RPC_CSTR Options,RPC_CSTR *StringBinding);
           RPC_STATUS __attribute__((__stdcall__)) RpcStringBindingComposeW(RPC_WSTR ObjUuid,RPC_WSTR Protseq,RPC_WSTR NetworkAddr,RPC_WSTR Endpoint,RPC_WSTR Options,RPC_WSTR *StringBinding);
           RPC_STATUS __attribute__((__stdcall__)) RpcStringBindingParseA(RPC_CSTR StringBinding,RPC_CSTR *ObjUuid,RPC_CSTR *Protseq,RPC_CSTR *NetworkAddr,RPC_CSTR *Endpoint,RPC_CSTR *NetworkOptions);
           RPC_STATUS __attribute__((__stdcall__)) RpcStringBindingParseW(RPC_WSTR StringBinding,RPC_WSTR *ObjUuid,RPC_WSTR *Protseq,RPC_WSTR *NetworkAddr,RPC_WSTR *Endpoint,RPC_WSTR *NetworkOptions);
           RPC_STATUS __attribute__((__stdcall__)) RpcStringFreeA(RPC_CSTR *String);
           RPC_STATUS __attribute__((__stdcall__)) RpcStringFreeW(RPC_WSTR *String);
           RPC_STATUS __attribute__((__stdcall__)) RpcIfInqId(RPC_IF_HANDLE RpcIfHandle,RPC_IF_ID *RpcIfId);
           RPC_STATUS __attribute__((__stdcall__)) RpcNetworkIsProtseqValidA(RPC_CSTR Protseq);
           RPC_STATUS __attribute__((__stdcall__)) RpcNetworkIsProtseqValidW(RPC_WSTR Protseq);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding,unsigned int *Timeout);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding,unsigned int Timeout);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetCancelTimeout(long Timeout);
           RPC_STATUS __attribute__((__stdcall__)) RpcNetworkInqProtseqsA (RPC_PROTSEQ_VECTORA **ProtseqVector);
           RPC_STATUS __attribute__((__stdcall__)) RpcNetworkInqProtseqsW (RPC_PROTSEQ_VECTORW **ProtseqVector);
           RPC_STATUS __attribute__((__stdcall__)) RpcObjectInqType(UUID *ObjUuid,UUID *TypeUuid);
           RPC_STATUS __attribute__((__stdcall__)) RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn);
           RPC_STATUS __attribute__((__stdcall__)) RpcObjectSetType(UUID *ObjUuid,UUID *TypeUuid);
           RPC_STATUS __attribute__((__stdcall__)) RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector);
           RPC_STATUS __attribute__((__stdcall__)) RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerInqBindings (RPC_BINDING_VECTOR **BindingVector);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerInqIf(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void **MgrEpv);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerListen(unsigned int MinimumCallThreads,unsigned int MaxCalls,unsigned int DontWait);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerRegisterIf(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void *MgrEpv);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void *MgrEpv,unsigned int Flags,unsigned int MaxCalls,RPC_IF_CALLBACK_FN *IfCallback);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void *MgrEpv,unsigned int Flags,unsigned int MaxCalls,unsigned int MaxRpcSize,RPC_IF_CALLBACK_FN *IfCallbackFn);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,unsigned int WaitForCallsToComplete);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,int RundownContextHandles);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseAllProtseqs(unsigned int MaxCalls,void *SecurityDescriptor);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseAllProtseqsEx(unsigned int MaxCalls,void *SecurityDescriptor,PRPC_POLICY Policy);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseAllProtseqsIf(unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor,PRPC_POLICY Policy);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqA(RPC_CSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqExA(RPC_CSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,PRPC_POLICY Policy);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqW(RPC_WSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqExW(RPC_WSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,PRPC_POLICY Policy);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqEpA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void *SecurityDescriptor);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqEpExA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void *SecurityDescriptor,PRPC_POLICY Policy);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqEpW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void *SecurityDescriptor);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqEpExW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void *SecurityDescriptor,PRPC_POLICY Policy);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqIfA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqIfExA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor,PRPC_POLICY Policy);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqIfW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerUseProtseqIfExW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor,PRPC_POLICY Policy);
           void __attribute__((__stdcall__)) RpcServerYield ();
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqStats(RPC_BINDING_HANDLE Binding,RPC_STATS_VECTOR **Statistics);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtWaitServerListen(void);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetServerStackSize(unsigned long ThreadStackSize);
           void __attribute__((__stdcall__)) RpcSsDontSerializeContext(void);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEnableIdleCleanup(void);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding,RPC_IF_ID_VECTOR **IfIdVector);
           RPC_STATUS __attribute__((__stdcall__)) RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding,unsigned long AuthnSvc,RPC_CSTR *ServerPrincName);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding,unsigned long AuthnSvc,RPC_WSTR *ServerPrincName);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc,RPC_CSTR *PrincName);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc,RPC_WSTR *PrincName);
           RPC_STATUS __attribute__((__stdcall__)) RpcEpResolveBinding(RPC_BINDING_HANDLE Binding,RPC_IF_HANDLE IfSpec);
           RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_CSTR *EntryName);
           RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_WSTR *EntryName);

  typedef void *RPC_AUTH_IDENTITY_HANDLE;
  typedef void *RPC_AUTHZ_HANDLE;
  typedef struct _RPC_SECURITY_QOS {
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
  } RPC_SECURITY_QOS,*PRPC_SECURITY_QOS;







  typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
    unsigned short *User;
    unsigned long UserLength;
    unsigned short *Domain;
    unsigned long DomainLength;
    unsigned short *Password;
    unsigned long PasswordLength;
    unsigned long Flags;
  } SEC_WINNT_AUTH_IDENTITY_W,*PSEC_WINNT_AUTH_IDENTITY_W;

  typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
    unsigned char *User;
    unsigned long UserLength;
    unsigned char *Domain;
    unsigned long DomainLength;
    unsigned char *Password;
    unsigned long PasswordLength;
    unsigned long Flags;
  } SEC_WINNT_AUTH_IDENTITY_A,*PSEC_WINNT_AUTH_IDENTITY_A;
  typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
  } RPC_HTTP_TRANSPORT_CREDENTIALS_W,*PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

  typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
  } RPC_HTTP_TRANSPORT_CREDENTIALS_A,*PRPC_HTTP_TRANSPORT_CREDENTIALS_A;

  typedef struct _RPC_SECURITY_QOS_V2_W {
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
    } u;
  } RPC_SECURITY_QOS_V2_W,*PRPC_SECURITY_QOS_V2_W;

  typedef struct _RPC_SECURITY_QOS_V2_A {
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
    } u;
  } RPC_SECURITY_QOS_V2_A,*PRPC_SECURITY_QOS_V2_A;



  typedef struct _RPC_SECURITY_QOS_V3_W {
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
    } u;
    void *Sid;
  } RPC_SECURITY_QOS_V3_W,*PRPC_SECURITY_QOS_V3_W;

  typedef struct _RPC_SECURITY_QOS_V3_A {
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
    } u;
    void *Sid;
  } RPC_SECURITY_QOS_V3_A,*PRPC_SECURITY_QOS_V3_A;
  typedef enum _RPC_HTTP_REDIRECTOR_STAGE {
    RPCHTTP_RS_REDIRECT = 1,RPCHTTP_RS_ACCESS_1,RPCHTTP_RS_SESSION,RPCHTTP_RS_ACCESS_2,RPCHTTP_RS_INTERFACE
  } RPC_HTTP_REDIRECTOR_STAGE;

  typedef RPC_STATUS (__attribute__((__stdcall__)) *RPC_NEW_HTTP_PROXY_CHANNEL)(RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,unsigned short *ServerName,unsigned short *ServerPort,unsigned short *RemoteUser,unsigned short *AuthType,void *ResourceUuid,void *Metadata,void *SessionId,void *Interface,void *Reserved,unsigned long Flags,unsigned short **NewServerName,unsigned short **NewServerPort);
  typedef void (__attribute__((__stdcall__)) *RPC_HTTP_PROXY_FREE_STRING)(unsigned short *String);






           RPC_STATUS __attribute__((__stdcall__)) RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle);
           RPC_STATUS __attribute__((__stdcall__)) RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle);
           RPC_STATUS __attribute__((__stdcall__)) RpcRevertToSelf();
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc,unsigned long Flags);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc,unsigned long Flags);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding,RPC_CSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding,RPC_CSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc,RPC_SECURITY_QOS *SecurityQos);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding,RPC_WSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding,RPC_WSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc,RPC_SECURITY_QOS *SecurityQOS);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc,unsigned long RpcQosVersion,RPC_SECURITY_QOS *SecurityQOS);
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc,unsigned long RpcQosVersion,RPC_SECURITY_QOS *SecurityQOS);

  typedef void (__attribute__((__stdcall__)) *RPC_AUTH_KEY_RETRIEVAL_FN)(void *Arg,unsigned short *ServerPrincName,unsigned long KeyVer,void **Key,RPC_STATUS *Status);

           RPC_STATUS __attribute__((__stdcall__)) RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName,unsigned long AuthnSvc,RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,void *Arg);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName,unsigned long AuthnSvc,RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,void *Arg);
  typedef struct {
    unsigned char *UserName;
    unsigned char *ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
  } RPC_CLIENT_INFORMATION1,*PRPC_CLIENT_INFORMATION1;
           RPC_STATUS __attribute__((__stdcall__)) RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding,RPC_BINDING_HANDLE *ServerBinding);
           __attribute__((noreturn)) void __attribute__((__stdcall__)) RpcRaiseException(RPC_STATUS exception);
           RPC_STATUS __attribute__((__stdcall__)) RpcTestCancel();
           RPC_STATUS __attribute__((__stdcall__)) RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle);
           RPC_STATUS __attribute__((__stdcall__)) RpcCancelThread(void *Thread);
           RPC_STATUS __attribute__((__stdcall__)) RpcCancelThreadEx(void *Thread,long Timeout);
           RPC_STATUS __attribute__((__stdcall__)) UuidCreate(UUID *Uuid);
           RPC_STATUS __attribute__((__stdcall__)) UuidCreateSequential(UUID *Uuid);
           RPC_STATUS __attribute__((__stdcall__)) UuidToStringA(UUID *Uuid,RPC_CSTR *StringUuid);
           RPC_STATUS __attribute__((__stdcall__)) UuidFromStringA(RPC_CSTR StringUuid,UUID *Uuid);
           RPC_STATUS __attribute__((__stdcall__)) UuidToStringW(UUID *Uuid,RPC_WSTR *StringUuid);
           RPC_STATUS __attribute__((__stdcall__)) UuidFromStringW(RPC_WSTR StringUuid,UUID *Uuid);
           signed int __attribute__((__stdcall__)) UuidCompare(UUID *Uuid1,UUID *Uuid2,RPC_STATUS *Status);
           RPC_STATUS __attribute__((__stdcall__)) UuidCreateNil(UUID *NilUuid);
           int __attribute__((__stdcall__)) UuidEqual(UUID *Uuid1,UUID *Uuid2,RPC_STATUS *Status);
           unsigned short __attribute__((__stdcall__)) UuidHash(UUID *Uuid,RPC_STATUS *Status);
           int __attribute__((__stdcall__)) UuidIsNil(UUID *Uuid,RPC_STATUS *Status);
           RPC_STATUS __attribute__((__stdcall__)) RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_CSTR Annotation);
           RPC_STATUS __attribute__((__stdcall__)) RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_WSTR Annotation);
           RPC_STATUS __attribute__((__stdcall__)) RpcEpRegisterA(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_CSTR Annotation);
           RPC_STATUS __attribute__((__stdcall__)) RpcEpRegisterW(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_WSTR Annotation);
           RPC_STATUS __attribute__((__stdcall__)) RpcEpUnregister(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector);
           RPC_STATUS __attribute__((__stdcall__)) DceErrorInqTextA(RPC_STATUS RpcStatus,RPC_CSTR ErrorText);
           RPC_STATUS __attribute__((__stdcall__)) DceErrorInqTextW(RPC_STATUS RpcStatus,RPC_WSTR ErrorText);

  typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding,unsigned long InquiryType,RPC_IF_ID *IfId,unsigned long VersOption,UUID *ObjectUuid,RPC_EP_INQ_HANDLE *InquiryContext);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_BINDING_HANDLE *Binding,UUID *ObjectUuid,RPC_CSTR *Annotation);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_BINDING_HANDLE *Binding,UUID *ObjectUuid,RPC_WSTR *Annotation);
           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding,RPC_IF_ID *IfId,RPC_BINDING_HANDLE Binding,UUID *ObjectUuid);

  typedef int (__attribute__((__stdcall__)) *RPC_MGMT_AUTHORIZATION_FN)(RPC_BINDING_HANDLE ClientBinding,unsigned long RequestedMgmtOperation,RPC_STATUS *Status);







           RPC_STATUS __attribute__((__stdcall__)) RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn);
extern "C" {


  typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
  } RPC_VERSION;

  typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
  } RPC_SYNTAX_IDENTIFIER,*PRPC_SYNTAX_IDENTIFIER;

  typedef struct _RPC_MESSAGE {
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void *Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void *RpcInterfaceInformation;
    void *ReservedForRuntime;
    void *ManagerEpv;
    void *ImportContext;
    unsigned long RpcFlags;
  } RPC_MESSAGE,*PRPC_MESSAGE;

  typedef RPC_STATUS __attribute__((__stdcall__)) RPC_FORWARD_FUNCTION(UUID *InterfaceId,RPC_VERSION *InterfaceVersion,UUID *ObjectId,unsigned char *Rpcpro,void **ppDestEndpoint);

  enum RPC_ADDRESS_CHANGE_TYPE {
    PROTOCOL_NOT_LOADED = 1,PROTOCOL_LOADED,PROTOCOL_ADDRESS_CHANGE
  };

  typedef void __attribute__((__stdcall__)) RPC_ADDRESS_CHANGE_FN(void *arg);
  typedef void (__attribute__((__stdcall__)) *RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE Message);

  typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION *DispatchTable;
    LONG_PTR Reserved;
  } RPC_DISPATCH_TABLE,*PRPC_DISPATCH_TABLE;

  typedef struct _RPC_PROTSEQ_ENDPOINT {
    unsigned char *RpcProtocolSequence;
    unsigned char *Endpoint;
  } RPC_PROTSEQ_ENDPOINT,*PRPC_PROTSEQ_ENDPOINT;




  typedef struct _RPC_SERVER_INTERFACE {
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    void const *InterpreterInfo;
    unsigned int Flags;
  } RPC_SERVER_INTERFACE,*PRPC_SERVER_INTERFACE;

  typedef struct _RPC_CLIENT_INTERFACE {
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void const *InterpreterInfo;
    unsigned int Flags;
  } RPC_CLIENT_INTERFACE,*PRPC_CLIENT_INTERFACE;

           RPC_STATUS __attribute__((__stdcall__)) I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcGetBuffer(RPC_MESSAGE *Message);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcGetBufferWithObject(RPC_MESSAGE *Message,UUID *ObjectUuid);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcSendReceive(RPC_MESSAGE *Message);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcFreeBuffer(RPC_MESSAGE *Message);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcSend(PRPC_MESSAGE Message);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcReceive(PRPC_MESSAGE Message,unsigned int Size);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcFreePipeBuffer(RPC_MESSAGE *Message);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcReallocPipeBuffer(PRPC_MESSAGE Message,unsigned int NewSize);

  typedef void *I_RPC_MUTEX;






           void __attribute__((__stdcall__)) I_RpcRequestMutex(I_RPC_MUTEX *Mutex);
           void __attribute__((__stdcall__)) I_RpcClearMutex(I_RPC_MUTEX Mutex);
           void __attribute__((__stdcall__)) I_RpcDeleteMutex(I_RPC_MUTEX Mutex);
           void *__attribute__((__stdcall__)) I_RpcAllocate(unsigned int Size);
           void __attribute__((__stdcall__)) I_RpcFree(void *Object);
           void __attribute__((__stdcall__)) I_RpcPauseExecution(unsigned long Milliseconds);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcGetExtendedError();

  typedef void (__attribute__((__stdcall__)) *PRPC_RUNDOWN)(void *AssociationContext);

           RPC_STATUS __attribute__((__stdcall__)) I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle,PRPC_RUNDOWN RundownRoutine,void *Context);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle);
           RPC_BINDING_HANDLE __attribute__((__stdcall__)) I_RpcGetCurrentCallHandle(void);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle,void **AssociationContext);
           void *__attribute__((__stdcall__)) I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle);
           void __attribute__((__stdcall__)) I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle,void *ServerContextList);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcNsInterfaceExported(unsigned long EntryNameSyntax,unsigned short *EntryName,RPC_SERVER_INTERFACE *RpcInterfaceInformation);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax,unsigned short *EntryName,RPC_SERVER_INTERFACE *RpcInterfaceInformation);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding,unsigned short **StringBinding);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding,void **SecurityContextHandle);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding,RPC_CSTR WireId);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingInqMarshalledTargetInfo (RPC_BINDING_HANDLE Binding,unsigned long *MarshalledTargetInfoLength,RPC_CSTR *MarshalledTargetInfo);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding,unsigned long *Pid);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding,void **AsyncHandle);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_WSTR EntryName);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_CSTR EntryName);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress,RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void *SecurityDescriptor,void *Policy);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress,RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void *SecurityDescriptor,void *Policy);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress,RPC_WSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,void *Policy);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress,RPC_CSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,void *Policy);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding,RPC_WSTR *DynamicEndpoint);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding,RPC_CSTR *DynamicEndpoint);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context);






           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding,unsigned int *Type);

  typedef struct _RPC_TRANSFER_SYNTAX {
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
  } RPC_TRANSFER_SYNTAX;

           RPC_STATUS __attribute__((__stdcall__)) I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle,RPC_TRANSFER_SYNTAX *TransferSyntaxes,unsigned int TransferSyntaxSize,unsigned int *TransferSyntaxCount);
           RPC_STATUS __attribute__((__stdcall__)) I_UuidCreate(UUID *Uuid);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding,RPC_BINDING_HANDLE *DestinationBinding);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle,unsigned int *ClientLocalFlag);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding,void **ConnId,int *pfFirstCall);
           void __attribute__((__stdcall__)) I_RpcSsDontSerializeContext(void);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcLaunchDatagramReceiveThread(void *pAddress);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction);
  RPC_ADDRESS_CHANGE_FN *__attribute__((__stdcall__)) I_RpcServerInqAddressChangeFn();
  RPC_STATUS __attribute__((__stdcall__)) I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn);




           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding,void *Buffer,unsigned long *BufferSize,unsigned long *AddressFormat);
           void __attribute__((__stdcall__)) I_RpcSessionStrictContextHandle();
           RPC_STATUS __attribute__((__stdcall__)) I_RpcTurnOnEEInfoPropagation(void);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize,unsigned long *SendBuffSize);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize,unsigned long SendBuffSize);

  typedef void (*RPCLT_PDU_FILTER_FUNC)(void *Buffer,unsigned int BufferLength,int fDatagram);
  typedef void (__attribute__((__cdecl__)) *RPC_SETFILTER_FUNC)(RPCLT_PDU_FILTER_FUNC pfnFilter);


           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerStartListening(void *hWnd);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerStopListening();

  typedef RPC_STATUS (*RPC_BLOCKING_FN)(void *hWnd,void *Context,void *hSyncEvent);



           RPC_STATUS __attribute__((__stdcall__)) I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding,RPC_BLOCKING_FN BlockingFn,unsigned long ServerTid);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcSetThreadParams(int fClientFree,void *Context,void *hWndClient);
           unsigned int __attribute__((__stdcall__)) I_RpcWindowProc(void *hWnd,unsigned int Message,unsigned int wParam,unsigned long lParam);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq,RPC_CSTR Endpoint);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq,RPC_WSTR Endpoint);


           RPC_STATUS __attribute__((__stdcall__)) I_RpcServerInqTransportType(unsigned int *Type);
           long __attribute__((__stdcall__)) I_RpcMapWin32Status(RPC_STATUS Status);

  typedef struct _RPC_C_OPT_METADATA_DESCRIPTOR {
    unsigned long BufferSize;
    char *Buffer;
  } RPC_C_OPT_METADATA_DESCRIPTOR;

  typedef struct _RDR_CALLOUT_STATE {
    RPC_STATUS LastError;
    void *LastEEInfo;
    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
    unsigned short *ServerName;
    unsigned short *ServerPort;
    unsigned short *RemoteUser;
    unsigned short *AuthType;
    unsigned char ResourceTypePresent;
    unsigned char MetadataPresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    RPC_C_OPT_METADATA_DESCRIPTOR Metadata;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;
  } RDR_CALLOUT_STATE;

  typedef RPC_STATUS (__attribute__((__stdcall__)) *I_RpcProxyIsValidMachineFn)(char *pszMachine,char *pszDotMachine,unsigned long dwPortNumber);
  typedef RPC_STATUS (__attribute__((__stdcall__)) *I_RpcProxyGetClientAddressFn)(void *Context,char *Buffer,unsigned long *BufferLength);
  typedef RPC_STATUS (__attribute__((__stdcall__)) *I_RpcProxyGetConnectionTimeoutFn)(unsigned long *ConnectionTimeout);
  typedef RPC_STATUS (__attribute__((__stdcall__)) *I_RpcPerformCalloutFn)(void *Context,RDR_CALLOUT_STATE *CallOutState,RPC_HTTP_REDIRECTOR_STAGE Stage);
  typedef void (__attribute__((__stdcall__)) *I_RpcFreeCalloutStateFn)(RDR_CALLOUT_STATE *CallOutState);

  typedef struct tagI_RpcProxyCallbackInterface {
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
  } I_RpcProxyCallbackInterface;




           RPC_STATUS __attribute__((__stdcall__)) I_RpcProxyNewConnection(unsigned long ConnectionType,unsigned short *ServerAddress,unsigned short *ServerPort,unsigned short *MinConnTimeout,void *ConnectionParameter,RDR_CALLOUT_STATE *CallOutState,I_RpcProxyCallbackInterface *ProxyCallbackInterface);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcReplyToClientWithStatus(void *ConnectionParameter,RPC_STATUS RpcStatus);
           void __attribute__((__stdcall__)) I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus,RDR_CALLOUT_STATE *CallOutState,unsigned short *DllName);


}




}
typedef void *RPC_NS_HANDLE;
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingExportA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVec,UUID_VECTOR *ObjectUuidVec);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingUnexportA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectUuidVec);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingExportW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVec,UUID_VECTOR *ObjectUuidVec);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingUnexportW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectUuidVec);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingExportPnPA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingExportPnPW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,unsigned long BindingMaxCount,RPC_NS_HANDLE *LookupContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,unsigned long BindingMaxCount,RPC_NS_HANDLE *LookupContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext,RPC_BINDING_VECTOR **BindingVec);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupDeleteA(unsigned long GroupNameSyntax,RPC_CSTR GroupName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrAddA(unsigned long GroupNameSyntax,RPC_CSTR GroupName,unsigned long MemberNameSyntax,RPC_CSTR MemberName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax,RPC_CSTR GroupName,unsigned long MemberNameSyntax,RPC_CSTR MemberName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax,RPC_CSTR GroupName,unsigned long MemberNameSyntax,RPC_NS_HANDLE *InquiryContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext,RPC_CSTR *MemberName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupDeleteW(unsigned long GroupNameSyntax,RPC_WSTR GroupName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrAddW(unsigned long GroupNameSyntax,RPC_WSTR GroupName,unsigned long MemberNameSyntax,RPC_WSTR MemberName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax,RPC_WSTR GroupName,unsigned long MemberNameSyntax,RPC_WSTR MemberName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax,RPC_WSTR GroupName,unsigned long MemberNameSyntax,RPC_NS_HANDLE *InquiryContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext,RPC_WSTR *MemberName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileDeleteA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltAddA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_CSTR MemberName,unsigned long Priority,RPC_CSTR Annotation);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_CSTR MemberName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName,unsigned long InquiryType,RPC_IF_ID *IfId,unsigned long VersOption,unsigned long MemberNameSyntax,RPC_CSTR MemberName,RPC_NS_HANDLE *InquiryContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_CSTR *MemberName,unsigned long *Priority,RPC_CSTR *Annotation);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileDeleteW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltAddW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_WSTR MemberName,unsigned long Priority,RPC_WSTR Annotation);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_WSTR MemberName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName,unsigned long InquiryType,RPC_IF_ID *IfId,unsigned long VersOption,unsigned long MemberNameSyntax,RPC_WSTR MemberName,RPC_NS_HANDLE *InquiryContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_WSTR *MemberName,unsigned long *Priority,RPC_WSTR *Annotation);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_NS_HANDLE *InquiryContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_NS_HANDLE *InquiryContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext,UUID *ObjUuid);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryExpandNameA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_CSTR *ExpandedName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_ID *IfId,unsigned long VersOption,UUID_VECTOR *ObjectUuidVec);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax,RPC_CSTR EntryName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax,RPC_CSTR EntryName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_ID_VECTOR **IfIdVec);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle,unsigned long ExpirationAge);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtInqExpAge(unsigned long *ExpirationAge);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtSetExpAge(unsigned long ExpirationAge);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsEntryExpandNameW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_WSTR *ExpandedName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_ID *IfId,unsigned long VersOption,UUID_VECTOR *ObjectUuidVec);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax,RPC_WSTR EntryName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax,RPC_WSTR EntryName);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_ID_VECTOR **IfIdVec);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingImportBeginA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,RPC_NS_HANDLE *ImportContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingImportBeginW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,RPC_NS_HANDLE *ImportContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext,RPC_BINDING_HANDLE *Binding);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext);
         RPC_STATUS __attribute__((__stdcall__)) RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec,RPC_BINDING_HANDLE *Binding);
extern "C" {




  typedef enum _RPC_NOTIFICATION_TYPES {
    RpcNotificationTypeNone,RpcNotificationTypeEvent,RpcNotificationTypeApc,RpcNotificationTypeIoc,RpcNotificationTypeHwnd,
    RpcNotificationTypeCallback
  } RPC_NOTIFICATION_TYPES;

  typedef enum _RPC_ASYNC_EVENT {
    RpcCallComplete,RpcSendComplete,RpcReceiveComplete
  } RPC_ASYNC_EVENT;

  struct _RPC_ASYNC_STATE;

  typedef void __attribute__((__stdcall__)) RPCNOTIFICATION_ROUTINE(struct _RPC_ASYNC_STATE *pAsync,void *Context,RPC_ASYNC_EVENT Event);
  typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

  typedef struct _RPC_ASYNC_STATE {
    unsigned int Size;
    unsigned long Signature;
    long Lock;
    unsigned long Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;
    RPC_NOTIFICATION_TYPES NotificationType;
    union {
      struct {
 PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
 HANDLE hThread;
      } APC;
      struct {
 HANDLE hIOPort;
 DWORD dwNumberOfBytesTransferred;
 DWORD_PTR dwCompletionKey;
 LPOVERLAPPED lpOverlapped;
      } IOC;
      struct {
 HWND hWnd;
 UINT Msg;
      } HWND;
      HANDLE hEvent;
      PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
    } u;
    LONG_PTR Reserved[4];
  } RPC_ASYNC_STATE,*PRPC_ASYNC_STATE;






           RPC_STATUS __attribute__((__stdcall__)) RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync,unsigned int Size);
           RPC_STATUS __attribute__((__stdcall__)) RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync);
           RPC_STATUS __attribute__((__stdcall__)) RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync);
           RPC_STATUS __attribute__((__stdcall__)) RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync,void *Reply);
           RPC_STATUS __attribute__((__stdcall__)) RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync,unsigned long ExceptionCode);
           RPC_STATUS __attribute__((__stdcall__)) RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync,WINBOOL fAbort);
           RPC_STATUS __attribute__((__stdcall__)) RpcAsyncCleanupThread(DWORD dwTimeout);

  typedef enum tagExtendedErrorParamTypes {
    eeptAnsiString = 1,eeptUnicodeString,eeptLongVal,eeptShortVal,eeptPointerVal,eeptNone,eeptBinary
  } ExtendedErrorParamTypes;




  typedef struct tagBinaryParam {
    void *Buffer;
    short Size;
  } BinaryParam;

  typedef struct tagRPC_EE_INFO_PARAM {
    ExtendedErrorParamTypes ParameterType;
    union {
      LPSTR AnsiString;
      LPWSTR UnicodeString;
      long LVal;
      short SVal;
      ULONGLONG PVal;
      BinaryParam BVal;
    } u;
  } RPC_EE_INFO_PARAM;
  typedef struct tagRPC_EXTENDED_ERROR_INFO {
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union {
      SYSTEMTIME SystemTime;
      FILETIME FileTime;
    } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
  } RPC_EXTENDED_ERROR_INFO;

  typedef struct tagRPC_ERROR_ENUM_HANDLE {
    ULONG Signature;
    void *CurrentPos;
    void *Head;
  } RPC_ERROR_ENUM_HANDLE;

           RPC_STATUS __attribute__((__stdcall__)) RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
           RPC_STATUS __attribute__((__stdcall__)) RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle,WINBOOL CopyStrings,RPC_EXTENDED_ERROR_INFO *ErrorInfo);
           RPC_STATUS __attribute__((__stdcall__)) RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
           RPC_STATUS __attribute__((__stdcall__)) RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
           RPC_STATUS __attribute__((__stdcall__)) RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle,int *Records);
           RPC_STATUS __attribute__((__stdcall__)) RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle,PVOID *ErrorBlob,size_t *BlobSize);
           RPC_STATUS __attribute__((__stdcall__)) RpcErrorLoadErrorInfo(PVOID ErrorBlob,size_t BlobSize,RPC_ERROR_ENUM_HANDLE *EnumHandle);
           RPC_STATUS __attribute__((__stdcall__)) RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo);
           void __attribute__((__stdcall__)) RpcErrorClearInformation(void);
           RPC_STATUS __attribute__((__stdcall__)) RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding,WINBOOL ImpersonateOnReturn,PVOID Reserved1,PLARGE_INTEGER pExpirationTime,LUID Reserved2,DWORD Reserved3,PVOID Reserved4,PVOID *pAuthzClientContext);
           RPC_STATUS __attribute__((__stdcall__)) RpcFreeAuthorizationContext(PVOID *pAuthzClientContext);
           RPC_STATUS __attribute__((__stdcall__)) RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle,PVOID UserContext);
           RPC_STATUS __attribute__((__stdcall__)) RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle,PVOID UserContext);





  typedef struct tagRPC_CALL_ATTRIBUTES_V1_W {
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    WINBOOL NullSession;
  } RPC_CALL_ATTRIBUTES_V1_W;

  typedef struct tagRPC_CALL_ATTRIBUTES_V1_A {
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    WINBOOL NullSession;
  } RPC_CALL_ATTRIBUTES_V1_A;




           RPC_STATUS __attribute__((__stdcall__)) RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding,void *RpcCallAttributes);
           RPC_STATUS __attribute__((__stdcall__)) RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding,void *RpcCallAttributes);

  typedef RPC_CALL_ATTRIBUTES_V1_W RPC_CALL_ATTRIBUTES;

  RPC_STATUS __attribute__((__stdcall__)) I_RpcAsyncSetHandle(PRPC_MESSAGE Message,PRPC_ASYNC_STATE pAsync);
  RPC_STATUS __attribute__((__stdcall__)) I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync,unsigned long ExceptionCode);
  int __attribute__((__stdcall__)) I_RpcExceptionFilter(unsigned long ExceptionCode);

typedef union _RPC_ASYNC_NOTIFICATION_INFO {
  struct {
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
    HANDLE hThread;
  } APC;
  struct {
    HANDLE hIOPort;
    DWORD dwNumberOfBytesTransferred;
    DWORD_PTR dwCompletionKey;
    LPOVERLAPPED lpOverlapped;
  } IOC;
  struct {
    HWND hWnd;
    UINT Msg;
  } HWND;
  HANDLE hEvent;
  PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

RPC_STATUS __attribute__((__stdcall__)) RpcBindingBind(
  PRPC_ASYNC_STATE pAsync,
  RPC_BINDING_HANDLE Binding,
  RPC_IF_HANDLE IfSpec
);

RPC_STATUS __attribute__((__stdcall__)) RpcBindingUnbind(
  RPC_BINDING_HANDLE Binding
);

typedef enum _RpcCallType {
  rctInvalid,
  rctNormal,
  rctTraining,
  rctGuaranteed
} RpcCallType;

typedef enum _RpcLocalAddressFormat {
  rlafInvalid,
  rlafIPv4,
  rlafIPv6
} RpcLocalAddressFormat;

typedef enum _RPC_NOTIFICATIONS {
  RpcNotificationCallNone = 0,
  RpcNotificationClientDisconnect = 1,
  RpcNotificationCallCancel = 2
} RPC_NOTIFICATIONS;

typedef enum _RpcCallClientLocality {
  rcclInvalid,
  rcclLocal,
  rcclRemote,
  rcclClientUnknownLocality
} RpcCallClientLocality;

RPC_STATUS __attribute__((__stdcall__)) RpcServerSubscribeForNotification(
  RPC_BINDING_HANDLE Binding,
  DWORD Notification,
  RPC_NOTIFICATION_TYPES NotificationType,
  RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo
);

RPC_STATUS __attribute__((__stdcall__)) RpcServerUnsubscribeForNotification(
  RPC_BINDING_HANDLE Binding,
  RPC_NOTIFICATIONS Notification,
  unsigned long *NotificationsQueued
);
}
}
extern "C" {
}
extern "C" {



  struct HDROP__ { int unused; }; typedef struct HDROP__ *HDROP;
  extern "C" UINT __attribute__((__stdcall__)) DragQueryFileA (HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch);
  extern "C" UINT __attribute__((__stdcall__)) DragQueryFileW (HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch);
  extern "C" WINBOOL __attribute__((__stdcall__)) DragQueryPoint (HDROP hDrop, POINT *ppt);
  extern "C" void __attribute__((__stdcall__)) DragFinish (HDROP hDrop);
  extern "C" void __attribute__((__stdcall__)) DragAcceptFiles (HWND hWnd, WINBOOL fAccept);
  extern "C" HINSTANCE __attribute__((__stdcall__)) ShellExecuteA (HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
  extern "C" HINSTANCE __attribute__((__stdcall__)) ShellExecuteW (HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);
  extern "C" HINSTANCE __attribute__((__stdcall__)) FindExecutableA (LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);
  extern "C" HINSTANCE __attribute__((__stdcall__)) FindExecutableW (LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);
  extern "C" LPWSTR * __attribute__((__stdcall__)) CommandLineToArgvW (LPCWSTR lpCmdLine, int *pNumArgs);
  extern "C" INT __attribute__((__stdcall__)) ShellAboutA (HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
  extern "C" INT __attribute__((__stdcall__)) ShellAboutW (HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);
  extern "C" HICON __attribute__((__stdcall__)) DuplicateIcon (HINSTANCE hInst, HICON hIcon);
  extern "C" HICON __attribute__((__stdcall__)) ExtractAssociatedIconA (HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon);
  extern "C" HICON __attribute__((__stdcall__)) ExtractAssociatedIconW (HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon);
  extern "C" HICON __attribute__((__stdcall__)) ExtractAssociatedIconExA (HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);
  extern "C" HICON __attribute__((__stdcall__)) ExtractAssociatedIconExW (HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);
  extern "C" HICON __attribute__((__stdcall__)) ExtractIconA (HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex);
  extern "C" HICON __attribute__((__stdcall__)) ExtractIconW (HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex);

  typedef struct _DRAGINFOA {
    UINT uSize;
    POINT pt;
    WINBOOL fNC;
    LPSTR lpFileList;
    DWORD grfKeyState;
  } DRAGINFOA,*LPDRAGINFOA;

  typedef struct _DRAGINFOW {
    UINT uSize;
    POINT pt;
    WINBOOL fNC;
    LPWSTR lpFileList;
    DWORD grfKeyState;
  } DRAGINFOW,*LPDRAGINFOW;

  typedef DRAGINFOW DRAGINFO;
  typedef LPDRAGINFOW LPDRAGINFO;
  typedef struct _AppBarData {
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam;
  } APPBARDATA,*PAPPBARDATA;

  extern "C" UINT_PTR __attribute__((__stdcall__)) SHAppBarMessage (DWORD dwMessage, PAPPBARDATA pData);
  extern "C" DWORD __attribute__((__stdcall__)) DoEnvironmentSubstA (LPSTR pszSrc, UINT cchSrc);
  extern "C" DWORD __attribute__((__stdcall__)) DoEnvironmentSubstW (LPWSTR pszSrc, UINT cchSrc);
  extern "C" UINT __attribute__((__stdcall__)) ExtractIconExA (LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
  extern "C" UINT __attribute__((__stdcall__)) ExtractIconExW (LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
  typedef WORD FILEOP_FLAGS;







  typedef WORD PRINTEROP_FLAGS;

  typedef struct _SHFILEOPSTRUCTA {
    HWND hwnd;
    UINT wFunc;
    LPCSTR pFrom;
    LPCSTR pTo;
    FILEOP_FLAGS fFlags;
    WINBOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCSTR lpszProgressTitle;
  } SHFILEOPSTRUCTA,*LPSHFILEOPSTRUCTA;

  typedef struct _SHFILEOPSTRUCTW {
    HWND hwnd;
    UINT wFunc;
    LPCWSTR pFrom;
    LPCWSTR pTo;
    FILEOP_FLAGS fFlags;
    WINBOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCWSTR lpszProgressTitle;
  } SHFILEOPSTRUCTW,*LPSHFILEOPSTRUCTW;

  typedef SHFILEOPSTRUCTW SHFILEOPSTRUCT;
  typedef LPSHFILEOPSTRUCTW LPSHFILEOPSTRUCT;

  extern "C" int __attribute__((__stdcall__)) SHFileOperationA (LPSHFILEOPSTRUCTA lpFileOp);
  extern "C" int __attribute__((__stdcall__)) SHFileOperationW (LPSHFILEOPSTRUCTW lpFileOp);



  extern "C" void __attribute__((__stdcall__)) SHFreeNameMappings (HANDLE hNameMappings);

  typedef struct _SHNAMEMAPPINGA {
    LPSTR pszOldPath;
    LPSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
  } SHNAMEMAPPINGA,*LPSHNAMEMAPPINGA;

  typedef struct _SHNAMEMAPPINGW {
    LPWSTR pszOldPath;
    LPWSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
  } SHNAMEMAPPINGW,*LPSHNAMEMAPPINGW;


  typedef SHNAMEMAPPINGW SHNAMEMAPPING;
  typedef LPSHNAMEMAPPINGW LPSHNAMEMAPPING;
  typedef struct _SHELLEXECUTEINFOA {
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCSTR lpVerb;
    LPCSTR lpFile;
    LPCSTR lpParameters;
    LPCSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    __extension__ union {
      HANDLE hIcon;
      HANDLE hMonitor;
    } ;
    HANDLE hProcess;
  } SHELLEXECUTEINFOA,*LPSHELLEXECUTEINFOA;

  typedef struct _SHELLEXECUTEINFOW {
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR lpVerb;
    LPCWSTR lpFile;
    LPCWSTR lpParameters;
    LPCWSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCWSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    __extension__ union {
      HANDLE hIcon;
      HANDLE hMonitor;
    } ;
    HANDLE hProcess;
  } SHELLEXECUTEINFOW,*LPSHELLEXECUTEINFOW;

  typedef SHELLEXECUTEINFOW SHELLEXECUTEINFO;
  typedef LPSHELLEXECUTEINFOW LPSHELLEXECUTEINFO;

  extern "C" WINBOOL __attribute__((__stdcall__)) ShellExecuteExA (SHELLEXECUTEINFOA *pExecInfo);
  extern "C" WINBOOL __attribute__((__stdcall__)) ShellExecuteExW (SHELLEXECUTEINFOW *pExecInfo);



  typedef struct _SHCREATEPROCESSINFOW {
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR pszFile;
    LPCWSTR pszParameters;
    LPCWSTR pszCurrentDirectory;
    HANDLE hUserToken;
    LPSECURITY_ATTRIBUTES lpProcessAttributes;
    LPSECURITY_ATTRIBUTES lpThreadAttributes;
    WINBOOL bInheritHandles;
    DWORD dwCreationFlags;
    LPSTARTUPINFOW lpStartupInfo;
    LPPROCESS_INFORMATION lpProcessInformation;
  } SHCREATEPROCESSINFOW,*PSHCREATEPROCESSINFOW;

  extern "C" WINBOOL __attribute__((__stdcall__)) SHCreateProcessAsUserW (PSHCREATEPROCESSINFOW pscpi);
  typedef struct _SHQUERYRBINFO {
    DWORD cbSize;
    __extension__ long long i64Size;
    __extension__ long long i64NumItems;
  } SHQUERYRBINFO,*LPSHQUERYRBINFO;





  extern "C" HRESULT __attribute__((__stdcall__)) SHQueryRecycleBinA (LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
  extern "C" HRESULT __attribute__((__stdcall__)) SHQueryRecycleBinW (LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);



  extern "C" HRESULT __attribute__((__stdcall__)) SHEmptyRecycleBinA (HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
  extern "C" HRESULT __attribute__((__stdcall__)) SHEmptyRecycleBinW (HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);
  typedef struct _NOTIFYICONDATAA {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    CHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    CHAR szInfo[256];
    __extension__ union {
      UINT uTimeout;
      UINT uVersion;
    } ;
    CHAR szInfoTitle[64];
    DWORD dwInfoFlags;
    GUID guidItem;



  } NOTIFYICONDATAA,*PNOTIFYICONDATAA;

  typedef struct _NOTIFYICONDATAW {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    WCHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    WCHAR szInfo[256];
    __extension__ union {
      UINT uTimeout;
      UINT uVersion;
    } ;
    WCHAR szInfoTitle[64];
    DWORD dwInfoFlags;
    GUID guidItem;



  } NOTIFYICONDATAW,*PNOTIFYICONDATAW;

  typedef NOTIFYICONDATAW NOTIFYICONDATA;
  typedef PNOTIFYICONDATAW PNOTIFYICONDATA;
  typedef struct _NOTIFYICONIDENTIFIER {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    GUID guidItem;
  } NOTIFYICONIDENTIFIER,*PNOTIFYICONIDENTIFIER;

  extern "C" WINBOOL __attribute__((__stdcall__)) Shell_NotifyIconA (DWORD dwMessage, PNOTIFYICONDATAA lpData);
  extern "C" WINBOOL __attribute__((__stdcall__)) Shell_NotifyIconW (DWORD dwMessage, PNOTIFYICONDATAW lpData);
  typedef struct _SHFILEINFOA {
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    CHAR szDisplayName[260];
    CHAR szTypeName[80];
  } SHFILEINFOA;

  typedef struct _SHFILEINFOW {
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    WCHAR szDisplayName[260];
    WCHAR szTypeName[80];
  } SHFILEINFOW;

  typedef SHFILEINFOW SHFILEINFO;
  extern "C" DWORD_PTR __attribute__((__stdcall__)) SHGetFileInfoA (LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags);
  extern "C" DWORD_PTR __attribute__((__stdcall__)) SHGetFileInfoW (LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags);
  extern "C" WINBOOL __attribute__((__stdcall__)) SHGetDiskFreeSpaceExA (LPCSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes);
  extern "C" WINBOOL __attribute__((__stdcall__)) SHGetDiskFreeSpaceExW (LPCWSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes);
  extern "C" WINBOOL __attribute__((__stdcall__)) SHGetNewLinkInfoA (LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, WINBOOL *pfMustCopy, UINT uFlags);
  extern "C" WINBOOL __attribute__((__stdcall__)) SHGetNewLinkInfoW (LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, WINBOOL *pfMustCopy, UINT uFlags);
  extern "C" WINBOOL __attribute__((__stdcall__)) SHInvokePrinterCommandA (HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, WINBOOL fModal);
  extern "C" WINBOOL __attribute__((__stdcall__)) SHInvokePrinterCommandW (HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, WINBOOL fModal);
  extern "C" HRESULT __attribute__((__stdcall__)) SHLoadNonloadedIconOverlayIdentifiers (void);
  extern "C" HRESULT __attribute__((__stdcall__)) SHIsFileAvailableOffline (PCWSTR pwszPath, DWORD *pdwStatus);





  extern "C" HRESULT __attribute__((__stdcall__)) SHSetLocalizedName (PCWSTR pszPath, PCWSTR pszResModule, int idsRes);
  extern "C" int __attribute__((__cdecl__)) ShellMessageBoxA (HINSTANCE hAppInst, HWND hWnd, LPCSTR lpcText, LPCSTR lpcTitle, UINT fuStyle,...);
  extern "C" int __attribute__((__cdecl__)) ShellMessageBoxW (HINSTANCE hAppInst, HWND hWnd, LPCWSTR lpcText, LPCWSTR lpcTitle, UINT fuStyle,...);



  extern "C" WINBOOL __attribute__((__stdcall__)) IsLFNDriveA (LPCSTR pszPath);
  extern "C" WINBOOL __attribute__((__stdcall__)) IsLFNDriveW (LPCWSTR pszPath);
}
#pragma pack(push,8)





typedef struct _PERF_DATA_BLOCK {
  WCHAR Signature[4];
  DWORD LittleEndian;
  DWORD Version;
  DWORD Revision;
  DWORD TotalByteLength;
  DWORD HeaderLength;
  DWORD NumObjectTypes;
  LONG DefaultObject;
  SYSTEMTIME SystemTime;
  LARGE_INTEGER PerfTime;
  LARGE_INTEGER PerfFreq;
  LARGE_INTEGER PerfTime100nSec;
  DWORD SystemNameLength;
  DWORD SystemNameOffset;
} PERF_DATA_BLOCK,*PPERF_DATA_BLOCK;

typedef struct _PERF_OBJECT_TYPE {
  DWORD TotalByteLength;
  DWORD DefinitionLength;
  DWORD HeaderLength;
  DWORD ObjectNameTitleIndex;



  LPWSTR ObjectNameTitle;

  DWORD ObjectHelpTitleIndex;



  LPWSTR ObjectHelpTitle;

  DWORD DetailLevel;
  DWORD NumCounters;
  LONG DefaultCounter;
  LONG NumInstances;
  DWORD CodePage;
  LARGE_INTEGER PerfTime;
  LARGE_INTEGER PerfFreq;
} PERF_OBJECT_TYPE,*PPERF_OBJECT_TYPE;
typedef struct _PERF_COUNTER_DEFINITION {
  DWORD ByteLength;
  DWORD CounterNameTitleIndex;



  LPWSTR CounterNameTitle;

  DWORD CounterHelpTitleIndex;



  LPWSTR CounterHelpTitle;

  LONG DefaultScale;
  DWORD DetailLevel;
  DWORD CounterType;
  DWORD CounterSize;
  DWORD CounterOffset;
} PERF_COUNTER_DEFINITION,*PPERF_COUNTER_DEFINITION;



typedef struct _PERF_INSTANCE_DEFINITION {
  DWORD ByteLength;
  DWORD ParentObjectTitleIndex;
  DWORD ParentObjectInstance;
  LONG UniqueID;
  DWORD NameOffset;
  DWORD NameLength;
} PERF_INSTANCE_DEFINITION,*PPERF_INSTANCE_DEFINITION;

typedef struct _PERF_COUNTER_BLOCK {
  DWORD ByteLength;

} PERF_COUNTER_BLOCK,*PPERF_COUNTER_BLOCK;





typedef DWORD (__attribute__((__stdcall__)) PM_OPEN_PROC)(LPWSTR);
typedef DWORD (__attribute__((__stdcall__)) PM_COLLECT_PROC)(LPWSTR,LPVOID *,LPDWORD,LPDWORD);
typedef DWORD (__attribute__((__stdcall__)) PM_CLOSE_PROC)(void);
typedef DWORD (__attribute__((__stdcall__)) PM_QUERY_PROC)(LPDWORD,LPVOID *,LPDWORD,LPDWORD);
#pragma pack(pop)
struct timeval
{
 long tv_sec;
 long tv_usec;
};
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;


typedef unsigned long u_long;




__extension__

typedef unsigned long long u_int64;
typedef struct in_addr {
  union {
    struct { u_char s_b1, s_b2, s_b3, s_b4; } S_un_b;
    struct { u_short s_w1, s_w2; } S_un_w;
    u_long S_addr;
  } S_un;
} IN_ADDR, *PIN_ADDR, *LPIN_ADDR;
typedef UINT_PTR SOCKET;
typedef struct fd_set
{
 u_int fd_count;
 SOCKET fd_array[64];
} fd_set;


extern "C" {


int __attribute__((__stdcall__)) __WSAFDIsSet(SOCKET,fd_set *);


}
typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set *LPFD_SET;
struct hostent {
 char *h_name;
 char **h_aliases;
 short h_addrtype;
 short h_length;
 char **h_addr_list;
};

struct netent {
 char *n_name;
 char **n_aliases;
 short n_addrtype;
 u_long n_net;
};

struct servent {
 char *s_name;
 char **s_aliases;




 short s_port;
 char *s_proto;

};

struct protoent {
 char *p_name;
 char **p_aliases;
 short p_proto;
};

struct sockproto {
 u_short sp_family;
 u_short sp_protocol;
};

struct linger {
 u_short l_onoff;
 u_short l_linger;
};



struct sockaddr {
 u_short sa_family;
 char sa_data[14];
};

struct sockaddr_in {
 short sin_family;
 u_short sin_port;
 struct in_addr sin_addr;
 char sin_zero[8];
};

typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent *LPHOSTENT;

typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent *LPSERVENT;

typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent *LPPROTOENT;

typedef struct sockaddr SOCKADDR;
typedef struct sockaddr *PSOCKADDR;
typedef struct sockaddr *LPSOCKADDR;

typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_in *LPSOCKADDR_IN;

typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger *LPLINGER;
typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval *LPTIMEVAL;
struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};
typedef struct WSAData {
 WORD wVersion;
 WORD wHighVersion;







 char szDescription[256 +1];
 char szSystemStatus[128 +1];
 unsigned short iMaxSockets;
 unsigned short iMaxUdpDg;
 char *lpVendorInfo;

} WSADATA, *LPWSADATA;
typedef struct _TRANSMIT_FILE_BUFFERS {
 LPVOID Head;
 DWORD HeadLength;
 LPVOID Tail;
 DWORD TailLength;
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, *LPTRANSMIT_FILE_BUFFERS;





extern "C" {
                      SOCKET __attribute__((__stdcall__)) accept(SOCKET s,struct sockaddr *addr,int *addrlen);
                      int __attribute__((__stdcall__)) bind(SOCKET s,const struct sockaddr *name,int namelen);
                      int __attribute__((__stdcall__)) closesocket(SOCKET s);
                      int __attribute__((__stdcall__)) connect(SOCKET s,const struct sockaddr *name,int namelen);
                      int __attribute__((__stdcall__)) ioctlsocket(SOCKET s,long cmd,u_long *argp);
                      int __attribute__((__stdcall__)) getpeername(SOCKET s,struct sockaddr *name,int *namelen);
                      int __attribute__((__stdcall__)) getsockname(SOCKET s,struct sockaddr *name,int *namelen);
                      int __attribute__((__stdcall__)) getsockopt(SOCKET s,int level,int optname,char *optval,int *optlen);

                      u_long __attribute__((__stdcall__)) htonl(u_long hostlong);
                      u_short __attribute__((__stdcall__)) htons(u_short hostshort);

                      unsigned long __attribute__((__stdcall__)) inet_addr(const char *cp);
                      char *__attribute__((__stdcall__)) inet_ntoa(struct in_addr in);
                      int __attribute__((__stdcall__)) listen(SOCKET s,int backlog);

                      u_long __attribute__((__stdcall__)) ntohl(u_long netlong);
                      u_short __attribute__((__stdcall__)) ntohs(u_short netshort);

                      int __attribute__((__stdcall__)) recv(SOCKET s,char *buf,int len,int flags);
                      int __attribute__((__stdcall__)) recvfrom(SOCKET s,char *buf,int len,int flags,struct sockaddr *from,int *fromlen);

                      int __attribute__((__stdcall__)) select(int nfds,fd_set *readfds,fd_set *writefds,fd_set *exceptfds,const PTIMEVAL timeout);

                      int __attribute__((__stdcall__)) send(SOCKET s,const char *buf,int len,int flags);
                      int __attribute__((__stdcall__)) sendto(SOCKET s,const char *buf,int len,int flags,const struct sockaddr *to,int tolen);
                      int __attribute__((__stdcall__)) setsockopt(SOCKET s,int level,int optname,const char *optval,int optlen);
                      int __attribute__((__stdcall__)) shutdown(SOCKET s,int how);
                      SOCKET __attribute__((__stdcall__)) socket(int af,int type,int protocol);
                      struct hostent *__attribute__((__stdcall__)) gethostbyaddr(const char *addr,int len,int type);
                      struct hostent *__attribute__((__stdcall__)) gethostbyname(const char *name);

                      int __attribute__((__stdcall__)) gethostname(char *name,int namelen);

                      struct servent *__attribute__((__stdcall__)) getservbyport(int port,const char *proto);
                      struct servent *__attribute__((__stdcall__)) getservbyname(const char *name,const char *proto);
                      struct protoent *__attribute__((__stdcall__)) getprotobynumber(int number);
                      struct protoent *__attribute__((__stdcall__)) getprotobyname(const char *name);
                      int __attribute__((__stdcall__)) WSAStartup(WORD wVersionRequested,LPWSADATA lpWSAData);
                      int __attribute__((__stdcall__)) WSACleanup(void);
                      void __attribute__((__stdcall__)) WSASetLastError(int iError);
                      int __attribute__((__stdcall__)) WSAGetLastError(void);
                      WINBOOL __attribute__((__stdcall__)) WSAIsBlocking(void);
                      int __attribute__((__stdcall__)) WSAUnhookBlockingHook(void);
                      FARPROC __attribute__((__stdcall__)) WSASetBlockingHook(FARPROC lpBlockFunc);
                      int __attribute__((__stdcall__)) WSACancelBlockingCall(void);
                      HANDLE __attribute__((__stdcall__)) WSAAsyncGetServByName(HWND hWnd,u_int wMsg,const char *name,const char *proto,char *buf,int buflen);
                      HANDLE __attribute__((__stdcall__)) WSAAsyncGetServByPort(HWND hWnd,u_int wMsg,int port,const char *proto,char *buf,int buflen);
                      HANDLE __attribute__((__stdcall__)) WSAAsyncGetProtoByName(HWND hWnd,u_int wMsg,const char *name,char *buf,int buflen);
                      HANDLE __attribute__((__stdcall__)) WSAAsyncGetProtoByNumber(HWND hWnd,u_int wMsg,int number,char *buf,int buflen);
                      HANDLE __attribute__((__stdcall__)) WSAAsyncGetHostByName(HWND hWnd,u_int wMsg,const char *name,char *buf,int buflen);
                      HANDLE __attribute__((__stdcall__)) WSAAsyncGetHostByAddr(HWND hWnd,u_int wMsg,const char *addr,int len,int type,char *buf,int buflen);
                      int __attribute__((__stdcall__)) WSACancelAsyncRequest(HANDLE hAsyncTaskHandle);
                      int __attribute__((__stdcall__)) WSAAsyncSelect(SOCKET s,HWND hWnd,u_int wMsg,long lEvent);



  int __attribute__((__stdcall__)) WSARecvEx(SOCKET s,char *buf,int len,int *flags);





  WINBOOL __attribute__((__stdcall__)) TransmitFile(SOCKET hSocket,HANDLE hFile,DWORD nNumberOfBytesToWrite,DWORD nNumberOfBytesPerSend,LPOVERLAPPED lpOverlapped,LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,DWORD dwReserved);
  WINBOOL __attribute__((__stdcall__)) AcceptEx(SOCKET sListenSocket,SOCKET sAcceptSocket,PVOID lpOutputBuffer,DWORD dwReceiveDataLength,DWORD dwLocalAddressLength,DWORD dwRemoteAddressLength,LPDWORD lpdwBytesReceived,LPOVERLAPPED lpOverlapped);
  void __attribute__((__stdcall__)) GetAcceptExSockaddrs(PVOID lpOutputBuffer,DWORD dwReceiveDataLength,DWORD dwLocalAddressLength,DWORD dwRemoteAddressLength,struct sockaddr **LocalSockaddr,LPINT LocalSockaddrLength,struct sockaddr **RemoteSockaddr,LPINT RemoteSockaddrLength);
}
extern "C++" {
__extension__ template<typename T> const GUID &__mingw_uuidof();
}
extern "C" {
  typedef unsigned int ALG_ID;
  typedef ULONG_PTR HCRYPTHASH;
  typedef ULONG_PTR HCRYPTKEY;
  typedef ULONG_PTR HCRYPTPROV;
  typedef struct _CMS_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    BYTE *pbOID;
    DWORD cbOID;
  } CMS_KEY_INFO,*PCMS_KEY_INFO;

  typedef struct _HMAC_Info {
    ALG_ID HashAlgid;
    BYTE *pbInnerString;
    DWORD cbInnerString;
    BYTE *pbOuterString;
    DWORD cbOuterString;
  } HMAC_INFO,*PHMAC_INFO;

  typedef struct _SCHANNEL_ALG {
    DWORD dwUse;
    ALG_ID Algid;
    DWORD cBits;
    DWORD dwFlags;
    DWORD dwReserved;
  } SCHANNEL_ALG,*PSCHANNEL_ALG;





  typedef struct _PROV_ENUMALGS {
    ALG_ID aiAlgid;
    DWORD dwBitLen;
    DWORD dwNameLen;
    CHAR szName[20];
  } PROV_ENUMALGS;

  typedef struct _PROV_ENUMALGS_EX {
    ALG_ID aiAlgid;
    DWORD dwDefaultLen;
    DWORD dwMinLen;
    DWORD dwMaxLen;
    DWORD dwProtocols;
    DWORD dwNameLen;
    CHAR szName[20];
    DWORD dwLongNameLen;
    CHAR szLongName[40];
  } PROV_ENUMALGS_EX;

  typedef struct _PUBLICKEYSTRUC {
    BYTE bType;
    BYTE bVersion;
    WORD reserved;
    ALG_ID aiKeyAlg;
  } BLOBHEADER,PUBLICKEYSTRUC;

  typedef struct _RSAPUBKEY {
    DWORD magic;
    DWORD bitlen;
    DWORD pubexp;
  } RSAPUBKEY;

  typedef struct _PUBKEY {
    DWORD magic;
    DWORD bitlen;
  } DHPUBKEY,DSSPUBKEY,KEAPUBKEY,TEKPUBKEY;

  typedef struct _DSSSEED {
    DWORD counter;
    BYTE seed[20];
  } DSSSEED;

  typedef struct _PUBKEYVER3 {
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DSSSEED DSSSeed;
  } DHPUBKEY_VER3, DSSPUBKEY_VER3;

  typedef struct _PRIVKEYVER3 {
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DWORD bitlenX;
    DSSSEED DSSSeed;
  } DHPRIVKEY_VER3,DSSPRIVKEY_VER3;

  typedef struct _KEY_TYPE_SUBTYPE {
    DWORD dwKeySpec;
    GUID Type;
    GUID Subtype;
  } KEY_TYPE_SUBTYPE,*PKEY_TYPE_SUBTYPE;

  typedef struct _CERT_FORTEZZA_DATA_PROP {
    unsigned char SerialNumber[8];
    int CertIndex;
    unsigned char CertLabel[36];
  } CERT_FORTEZZA_DATA_PROP;

  typedef struct _CRYPT_RC4_KEY_STATE {
    unsigned char Key[16];
    unsigned char SBox[256];
    unsigned char i;
    unsigned char j;
  } CRYPT_RC4_KEY_STATE,*PCRYPT_RC4_KEY_STATE;

  typedef struct _CRYPT_DES_KEY_STATE {
    unsigned char Key[8];
    unsigned char IV[8];
    unsigned char Feedback[8];
  } CRYPT_DES_KEY_STATE,*PCRYPT_DES_KEY_STATE;

  typedef struct _CRYPT_3DES_KEY_STATE {
    unsigned char Key[24];
    unsigned char IV[8];
    unsigned char Feedback[8];
  } CRYPT_3DES_KEY_STATE,*PCRYPT_3DES_KEY_STATE;
  typedef struct _CRYPTOAPI_BLOB {
    DWORD cbData;
    BYTE *pbData;
  } CRYPT_INTEGER_BLOB,*PCRYPT_INTEGER_BLOB,CRYPT_UINT_BLOB,*PCRYPT_UINT_BLOB,CRYPT_OBJID_BLOB,*PCRYPT_OBJID_BLOB,CERT_NAME_BLOB,*PCERT_NAME_BLOB,CERT_RDN_VALUE_BLOB,*PCERT_RDN_VALUE_BLOB,CERT_BLOB,*PCERT_BLOB,CRL_BLOB,*PCRL_BLOB,DATA_BLOB,*PDATA_BLOB,CRYPT_DATA_BLOB,*PCRYPT_DATA_BLOB,CRYPT_HASH_BLOB,*PCRYPT_HASH_BLOB,CRYPT_DIGEST_BLOB,*PCRYPT_DIGEST_BLOB,CRYPT_DER_BLOB,*PCRYPT_DER_BLOB,CRYPT_ATTR_BLOB,*PCRYPT_ATTR_BLOB;




  typedef struct _CMS_DH_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    LPSTR pszContentEncObjId;
    CRYPT_DATA_BLOB PubInfo;
    void *pReserved;
  } CMS_DH_KEY_INFO,*PCMS_DH_KEY_INFO;
          WINBOOL __attribute__((__stdcall__)) CryptAcquireContextA (HCRYPTPROV *phProv, LPCSTR szContainer, LPCSTR szProvider, DWORD dwProvType, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptAcquireContextW (HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptReleaseContext (HCRYPTPROV hProv, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptGenKey (HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY *phKey);
          WINBOOL __attribute__((__stdcall__)) CryptDeriveKey (HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY *phKey);
          WINBOOL __attribute__((__stdcall__)) CryptDestroyKey (HCRYPTKEY hKey);
          WINBOOL __attribute__((__stdcall__)) CryptSetKeyParam (HCRYPTKEY hKey, DWORD dwParam, const BYTE *pbData, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptGetKeyParam (HCRYPTKEY hKey, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptSetHashParam (HCRYPTHASH hHash, DWORD dwParam, const BYTE *pbData, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptGetHashParam (HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptSetProvParam (HCRYPTPROV hProv, DWORD dwParam, const BYTE *pbData, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptGetProvParam (HCRYPTPROV hProv, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptGenRandom (HCRYPTPROV hProv, DWORD dwLen, BYTE *pbBuffer);
          WINBOOL __attribute__((__stdcall__)) CryptGetUserKey (HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY *phUserKey);
          WINBOOL __attribute__((__stdcall__)) CryptExportKey (HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen);
          WINBOOL __attribute__((__stdcall__)) CryptImportKey (HCRYPTPROV hProv, const BYTE *pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY *phKey);
          WINBOOL __attribute__((__stdcall__)) CryptEncrypt (HCRYPTKEY hKey, HCRYPTHASH hHash, WINBOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen, DWORD dwBufLen);
          WINBOOL __attribute__((__stdcall__)) CryptDecrypt (HCRYPTKEY hKey, HCRYPTHASH hHash, WINBOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen);
          WINBOOL __attribute__((__stdcall__)) CryptCreateHash (HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH *phHash);
          WINBOOL __attribute__((__stdcall__)) CryptHashData (HCRYPTHASH hHash, const BYTE *pbData, DWORD dwDataLen, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptHashSessionKey (HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptDestroyHash (HCRYPTHASH hHash);
          WINBOOL __attribute__((__stdcall__)) CryptSignHashA (HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen);
          WINBOOL __attribute__((__stdcall__)) CryptSignHashW (HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen);
          WINBOOL __attribute__((__stdcall__)) CryptVerifySignatureA (HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR szDescription, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptVerifySignatureW (HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR szDescription, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptSetProviderA (LPCSTR pszProvName, DWORD dwProvType);
          WINBOOL __attribute__((__stdcall__)) CryptSetProviderW (LPCWSTR pszProvName, DWORD dwProvType);
          WINBOOL __attribute__((__stdcall__)) CryptSetProviderExA (LPCSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptSetProviderExW (LPCWSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptGetDefaultProviderA (DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD *pcbProvName);
          WINBOOL __attribute__((__stdcall__)) CryptGetDefaultProviderW (DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD *pcbProvName);
          WINBOOL __attribute__((__stdcall__)) CryptEnumProviderTypesA (DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szTypeName, DWORD *pcbTypeName);
          WINBOOL __attribute__((__stdcall__)) CryptEnumProviderTypesW (DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szTypeName, DWORD *pcbTypeName);
          WINBOOL __attribute__((__stdcall__)) CryptEnumProvidersA (DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szProvName, DWORD *pcbProvName);
          WINBOOL __attribute__((__stdcall__)) CryptEnumProvidersW (DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szProvName, DWORD *pcbProvName);
          WINBOOL __attribute__((__stdcall__)) CryptContextAddRef (HCRYPTPROV hProv, DWORD *pdwReserved, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptDuplicateKey (HCRYPTKEY hKey, DWORD *pdwReserved, DWORD dwFlags, HCRYPTKEY *phKey);
          WINBOOL __attribute__((__stdcall__)) CryptDuplicateHash (HCRYPTHASH hHash, DWORD *pdwReserved, DWORD dwFlags, HCRYPTHASH *phHash);
  WINBOOL __attribute__((__cdecl__)) GetEncSChannel (BYTE **pData, DWORD *dwDecSize);




  typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;
  typedef ULONG_PTR HCRYPTPROV_LEGACY;
extern "C" {
  typedef LONG NTSTATUS,*PNTSTATUS;
  typedef struct __BCRYPT_KEY_LENGTHS_STRUCT {
    ULONG dwMinLength;
    ULONG dwMaxLength;
    ULONG dwIncrement;
  } BCRYPT_KEY_LENGTHS_STRUCT;

  typedef BCRYPT_KEY_LENGTHS_STRUCT BCRYPT_AUTH_TAG_LENGTHS_STRUCT;

  typedef struct _BCRYPT_OID {
    ULONG cbOID;
    PUCHAR pbOID;
  } BCRYPT_OID;

  typedef struct _BCRYPT_OID_LIST {
    ULONG dwOIDCount;
    BCRYPT_OID *pOIDs;
  } BCRYPT_OID_LIST;

  typedef struct _BCRYPT_PKCS1_PADDING_INFO {
    LPCWSTR pszAlgId;
  } BCRYPT_PKCS1_PADDING_INFO;

  typedef struct _BCRYPT_PSS_PADDING_INFO {
    LPCWSTR pszAlgId;
    ULONG cbSalt;
  } BCRYPT_PSS_PADDING_INFO;

  typedef struct _BCRYPT_OAEP_PADDING_INFO {
    LPCWSTR pszAlgId;
    PUCHAR pbLabel;
    ULONG cbLabel;
  } BCRYPT_OAEP_PADDING_INFO;

  typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO {
    ULONG cbSize;
    ULONG dwInfoVersion;
    PUCHAR pbNonce;
    ULONG cbNonce;
    PUCHAR pbAuthData;
    ULONG cbAuthData;
    PUCHAR pbTag;
    ULONG cbTag;
    PUCHAR pbMacContext;
    ULONG cbMacContext;
    ULONG cbAAD;
    ULONGLONG cbData;
    ULONG dwFlags;
  } BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO,*PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;



  typedef struct _BCryptBuffer {
    ULONG cbBuffer;
    ULONG BufferType;
    PVOID pvBuffer;
  } BCryptBuffer,*PBCryptBuffer;

  typedef struct _BCryptBufferDesc {
    ULONG ulVersion;
    ULONG cBuffers;
    PBCryptBuffer pBuffers;
  } BCryptBufferDesc,*PBCryptBufferDesc;
typedef PVOID BCRYPT_HANDLE;
  typedef PVOID BCRYPT_ALG_HANDLE;
  typedef PVOID BCRYPT_KEY_HANDLE;
  typedef PVOID BCRYPT_HASH_HANDLE;
  typedef PVOID BCRYPT_SECRET_HANDLE;

  typedef struct _BCRYPT_KEY_BLOB {
    ULONG Magic;
  } BCRYPT_KEY_BLOB;

  typedef struct _BCRYPT_RSAKEY_BLOB {
    ULONG Magic;
    ULONG BitLength;
    ULONG cbPublicExp;
    ULONG cbModulus;
    ULONG cbPrime1;
    ULONG cbPrime2;
  } BCRYPT_RSAKEY_BLOB;

  typedef struct _BCRYPT_ECCKEY_BLOB {
    ULONG dwMagic;
    ULONG cbKey;
  } BCRYPT_ECCKEY_BLOB,*PBCRYPT_ECCKEY_BLOB;

  typedef struct _BCRYPT_DH_KEY_BLOB {
    ULONG dwMagic;
    ULONG cbKey;
  } BCRYPT_DH_KEY_BLOB,*PBCRYPT_DH_KEY_BLOB;

  typedef struct _BCRYPT_DH_PARAMETER_HEADER {
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
  } BCRYPT_DH_PARAMETER_HEADER;

  typedef struct _BCRYPT_DSA_KEY_BLOB {
    ULONG dwMagic;
    ULONG cbKey;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
  } BCRYPT_DSA_KEY_BLOB,*PBCRYPT_DSA_KEY_BLOB;

  typedef enum {
    DSA_HASH_ALGORITHM_SHA1,
    DSA_HASH_ALGORITHM_SHA256,
    DSA_HASH_ALGORITHM_SHA512
  } HASHALGORITHM_ENUM;

  typedef enum {
    DSA_FIPS186_2,
    DSA_FIPS186_3
  } DSAFIPSVERSION_ENUM;
  typedef struct _BCRYPT_DSA_KEY_BLOB_V2 {
    ULONG dwMagic;
    ULONG cbKey;
    HASHALGORITHM_ENUM hashAlgorithm;
    DSAFIPSVERSION_ENUM standardVersion;
    ULONG cbSeedLength;
    ULONG cbGroupSize;
    UCHAR Count[4];
  } BCRYPT_DSA_KEY_BLOB_V2,*PBCRYPT_DSA_KEY_BLOB_V2;

  typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER {
    ULONG dwMagic;
    ULONG dwVersion;
    ULONG cbKeyData;
  } BCRYPT_KEY_DATA_BLOB_HEADER,*PBCRYPT_KEY_DATA_BLOB_HEADER;

  typedef struct _BCRYPT_DSA_PARAMETER_HEADER {
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
  } BCRYPT_DSA_PARAMETER_HEADER;

  typedef struct _BCRYPT_DSA_PARAMETER_HEADER_V2 {
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    HASHALGORITHM_ENUM hashAlgorithm;
    DSAFIPSVERSION_ENUM standardVersion;
    ULONG cbSeedLength;
    ULONG cbGroupSize;
    UCHAR Count[4];
  } BCRYPT_DSA_PARAMETER_HEADER_V2;

  typedef struct _BCRYPT_ALGORITHM_IDENTIFIER {
    LPWSTR pszName;
    ULONG dwClass;
    ULONG dwFlags;
  } BCRYPT_ALGORITHM_IDENTIFIER;

  typedef struct _BCRYPT_PROVIDER_NAME {
    LPWSTR pszProviderName;
  } BCRYPT_PROVIDER_NAME;

  typedef struct _BCRYPT_INTERFACE_VERSION {
    USHORT MajorVersion;
    USHORT MinorVersion;
  } BCRYPT_INTERFACE_VERSION,*PBCRYPT_INTERFACE_VERSION;

  typedef struct _CRYPT_INTERFACE_REG {
    ULONG dwInterface;
    ULONG dwFlags;
    ULONG cFunctions;
    PWSTR *rgpszFunctions;
  } CRYPT_INTERFACE_REG,*PCRYPT_INTERFACE_REG;

  typedef struct _CRYPT_IMAGE_REG {
    PWSTR pszImage;
    ULONG cInterfaces;
    PCRYPT_INTERFACE_REG *rgpInterfaces;
  } CRYPT_IMAGE_REG,*PCRYPT_IMAGE_REG;

  typedef struct _CRYPT_PROVIDER_REG {
    ULONG cAliases;
    PWSTR *rgpszAliases;
    PCRYPT_IMAGE_REG pUM;
    PCRYPT_IMAGE_REG pKM;
  } CRYPT_PROVIDER_REG,*PCRYPT_PROVIDER_REG;

  typedef struct _CRYPT_PROVIDERS {
    ULONG cProviders;
    PWSTR *rgpszProviders;
  } CRYPT_PROVIDERS,*PCRYPT_PROVIDERS;

  typedef struct _CRYPT_CONTEXT_CONFIG {
    ULONG dwFlags;
    ULONG dwReserved;
  } CRYPT_CONTEXT_CONFIG,*PCRYPT_CONTEXT_CONFIG;

  typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG {
    ULONG dwFlags;
    ULONG dwReserved;
  } CRYPT_CONTEXT_FUNCTION_CONFIG,*PCRYPT_CONTEXT_FUNCTION_CONFIG;

  typedef struct _CRYPT_CONTEXTS {
    ULONG cContexts;
    PWSTR *rgpszContexts;
  } CRYPT_CONTEXTS,*PCRYPT_CONTEXTS;

  typedef struct _CRYPT_CONTEXT_FUNCTIONS {
    ULONG cFunctions;
    PWSTR *rgpszFunctions;
  } CRYPT_CONTEXT_FUNCTIONS,*PCRYPT_CONTEXT_FUNCTIONS;

  typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS {
    ULONG cProviders;
    PWSTR *rgpszProviders;
  } CRYPT_CONTEXT_FUNCTION_PROVIDERS,*PCRYPT_CONTEXT_FUNCTION_PROVIDERS;

  typedef struct _CRYPT_PROPERTY_REF {
    PWSTR pszProperty;
    ULONG cbValue;
    PUCHAR pbValue;
  } CRYPT_PROPERTY_REF,*PCRYPT_PROPERTY_REF;

  typedef struct _CRYPT_IMAGE_REF {
    PWSTR pszImage;
    ULONG dwFlags;
  } CRYPT_IMAGE_REF,*PCRYPT_IMAGE_REF;

  typedef struct _CRYPT_PROVIDER_REF {
    ULONG dwInterface;
    PWSTR pszFunction;
    PWSTR pszProvider;
    ULONG cProperties;
    PCRYPT_PROPERTY_REF *rgpProperties;
    PCRYPT_IMAGE_REF pUM;
    PCRYPT_IMAGE_REF pKM;
  } CRYPT_PROVIDER_REF,*PCRYPT_PROVIDER_REF;

  typedef struct _CRYPT_PROVIDER_REFS {
    ULONG cProviders;
    PCRYPT_PROVIDER_REF *rgpProviders;
  } CRYPT_PROVIDER_REFS,*PCRYPT_PROVIDER_REFS;

  NTSTATUS __attribute__((__stdcall__)) BCryptOpenAlgorithmProvider (BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptEnumAlgorithms (ULONG dwAlgOperations, ULONG *pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptEnumProviders (LPCWSTR pszAlgId, ULONG *pImplCount, BCRYPT_PROVIDER_NAME **ppImplList, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptGetProperty (BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptSetProperty (BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptCloseAlgorithmProvider (BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags);
  void __attribute__((__stdcall__)) BCryptFreeBuffer (PVOID pvBuffer);
  NTSTATUS __attribute__((__stdcall__)) BCryptGenerateSymmetricKey (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptGenerateKeyPair (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, ULONG dwLength, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptEncrypt (BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptDecrypt (BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptExportKey (BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptImportKey (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptImportKeyPair (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptDuplicateKey (BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE *phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptFinalizeKeyPair (BCRYPT_KEY_HANDLE hKey, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptDestroyKey (BCRYPT_KEY_HANDLE hKey);
  NTSTATUS __attribute__((__stdcall__)) BCryptDestroySecret (BCRYPT_SECRET_HANDLE hSecret);
  NTSTATUS __attribute__((__stdcall__)) BCryptSignHash (BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptVerifySignature (BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptSecretAgreement (BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE *phAgreedSecret, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptDeriveKey (BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptKeyDerivation (BCRYPT_KEY_HANDLE hKey, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptCreateHash (BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptHashData (BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptFinishHash (BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptDuplicateHash (BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE *phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptDestroyHash (BCRYPT_HASH_HANDLE hHash);
  NTSTATUS __attribute__((__stdcall__)) BCryptGenRandom (BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptDeriveKeyCapi (BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptDeriveKeyPBKDF2 (BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
  NTSTATUS __attribute__((__stdcall__)) BCryptResolveProviders (LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG *pcbBuffer, PCRYPT_PROVIDER_REFS *ppBuffer);
  NTSTATUS __attribute__((__stdcall__)) BCryptGetFipsAlgorithmMode (BOOLEAN *pfEnabled);

  NTSTATUS __attribute__((__stdcall__)) BCryptQueryProviderRegistration (LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_PROVIDER_REG *ppBuffer);
  NTSTATUS __attribute__((__stdcall__)) BCryptEnumRegisteredProviders (ULONG *pcbBuffer, PCRYPT_PROVIDERS *ppBuffer);
  NTSTATUS __attribute__((__stdcall__)) BCryptCreateContext (ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
  NTSTATUS __attribute__((__stdcall__)) BCryptDeleteContext (ULONG dwTable, LPCWSTR pszContext);
  NTSTATUS __attribute__((__stdcall__)) BCryptEnumContexts (ULONG dwTable, ULONG *pcbBuffer, PCRYPT_CONTEXTS *ppBuffer);
  NTSTATUS __attribute__((__stdcall__)) BCryptConfigureContext (ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
  NTSTATUS __attribute__((__stdcall__)) BCryptQueryContextConfiguration (ULONG dwTable, LPCWSTR pszContext, ULONG *pcbBuffer, PCRYPT_CONTEXT_CONFIG *ppBuffer);
  NTSTATUS __attribute__((__stdcall__)) BCryptAddContextFunction (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition);
  NTSTATUS __attribute__((__stdcall__)) BCryptRemoveContextFunction (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction);
  NTSTATUS __attribute__((__stdcall__)) BCryptEnumContextFunctions (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);
  NTSTATUS __attribute__((__stdcall__)) BCryptConfigureContextFunction (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);
  NTSTATUS __attribute__((__stdcall__)) BCryptQueryContextFunctionConfiguration (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);
  NTSTATUS __attribute__((__stdcall__)) BCryptEnumContextFunctionProviders (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);
  NTSTATUS __attribute__((__stdcall__)) BCryptSetContextFunctionProperty (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue);
  NTSTATUS __attribute__((__stdcall__)) BCryptQueryContextFunctionProperty (ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG *pcbValue, PUCHAR *ppbValue);
  NTSTATUS __attribute__((__stdcall__)) BCryptRegisterConfigChangeNotify (HANDLE *phEvent);
}
extern "C" {
  typedef LONG SECURITY_STATUS;
  typedef LPVOID (__attribute__((__stdcall__)) *PFN_NCRYPT_ALLOC) (SIZE_T cbSize);
  typedef void (__attribute__((__stdcall__)) *PFN_NCRYPT_FREE) (LPVOID pv);

  typedef struct NCRYPT_ALLOC_PARA {
    DWORD cbSize;
    PFN_NCRYPT_ALLOC pfnAlloc;
    PFN_NCRYPT_FREE pfnFree;
  } NCRYPT_ALLOC_PARA;

  typedef BCryptBuffer NCryptBuffer;
  typedef BCryptBuffer *PNCryptBuffer;
  typedef BCryptBufferDesc NCryptBufferDesc;
  typedef BCryptBufferDesc *PNCryptBufferDesc;

  typedef ULONG_PTR NCRYPT_HANDLE;
  typedef ULONG_PTR NCRYPT_PROV_HANDLE;
  typedef ULONG_PTR NCRYPT_KEY_HANDLE;
  typedef ULONG_PTR NCRYPT_HASH_HANDLE;
  typedef ULONG_PTR NCRYPT_SECRET_HANDLE;
  typedef struct _NCryptAlgorithmName {
    LPWSTR pszName;
    DWORD dwClass;
    DWORD dwAlgOperations;
    DWORD dwFlags;
  } NCryptAlgorithmName;

  typedef struct NCryptKeyName {
    LPWSTR pszName;
    LPWSTR pszAlgid;
    DWORD dwLegacyKeySpec;
    DWORD dwFlags;
  } NCryptKeyName;

  typedef struct NCryptProviderName {
    LPWSTR pszName;
    LPWSTR pszComment;
  } NCryptProviderName;

  SECURITY_STATUS __attribute__((__stdcall__)) NCryptOpenStorageProvider (NCRYPT_PROV_HANDLE *phProvider, LPCWSTR pszProviderName, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptEnumAlgorithms (NCRYPT_PROV_HANDLE hProvider, DWORD dwAlgOperations, DWORD *pdwAlgCount, NCryptAlgorithmName **ppAlgList, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptIsAlgSupported (NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszAlgId, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptEnumKeys (NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszScope, NCryptKeyName **ppKeyName, PVOID *ppEnumState, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptEnumStorageProviders (DWORD *pdwProviderCount, NCryptProviderName **ppProviderList, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptFreeBuffer (PVOID pvInput);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptOpenKey (NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptCreatePersistedKey (NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszAlgId, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags);
typedef struct __NCRYPT_UI_POLICY {
    DWORD dwVersion;
    DWORD dwFlags;
    LPCWSTR pszCreationTitle;
    LPCWSTR pszFriendlyName;
    LPCWSTR pszDescription;
  } NCRYPT_UI_POLICY;

  typedef struct __NCRYPT_SUPPORTED_LENGTHS {
    DWORD dwMinLength;
    DWORD dwMaxLength;
    DWORD dwIncrement;
    DWORD dwDefaultLength;
  } NCRYPT_SUPPORTED_LENGTHS;

  SECURITY_STATUS __attribute__((__stdcall__)) NCryptGetProperty (NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptSetProperty (NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbInput, DWORD cbInput, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptFinalizeKey (NCRYPT_KEY_HANDLE hKey, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptEncrypt (NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptDecrypt (NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptImportKey (NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, NCRYPT_KEY_HANDLE *phKey, PBYTE pbData, DWORD cbData, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptExportKey (NCRYPT_KEY_HANDLE hKey, NCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptSignHash (NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD *pcbResult, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptVerifySignature (NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptDeleteKey (NCRYPT_KEY_HANDLE hKey, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptFreeObject (NCRYPT_HANDLE hObject);
  WINBOOL __attribute__((__stdcall__)) NCryptIsKeyHandle (NCRYPT_KEY_HANDLE hKey);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptTranslateHandle (NCRYPT_PROV_HANDLE *phProvider, NCRYPT_KEY_HANDLE *phKey, HCRYPTPROV hLegacyProv, HCRYPTKEY hLegacyKey, DWORD dwLegacyKeySpec, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptNotifyChangeKey (NCRYPT_PROV_HANDLE hProvider, HANDLE *phEvent, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptSecretAgreement (NCRYPT_KEY_HANDLE hPrivKey, NCRYPT_KEY_HANDLE hPubKey, NCRYPT_SECRET_HANDLE *phAgreedSecret, DWORD dwFlags);
  SECURITY_STATUS __attribute__((__stdcall__)) NCryptDeriveKey (NCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, NCryptBufferDesc *pParameterList, PBYTE pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags);






}



  typedef struct _CRYPT_BIT_BLOB {
    DWORD cbData;
    BYTE *pbData;
    DWORD cUnusedBits;
  } CRYPT_BIT_BLOB,*PCRYPT_BIT_BLOB;

  typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
  } CRYPT_ALGORITHM_IDENTIFIER,*PCRYPT_ALGORITHM_IDENTIFIER;
  typedef struct _CRYPT_OBJID_TABLE {
    DWORD dwAlgId;
    LPCSTR pszObjId;
  } CRYPT_OBJID_TABLE,*PCRYPT_OBJID_TABLE;

  typedef struct _CRYPT_HASH_INFO {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
  } CRYPT_HASH_INFO,*PCRYPT_HASH_INFO;



  typedef struct _CERT_EXTENSION {
    LPSTR pszObjId;
    WINBOOL fCritical;
    CRYPT_OBJID_BLOB Value;
  } CERT_EXTENSION,*PCERT_EXTENSION;

  typedef const CERT_EXTENSION *PCCERT_EXTENSION;



  typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
  } CRYPT_ATTRIBUTE_TYPE_VALUE,*PCRYPT_ATTRIBUTE_TYPE_VALUE;

  typedef struct _CRYPT_ATTRIBUTE {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_ATTR_BLOB rgValue;
  } CRYPT_ATTRIBUTE,*PCRYPT_ATTRIBUTE;

  typedef struct _CRYPT_ATTRIBUTES {
    DWORD cAttr;
    PCRYPT_ATTRIBUTE rgAttr;
  } CRYPT_ATTRIBUTES,*PCRYPT_ATTRIBUTES;

  typedef struct _CERT_RDN_ATTR {
    LPSTR pszObjId;
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
  } CERT_RDN_ATTR,*PCERT_RDN_ATTR;
  typedef struct _CERT_RDN {
    DWORD cRDNAttr;
    PCERT_RDN_ATTR rgRDNAttr;
  } CERT_RDN,*PCERT_RDN;

  typedef struct _CERT_NAME_INFO {
    DWORD cRDN;
    PCERT_RDN rgRDN;
  } CERT_NAME_INFO,*PCERT_NAME_INFO;

  typedef struct _CERT_NAME_VALUE {
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
  } CERT_NAME_VALUE,*PCERT_NAME_VALUE;



  typedef struct _CERT_PUBLIC_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB PublicKey;
  } CERT_PUBLIC_KEY_INFO,*PCERT_PUBLIC_KEY_INFO;







  typedef struct _CRYPT_ECC_PRIVATE_KEY_INFO {
    DWORD dwVersion;
    CRYPT_DER_BLOB PrivateKey;
    LPSTR szCurveOid;
    CRYPT_BIT_BLOB PublicKey;
  } CRYPT_ECC_PRIVATE_KEY_INFO,*PCRYPT_ECC_PRIVATE_KEY_INFO;



  typedef struct _CRYPT_PRIVATE_KEY_INFO {
    DWORD Version;
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DER_BLOB PrivateKey;
    PCRYPT_ATTRIBUTES pAttributes;
  } CRYPT_PRIVATE_KEY_INFO,*PCRYPT_PRIVATE_KEY_INFO;

  typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedPrivateKey;
  } CRYPT_ENCRYPTED_PRIVATE_KEY_INFO,*PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;

  typedef WINBOOL (__attribute__((__stdcall__)) *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC) (CRYPT_ALGORITHM_IDENTIFIER Algorithm, CRYPT_DATA_BLOB EncryptedPrivateKey, BYTE *pbClearTextKey, DWORD *pcbClearTextKey, LPVOID pVoidDecryptFunc);
  typedef WINBOOL (__attribute__((__stdcall__)) *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC) (CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm, CRYPT_DATA_BLOB *pClearTextPrivateKey, BYTE *pbEncryptedKey, DWORD *pcbEncryptedKey, LPVOID pVoidEncryptFunc);
  typedef WINBOOL (__attribute__((__stdcall__)) *PCRYPT_RESOLVE_HCRYPTPROV_FUNC) (CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, HCRYPTPROV *phCryptProv, LPVOID pVoidResolveFunc);

  typedef struct _CRYPT_PKCS8_IMPORT_PARAMS {
    CRYPT_DIGEST_BLOB PrivateKey;
    PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
    LPVOID pVoidResolveFunc;
    PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
    LPVOID pVoidDecryptFunc;
  } CRYPT_PKCS8_IMPORT_PARAMS,*PCRYPT_PKCS8_IMPORT_PARAMS, CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS,*PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;

  typedef struct _CRYPT_PKCS8_EXPORT_PARAMS {
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    LPSTR pszPrivateKeyObjId;
    PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
    LPVOID pVoidEncryptFunc;
  } CRYPT_PKCS8_EXPORT_PARAMS,*PCRYPT_PKCS8_EXPORT_PARAMS;



  typedef struct _CERT_INFO {
    DWORD dwVersion;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME NotBefore;
    FILETIME NotAfter;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB IssuerUniqueId;
    CRYPT_BIT_BLOB SubjectUniqueId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CERT_INFO,*PCERT_INFO;
  typedef struct _CRL_ENTRY {
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME RevocationDate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CRL_ENTRY,*PCRL_ENTRY;

  typedef struct _CRL_INFO {
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cCRLEntry;
    PCRL_ENTRY rgCRLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CRL_INFO,*PCRL_INFO;







  typedef struct _CERT_OR_CRL_BLOB {
    DWORD dwChoice;
    DWORD cbEncoded;
    BYTE *pbEncoded;
  } CERT_OR_CRL_BLOB,*PCERT_OR_CRL_BLOB;

  typedef struct _CERT_OR_CRL_BUNDLE {
    DWORD cItem;
    PCERT_OR_CRL_BLOB rgItem;
  } CERT_OR_CRL_BUNDLE,*PCERT_OR_CRL_BUNDLE;

  typedef struct _CERT_REQUEST_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
  } CERT_REQUEST_INFO,*PCERT_REQUEST_INFO;



  typedef struct _CERT_KEYGEN_REQUEST_INFO {
    DWORD dwVersion;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    LPWSTR pwszChallengeString;
  } CERT_KEYGEN_REQUEST_INFO,*PCERT_KEYGEN_REQUEST_INFO;



  typedef struct _CERT_SIGNED_CONTENT_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
  } CERT_SIGNED_CONTENT_INFO,*PCERT_SIGNED_CONTENT_INFO;

  typedef struct _CTL_USAGE {
    DWORD cUsageIdentifier;
    LPSTR *rgpszUsageIdentifier;
  } CTL_USAGE,*PCTL_USAGE,CERT_ENHKEY_USAGE,*PCERT_ENHKEY_USAGE;

  typedef const CTL_USAGE *PCCTL_USAGE;
  typedef const CERT_ENHKEY_USAGE *PCCERT_ENHKEY_USAGE;

  typedef struct _CTL_ENTRY {
    CRYPT_DATA_BLOB SubjectIdentifier;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
  } CTL_ENTRY,*PCTL_ENTRY;

  typedef struct _CTL_INFO {
    DWORD dwVersion;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    CRYPT_INTEGER_BLOB SequenceNumber;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    DWORD cCTLEntry;
    PCTL_ENTRY rgCTLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CTL_INFO,*PCTL_INFO;



  typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
    LPSTR pszTimeStampAlgorithm;
    LPSTR pszContentType;
    CRYPT_OBJID_BLOB Content;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
  } CRYPT_TIME_STAMP_REQUEST_INFO,*PCRYPT_TIME_STAMP_REQUEST_INFO;

  typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
    LPWSTR pwszName;
    LPWSTR pwszValue;
  } CRYPT_ENROLLMENT_NAME_VALUE_PAIR,*PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;

  typedef struct _CRYPT_CSP_PROVIDER {
    DWORD dwKeySpec;
    LPWSTR pwszProviderName;
    CRYPT_BIT_BLOB Signature;
  } CRYPT_CSP_PROVIDER,*PCRYPT_CSP_PROVIDER;
          WINBOOL __attribute__((__stdcall__)) CryptFormatObject (DWORD dwCertEncodingType, DWORD dwFormatType, DWORD dwFormatStrType, void *pFormatStruct, LPCSTR lpszStructType, const BYTE *pbEncoded, DWORD cbEncoded, void *pbFormat, DWORD *pcbFormat);
  typedef LPVOID (__attribute__((__stdcall__)) *PFN_CRYPT_ALLOC)(size_t cbSize);
  typedef void (__attribute__((__stdcall__)) *PFN_CRYPT_FREE)(LPVOID pv);

  typedef struct _CRYPT_ENCODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
  } CRYPT_ENCODE_PARA,*PCRYPT_ENCODE_PARA;

          WINBOOL __attribute__((__stdcall__)) CryptEncodeObjectEx (DWORD dwCertEncodingType, LPCSTR lpszStructType, const void *pvStructInfo, DWORD dwFlags, PCRYPT_ENCODE_PARA pEncodePara, void *pvEncoded, DWORD *pcbEncoded);
          WINBOOL __attribute__((__stdcall__)) CryptEncodeObject (DWORD dwCertEncodingType, LPCSTR lpszStructType, const void *pvStructInfo, BYTE *pbEncoded, DWORD *pcbEncoded);
  typedef struct _CRYPT_DECODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
  } CRYPT_DECODE_PARA,*PCRYPT_DECODE_PARA;

          WINBOOL __attribute__((__stdcall__)) CryptDecodeObjectEx (DWORD dwCertEncodingType, LPCSTR lpszStructType, const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCRYPT_DECODE_PARA pDecodePara, void *pvStructInfo, DWORD *pcbStructInfo);
          WINBOOL __attribute__((__stdcall__)) CryptDecodeObject (DWORD dwCertEncodingType, LPCSTR lpszStructType, const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, void *pvStructInfo, DWORD *pcbStructInfo);
  typedef struct _CERT_EXTENSIONS {
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CERT_EXTENSIONS,*PCERT_EXTENSIONS;
  typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_NAME_BLOB CertIssuer;
    CRYPT_INTEGER_BLOB CertSerialNumber;
  } CERT_AUTHORITY_KEY_ID_INFO,*PCERT_AUTHORITY_KEY_ID_INFO;

  typedef struct _CERT_PRIVATE_KEY_VALIDITY {
    FILETIME NotBefore;
    FILETIME NotAfter;
  } CERT_PRIVATE_KEY_VALIDITY,*PCERT_PRIVATE_KEY_VALIDITY;

  typedef struct _CERT_KEY_ATTRIBUTES_INFO {
    CRYPT_DATA_BLOB KeyId;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
  } CERT_KEY_ATTRIBUTES_INFO,*PCERT_KEY_ATTRIBUTES_INFO;
  typedef struct _CERT_POLICY_ID {
    DWORD cCertPolicyElementId;
    LPSTR *rgpszCertPolicyElementId;
  } CERT_POLICY_ID,*PCERT_POLICY_ID;

  typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
    DWORD cCertPolicyId;
    PCERT_POLICY_ID rgCertPolicyId;
    CRYPT_BIT_BLOB RestrictedKeyUsage;
  } CERT_KEY_USAGE_RESTRICTION_INFO,*PCERT_KEY_USAGE_RESTRICTION_INFO;

  typedef struct _CERT_OTHER_NAME {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
  } CERT_OTHER_NAME,*PCERT_OTHER_NAME;

  typedef struct _CERT_ALT_NAME_ENTRY {
    DWORD dwAltNameChoice;
    __extension__ union {
      PCERT_OTHER_NAME pOtherName;
      LPWSTR pwszRfc822Name;
      LPWSTR pwszDNSName;






      CERT_NAME_BLOB DirectoryName;





      LPWSTR pwszURL;
      CRYPT_DATA_BLOB IPAddress;
      LPSTR pszRegisteredID;
    };
  } CERT_ALT_NAME_ENTRY,*PCERT_ALT_NAME_ENTRY;
  typedef struct _CERT_ALT_NAME_INFO {
    DWORD cAltEntry;
    PCERT_ALT_NAME_ENTRY rgAltEntry;
  } CERT_ALT_NAME_INFO,*PCERT_ALT_NAME_INFO;
  typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
    CRYPT_BIT_BLOB SubjectType;
    WINBOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
    DWORD cSubtreesConstraint;
    CERT_NAME_BLOB *rgSubtreesConstraint;
  } CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;




  typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
    WINBOOL fCA;
    WINBOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
  } CERT_BASIC_CONSTRAINTS2_INFO,*PCERT_BASIC_CONSTRAINTS2_INFO;

  typedef struct _CERT_POLICY_QUALIFIER_INFO {
    LPSTR pszPolicyQualifierId;
    CRYPT_OBJID_BLOB Qualifier;
  } CERT_POLICY_QUALIFIER_INFO,*PCERT_POLICY_QUALIFIER_INFO;

  typedef struct _CERT_POLICY_INFO {
    LPSTR pszPolicyIdentifier;
    DWORD cPolicyQualifier;
    CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
  } CERT_POLICY_INFO,*PCERT_POLICY_INFO;

  typedef struct _CERT_POLICIES_INFO {
    DWORD cPolicyInfo;
    CERT_POLICY_INFO *rgPolicyInfo;
  } CERT_POLICIES_INFO,*PCERT_POLICIES_INFO;

  typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
    LPSTR pszOrganization;
    DWORD cNoticeNumbers;
    int *rgNoticeNumbers;
  } CERT_POLICY_QUALIFIER_NOTICE_REFERENCE,*PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

  typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
    LPWSTR pszDisplayText;
  } CERT_POLICY_QUALIFIER_USER_NOTICE,*PCERT_POLICY_QUALIFIER_USER_NOTICE;

  typedef struct _CPS_URLS {
    LPWSTR pszURL;
    CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
    CRYPT_DATA_BLOB *pDigest;
  } CPS_URLS,*PCPS_URLS;

  typedef struct _CERT_POLICY95_QUALIFIER1 {
    LPWSTR pszPracticesReference;
    LPSTR pszNoticeIdentifier;
    LPSTR pszNSINoticeIdentifier;
    DWORD cCPSURLs;
    CPS_URLS *rgCPSURLs;
  } CERT_POLICY95_QUALIFIER1,*PCERT_POLICY95_QUALIFIER1;

  typedef struct _CERT_POLICY_MAPPING {
    LPSTR pszIssuerDomainPolicy;
    LPSTR pszSubjectDomainPolicy;
  } CERT_POLICY_MAPPING,*PCERT_POLICY_MAPPING;

  typedef struct _CERT_POLICY_MAPPINGS_INFO {
    DWORD cPolicyMapping;
    PCERT_POLICY_MAPPING rgPolicyMapping;
  } CERT_POLICY_MAPPINGS_INFO,*PCERT_POLICY_MAPPINGS_INFO;

  typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
    WINBOOL fRequireExplicitPolicy;
    DWORD dwRequireExplicitPolicySkipCerts;
    WINBOOL fInhibitPolicyMapping;
    DWORD dwInhibitPolicyMappingSkipCerts;
  } CERT_POLICY_CONSTRAINTS_INFO,*PCERT_POLICY_CONSTRAINTS_INFO;

  typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
  } CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY,*PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;

  typedef struct _CRYPT_CONTENT_INFO {
    LPSTR pszObjId;
    CRYPT_DER_BLOB Content;
  } CRYPT_CONTENT_INFO,*PCRYPT_CONTENT_INFO;

  typedef struct _CRYPT_SEQUENCE_OF_ANY {
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
  } CRYPT_SEQUENCE_OF_ANY,*PCRYPT_SEQUENCE_OF_ANY;

  typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_ALT_NAME_INFO AuthorityCertIssuer;
    CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
  } CERT_AUTHORITY_KEY_ID2_INFO,*PCERT_AUTHORITY_KEY_ID2_INFO;

  typedef struct _CERT_ACCESS_DESCRIPTION {
    LPSTR pszAccessMethod;
    CERT_ALT_NAME_ENTRY AccessLocation;
  } CERT_ACCESS_DESCRIPTION,*PCERT_ACCESS_DESCRIPTION;

  typedef struct _CERT_AUTHORITY_INFO_ACCESS {
    DWORD cAccDescr;
    PCERT_ACCESS_DESCRIPTION rgAccDescr;
  } CERT_AUTHORITY_INFO_ACCESS,*PCERT_AUTHORITY_INFO_ACCESS;

  typedef CERT_AUTHORITY_INFO_ACCESS CERT_SUBJECT_INFO_ACCESS,*PCERT_SUBJECT_INFO_ACCESS;
  typedef struct _CRL_DIST_POINT_NAME {
    DWORD dwDistPointNameChoice;
    __extension__ union {
      CERT_ALT_NAME_INFO FullName;
    };
  } CRL_DIST_POINT_NAME,*PCRL_DIST_POINT_NAME;





  typedef struct _CRL_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    CRYPT_BIT_BLOB ReasonFlags;
    CERT_ALT_NAME_INFO CRLIssuer;
  } CRL_DIST_POINT,*PCRL_DIST_POINT;
  typedef struct _CRL_DIST_POINTS_INFO {
    DWORD cDistPoint;
    PCRL_DIST_POINT rgDistPoint;
  } CRL_DIST_POINTS_INFO,*PCRL_DIST_POINTS_INFO;
  typedef struct _CROSS_CERT_DIST_POINTS_INFO {
    DWORD dwSyncDeltaTime;
    DWORD cDistPoint;
    PCERT_ALT_NAME_INFO rgDistPoint;
  } CROSS_CERT_DIST_POINTS_INFO,*PCROSS_CERT_DIST_POINTS_INFO;





  typedef struct _CERT_PAIR {
    CERT_BLOB Forward;
    CERT_BLOB Reverse;
  } CERT_PAIR,*PCERT_PAIR;

  typedef struct _CRL_ISSUING_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    WINBOOL fOnlyContainsUserCerts;
    WINBOOL fOnlyContainsCACerts;
    CRYPT_BIT_BLOB OnlySomeReasonFlags;
    WINBOOL fIndirectCRL;
  } CRL_ISSUING_DIST_POINT,*PCRL_ISSUING_DIST_POINT;

  typedef struct _CERT_GENERAL_SUBTREE {
    CERT_ALT_NAME_ENTRY Base;
    DWORD dwMinimum;
    WINBOOL fMaximum;
    DWORD dwMaximum;
  } CERT_GENERAL_SUBTREE,*PCERT_GENERAL_SUBTREE;

  typedef struct _CERT_NAME_CONSTRAINTS_INFO {
    DWORD cPermittedSubtree;
    PCERT_GENERAL_SUBTREE rgPermittedSubtree;
    DWORD cExcludedSubtree;
    PCERT_GENERAL_SUBTREE rgExcludedSubtree;
  } CERT_NAME_CONSTRAINTS_INFO,*PCERT_NAME_CONSTRAINTS_INFO;
  typedef struct _CERT_DSS_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB g;
  } CERT_DSS_PARAMETERS,*PCERT_DSS_PARAMETERS;







  typedef struct _CERT_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
  } CERT_DH_PARAMETERS,*PCERT_DH_PARAMETERS;

  typedef struct _CERT_ECC_SIGNATURE {
    CRYPT_UINT_BLOB r;
    CRYPT_UINT_BLOB s;
  } CERT_ECC_SIGNATURE,*PCERT_ECC_SIGNATURE;

  typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
    CRYPT_BIT_BLOB seed;
    DWORD pgenCounter;
  } CERT_X942_DH_VALIDATION_PARAMS,*PCERT_X942_DH_VALIDATION_PARAMS;

  typedef struct _CERT_X942_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB j;
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
  } CERT_X942_DH_PARAMETERS,*PCERT_X942_DH_PARAMETERS;





  typedef struct _CRYPT_X942_OTHER_INFO {
    LPSTR pszContentEncryptionObjId;
    BYTE rgbCounter[4];
    BYTE rgbKeyLength[4];
    CRYPT_DATA_BLOB PubInfo;
  } CRYPT_X942_OTHER_INFO,*PCRYPT_X942_OTHER_INFO;



  typedef struct _CRYPT_ECC_CMS_SHARED_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DATA_BLOB EntityUInfo;
    BYTE rgbSuppPubInfo[4];
  } CRYPT_ECC_CMS_SHARED_INFO,*PCRYPT_ECC_CMS_SHARED_INFO;

  typedef struct _CRYPT_RC2_CBC_PARAMETERS {
    DWORD dwVersion;
    WINBOOL fIV;
    BYTE rgbIV[8];
  } CRYPT_RC2_CBC_PARAMETERS,*PCRYPT_RC2_CBC_PARAMETERS;






  typedef struct _CRYPT_SMIME_CAPABILITY {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
  } CRYPT_SMIME_CAPABILITY,*PCRYPT_SMIME_CAPABILITY;

  typedef struct _CRYPT_SMIME_CAPABILITIES {
    DWORD cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
  } CRYPT_SMIME_CAPABILITIES,*PCRYPT_SMIME_CAPABILITIES;

  typedef struct _CERT_QC_STATEMENT {
    LPSTR pszStatementId;
    CRYPT_OBJID_BLOB StatementInfo;
  } CERT_QC_STATEMENT,*PCERT_QC_STATEMENT;

  typedef struct _CERT_QC_STATEMENTS_EXT_INFO {
    DWORD cStatement;
    PCERT_QC_STATEMENT rgStatement;
  } CERT_QC_STATEMENTS_EXT_INFO,*PCERT_QC_STATEMENTS_EXT_INFO;




  typedef struct _CRYPT_MASK_GEN_ALGORITHM {
    LPSTR pszObjId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  } CRYPT_MASK_GEN_ALGORITHM,*PCRYPT_MASK_GEN_ALGORITHM;

  typedef struct _CRYPT_RSA_SSA_PSS_PARAMETERS {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    DWORD dwSaltLength;
    DWORD dwTrailerField;
  } CRYPT_RSA_SSA_PSS_PARAMETERS,*PCRYPT_RSA_SSA_PSS_PARAMETERS;



  typedef struct _CRYPT_PSOURCE_ALGORITHM {
    LPSTR pszObjId;
    CRYPT_DATA_BLOB EncodingParameters;
  } CRYPT_PSOURCE_ALGORITHM,*PCRYPT_PSOURCE_ALGORITHM;

  typedef struct _CRYPT_RSAES_OAEP_PARAMETERS {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm;
  } CRYPT_RSAES_OAEP_PARAMETERS,*PCRYPT_RSAES_OAEP_PARAMETERS;
  typedef struct _CMC_TAGGED_ATTRIBUTE {
    DWORD dwBodyPartID;
    CRYPT_ATTRIBUTE Attribute;
  } CMC_TAGGED_ATTRIBUTE,*PCMC_TAGGED_ATTRIBUTE;

  typedef struct _CMC_TAGGED_CERT_REQUEST {
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB SignedCertRequest;
  } CMC_TAGGED_CERT_REQUEST,*PCMC_TAGGED_CERT_REQUEST;

  typedef struct _CMC_TAGGED_REQUEST {
    DWORD dwTaggedRequestChoice;
    __extension__ union {
      PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
    };
  } CMC_TAGGED_REQUEST,*PCMC_TAGGED_REQUEST;



  typedef struct _CMC_TAGGED_CONTENT_INFO {
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB EncodedContentInfo;
  } CMC_TAGGED_CONTENT_INFO,*PCMC_TAGGED_CONTENT_INFO;

  typedef struct _CMC_TAGGED_OTHER_MSG {
    DWORD dwBodyPartID;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
  } CMC_TAGGED_OTHER_MSG,*PCMC_TAGGED_OTHER_MSG;

  typedef struct _CMC_DATA_INFO {
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedRequest;
    PCMC_TAGGED_REQUEST rgTaggedRequest;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
  } CMC_DATA_INFO,*PCMC_DATA_INFO;

  typedef struct _CMC_RESPONSE_INFO {
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
  } CMC_RESPONSE_INFO,*PCMC_RESPONSE_INFO;

  typedef struct _CMC_PEND_INFO {
    CRYPT_DATA_BLOB PendToken;
    FILETIME PendTime;
  } CMC_PEND_INFO,*PCMC_PEND_INFO;

  typedef struct _CMC_STATUS_INFO {
    DWORD dwStatus;
    DWORD cBodyList;
    DWORD *rgdwBodyList;
    LPWSTR pwszStatusString;
    DWORD dwOtherInfoChoice;
    __extension__ union {
      DWORD dwFailInfo;
      PCMC_PEND_INFO pPendInfo;
    };
  } CMC_STATUS_INFO,*PCMC_STATUS_INFO;
  typedef struct _CMC_ADD_EXTENSIONS_INFO {
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } CMC_ADD_EXTENSIONS_INFO,*PCMC_ADD_EXTENSIONS_INFO;

  typedef struct _CMC_ADD_ATTRIBUTES_INFO {
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
  } CMC_ADD_ATTRIBUTES_INFO,*PCMC_ADD_ATTRIBUTES_INFO;

  typedef struct _CERT_TEMPLATE_EXT {
    LPSTR pszObjId;
    DWORD dwMajorVersion;
    WINBOOL fMinorVersion;
    DWORD dwMinorVersion;
  } CERT_TEMPLATE_EXT,*PCERT_TEMPLATE_EXT;

  typedef struct _CERT_HASHED_URL {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
    LPWSTR pwszUrl;
  } CERT_HASHED_URL,*PCERT_HASHED_URL;

  typedef struct _CERT_LOGOTYPE_DETAILS {
    LPWSTR pwszMimeType;
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
  } CERT_LOGOTYPE_DETAILS,*PCERT_LOGOTYPE_DETAILS;

  typedef struct _CERT_LOGOTYPE_REFERENCE {
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
  } CERT_LOGOTYPE_REFERENCE,*PCERT_LOGOTYPE_REFERENCE;

  typedef struct _CERT_LOGOTYPE_IMAGE_INFO {
    DWORD dwLogotypeImageInfoChoice;
    DWORD dwFileSize;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwLogotypeImageResolutionChoice;
    __extension__ union {
      DWORD dwNumBits;
      DWORD dwTableSize;
    };
    LPWSTR pwszLanguage;
  } CERT_LOGOTYPE_IMAGE_INFO,*PCERT_LOGOTYPE_IMAGE_INFO;
  typedef struct _CERT_LOGOTYPE_IMAGE {
    CERT_LOGOTYPE_DETAILS LogotypeDetails;
    PCERT_LOGOTYPE_IMAGE_INFO pLogotypeImageInfo;
  } CERT_LOGOTYPE_IMAGE,*PCERT_LOGOTYPE_IMAGE;

  typedef struct _CERT_LOGOTYPE_AUDIO_INFO {
    DWORD dwFileSize;
    DWORD dwPlayTime;
    DWORD dwChannels;
    DWORD dwSampleRate;
    LPWSTR pwszLanguage;
  } CERT_LOGOTYPE_AUDIO_INFO,*PCERT_LOGOTYPE_AUDIO_INFO;

  typedef struct _CERT_LOGOTYPE_AUDIO {
    CERT_LOGOTYPE_DETAILS LogotypeDetails;
    PCERT_LOGOTYPE_AUDIO_INFO pLogotypeAudioInfo;
  } CERT_LOGOTYPE_AUDIO,*PCERT_LOGOTYPE_AUDIO;

  typedef struct _CERT_LOGOTYPE_DATA {
    DWORD cLogotypeImage;
    PCERT_LOGOTYPE_IMAGE rgLogotypeImage;
    DWORD cLogotypeAudio;
    PCERT_LOGOTYPE_AUDIO rgLogotypeAudio;
  } CERT_LOGOTYPE_DATA,*PCERT_LOGOTYPE_DATA;

  typedef struct _CERT_LOGOTYPE_INFO {
    DWORD dwLogotypeInfoChoice;
    __extension__ union {
      PCERT_LOGOTYPE_DATA pLogotypeDirectInfo;
      PCERT_LOGOTYPE_REFERENCE pLogotypeIndirectInfo;
    };
  } CERT_LOGOTYPE_INFO,*PCERT_LOGOTYPE_INFO;




  typedef struct _CERT_OTHER_LOGOTYPE_INFO {
    LPSTR pszObjId;
    CERT_LOGOTYPE_INFO LogotypeInfo;
  } CERT_OTHER_LOGOTYPE_INFO,*PCERT_OTHER_LOGOTYPE_INFO;




  typedef struct _CERT_LOGOTYPE_EXT_INFO {
    DWORD cCommunityLogo;
    PCERT_LOGOTYPE_INFO rgCommunityLogo;
    PCERT_LOGOTYPE_INFO pIssuerLogo;
    PCERT_LOGOTYPE_INFO pSubjectLogo;
    DWORD cOtherLogo;
    PCERT_OTHER_LOGOTYPE_INFO rgOtherLogo;
  } CERT_LOGOTYPE_EXT_INFO,*PCERT_LOGOTYPE_EXT_INFO;

  typedef struct _CERT_BIOMETRIC_DATA {
    DWORD dwTypeOfBiometricDataChoice;
    __extension__ union {
      DWORD dwPredefined;
      LPSTR pszObjId;
    };
    CERT_HASHED_URL HashedUrl;
  } CERT_BIOMETRIC_DATA,*PCERT_BIOMETRIC_DATA;







  typedef struct _CERT_BIOMETRIC_EXT_INFO {
    DWORD cBiometricData;
    PCERT_BIOMETRIC_DATA rgBiometricData;
  } CERT_BIOMETRIC_EXT_INFO,*PCERT_BIOMETRIC_EXT_INFO;

  typedef struct _OCSP_SIGNATURE_INFO {
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
  } OCSP_SIGNATURE_INFO,*POCSP_SIGNATURE_INFO;

  typedef struct _OCSP_SIGNED_REQUEST_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    POCSP_SIGNATURE_INFO pOptionalSignatureInfo;
  } OCSP_SIGNED_REQUEST_INFO,*POCSP_SIGNED_REQUEST_INFO;

  typedef struct _OCSP_CERT_ID {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB IssuerNameHash;
    CRYPT_HASH_BLOB IssuerKeyHash;
    CRYPT_INTEGER_BLOB SerialNumber;
  } OCSP_CERT_ID,*POCSP_CERT_ID;

  typedef struct _OCSP_REQUEST_ENTRY {
    OCSP_CERT_ID CertId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } OCSP_REQUEST_ENTRY,*POCSP_REQUEST_ENTRY;

  typedef struct _OCSP_REQUEST_INFO {
    DWORD dwVersion;
    PCERT_ALT_NAME_ENTRY pRequestorName;
    DWORD cRequestEntry;
    POCSP_REQUEST_ENTRY rgRequestEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } OCSP_REQUEST_INFO,*POCSP_REQUEST_INFO;



  typedef struct _OCSP_RESPONSE_INFO {
    DWORD dwStatus;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
  } OCSP_RESPONSE_INFO,*POCSP_RESPONSE_INFO;
  typedef struct _OCSP_BASIC_SIGNED_RESPONSE_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    OCSP_SIGNATURE_INFO SignatureInfo;
  } OCSP_BASIC_SIGNED_RESPONSE_INFO,*POCSP_BASIC_SIGNED_RESPONSE_INFO;

  typedef struct _OCSP_BASIC_REVOKED_INFO {
    FILETIME RevocationDate;
    DWORD dwCrlReasonCode;
  } OCSP_BASIC_REVOKED_INFO,*POCSP_BASIC_REVOKED_INFO;

  typedef struct _OCSP_BASIC_RESPONSE_ENTRY {
    OCSP_CERT_ID CertId;
    DWORD dwCertStatus;
    __extension__ union {
      POCSP_BASIC_REVOKED_INFO pRevokedInfo;
    };
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } OCSP_BASIC_RESPONSE_ENTRY,*POCSP_BASIC_RESPONSE_ENTRY;





  typedef struct _OCSP_BASIC_RESPONSE_INFO {
    DWORD dwVersion;
    DWORD dwResponderIdChoice;
    __extension__ union {
      CERT_NAME_BLOB ByNameResponderId;
      CRYPT_HASH_BLOB ByKeyResponderId;
    };
    FILETIME ProducedAt;
    DWORD cResponseEntry;
    POCSP_BASIC_RESPONSE_ENTRY rgResponseEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
  } OCSP_BASIC_RESPONSE_INFO,*POCSP_BASIC_RESPONSE_INFO;





  typedef void *HCRYPTOIDFUNCSET;
  typedef void *HCRYPTOIDFUNCADDR;
  typedef struct _CRYPT_OID_FUNC_ENTRY {
    LPCSTR pszOID;
    void *pvFuncAddr;
  } CRYPT_OID_FUNC_ENTRY,*PCRYPT_OID_FUNC_ENTRY;







          WINBOOL __attribute__((__stdcall__)) CryptInstallOIDFunctionAddress (HMODULE hModule, DWORD dwEncodingType, LPCSTR pszFuncName, DWORD cFuncEntry, const CRYPT_OID_FUNC_ENTRY rgFuncEntry[], DWORD dwFlags);
          HCRYPTOIDFUNCSET __attribute__((__stdcall__)) CryptInitOIDFunctionSet (LPCSTR pszFuncName, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptGetOIDFunctionAddress (HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCSTR pszOID, DWORD dwFlags, void **ppvFuncAddr, HCRYPTOIDFUNCADDR *phFuncAddr);
          WINBOOL __attribute__((__stdcall__)) CryptGetDefaultOIDDllList (HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, WCHAR *pwszDllList, DWORD *pcchDllList);
          WINBOOL __attribute__((__stdcall__)) CryptGetDefaultOIDFunctionAddress (HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCWSTR pwszDll, DWORD dwFlags, void **ppvFuncAddr, HCRYPTOIDFUNCADDR *phFuncAddr);
          WINBOOL __attribute__((__stdcall__)) CryptFreeOIDFunctionAddress (HCRYPTOIDFUNCADDR hFuncAddr, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptRegisterOIDFunction (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszDll, LPCSTR pszOverrideFuncName);
          WINBOOL __attribute__((__stdcall__)) CryptUnregisterOIDFunction (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID);
          WINBOOL __attribute__((__stdcall__)) CryptRegisterDefaultOIDFunction (DWORD dwEncodingType, LPCSTR pszFuncName, DWORD dwIndex, LPCWSTR pwszDll);
          WINBOOL __attribute__((__stdcall__)) CryptUnregisterDefaultOIDFunction (DWORD dwEncodingType, LPCSTR pszFuncName, LPCWSTR pwszDll);
          WINBOOL __attribute__((__stdcall__)) CryptSetOIDFunctionValue (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD dwValueType, const BYTE *pbValueData, DWORD cbValueData);
          WINBOOL __attribute__((__stdcall__)) CryptGetOIDFunctionValue (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD *pdwValueType, BYTE *pbValueData, DWORD *pcbValueData);

  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CRYPT_ENUM_OID_FUNC) (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD cValue, const DWORD rgdwValueType[], LPCWSTR const rgpwszValueName[], const BYTE *const rgpbValueData[], const DWORD rgcbValueData[], void *pvArg);

          WINBOOL __attribute__((__stdcall__)) CryptEnumOIDFunction (DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD dwFlags, void *pvArg, PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc);
  typedef struct _CRYPT_OID_INFO {
    DWORD cbSize;
    LPCSTR pszOID;
    LPCWSTR pwszName;
    DWORD dwGroupId;
    __extension__ union {
      DWORD dwValue;
      ALG_ID Algid;
      DWORD dwLength;
    };
    CRYPT_DATA_BLOB ExtraInfo;




  } CRYPT_OID_INFO,*PCRYPT_OID_INFO;

  typedef const CRYPT_OID_INFO CCRYPT_OID_INFO,*PCCRYPT_OID_INFO;
          PCCRYPT_OID_INFO __attribute__((__stdcall__)) CryptFindOIDInfo (DWORD dwKeyType, void *pvKey, DWORD dwGroupId);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CRYPT_ENUM_OID_INFO) (PCCRYPT_OID_INFO pInfo, void *pvArg);

          WINBOOL __attribute__((__stdcall__)) CryptRegisterOIDInfo (PCCRYPT_OID_INFO pInfo, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptUnregisterOIDInfo (PCCRYPT_OID_INFO pInfo);
          WINBOOL __attribute__((__stdcall__)) CryptEnumOIDInfo (DWORD dwGroupId, DWORD dwFlags, void *pvArg, PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo);
          LPCWSTR __attribute__((__stdcall__)) CryptFindLocalizedName (LPCWSTR pwszCryptName);






  typedef struct _CERT_STRONG_SIGN_SERIALIZED_INFO {
    DWORD dwFlags;
    LPWSTR pwszCNGSignHashAlgids;
    LPWSTR pwszCNGPubKeyMinBitLengths;
  } CERT_STRONG_SIGN_SERIALIZED_INFO,*PCERT_STRONG_SIGN_SERIALIZED_INFO;

  typedef struct _CERT_STRONG_SIGN_PARA {
    DWORD cbSize;
    DWORD dwInfoChoice;
    __extension__ union {
      void *pvInfo;
      PCERT_STRONG_SIGN_SERIALIZED_INFO pSerializedInfo;
      LPSTR pszOID;
    };
  } CERT_STRONG_SIGN_PARA,*PCERT_STRONG_SIGN_PARA;

  typedef const CERT_STRONG_SIGN_PARA *PCCERT_STRONG_SIGN_PARA;
  typedef void *HCRYPTMSG;
  typedef struct _CERT_ISSUER_SERIAL_NUMBER {
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
  } CERT_ISSUER_SERIAL_NUMBER,*PCERT_ISSUER_SERIAL_NUMBER;

  typedef struct _CERT_ID {
    DWORD dwIdChoice;
    __extension__ union {
      CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
      CRYPT_HASH_BLOB KeyId;
      CRYPT_HASH_BLOB HashId;
    };
  } CERT_ID,*PCERT_ID;





  typedef struct _CMSG_SIGNER_ENCODE_INFO {
    DWORD cbSize;
    PCERT_INFO pCertInfo;
    __extension__ union {
      HCRYPTPROV hCryptProv;
      NCRYPT_KEY_HANDLE hNCryptKey;
    };
    DWORD dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;





  } CMSG_SIGNER_ENCODE_INFO,*PCMSG_SIGNER_ENCODE_INFO;

  typedef struct _CMSG_SIGNED_ENCODE_INFO {
    DWORD cbSize;
    DWORD cSigners;
    PCMSG_SIGNER_ENCODE_INFO rgSigners;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
    DWORD cCrlEncoded;
    PCRL_BLOB rgCrlEncoded;




  } CMSG_SIGNED_ENCODE_INFO,*PCMSG_SIGNED_ENCODE_INFO;

  typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,*PCMSG_RECIPIENT_ENCODE_INFO;

  typedef struct _CMSG_ENVELOPED_ENCODE_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCERT_INFO *rgpRecipients;
  } CMSG_ENVELOPED_ENCODE_INFO,*PCMSG_ENVELOPED_ENCODE_INFO;

  typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
  } CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,*PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;

  typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
  } CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,*PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

  typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
    void *pvKeyWrapAuxInfo;
    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwKeySpec;
    DWORD dwKeyChoice;
    __extension__ union {
      PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
      PCERT_ID pSenderId;
    };
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;
  } CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,*PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;




  typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeyChoice;
    __extension__ union {
      HCRYPTKEY hKeyEncryptionKey;
      void *pvKeyEncryptionKey;
    };
    CRYPT_DATA_BLOB KeyId;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
  } CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO,*PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
  struct _CMSG_RECIPIENT_ENCODE_INFO {
    DWORD dwRecipientChoice;
    __extension__ union {
      PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;
      PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;
      PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
    };
  };

  typedef struct _CMSG_RC2_AUX_INFO {
    DWORD cbSize;
    DWORD dwBitLen;
  } CMSG_RC2_AUX_INFO,*PCMSG_RC2_AUX_INFO;

  typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
    DWORD cbSize;
    DWORD dwFlags;
  } CMSG_SP3_COMPATIBLE_AUX_INFO,*PCMSG_SP3_COMPATIBLE_AUX_INFO;

  typedef struct _CMSG_RC4_AUX_INFO {
    DWORD cbSize;
    DWORD dwBitLen;
  } CMSG_RC4_AUX_INFO,*PCMSG_RC4_AUX_INFO;

  typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
    DWORD cbSize;
    CMSG_SIGNED_ENCODE_INFO SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
  } CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO,*PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;

  typedef struct _CMSG_HASHED_ENCODE_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
  } CMSG_HASHED_ENCODE_INFO,*PCMSG_HASHED_ENCODE_INFO;

  typedef struct _CMSG_ENCRYPTED_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
  } CMSG_ENCRYPTED_ENCODE_INFO,*PCMSG_ENCRYPTED_ENCODE_INFO;

  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_STREAM_OUTPUT) (const void *pvArg, BYTE *pbData, DWORD cbData, WINBOOL fFinal);



  typedef struct _CMSG_STREAM_INFO {
    DWORD cbContent;
    PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
    void *pvArg;
  } CMSG_STREAM_INFO,*PCMSG_STREAM_INFO;
          HCRYPTMSG __attribute__((__stdcall__)) CryptMsgOpenToEncode (DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, void const *pvMsgEncodeInfo, LPSTR pszInnerContentObjID, PCMSG_STREAM_INFO pStreamInfo);
          DWORD __attribute__((__stdcall__)) CryptMsgCalculateEncodedLength (DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, void const *pvMsgEncodeInfo, LPSTR pszInnerContentObjID, DWORD cbData);
          HCRYPTMSG __attribute__((__stdcall__)) CryptMsgOpenToDecode (DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, HCRYPTPROV_LEGACY hCryptProv, PCERT_INFO pRecipientInfo, PCMSG_STREAM_INFO pStreamInfo);
          HCRYPTMSG __attribute__((__stdcall__)) CryptMsgDuplicate (HCRYPTMSG hCryptMsg);
          WINBOOL __attribute__((__stdcall__)) CryptMsgClose (HCRYPTMSG hCryptMsg);
          WINBOOL __attribute__((__stdcall__)) CryptMsgUpdate (HCRYPTMSG hCryptMsg, const BYTE *pbData, DWORD cbData, WINBOOL fFinal);
          WINBOOL __attribute__((__stdcall__)) CryptMsgGetParam (HCRYPTMSG hCryptMsg, DWORD dwParamType, DWORD dwIndex, void *pvData, DWORD *pcbData);
  typedef struct _CMSG_SIGNER_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
  } CMSG_SIGNER_INFO,*PCMSG_SIGNER_INFO;

  typedef struct _CMSG_CMS_SIGNER_INFO {
    DWORD dwVersion;
    CERT_ID SignerId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
  } CMSG_CMS_SIGNER_INFO,*PCMSG_CMS_SIGNER_INFO;

  typedef CRYPT_ATTRIBUTES CMSG_ATTR;
  typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
  typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
    DWORD dwVersion;
    CERT_ID RecipientId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
  } CMSG_KEY_TRANS_RECIPIENT_INFO,*PCMSG_KEY_TRANS_RECIPIENT_INFO;

  typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {
    CERT_ID RecipientId;
    CRYPT_DATA_BLOB EncryptedKey;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
  } CMSG_RECIPIENT_ENCRYPTED_KEY_INFO,*PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

  typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
    DWORD dwVersion;
    DWORD dwOriginatorChoice;
    __extension__ union {
      CERT_ID OriginatorCertId;
      CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    };
    CRYPT_DATA_BLOB UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;
  } CMSG_KEY_AGREE_RECIPIENT_INFO,*PCMSG_KEY_AGREE_RECIPIENT_INFO;




  typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
    DWORD dwVersion;
    CRYPT_DATA_BLOB KeyId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
  } CMSG_MAIL_LIST_RECIPIENT_INFO,*PCMSG_MAIL_LIST_RECIPIENT_INFO;

  typedef struct _CMSG_CMS_RECIPIENT_INFO {
    DWORD dwRecipientChoice;
    __extension__ union {
      PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
      PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
      PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    };
  } CMSG_CMS_RECIPIENT_INFO,*PCMSG_CMS_RECIPIENT_INFO;
          WINBOOL __attribute__((__stdcall__)) CryptMsgControl (HCRYPTMSG hCryptMsg, DWORD dwFlags, DWORD dwCtrlType, void const *pvCtrlPara);
  typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwSignerIndex;
    DWORD dwSignerType;
    void *pvSigner;
  } CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA,*PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;






  typedef struct _CMSG_CTRL_DECRYPT_PARA {
    DWORD cbSize;
    __extension__ union {
      HCRYPTPROV hCryptProv;
      NCRYPT_KEY_HANDLE hNCryptKey;
    };
    DWORD dwKeySpec;
    DWORD dwRecipientIndex;
  } CMSG_CTRL_DECRYPT_PARA,*PCMSG_CTRL_DECRYPT_PARA;

  typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
    DWORD cbSize;
    __extension__ union {
      HCRYPTPROV hCryptProv;
      NCRYPT_KEY_HANDLE hNCryptKey;
    };
    DWORD dwKeySpec;
    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    DWORD dwRecipientIndex;
  } CMSG_CTRL_KEY_TRANS_DECRYPT_PARA,*PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;

  typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
    DWORD cbSize;
    __extension__ union {
      HCRYPTPROV hCryptProv;
      NCRYPT_KEY_HANDLE hNCryptKey;
    };
    DWORD dwKeySpec;
    PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
    DWORD dwRecipientIndex;
    DWORD dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB OriginatorPublicKey;
  } CMSG_CTRL_KEY_AGREE_DECRYPT_PARA,*PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;

  typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    DWORD dwRecipientIndex;
    DWORD dwKeyChoice;
    __extension__ union {
      HCRYPTKEY hKeyEncryptionKey;
      void *pvKeyEncryptionKey;
    };
  } CMSG_CTRL_MAIL_LIST_DECRYPT_PARA,*PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;

  typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
    DWORD cbSize;
    DWORD dwSignerIndex;
    CRYPT_DATA_BLOB blob;
  } CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA,*PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;

  typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
    DWORD cbSize;
    DWORD dwSignerIndex;
    DWORD dwUnauthAttrIndex;
  } CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA,*PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;



  WINBOOL __attribute__((__stdcall__)) CryptMsgVerifyCountersignatureEncoded (HCRYPTPROV_LEGACY hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, PCERT_INFO pciCountersigner);
  WINBOOL __attribute__((__stdcall__)) CryptMsgVerifyCountersignatureEncodedEx (HCRYPTPROV_LEGACY hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, DWORD dwSignerType, void *pvSigner, DWORD dwFlags, void *pvExtra);
  WINBOOL __attribute__((__stdcall__)) CryptMsgCountersign (HCRYPTMSG hCryptMsg, DWORD dwIndex, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners);
  WINBOOL __attribute__((__stdcall__)) CryptMsgCountersignEncoded (DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners, PBYTE pbCountersignature, PDWORD pcbCountersignature);

  typedef void *(__attribute__((__stdcall__)) *PFN_CMSG_ALLOC) (size_t cb);
  typedef void (__attribute__((__stdcall__)) *PFN_CMSG_FREE) (void *pv);





  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_GEN_ENCRYPT_KEY) (HCRYPTPROV *phCryptProv, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PVOID pvEncryptAuxInfo, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PFN_CMSG_ALLOC pfnAlloc, HCRYPTKEY *phEncryptKey, PBYTE *ppbEncryptParameters, PDWORD pcbEncryptParameters);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_EXPORT_ENCRYPT_KEY) (HCRYPTPROV hCryptProv, HCRYPTKEY hEncryptKey, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PBYTE pbData, PDWORD pcbData);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_IMPORT_ENCRYPT_KEY) (HCRYPTPROV hCryptProv, DWORD dwKeySpec, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PCRYPT_ALGORITHM_IDENTIFIER paiPubKey, PBYTE pbEncodedKey, DWORD cbEncodedKey, HCRYPTKEY *phEncryptKey);



  typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    DWORD dwEncryptFlags;
    __extension__ union {
      HCRYPTKEY hContentEncryptKey;
      BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    };
    DWORD dwFlags;
    WINBOOL fCNG;
    BYTE *pbCNGContentEncryptKeyObject;
    BYTE *pbContentEncryptKey;
    DWORD cbContentEncryptKey;
  } CMSG_CONTENT_ENCRYPT_INFO,*PCMSG_CONTENT_ENCRYPT_INFO;
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY) (PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, DWORD dwFlags, void *pvReserved);

  typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
  } CMSG_KEY_TRANS_ENCRYPT_INFO,*PCMSG_KEY_TRANS_ENCRYPT_INFO;
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_EXPORT_KEY_TRANS) (PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo, PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo, DWORD dwFlags, void *pvReserved);

  typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
    DWORD cbSize;
    CRYPT_DATA_BLOB EncryptedKey;
  } CMSG_KEY_AGREE_KEY_ENCRYPT_INFO,*PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;

  typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD dwOriginatorChoice;
    __extension__ union {
      CERT_ID OriginatorCertId;
      CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    };
    DWORD cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
    DWORD dwFlags;
  } CMSG_KEY_AGREE_ENCRYPT_INFO,*PCMSG_KEY_AGREE_ENCRYPT_INFO;
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_EXPORT_KEY_AGREE) (PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo, PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo, DWORD dwFlags, void *pvReserved);

  typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
  } CMSG_MAIL_LIST_ENCRYPT_INFO,*PCMSG_MAIL_LIST_ENCRYPT_INFO;
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_EXPORT_MAIL_LIST) (PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo, PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo, DWORD dwFlags, void *pvReserved);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_IMPORT_KEY_TRANS) (PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_IMPORT_KEY_AGREE) (PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_IMPORT_MAIL_LIST) (PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);

  typedef struct _CMSG_CNG_CONTENT_DECRYPT_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    NCRYPT_KEY_HANDLE hNCryptKey;
    BYTE *pbContentEncryptKey;
    DWORD cbContentEncryptKey;
    BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    BYTE *pbCNGContentEncryptKeyObject;
  } CMSG_CNG_CONTENT_DECRYPT_INFO,*PCMSG_CNG_CONTENT_DECRYPT_INFO;





  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_CNG_IMPORT_KEY_TRANS) (PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void *pvReserved);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_CNG_IMPORT_KEY_AGREE) (PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void *pvReserved);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY) (PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, DWORD dwFlags, void *pvReserved);



  typedef void *HCERTSTORE;

  typedef struct _CERT_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCertEncoded;
    DWORD cbCertEncoded;
    PCERT_INFO pCertInfo;
    HCERTSTORE hCertStore;
  } CERT_CONTEXT,*PCERT_CONTEXT;

  typedef const CERT_CONTEXT *PCCERT_CONTEXT;



  typedef struct _CRL_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCrlEncoded;
    DWORD cbCrlEncoded;
    PCRL_INFO pCrlInfo;
    HCERTSTORE hCertStore;
  } CRL_CONTEXT,*PCRL_CONTEXT;

  typedef const CRL_CONTEXT *PCCRL_CONTEXT;

  typedef struct _CTL_CONTEXT {
    DWORD dwMsgAndCertEncodingType;
    BYTE *pbCtlEncoded;
    DWORD cbCtlEncoded;
    PCTL_INFO pCtlInfo;
    HCERTSTORE hCertStore;
    HCRYPTMSG hCryptMsg;
    BYTE *pbCtlContent;
    DWORD cbCtlContent;
  } CTL_CONTEXT,*PCTL_CONTEXT;

  typedef const CTL_CONTEXT *PCCTL_CONTEXT;
  typedef struct _CRYPT_KEY_PROV_PARAM {
    DWORD dwParam;
    BYTE *pbData;
    DWORD cbData;
    DWORD dwFlags;
  } CRYPT_KEY_PROV_PARAM,*PCRYPT_KEY_PROV_PARAM;

  typedef struct _CRYPT_KEY_PROV_INFO {
    LPWSTR pwszContainerName;
    LPWSTR pwszProvName;
    DWORD dwProvType;
    DWORD dwFlags;
    DWORD cProvParam;
    PCRYPT_KEY_PROV_PARAM rgProvParam;
    DWORD dwKeySpec;
  } CRYPT_KEY_PROV_INFO,*PCRYPT_KEY_PROV_INFO;






  typedef struct _CERT_KEY_CONTEXT {
    DWORD cbSize;
    __extension__ union {
      HCRYPTPROV hCryptProv;
      NCRYPT_KEY_HANDLE hNCryptKey;
    };
    DWORD dwKeySpec;
  } CERT_KEY_CONTEXT,*PCERT_KEY_CONTEXT;

  typedef struct _ROOT_INFO_LUID {
    DWORD LowPart;
    LONG HighPart;
  } ROOT_INFO_LUID,*PROOT_INFO_LUID;

  typedef struct _CRYPT_SMART_CARD_ROOT_INFO {
    BYTE rgbCardID [16];
    ROOT_INFO_LUID luid;
  } CRYPT_SMART_CARD_ROOT_INFO,*PCRYPT_SMART_CARD_ROOT_INFO;
  typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
    __extension__ union {
      HKEY hKeyBase;
      void *pvBase;
    };
    __extension__ union {
      void *pvSystemStore;
      LPCSTR pszSystemStore;
      LPCWSTR pwszSystemStore;
    };
  } CERT_SYSTEM_STORE_RELOCATE_PARA,*PCERT_SYSTEM_STORE_RELOCATE_PARA;
  typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
    HKEY hKeyBase;
    LPWSTR pwszRegPath;
  } CERT_REGISTRY_STORE_CLIENT_GPT_PARA,*PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;



  typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA {
    HKEY hKey;
    LPWSTR pwszStoreDirectory;
  } CERT_REGISTRY_STORE_ROAMING_PARA,*PCERT_REGISTRY_STORE_ROAMING_PARA;
  typedef struct _CERT_LDAP_STORE_OPENED_PARA {
    void *pvLdapSessionHandle;
    LPCWSTR pwszLdapUrl;
  } CERT_LDAP_STORE_OPENED_PARA,*PCERT_LDAP_STORE_OPENED_PARA;



          HCERTSTORE __attribute__((__stdcall__)) CertOpenStore (LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const void *pvPara);

  typedef void *HCERTSTOREPROV;



  typedef struct _CERT_STORE_PROV_INFO {
    DWORD cbSize;
    DWORD cStoreProvFunc;
    void **rgpvStoreProvFunc;
    HCERTSTOREPROV hStoreProv;
    DWORD dwStoreProvFlags;
    HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
  } CERT_STORE_PROV_INFO,*PCERT_STORE_PROV_INFO;

  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC) (LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const void *pvPara, HCERTSTORE hCertStore, PCERT_STORE_PROV_INFO pStoreProvInfo);
  typedef void (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_CLOSE) (HCERTSTOREPROV hStoreProv, DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_READ_CERT) (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags, PCCERT_CONTEXT *ppProvCertContext);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_WRITE_CERT) (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_DELETE_CERT) (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY) (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, const void *pvData);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_READ_CRL) (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags, PCCRL_CONTEXT *ppProvCrlContext);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_WRITE_CRL) (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_DELETE_CRL) (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY) (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_READ_CTL) (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags, PCCTL_CONTEXT *ppProvCtlContext);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_WRITE_CTL) (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_DELETE_CTL) (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY) (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_CONTROL) (HCERTSTOREPROV hStoreProv, DWORD dwFlags, DWORD dwCtrlType, void const *pvCtrlPara);

  typedef struct _CERT_STORE_PROV_FIND_INFO {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD dwFindFlags;
    DWORD dwFindType;
    const void *pvFindPara;
  } CERT_STORE_PROV_FIND_INFO,*PCERT_STORE_PROV_FIND_INFO;

  typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,*PCCERT_STORE_PROV_FIND_INFO;

  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FIND_CERT) (HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCERT_CONTEXT pPrevCertContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCERT_CONTEXT *ppProvCertContext);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FREE_FIND_CERT) (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, void *pvStoreProvFindInfo, DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY) (HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FIND_CRL) (HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCRL_CONTEXT pPrevCrlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCRL_CONTEXT *ppProvCrlContext);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FREE_FIND_CRL) (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, void *pvStoreProvFindInfo, DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY) (HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FIND_CTL) (HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCTL_CONTEXT pPrevCtlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCTL_CONTEXT *ppProvCtlContext);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_FREE_FIND_CTL) (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, void *pvStoreProvFindInfo, DWORD dwFlags);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY) (HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);

          HCERTSTORE __attribute__((__stdcall__)) CertDuplicateStore (HCERTSTORE hCertStore);
          WINBOOL __attribute__((__stdcall__)) CertSaveStore (HCERTSTORE hCertStore, DWORD dwEncodingType, DWORD dwSaveAs, DWORD dwSaveTo, void *pvSaveToPara, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CertCloseStore (HCERTSTORE hCertStore, DWORD dwFlags);
          PCCERT_CONTEXT __attribute__((__stdcall__)) CertGetSubjectCertificateFromStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, PCERT_INFO pCertId);
          PCCERT_CONTEXT __attribute__((__stdcall__)) CertEnumCertificatesInStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pPrevCertContext);
          PCCERT_CONTEXT __attribute__((__stdcall__)) CertFindCertificateInStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCERT_CONTEXT pPrevCertContext);
          PCCERT_CONTEXT __attribute__((__stdcall__)) CertGetIssuerCertificateFromStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pSubjectContext, PCCERT_CONTEXT pPrevIssuerContext, DWORD *pdwFlags);
          WINBOOL __attribute__((__stdcall__)) CertVerifySubjectCertificateContext (PCCERT_CONTEXT pSubject, PCCERT_CONTEXT pIssuer, DWORD *pdwFlags);
          PCCERT_CONTEXT __attribute__((__stdcall__)) CertDuplicateCertificateContext (PCCERT_CONTEXT pCertContext);
          PCCERT_CONTEXT __attribute__((__stdcall__)) CertCreateCertificateContext (DWORD dwCertEncodingType, const BYTE *pbCertEncoded, DWORD cbCertEncoded);
          WINBOOL __attribute__((__stdcall__)) CertFreeCertificateContext (PCCERT_CONTEXT pCertContext);
          WINBOOL __attribute__((__stdcall__)) CertSetCertificateContextProperty (PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, const void *pvData);

  typedef struct _CRL_FIND_ISSUED_FOR_PARA {
    PCCERT_CONTEXT pSubjectCert;
    PCCERT_CONTEXT pIssuerCert;
  } CRL_FIND_ISSUED_FOR_PARA,*PCRL_FIND_ISSUED_FOR_PARA;

  typedef struct _CTL_ANY_SUBJECT_INFO {
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    CRYPT_DATA_BLOB SubjectIdentifier;
  } CTL_ANY_SUBJECT_INFO,*PCTL_ANY_SUBJECT_INFO;
          WINBOOL __attribute__((__stdcall__)) CertGetCertificateContextProperty (PCCERT_CONTEXT pCertContext, DWORD dwPropId, void *pvData, DWORD *pcbData);
          DWORD __attribute__((__stdcall__)) CertEnumCertificateContextProperties (PCCERT_CONTEXT pCertContext, DWORD dwPropId);
          WINBOOL __attribute__((__stdcall__)) CertCreateCTLEntryFromCertificateContextProperties (PCCERT_CONTEXT pCertContext, DWORD cOptAttr, PCRYPT_ATTRIBUTE rgOptAttr, DWORD dwFlags, void *pvReserved, PCTL_ENTRY pCtlEntry, DWORD *pcbCtlEntry);
          WINBOOL __attribute__((__stdcall__)) CertSetCertificateContextPropertiesFromCTLEntry (PCCERT_CONTEXT pCertContext, PCTL_ENTRY pCtlEntry, DWORD dwFlags);
          PCCRL_CONTEXT __attribute__((__stdcall__)) CertGetCRLFromStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pIssuerContext, PCCRL_CONTEXT pPrevCrlContext, DWORD *pdwFlags);
          PCCRL_CONTEXT __attribute__((__stdcall__)) CertEnumCRLsInStore (HCERTSTORE hCertStore, PCCRL_CONTEXT pPrevCrlContext);
          PCCRL_CONTEXT __attribute__((__stdcall__)) CertFindCRLInStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCRL_CONTEXT pPrevCrlContext);
          PCCRL_CONTEXT __attribute__((__stdcall__)) CertDuplicateCRLContext (PCCRL_CONTEXT pCrlContext);
          PCCRL_CONTEXT __attribute__((__stdcall__)) CertCreateCRLContext (DWORD dwCertEncodingType, const BYTE *pbCrlEncoded, DWORD cbCrlEncoded);
          WINBOOL __attribute__((__stdcall__)) CertFreeCRLContext (PCCRL_CONTEXT pCrlContext);
          WINBOOL __attribute__((__stdcall__)) CertSetCRLContextProperty (PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData);
          WINBOOL __attribute__((__stdcall__)) CertGetCRLContextProperty (PCCRL_CONTEXT pCrlContext, DWORD dwPropId, void *pvData, DWORD *pcbData);
          DWORD __attribute__((__stdcall__)) CertEnumCRLContextProperties (PCCRL_CONTEXT pCrlContext, DWORD dwPropId);
          WINBOOL __attribute__((__stdcall__)) CertFindCertificateInCRL (PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrlContext, DWORD dwFlags, void *pvReserved, PCRL_ENTRY *ppCrlEntry);
          WINBOOL __attribute__((__stdcall__)) CertIsValidCRLForCertificate (PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrl, DWORD dwFlags, void *pvReserved);
          WINBOOL __attribute__((__stdcall__)) CertAddEncodedCertificateToStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, const BYTE *pbCertEncoded, DWORD cbCertEncoded, DWORD dwAddDisposition, PCCERT_CONTEXT *ppCertContext);
          WINBOOL __attribute__((__stdcall__)) CertAddCertificateContextToStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT *ppStoreContext);
          WINBOOL __attribute__((__stdcall__)) CertAddSerializedElementToStore (HCERTSTORE hCertStore, const BYTE *pbElement, DWORD cbElement, DWORD dwAddDisposition, DWORD dwFlags, DWORD dwContextTypeFlags, DWORD *pdwContextType, const void **ppvContext);
          WINBOOL __attribute__((__stdcall__)) CertDeleteCertificateFromStore (PCCERT_CONTEXT pCertContext);
          WINBOOL __attribute__((__stdcall__)) CertAddEncodedCRLToStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, const BYTE *pbCrlEncoded, DWORD cbCrlEncoded, DWORD dwAddDisposition, PCCRL_CONTEXT *ppCrlContext);
          WINBOOL __attribute__((__stdcall__)) CertAddCRLContextToStore (HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT *ppStoreContext);
          WINBOOL __attribute__((__stdcall__)) CertDeleteCRLFromStore (PCCRL_CONTEXT pCrlContext);
          WINBOOL __attribute__((__stdcall__)) CertSerializeCertificateStoreElement (PCCERT_CONTEXT pCertContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement);
          WINBOOL __attribute__((__stdcall__)) CertSerializeCRLStoreElement (PCCRL_CONTEXT pCrlContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement);
          PCCTL_CONTEXT __attribute__((__stdcall__)) CertDuplicateCTLContext (PCCTL_CONTEXT pCtlContext);
          PCCTL_CONTEXT __attribute__((__stdcall__)) CertCreateCTLContext (DWORD dwMsgAndCertEncodingType, const BYTE *pbCtlEncoded, DWORD cbCtlEncoded);
          WINBOOL __attribute__((__stdcall__)) CertFreeCTLContext (PCCTL_CONTEXT pCtlContext);
          WINBOOL __attribute__((__stdcall__)) CertSetCTLContextProperty (PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData);
          WINBOOL __attribute__((__stdcall__)) CertGetCTLContextProperty (PCCTL_CONTEXT pCtlContext, DWORD dwPropId, void *pvData, DWORD *pcbData);
          DWORD __attribute__((__stdcall__)) CertEnumCTLContextProperties (PCCTL_CONTEXT pCtlContext, DWORD dwPropId);
          PCCTL_CONTEXT __attribute__((__stdcall__)) CertEnumCTLsInStore (HCERTSTORE hCertStore, PCCTL_CONTEXT pPrevCtlContext);
          PCTL_ENTRY __attribute__((__stdcall__)) CertFindSubjectInCTL (DWORD dwEncodingType, DWORD dwSubjectType, void *pvSubject, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
          PCCTL_CONTEXT __attribute__((__stdcall__)) CertFindCTLInStore (HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCTL_CONTEXT pPrevCtlContext);
  typedef struct _CTL_FIND_USAGE_PARA {
    DWORD cbSize;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    PCERT_INFO pSigner;
  } CTL_FIND_USAGE_PARA,*PCTL_FIND_USAGE_PARA;

  typedef struct _CTL_FIND_SUBJECT_PARA {
    DWORD cbSize;
    PCTL_FIND_USAGE_PARA pUsagePara;
    DWORD dwSubjectType;
    void *pvSubject;
  } CTL_FIND_SUBJECT_PARA,*PCTL_FIND_SUBJECT_PARA;

  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_CREATE_CONTEXT_SORT_FUNC) (DWORD cbTotalEncoded, DWORD cbRemainEncoded, DWORD cEntry, void *pvSort);

  typedef struct _CERT_CREATE_CONTEXT_PARA {
    DWORD cbSize;
    PFN_CRYPT_FREE pfnFree;
    void *pvFree;
    PFN_CERT_CREATE_CONTEXT_SORT_FUNC pfnSort;
    void *pvSort;
  } CERT_CREATE_CONTEXT_PARA,*PCERT_CREATE_CONTEXT_PARA;

  typedef struct _CERT_SYSTEM_STORE_INFO {
    DWORD cbSize;
  } CERT_SYSTEM_STORE_INFO,*PCERT_SYSTEM_STORE_INFO;

  typedef struct _CERT_PHYSICAL_STORE_INFO {
    DWORD cbSize;
    LPSTR pszOpenStoreProvider;
    DWORD dwOpenEncodingType;
    DWORD dwOpenFlags;
    CRYPT_DATA_BLOB OpenParameters;
    DWORD dwFlags;
    DWORD dwPriority;
  } CERT_PHYSICAL_STORE_INFO,*PCERT_PHYSICAL_STORE_INFO;

          WINBOOL __attribute__((__stdcall__)) CertAddEncodedCTLToStore (HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, const BYTE *pbCtlEncoded, DWORD cbCtlEncoded, DWORD dwAddDisposition, PCCTL_CONTEXT *ppCtlContext);
          WINBOOL __attribute__((__stdcall__)) CertAddCTLContextToStore (HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT *ppStoreContext);
          WINBOOL __attribute__((__stdcall__)) CertSerializeCTLStoreElement (PCCTL_CONTEXT pCtlContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement);
          WINBOOL __attribute__((__stdcall__)) CertDeleteCTLFromStore (PCCTL_CONTEXT pCtlContext);
          WINBOOL __attribute__((__stdcall__)) CertAddCertificateLinkToStore (HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT *ppStoreContext);
          WINBOOL __attribute__((__stdcall__)) CertAddCRLLinkToStore (HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT *ppStoreContext);
          WINBOOL __attribute__((__stdcall__)) CertAddCTLLinkToStore (HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT *ppStoreContext);
          WINBOOL __attribute__((__stdcall__)) CertAddStoreToCollection (HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore, DWORD dwUpdateFlags, DWORD dwPriority);
          void __attribute__((__stdcall__)) CertRemoveStoreFromCollection (HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore);
          WINBOOL __attribute__((__stdcall__)) CertControlStore (HCERTSTORE hCertStore, DWORD dwFlags, DWORD dwCtrlType, void const *pvCtrlPara);
          WINBOOL __attribute__((__stdcall__)) CertSetStoreProperty (HCERTSTORE hCertStore, DWORD dwPropId, DWORD dwFlags, const void *pvData);
          WINBOOL __attribute__((__stdcall__)) CertGetStoreProperty (HCERTSTORE hCertStore, DWORD dwPropId, void *pvData, DWORD *pcbData);
          const void *__attribute__((__stdcall__)) CertCreateContext (DWORD dwContextType, DWORD dwEncodingType, const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCERT_CREATE_CONTEXT_PARA pCreatePara);
          WINBOOL __attribute__((__stdcall__)) CertRegisterSystemStore (const void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved);
          WINBOOL __attribute__((__stdcall__)) CertRegisterPhysicalStore (const void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved);
          WINBOOL __attribute__((__stdcall__)) CertUnregisterSystemStore (const void *pvSystemStore, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CertUnregisterPhysicalStore (const void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName);

  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION) (LPCWSTR pwszStoreLocation, DWORD dwFlags, void *pvReserved, void *pvArg);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_ENUM_SYSTEM_STORE) (const void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_ENUM_PHYSICAL_STORE) (const void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg);
          WINBOOL __attribute__((__stdcall__)) CertEnumSystemStoreLocation (DWORD dwFlags, void *pvArg, PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum);
          WINBOOL __attribute__((__stdcall__)) CertEnumSystemStore (DWORD dwFlags, void *pvSystemStoreLocationPara, void *pvArg, PFN_CERT_ENUM_SYSTEM_STORE pfnEnum);
          WINBOOL __attribute__((__stdcall__)) CertEnumPhysicalStore (const void *pvSystemStore, DWORD dwFlags, void *pvArg, PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum);
          WINBOOL __attribute__((__stdcall__)) CertGetEnhancedKeyUsage (PCCERT_CONTEXT pCertContext, DWORD dwFlags, PCERT_ENHKEY_USAGE pUsage, DWORD *pcbUsage);
          WINBOOL __attribute__((__stdcall__)) CertSetEnhancedKeyUsage (PCCERT_CONTEXT pCertContext, PCERT_ENHKEY_USAGE pUsage);
          WINBOOL __attribute__((__stdcall__)) CertAddEnhancedKeyUsageIdentifier (PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier);
          WINBOOL __attribute__((__stdcall__)) CertRemoveEnhancedKeyUsageIdentifier (PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier);
          WINBOOL __attribute__((__stdcall__)) CertGetValidUsages (DWORD cCerts, PCCERT_CONTEXT *rghCerts, int *cNumOIDs, LPSTR *rghOIDs, DWORD *pcbOIDs);
          WINBOOL __attribute__((__stdcall__)) CryptMsgGetAndVerifySigner (HCRYPTMSG hCryptMsg, DWORD cSignerStore, HCERTSTORE *rghSignerStore, DWORD dwFlags, PCCERT_CONTEXT *ppSigner, DWORD *pdwSignerIndex);
          WINBOOL __attribute__((__stdcall__)) CryptMsgSignCTL (DWORD dwMsgEncodingType, BYTE *pbCtlContent, DWORD cbCtlContent, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE *pbEncoded, DWORD *pcbEncoded);
          WINBOOL __attribute__((__stdcall__)) CryptMsgEncodeAndSignCTL (DWORD dwMsgEncodingType, PCTL_INFO pCtlInfo, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE *pbEncoded, DWORD *pcbEncoded);
          WINBOOL __attribute__((__stdcall__)) CertFindSubjectInSortedCTL (PCRYPT_DATA_BLOB pSubjectIdentifier, PCCTL_CONTEXT pCtlContext, DWORD dwFlags, void *pvReserved, PCRYPT_DER_BLOB pEncodedAttributes);
          WINBOOL __attribute__((__stdcall__)) CertEnumSubjectInSortedCTL (PCCTL_CONTEXT pCtlContext, void **ppvNextSubject, PCRYPT_DER_BLOB pSubjectIdentifier, PCRYPT_DER_BLOB pEncodedAttributes);

  typedef struct _CTL_VERIFY_USAGE_PARA {
    DWORD cbSize;
    CRYPT_DATA_BLOB ListIdentifier;
    DWORD cCtlStore;
    HCERTSTORE *rghCtlStore;
    DWORD cSignerStore;
    HCERTSTORE *rghSignerStore;
  } CTL_VERIFY_USAGE_PARA,*PCTL_VERIFY_USAGE_PARA;

  typedef struct _CTL_VERIFY_USAGE_STATUS {
    DWORD cbSize;
    DWORD dwError;
    DWORD dwFlags;
    PCCTL_CONTEXT *ppCtl;
    DWORD dwCtlEntryIndex;
    PCCERT_CONTEXT *ppSigner;
    DWORD dwSignerIndex;
  } CTL_VERIFY_USAGE_STATUS,*PCTL_VERIFY_USAGE_STATUS;
          WINBOOL __attribute__((__stdcall__)) CertVerifyCTLUsage (DWORD dwEncodingType, DWORD dwSubjectType, void *pvSubject, PCTL_USAGE pSubjectUsage, DWORD dwFlags, PCTL_VERIFY_USAGE_PARA pVerifyUsagePara, PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus);

  typedef struct _CERT_REVOCATION_CRL_INFO {
    DWORD cbSize;
    PCCRL_CONTEXT pBaseCrlContext;
    PCCRL_CONTEXT pDeltaCrlContext;
    PCRL_ENTRY pCrlEntry;
    WINBOOL fDeltaCrlEntry;
  } CERT_REVOCATION_CRL_INFO,*PCERT_REVOCATION_CRL_INFO;

  typedef struct _CERT_REVOCATION_CHAIN_PARA CERT_REVOCATION_CHAIN_PARA,*PCERT_REVOCATION_CHAIN_PARA;

  typedef struct _CERT_REVOCATION_PARA {
    DWORD cbSize;
    PCCERT_CONTEXT pIssuerCert;
    DWORD cCertStore;
    HCERTSTORE *rgCertStore;
    HCERTSTORE hCrlStore;
    LPFILETIME pftTimeToUse;
  } CERT_REVOCATION_PARA,*PCERT_REVOCATION_PARA;

  typedef struct _CERT_REVOCATION_STATUS {
    DWORD cbSize;
    DWORD dwIndex;
    DWORD dwError;
    DWORD dwReason;
    WINBOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
  } CERT_REVOCATION_STATUS,*PCERT_REVOCATION_STATUS;
  typedef struct _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO {
    CRYPT_DATA_BLOB CertSignHashCNGAlgPropData;
    CRYPT_DATA_BLOB CertIssuerPubKeyBitLengthPropData;
  } CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO, *PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;

  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC) (DWORD dwCertEncodingType, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void **ppvDecodedSignPara, LPWSTR *ppwszCNGHashAlgid);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC) (NCRYPT_KEY_HANDLE hKey, DWORD dwCertEncodingType, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void *pvDecodedSignPara, LPCWSTR pwszCNGPubKeyAlgid, LPCWSTR pwszCNGHashAlgid, BYTE *pbComputedHash, DWORD cbComputedHash, BYTE *pbSignature, DWORD *pcbSignature);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC) (DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPubKeyInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void *pvDecodedSignPara, LPCWSTR pwszCNGPubKeyAlgid, LPCWSTR pwszCNGHashAlgid, BYTE *pbComputedHash, DWORD cbComputedHash, BYTE *pbSignature, DWORD cbSignature);

  typedef void *HCRYPTDEFAULTCONTEXT;

  typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
    DWORD cOID;
    LPSTR *rgpszOID;
  } CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA,*PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;

          WINBOOL __attribute__((__stdcall__)) CertVerifyRevocation (DWORD dwEncodingType, DWORD dwRevType, DWORD cContext, PVOID rgpvContext[], DWORD dwFlags, PCERT_REVOCATION_PARA pRevPara, PCERT_REVOCATION_STATUS pRevStatus);
  WINBOOL __attribute__((__stdcall__)) CertCompareIntegerBlob (PCRYPT_INTEGER_BLOB pInt1, PCRYPT_INTEGER_BLOB pInt2);
          WINBOOL __attribute__((__stdcall__)) CertCompareCertificate (DWORD dwCertEncodingType, PCERT_INFO pCertId1, PCERT_INFO pCertId2);
          WINBOOL __attribute__((__stdcall__)) CertCompareCertificateName (DWORD dwCertEncodingType, PCERT_NAME_BLOB pCertName1, PCERT_NAME_BLOB pCertName2);
          WINBOOL __attribute__((__stdcall__)) CertIsRDNAttrsInCertificateName (DWORD dwCertEncodingType, DWORD dwFlags, PCERT_NAME_BLOB pCertName, PCERT_RDN pRDN);
          WINBOOL __attribute__((__stdcall__)) CertComparePublicKeyInfo (DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey1, PCERT_PUBLIC_KEY_INFO pPublicKey2);
          DWORD __attribute__((__stdcall__)) CertGetPublicKeyLength (DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey);
          WINBOOL __attribute__((__stdcall__)) CryptVerifyCertificateSignature (HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, const BYTE *pbEncoded, DWORD cbEncoded, PCERT_PUBLIC_KEY_INFO pPublicKey);
          WINBOOL __attribute__((__stdcall__)) CryptVerifyCertificateSignatureEx (HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, DWORD dwSubjectType, void *pvSubject, DWORD dwIssuerType, void *pvIssuer, DWORD dwFlags, void *pvExtra);
          WINBOOL __attribute__((__stdcall__)) CertIsStrongHashToSign (PCCERT_STRONG_SIGN_PARA pStrongSignPara, LPCWSTR pwszCNGHashAlgid, PCCERT_CONTEXT pSigningCert);
          WINBOOL __attribute__((__stdcall__)) CryptHashToBeSigned (HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, const BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash, DWORD *pcbComputedHash);
          WINBOOL __attribute__((__stdcall__)) CryptHashCertificate (HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, const BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash, DWORD *pcbComputedHash);



          WINBOOL __attribute__((__stdcall__)) CryptSignCertificate (HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, const BYTE *pbEncodedToBeSigned, DWORD cbEncodedToBeSigned, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, const void *pvHashAuxInfo, BYTE *pbSignature, DWORD *pcbSignature);
          WINBOOL __attribute__((__stdcall__)) CryptSignAndEncodeCertificate (HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, LPCSTR lpszStructType, const void *pvStructInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, const void *pvHashAuxInfo, BYTE *pbEncoded, DWORD *pcbEncoded);
          LONG __attribute__((__stdcall__)) CertVerifyTimeValidity (LPFILETIME pTimeToVerify, PCERT_INFO pCertInfo);
          LONG __attribute__((__stdcall__)) CertVerifyCRLTimeValidity (LPFILETIME pTimeToVerify, PCRL_INFO pCrlInfo);
          WINBOOL __attribute__((__stdcall__)) CertVerifyValidityNesting (PCERT_INFO pSubjectInfo, PCERT_INFO pIssuerInfo);
          WINBOOL __attribute__((__stdcall__)) CertVerifyCRLRevocation (DWORD dwCertEncodingType, PCERT_INFO pCertId, DWORD cCrlInfo, PCRL_INFO rgpCrlInfo[]);
          LPCSTR __attribute__((__stdcall__)) CertAlgIdToOID (DWORD dwAlgId);
          DWORD __attribute__((__stdcall__)) CertOIDToAlgId (LPCSTR pszObjId);
          PCERT_EXTENSION __attribute__((__stdcall__)) CertFindExtension (LPCSTR pszObjId, DWORD cExtensions, CERT_EXTENSION rgExtensions[]);
          PCRYPT_ATTRIBUTE __attribute__((__stdcall__)) CertFindAttribute (LPCSTR pszObjId, DWORD cAttr, CRYPT_ATTRIBUTE rgAttr[]);
          PCERT_RDN_ATTR __attribute__((__stdcall__)) CertFindRDNAttr (LPCSTR pszObjId, PCERT_NAME_INFO pName);
          WINBOOL __attribute__((__stdcall__)) CertGetIntendedKeyUsage (DWORD dwCertEncodingType, PCERT_INFO pCertInfo, BYTE *pbKeyUsage, DWORD cbKeyUsage);
          WINBOOL __attribute__((__stdcall__)) CryptInstallDefaultContext (HCRYPTPROV hCryptProv, DWORD dwDefaultType, const void *pvDefaultPara, DWORD dwFlags, void *pvReserved, HCRYPTDEFAULTCONTEXT *phDefaultContext);
          WINBOOL __attribute__((__stdcall__)) CryptUninstallDefaultContext (HCRYPTDEFAULTCONTEXT hDefaultContext, DWORD dwFlags, void *pvReserved);
          WINBOOL __attribute__((__stdcall__)) CryptExportPublicKeyInfo (HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo);
          WINBOOL __attribute__((__stdcall__)) CryptExportPublicKeyInfoEx (HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo);




  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC) (NCRYPT_KEY_HANDLE hNCryptKey, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_IMPORT_PRIV_KEY_FUNC) (HCRYPTPROV hCryptProv, CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, DWORD dwFlags, void *pvAuxInfo);
  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_EXPORT_PRIV_KEY_FUNC) (HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void *pvAuxInfo, CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, DWORD *pcbPrivateKeyInfo);




          WINBOOL __attribute__((__stdcall__)) CryptImportPublicKeyInfo (HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, HCRYPTKEY *phKey);
          WINBOOL __attribute__((__stdcall__)) CryptImportPublicKeyInfoEx (HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, ALG_ID aiKeyAlg, DWORD dwFlags, void *pvAuxInfo, HCRYPTKEY *phKey);
          WINBOOL __attribute__((__stdcall__)) CryptAcquireCertificatePrivateKey (PCCERT_CONTEXT pCert, DWORD dwFlags, void *pvParameters, HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey, DWORD *pdwKeySpec, WINBOOL *pfCallerFreeProvOrNCryptKey);
          WINBOOL __attribute__((__stdcall__)) CryptFindCertificateKeyProvInfo (PCCERT_CONTEXT pCert, DWORD dwFlags, void *pvReserved);
          WINBOOL __attribute__((__stdcall__)) CryptImportPKCS8 (CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, DWORD dwFlags, HCRYPTPROV *phCryptProv, void *pvAuxInfo);
          WINBOOL __attribute__((__stdcall__)) CryptExportPKCS8 (HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void *pvAuxInfo, BYTE *pbPrivateKeyBlob, DWORD *pcbPrivateKeyBlob);
          WINBOOL __attribute__((__stdcall__)) CryptExportPKCS8Ex (CRYPT_PKCS8_EXPORT_PARAMS *psExportParams, DWORD dwFlags, void *pvAuxInfo, BYTE *pbPrivateKeyBlob, DWORD *pcbPrivateKeyBlob);
          WINBOOL __attribute__((__stdcall__)) CryptHashPublicKeyInfo (HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, BYTE *pbComputedHash, DWORD *pcbComputedHash);
          DWORD __attribute__((__stdcall__)) CertRDNValueToStrA (DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPSTR psz, DWORD csz);
          DWORD __attribute__((__stdcall__)) CertRDNValueToStrW (DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPWSTR psz, DWORD csz);
          DWORD __attribute__((__stdcall__)) CertNameToStrA (DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPSTR psz, DWORD csz);
          DWORD __attribute__((__stdcall__)) CertNameToStrW (DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPWSTR psz, DWORD csz);
          WINBOOL __attribute__((__stdcall__)) CertStrToNameA (DWORD dwCertEncodingType, LPCSTR pszX500, DWORD dwStrType, void *pvReserved, BYTE *pbEncoded, DWORD *pcbEncoded, LPCSTR *ppszError);
          WINBOOL __attribute__((__stdcall__)) CertStrToNameW (DWORD dwCertEncodingType, LPCWSTR pszX500, DWORD dwStrType, void *pvReserved, BYTE *pbEncoded, DWORD *pcbEncoded, LPCWSTR *ppszError);
          DWORD __attribute__((__stdcall__)) CertGetNameStringA (PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPSTR pszNameString, DWORD cchNameString);
          DWORD __attribute__((__stdcall__)) CertGetNameStringW (PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPWSTR pszNameString, DWORD cchNameString);
  typedef PCCERT_CONTEXT (__attribute__((__stdcall__)) *PFN_CRYPT_GET_SIGNER_CERTIFICATE) (void *pvGetArg, DWORD dwCertEncodingType, PCERT_INFO pSignerId, HCERTSTORE hMsgCertStore);

  typedef struct _CRYPT_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    PCCERT_CONTEXT pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cMsgCert;
    PCCERT_CONTEXT *rgpMsgCert;
    DWORD cMsgCrl;
    PCCRL_CONTEXT *rgpMsgCrl;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
    DWORD dwFlags;
    DWORD dwInnerContentType;




  } CRYPT_SIGN_MESSAGE_PARA,*PCRYPT_SIGN_MESSAGE_PARA;






  typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
    void *pvGetArg;



  } CRYPT_VERIFY_MESSAGE_PARA,*PCRYPT_VERIFY_MESSAGE_PARA;

  typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD dwFlags;
    DWORD dwInnerContentType;
  } CRYPT_ENCRYPT_MESSAGE_PARA,*PCRYPT_ENCRYPT_MESSAGE_PARA;



  typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD cCertStore;
    HCERTSTORE *rghCertStore;



  } CRYPT_DECRYPT_MESSAGE_PARA,*PCRYPT_DECRYPT_MESSAGE_PARA;

  typedef struct _CRYPT_HASH_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
  } CRYPT_HASH_MESSAGE_PARA,*PCRYPT_HASH_MESSAGE_PARA;

  typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    __extension__ union {
      HCRYPTPROV hCryptProv;
      NCRYPT_KEY_HANDLE hNCryptKey;
    };
    DWORD dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
  } CRYPT_KEY_SIGN_MESSAGE_PARA,*PCRYPT_KEY_SIGN_MESSAGE_PARA;

  typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
  } CRYPT_KEY_VERIFY_MESSAGE_PARA,*PCRYPT_KEY_VERIFY_MESSAGE_PARA;

  typedef struct _CERT_CHAIN {
    DWORD cCerts;
    PCERT_BLOB certs;
    CRYPT_KEY_PROV_INFO keyLocatorInfo;
  } CERT_CHAIN,*PCERT_CHAIN;




          WINBOOL __attribute__((__stdcall__)) CryptSignMessage (PCRYPT_SIGN_MESSAGE_PARA pSignPara, WINBOOL fDetachedSignature, DWORD cToBeSigned, const BYTE *rgpbToBeSigned[], DWORD rgcbToBeSigned[], BYTE *pbSignedBlob, DWORD *pcbSignedBlob);
          WINBOOL __attribute__((__stdcall__)) CryptVerifyMessageSignature (PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbSignedBlob, DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded, PCCERT_CONTEXT *ppSignerCert);
          LONG __attribute__((__stdcall__)) CryptGetMessageSignerCount (DWORD dwMsgEncodingType, const BYTE *pbSignedBlob, DWORD cbSignedBlob);
          HCERTSTORE __attribute__((__stdcall__)) CryptGetMessageCertificates (DWORD dwMsgAndCertEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const BYTE *pbSignedBlob, DWORD cbSignedBlob);
          WINBOOL __attribute__((__stdcall__)) CryptVerifyDetachedMessageSignature (PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbDetachedSignBlob, DWORD cbDetachedSignBlob, DWORD cToBeSigned, const BYTE *rgpbToBeSigned[], DWORD rgcbToBeSigned[], PCCERT_CONTEXT *ppSignerCert);
          WINBOOL __attribute__((__stdcall__)) CryptEncryptMessage (PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT rgpRecipientCert[], const BYTE *pbToBeEncrypted, DWORD cbToBeEncrypted, BYTE *pbEncryptedBlob, DWORD *pcbEncryptedBlob);
          WINBOOL __attribute__((__stdcall__)) CryptDecryptMessage (PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, const BYTE *pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE *pbDecrypted, DWORD *pcbDecrypted, PCCERT_CONTEXT *ppXchgCert);
          WINBOOL __attribute__((__stdcall__)) CryptSignAndEncryptMessage (PCRYPT_SIGN_MESSAGE_PARA pSignPara, PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT rgpRecipientCert[], const BYTE *pbToBeSignedAndEncrypted, DWORD cbToBeSignedAndEncrypted, BYTE *pbSignedAndEncryptedBlob, DWORD *pcbSignedAndEncryptedBlob);
          WINBOOL __attribute__((__stdcall__)) CryptDecryptAndVerifyMessageSignature (PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE *pbDecrypted, DWORD *pcbDecrypted, PCCERT_CONTEXT *ppXchgCert, PCCERT_CONTEXT *ppSignerCert);
          WINBOOL __attribute__((__stdcall__)) CryptDecodeMessage (DWORD dwMsgTypeFlags, PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbEncodedBlob, DWORD cbEncodedBlob, DWORD dwPrevInnerContentType, DWORD *pdwMsgType, DWORD *pdwInnerContentType, BYTE *pbDecoded, DWORD *pcbDecoded, PCCERT_CONTEXT *ppXchgCert, PCCERT_CONTEXT *ppSignerCert);
          WINBOOL __attribute__((__stdcall__)) CryptHashMessage (PCRYPT_HASH_MESSAGE_PARA pHashPara, WINBOOL fDetachedHash, DWORD cToBeHashed, const BYTE *rgpbToBeHashed[], DWORD rgcbToBeHashed[], BYTE *pbHashedBlob, DWORD *pcbHashedBlob, BYTE *pbComputedHash, DWORD *pcbComputedHash);
          WINBOOL __attribute__((__stdcall__)) CryptVerifyMessageHash (PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE *pbHashedBlob, DWORD cbHashedBlob, BYTE *pbToBeHashed, DWORD *pcbToBeHashed, BYTE *pbComputedHash, DWORD *pcbComputedHash);
          WINBOOL __attribute__((__stdcall__)) CryptVerifyDetachedMessageHash (PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE *pbDetachedHashBlob, DWORD cbDetachedHashBlob, DWORD cToBeHashed, const BYTE *rgpbToBeHashed[], DWORD rgcbToBeHashed[], BYTE *pbComputedHash, DWORD *pcbComputedHash);
          WINBOOL __attribute__((__stdcall__)) CryptSignMessageWithKey (PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara, const BYTE *pbToBeSigned, DWORD cbToBeSigned, BYTE *pbSignedBlob, DWORD *pcbSignedBlob);
          WINBOOL __attribute__((__stdcall__)) CryptVerifyMessageSignatureWithKey (PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, const BYTE *pbSignedBlob, DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded);
          HCERTSTORE __attribute__((__stdcall__)) CertOpenSystemStoreA (HCRYPTPROV_LEGACY hProv, LPCSTR szSubsystemProtocol);
          HCERTSTORE __attribute__((__stdcall__)) CertOpenSystemStoreW (HCRYPTPROV_LEGACY hProv, LPCWSTR szSubsystemProtocol);
          WINBOOL __attribute__((__stdcall__)) CertAddEncodedCertificateToSystemStoreA (LPCSTR szCertStoreName, const BYTE *pbCertEncoded, DWORD cbCertEncoded);
          WINBOOL __attribute__((__stdcall__)) CertAddEncodedCertificateToSystemStoreW (LPCWSTR szCertStoreName, const BYTE *pbCertEncoded, DWORD cbCertEncoded);
  HRESULT __attribute__((__stdcall__)) FindCertsByIssuer (PCERT_CHAIN pCertChains, DWORD *pcbCertChains, DWORD *pcCertChains, BYTE *pbEncodedIssuerName, DWORD cbEncodedIssuerName, LPCWSTR pwszPurpose, DWORD dwKeySpec);
          WINBOOL __attribute__((__stdcall__)) CryptQueryObject (DWORD dwObjectType, const void *pvObject, DWORD dwExpectedContentTypeFlags, DWORD dwExpectedFormatTypeFlags, DWORD dwFlags, DWORD *pdwMsgAndCertEncodingType, DWORD *pdwContentType, DWORD *pdwFormatType, HCERTSTORE *phCertStore, HCRYPTMSG *phMsg, const void **ppvContext);
  typedef HANDLE HCRYPTASYNC,*PHCRYPTASYNC;
  typedef void (__attribute__((__stdcall__)) *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) (LPSTR pszParamOid, LPVOID pvParam);

          LPVOID __attribute__((__stdcall__)) CryptMemAlloc (ULONG cbSize);
          LPVOID __attribute__((__stdcall__)) CryptMemRealloc (LPVOID pv, ULONG cbSize);
          void __attribute__((__stdcall__)) CryptMemFree (LPVOID pv);
          WINBOOL __attribute__((__stdcall__)) CryptCreateAsyncHandle (DWORD dwFlags, PHCRYPTASYNC phAsync);
          WINBOOL __attribute__((__stdcall__)) CryptSetAsyncParam (HCRYPTASYNC hAsync, LPSTR pszParamOid, LPVOID pvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree);
          WINBOOL __attribute__((__stdcall__)) CryptGetAsyncParam (HCRYPTASYNC hAsync, LPSTR pszParamOid, LPVOID *ppvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC *ppfnFree);
          WINBOOL __attribute__((__stdcall__)) CryptCloseAsyncHandle (HCRYPTASYNC hAsync);

  typedef struct _CRYPT_BLOB_ARRAY {
    DWORD cBlob;
    PCRYPT_DATA_BLOB rgBlob;
  } CRYPT_BLOB_ARRAY,*PCRYPT_BLOB_ARRAY;

  typedef struct _CRYPT_CREDENTIALS {
    DWORD cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
  } CRYPT_CREDENTIALS,*PCRYPT_CREDENTIALS;






  typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
    DWORD cbSize;
    LPSTR pszUsername;
    LPSTR pszPassword;
  } CRYPT_PASSWORD_CREDENTIALSA,*PCRYPT_PASSWORD_CREDENTIALSA;

  typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
    DWORD cbSize;
    LPWSTR pszUsername;
    LPWSTR pszPassword;
  } CRYPT_PASSWORD_CREDENTIALSW,*PCRYPT_PASSWORD_CREDENTIALSW;

  typedef CRYPT_PASSWORD_CREDENTIALSW CRYPT_PASSWORD_CREDENTIALS;
  typedef PCRYPT_PASSWORD_CREDENTIALSW PCRYPT_PASSWORD_CREDENTIALS;





  typedef void (__attribute__((__stdcall__)) *PFN_FREE_ENCODED_OBJECT_FUNC) (LPCSTR pszObjectOid, PCRYPT_BLOB_ARRAY pObject, LPVOID pvFreeContext);
  typedef struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {
    DWORD cbSize;
    DWORD dwObjectType;
    DWORD dwError;
    DWORD dwReserved;
    FILETIME ThisUpdateTime;
    FILETIME NextUpdateTime;
    FILETIME PublishTime;
  } CRYPTNET_URL_CACHE_PRE_FETCH_INFO,*PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;
  typedef struct _CRYPTNET_URL_CACHE_FLUSH_INFO {
    DWORD cbSize;
    DWORD dwExemptSeconds;
    FILETIME ExpireTime;
  } CRYPTNET_URL_CACHE_FLUSH_INFO,*PCRYPTNET_URL_CACHE_FLUSH_INFO;




  typedef struct _CRYPTNET_URL_CACHE_RESPONSE_INFO {
    DWORD cbSize;
    WORD wResponseType;
    WORD wResponseFlags;
    FILETIME LastModifiedTime;
    DWORD dwMaxAge;
    LPCWSTR pwszETag;
    DWORD dwProxyId;
  } CRYPTNET_URL_CACHE_RESPONSE_INFO,*PCRYPTNET_URL_CACHE_RESPONSE_INFO;






  typedef struct _CRYPT_RETRIEVE_AUX_INFO {
    DWORD cbSize;
    FILETIME *pLastSyncTime;
    DWORD dwMaxUrlRetrievalByteCount;
    PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo;
    PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo;
    PCRYPTNET_URL_CACHE_RESPONSE_INFO *ppResponseInfo;
    LPWSTR pwszCacheFileNamePrefix;
    LPFILETIME pftCacheResync;
    WINBOOL fProxyCacheRetrieval;
    DWORD dwHttpStatusCode;
  } CRYPT_RETRIEVE_AUX_INFO,*PCRYPT_RETRIEVE_AUX_INFO;

          WINBOOL __attribute__((__stdcall__)) CryptRetrieveObjectByUrlA (LPCSTR pszUrl, LPCSTR pszObjectOid, DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID *ppvObject, HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify, PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);
          WINBOOL __attribute__((__stdcall__)) CryptRetrieveObjectByUrlW (LPCWSTR pszUrl, LPCSTR pszObjectOid, DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID *ppvObject, HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify, PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);



  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CRYPT_CANCEL_RETRIEVAL) (DWORD dwFlags, void *pvArg);

          WINBOOL __attribute__((__stdcall__)) CryptInstallCancelRetrieval (PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel, const void *pvArg, DWORD dwFlags, void *pvReserved);
          WINBOOL __attribute__((__stdcall__)) CryptUninstallCancelRetrieval (DWORD dwFlags, void *pvReserved);
          WINBOOL __attribute__((__stdcall__)) CryptCancelAsyncRetrieval (HCRYPTASYNC hAsyncRetrieval);



  typedef void (__attribute__((__stdcall__)) *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC) (LPVOID pvCompletion, DWORD dwCompletionCode, LPCSTR pszUrl, LPSTR pszObjectOid, LPVOID pvObject);

  typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
    PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
    LPVOID pvCompletion;
  } CRYPT_ASYNC_RETRIEVAL_COMPLETION,*PCRYPT_ASYNC_RETRIEVAL_COMPLETION;



  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC) (HCRYPTASYNC hAsyncRetrieve);






  typedef struct _CRYPT_URL_ARRAY {
    DWORD cUrl;
    LPWSTR *rgwszUrl;
  } CRYPT_URL_ARRAY,*PCRYPT_URL_ARRAY;

  typedef struct _CRYPT_URL_INFO {
    DWORD cbSize;
    DWORD dwSyncDeltaTime;
    DWORD cGroup;
    DWORD *rgcGroupEntry;
  } CRYPT_URL_INFO,*PCRYPT_URL_INFO;

          WINBOOL __attribute__((__stdcall__)) CryptGetObjectUrl (LPCSTR pszUrlOid, LPVOID pvPara, DWORD dwFlags, PCRYPT_URL_ARRAY pUrlArray, DWORD *pcbUrlArray, PCRYPT_URL_INFO pUrlInfo, DWORD *pcbUrlInfo, LPVOID pvReserved);
  typedef struct _CERT_CRL_CONTEXT_PAIR {
    PCCERT_CONTEXT pCertContext;
    PCCRL_CONTEXT pCrlContext;
  } CERT_CRL_CONTEXT_PAIR,*PCERT_CRL_CONTEXT_PAIR;

  typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;

  typedef struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {
    DWORD cbSize;
    int iDeltaCrlIndicator;
    LPFILETIME pftCacheResync;
    LPFILETIME pLastSyncTime;
    LPFILETIME pMaxAgeTime;
    PCERT_REVOCATION_CHAIN_PARA pChainPara;
    PCRYPT_INTEGER_BLOB pDeltaCrlIndicator;
  } CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO, *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;

  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CRYPT_ENUM_KEYID_PROP) (const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwFlags, void *pvReserved, void *pvArg, DWORD cProp, DWORD *rgdwPropId, void **rgpvData, DWORD *rgcbData);
          WINBOOL __attribute__((__stdcall__)) CryptGetTimeValidObject (LPCSTR pszTimeValidOid, LPVOID pvPara, PCCERT_CONTEXT pIssuer, LPFILETIME pftValidFor, DWORD dwFlags, DWORD dwTimeout, LPVOID *ppvObject, PCRYPT_CREDENTIALS pCredentials, PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo);
          WINBOOL __attribute__((__stdcall__)) CryptFlushTimeValidObject (LPCSTR pszFlushTimeValidOid, LPVOID pvPara, PCCERT_CONTEXT pIssuer, DWORD dwFlags, LPVOID pvReserved);
          PCCERT_CONTEXT __attribute__((__stdcall__)) CertCreateSelfSignCertificate (HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, PCERT_NAME_BLOB pSubjectIssuerBlob, DWORD dwFlags, PCRYPT_KEY_PROV_INFO pKeyProvInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, PSYSTEMTIME pStartTime, PSYSTEMTIME pEndTime, PCERT_EXTENSIONS pExtensions);
          WINBOOL __attribute__((__stdcall__)) CryptGetKeyIdentifierProperty (const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, void *pvData, DWORD *pcbData);
          WINBOOL __attribute__((__stdcall__)) CryptSetKeyIdentifierProperty (const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, const void *pvData);
          WINBOOL __attribute__((__stdcall__)) CryptEnumKeyIdentifierProperties (const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, void *pvArg, PFN_CRYPT_ENUM_KEYID_PROP pfnEnum);
          WINBOOL __attribute__((__stdcall__)) CryptCreateKeyIdentifierFromCSP (DWORD dwCertEncodingType, LPCSTR pszPubKeyOID, const PUBLICKEYSTRUC *pPubKeyStruc, DWORD cbPubKeyStruc, DWORD dwFlags, void *pvReserved, BYTE *pbHash, DWORD *pcbHash);
  typedef HANDLE HCERTCHAINENGINE;

  typedef struct _CERT_CHAIN_ENGINE_CONFIG {
    DWORD cbSize;
    HCERTSTORE hRestrictedRoot;
    HCERTSTORE hRestrictedTrust;
    HCERTSTORE hRestrictedOther;
    DWORD cAdditionalStore;
    HCERTSTORE *rghAdditionalStore;
    DWORD dwFlags;
    DWORD dwUrlRetrievalTimeout;
    DWORD MaximumCachedCertificates;
    DWORD CycleDetectionModulus;







  } CERT_CHAIN_ENGINE_CONFIG,*PCERT_CHAIN_ENGINE_CONFIG;





          WINBOOL __attribute__((__stdcall__)) CertCreateCertificateChainEngine (PCERT_CHAIN_ENGINE_CONFIG pConfig, HCERTCHAINENGINE *phChainEngine);
          void __attribute__((__stdcall__)) CertFreeCertificateChainEngine (HCERTCHAINENGINE hChainEngine);
          WINBOOL __attribute__((__stdcall__)) CertResyncCertificateChainEngine (HCERTCHAINENGINE hChainEngine);

  typedef struct _CERT_TRUST_STATUS {
    DWORD dwErrorStatus;
    DWORD dwInfoStatus;
  } CERT_TRUST_STATUS,*PCERT_TRUST_STATUS;
  typedef struct _CERT_REVOCATION_INFO {
    DWORD cbSize;
    DWORD dwRevocationResult;
    LPCSTR pszRevocationOid;
    LPVOID pvOidSpecificInfo;
    WINBOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
    PCERT_REVOCATION_CRL_INFO pCrlInfo;
  } CERT_REVOCATION_INFO,*PCERT_REVOCATION_INFO;

  typedef struct _CERT_TRUST_LIST_INFO {
    DWORD cbSize;
    PCTL_ENTRY pCtlEntry;
    PCCTL_CONTEXT pCtlContext;
  } CERT_TRUST_LIST_INFO,*PCERT_TRUST_LIST_INFO;

  typedef struct _CERT_CHAIN_ELEMENT {
    DWORD cbSize;
    PCCERT_CONTEXT pCertContext;
    CERT_TRUST_STATUS TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;
    PCERT_ENHKEY_USAGE pIssuanceUsage;
    PCERT_ENHKEY_USAGE pApplicationUsage;
    LPCWSTR pwszExtendedErrorInfo;
  } CERT_CHAIN_ELEMENT,*PCERT_CHAIN_ELEMENT;

  typedef const CERT_CHAIN_ELEMENT *PCCERT_CHAIN_ELEMENT;

  typedef struct _CERT_SIMPLE_CHAIN {
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cElement;
    PCERT_CHAIN_ELEMENT *rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;
    WINBOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;
  } CERT_SIMPLE_CHAIN,*PCERT_SIMPLE_CHAIN;

  typedef const CERT_SIMPLE_CHAIN *PCCERT_SIMPLE_CHAIN;

  typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT,*PCERT_CHAIN_CONTEXT;
  typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

  struct _CERT_CHAIN_CONTEXT {
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cChain;
    PCERT_SIMPLE_CHAIN *rgpChain;
    DWORD cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT *rgpLowerQualityChainContext;
    WINBOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;
    DWORD dwCreateFlags;
    GUID ChainId;
  };




  typedef struct _CERT_USAGE_MATCH {
    DWORD dwType;
    CERT_ENHKEY_USAGE Usage;
  } CERT_USAGE_MATCH,*PCERT_USAGE_MATCH;

  typedef struct _CTL_USAGE_MATCH {
    DWORD dwType;
    CTL_USAGE Usage;
  } CTL_USAGE_MATCH,*PCTL_USAGE_MATCH;

  typedef struct _CERT_CHAIN_PARA {
    DWORD cbSize;
    CERT_USAGE_MATCH RequestedUsage;
  } CERT_CHAIN_PARA,*PCERT_CHAIN_PARA;
          WINBOOL __attribute__((__stdcall__)) CertGetCertificateChain (HCERTCHAINENGINE hChainEngine, PCCERT_CONTEXT pCertContext, LPFILETIME pTime, HCERTSTORE hAdditionalStore, PCERT_CHAIN_PARA pChainPara, DWORD dwFlags, LPVOID pvReserved, PCCERT_CHAIN_CONTEXT *ppChainContext);
          void __attribute__((__stdcall__)) CertFreeCertificateChain (PCCERT_CHAIN_CONTEXT pChainContext);
          PCCERT_CHAIN_CONTEXT __attribute__((__stdcall__)) CertDuplicateCertificateChain (PCCERT_CHAIN_CONTEXT pChainContext);

  struct _CERT_REVOCATION_CHAIN_PARA {
    DWORD cbSize;
    HCERTCHAINENGINE hChainEngine;
    HCERTSTORE hAdditionalStore;
    DWORD dwChainFlags;
    DWORD dwUrlRetrievalTimeout;
    LPFILETIME pftCurrentTime;
    LPFILETIME pftCacheResync;
    DWORD cbMaxUrlRetrievalByteCount;
  };



  typedef struct _CRL_REVOCATION_INFO {
    PCRL_ENTRY pCrlEntry;
    PCCRL_CONTEXT pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;
  } CRL_REVOCATION_INFO,*PCRL_REVOCATION_INFO;

          PCCERT_CHAIN_CONTEXT __attribute__((__stdcall__)) CertFindChainInStore (HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCERT_CHAIN_CONTEXT pPrevChainContext);



  typedef WINBOOL (__attribute__((__stdcall__)) *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK) (PCCERT_CONTEXT pCert, void *pvFindArg);

  typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
    DWORD cbSize;
    LPCSTR pszUsageIdentifier;
    DWORD dwKeySpec;
    DWORD dwAcquirePrivateKeyFlags;
    DWORD cIssuer;
    CERT_NAME_BLOB *rgIssuer;
    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void *pvFindArg;




  } CERT_CHAIN_FIND_ISSUER_PARA,*PCERT_CHAIN_FIND_ISSUER_PARA,CERT_CHAIN_FIND_BY_ISSUER_PARA,*PCERT_CHAIN_FIND_BY_ISSUER_PARA;
  typedef struct _CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwFlags;
    void *pvExtraPolicyPara;
  } CERT_CHAIN_POLICY_PARA,*PCERT_CHAIN_POLICY_PARA;

  typedef struct _CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwError;
    LONG lChainIndex;
    LONG lElementIndex;
    void *pvExtraPolicyStatus;
  } CERT_CHAIN_POLICY_STATUS,*PCERT_CHAIN_POLICY_STATUS;
          WINBOOL __attribute__((__stdcall__)) CertVerifyCertificateChainPolicy (LPCSTR pszPolicyOID, PCCERT_CHAIN_CONTEXT pChainContext, PCERT_CHAIN_POLICY_PARA pPolicyPara, PCERT_CHAIN_POLICY_STATUS pPolicyStatus);
  typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    PCMSG_SIGNER_INFO pSignerInfo;
  } AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA, *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

  typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    WINBOOL fCommercial;
  } AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS, *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;

  typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    WINBOOL fCommercial;
  } AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,*PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;




  typedef struct _HTTPSPolicyCallbackData {
    __extension__ union {
      DWORD cbStruct;
      DWORD cbSize;
    };
    DWORD dwAuthType;
    DWORD fdwChecks;
    WCHAR *pwszServerName;
  } HTTPSPolicyCallbackData,*PHTTPSPolicyCallbackData,SSL_EXTRA_CERT_CHAIN_POLICY_PARA,*PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;






  typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRootProgramQualifierFlags;
  } EV_EXTRA_CERT_CHAIN_POLICY_PARA,*PEV_EXTRA_CERT_CHAIN_POLICY_PARA;

  typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwQualifiers;
    DWORD dwIssuanceUsageIndex;
  } EV_EXTRA_CERT_CHAIN_POLICY_STATUS,*PEV_EXTRA_CERT_CHAIN_POLICY_STATUS;




          WINBOOL __attribute__((__stdcall__)) CryptStringToBinaryA (LPCSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptStringToBinaryW (LPCWSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags);
          WINBOOL __attribute__((__stdcall__)) CryptBinaryToStringA (const BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPSTR pszString, DWORD *pcchString);
          WINBOOL __attribute__((__stdcall__)) CryptBinaryToStringW (const BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPWSTR pszString, DWORD *pcchString);
  typedef struct _CRYPT_PKCS12_PBE_PARAMS {
    int iIterations;
    ULONG cbSalt;
  } CRYPT_PKCS12_PBE_PARAMS;

          HCERTSTORE __attribute__((__stdcall__)) PFXImportCertStore (CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) PFXIsPFXBlob (CRYPT_DATA_BLOB *pPFX);
          WINBOOL __attribute__((__stdcall__)) PFXVerifyPassword (CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) PFXExportCertStoreEx (HCERTSTORE hStore, CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, void *pvPara, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) PFXExportCertStore (HCERTSTORE hStore, CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, DWORD dwFlags);
          WINBOOL __attribute__((__stdcall__)) CertRetrieveLogoOrBiometricInfo (PCCERT_CONTEXT pCertContext, LPCSTR lpszLogoOrBiometricType, DWORD dwRetrievalFlags, DWORD dwTimeout, DWORD dwFlags, void *pvReserved, BYTE **ppbData, DWORD *pcbData, LPWSTR *ppwszMimeType);
}
extern "C" {
  typedef struct _CRYPTPROTECT_PROMPTSTRUCT {
    DWORD cbSize;
    DWORD dwPromptFlags;
    HWND hwndApp;
    LPCWSTR szPrompt;
  } CRYPTPROTECT_PROMPTSTRUCT,*PCRYPTPROTECT_PROMPTSTRUCT;

            WINBOOL __attribute__((__stdcall__)) CryptProtectData (DATA_BLOB *pDataIn, LPCWSTR szDataDescr, DATA_BLOB *pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct, DWORD dwFlags, DATA_BLOB *pDataOut);
            WINBOOL __attribute__((__stdcall__)) CryptUnprotectData (DATA_BLOB *pDataIn, LPWSTR *ppszDataDescr, DATA_BLOB *pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct, DWORD dwFlags, DATA_BLOB *pDataOut);
            WINBOOL __attribute__((__stdcall__)) CryptProtectMemory (LPVOID pDataIn, DWORD cbDataIn, DWORD dwFlags);
            WINBOOL __attribute__((__stdcall__)) CryptUnprotectMemory (LPVOID pDataIn, DWORD cbDataIn, DWORD dwFlags);
}
extern "C" {







  typedef struct _CERTIFICATE_BLOB {
    DWORD dwCertEncodingType;
    DWORD cbData;
    PBYTE pbData;
  } EFS_CERTIFICATE_BLOB,*PEFS_CERTIFICATE_BLOB;

  typedef struct _EFS_HASH_BLOB {
    DWORD cbData;
    PBYTE pbData;
  } EFS_HASH_BLOB,*PEFS_HASH_BLOB;

  typedef struct _EFS_RPC_BLOB {
    DWORD cbData;
    PBYTE pbData;
  } EFS_RPC_BLOB,*PEFS_RPC_BLOB;

  typedef struct _EFS_KEY_INFO {
    DWORD dwVersion;
    ULONG Entropy;
    ALG_ID Algorithm;
    ULONG KeyLength;
  } EFS_KEY_INFO,*PEFS_KEY_INFO;

  typedef struct _ENCRYPTION_CERTIFICATE {
    DWORD cbTotalLength;
    SID *pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
  } ENCRYPTION_CERTIFICATE,*PENCRYPTION_CERTIFICATE;



  typedef struct _ENCRYPTION_CERTIFICATE_HASH {
    DWORD cbTotalLength;
    SID *pUserSid;
    PEFS_HASH_BLOB pHash;
    LPWSTR lpDisplayInformation;
  } ENCRYPTION_CERTIFICATE_HASH,*PENCRYPTION_CERTIFICATE_HASH;

  typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {
    DWORD nCert_Hash;
    PENCRYPTION_CERTIFICATE_HASH *pUsers;
  } ENCRYPTION_CERTIFICATE_HASH_LIST,*PENCRYPTION_CERTIFICATE_HASH_LIST;

  typedef struct _ENCRYPTION_CERTIFICATE_LIST {
    DWORD nUsers;
    PENCRYPTION_CERTIFICATE *pUsers;
  } ENCRYPTION_CERTIFICATE_LIST,*PENCRYPTION_CERTIFICATE_LIST;

            DWORD __attribute__((__stdcall__)) QueryUsersOnEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST *pUsers);
            DWORD __attribute__((__stdcall__)) QueryRecoveryAgentsOnEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST *pRecoveryAgents);
            DWORD __attribute__((__stdcall__)) RemoveUsersFromEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
            DWORD __attribute__((__stdcall__)) AddUsersToEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_LIST pUsers);
            DWORD __attribute__((__stdcall__)) SetUserFileEncryptionKey(PENCRYPTION_CERTIFICATE pEncryptionCertificate);
            void __attribute__((__stdcall__)) FreeEncryptionCertificateHashList(PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
            WINBOOL __attribute__((__stdcall__)) EncryptionDisable(LPCWSTR DirPath,WINBOOL Disable);
            DWORD __attribute__((__stdcall__)) DuplicateEncryptionInfoFile(LPCWSTR SrcFileName,LPCWSTR DstFileName,DWORD dwCreationDistribution,DWORD dwAttributes,const LPSECURITY_ATTRIBUTES lpSecurityAttributes);


}
#pragma pack(push,8)
extern "C" {


  typedef struct {
    RPC_NS_HANDLE LookupContext;
    RPC_BINDING_HANDLE ProposedHandle;
    RPC_BINDING_VECTOR *Bindings;
  } RPC_IMPORT_CONTEXT_P,*PRPC_IMPORT_CONTEXT_P;

           RPC_STATUS __attribute__((__stdcall__)) I_RpcNsGetBuffer(PRPC_MESSAGE Message);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcNsSendReceive(PRPC_MESSAGE Message,RPC_BINDING_HANDLE *Handle);
           void __attribute__((__stdcall__)) I_RpcNsRaiseException(PRPC_MESSAGE Message,RPC_STATUS Status);
           RPC_STATUS __attribute__((__stdcall__)) I_RpcReBindBuffer(PRPC_MESSAGE Message);
           RPC_STATUS __attribute__((__stdcall__)) I_NsServerBindSearch();
           RPC_STATUS __attribute__((__stdcall__)) I_NsClientBindSearch();
           void __attribute__((__stdcall__)) I_NsClientBindDone();


}
extern "C" {
  typedef unsigned char byte;
  typedef byte cs_byte;
  typedef unsigned char boolean;
  void *__attribute__((__stdcall__)) MIDL_user_allocate(SIZE_T);
  void __attribute__((__stdcall__)) MIDL_user_free(void *);
  typedef void *NDR_CCONTEXT;

  typedef struct _NDR_SCONTEXT {
    void *pad[2];
    void *userContext;
  } *NDR_SCONTEXT;





  typedef void (__attribute__((__stdcall__)) *NDR_RUNDOWN)(void *context);
  typedef void (__attribute__((__stdcall__)) *NDR_NOTIFY_ROUTINE)(void);
  typedef void (__attribute__((__stdcall__)) *NDR_NOTIFY2_ROUTINE)(boolean flag);

  typedef struct _SCONTEXT_QUEUE {
    unsigned long NumberOfObjects;
    NDR_SCONTEXT *ArrayOfObjects;
  } SCONTEXT_QUEUE,*PSCONTEXT_QUEUE;

           RPC_BINDING_HANDLE __attribute__((__stdcall__)) NDRCContextBinding(NDR_CCONTEXT CContext);
           void __attribute__((__stdcall__)) NDRCContextMarshall(NDR_CCONTEXT CContext,void *pBuff);
           void __attribute__((__stdcall__)) NDRCContextUnmarshall(NDR_CCONTEXT *pCContext,RPC_BINDING_HANDLE hBinding,void *pBuff,unsigned long DataRepresentation);
           void __attribute__((__stdcall__)) NDRSContextMarshall(NDR_SCONTEXT CContext,void *pBuff,NDR_RUNDOWN userRunDownIn);
           NDR_SCONTEXT __attribute__((__stdcall__)) NDRSContextUnmarshall(void *pBuff,unsigned long DataRepresentation);
           void __attribute__((__stdcall__)) NDRSContextMarshallEx(RPC_BINDING_HANDLE BindingHandle,NDR_SCONTEXT CContext,void *pBuff,NDR_RUNDOWN userRunDownIn);
           void __attribute__((__stdcall__)) NDRSContextMarshall2(RPC_BINDING_HANDLE BindingHandle,NDR_SCONTEXT CContext,void *pBuff,NDR_RUNDOWN userRunDownIn,void *CtxGuard,unsigned long Flags);
           NDR_SCONTEXT __attribute__((__stdcall__)) NDRSContextUnmarshallEx(RPC_BINDING_HANDLE BindingHandle,void *pBuff,unsigned long DataRepresentation);
           NDR_SCONTEXT __attribute__((__stdcall__)) NDRSContextUnmarshall2(RPC_BINDING_HANDLE BindingHandle,void *pBuff,unsigned long DataRepresentation,void *CtxGuard,unsigned long Flags);
           void __attribute__((__stdcall__)) RpcSsDestroyClientContext(void **ContextHandle);
typedef unsigned long error_status_t;
  struct _MIDL_STUB_MESSAGE;
  struct _MIDL_STUB_DESC;
  struct _FULL_PTR_XLAT_TABLES;

  typedef unsigned char *RPC_BUFPTR;
  typedef unsigned long RPC_LENGTH;
  typedef void (__attribute__((__stdcall__)) *EXPR_EVAL)(struct _MIDL_STUB_MESSAGE *);
  typedef const unsigned char *PFORMAT_STRING;

  typedef struct {
    long Dimension;
    unsigned long *BufferConformanceMark;
    unsigned long *BufferVarianceMark;
    unsigned long *MaxCountArray;
    unsigned long *OffsetArray;
    unsigned long *ActualCountArray;
  } ARRAY_INFO,*PARRAY_INFO;

  typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
  typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;

  typedef struct {
    unsigned long WireCodeset;
    unsigned long DesiredReceivingCodeset;
    void *CSArrayInfo;
  } CS_STUB_INFO;

  struct _MIDL_SYNTAX_INFO;
  typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO,*PMIDL_SYNTAX_INFO;

  struct NDR_ALLOC_ALL_NODES_CONTEXT;
  struct NDR_POINTER_QUEUE_STATE;
  struct _NDR_PROC_CONTEXT;

  typedef struct _MIDL_STUB_MESSAGE {
    PRPC_MESSAGE RpcMsg;
    unsigned char *Buffer;
    unsigned char *BufferStart;
    unsigned char *BufferEnd;
    unsigned char *BufferMark;
    unsigned long BufferLength;
    unsigned long MemorySize;
    unsigned char *Memory;
    unsigned char IsClient;
    unsigned char Pad;
    unsigned short uFlags2;
    int ReuseBuffer;
    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;
    int IgnoreEmbeddedPointers;
    unsigned char *PointerBufferMark;
    unsigned char fBufferValid;
    unsigned char uFlags;
    unsigned short UniquePtrCount;
    ULONG_PTR MaxCount;
    unsigned long Offset;
    unsigned long ActualCount;
    void *(__attribute__((__stdcall__)) *pfnAllocate)(size_t);
    void (__attribute__((__stdcall__)) *pfnFree)(void *);
    unsigned char *StackTop;
    unsigned char *pPresentedType;
    unsigned char *pTransmitType;
    handle_t SavedHandle;
    const struct _MIDL_STUB_DESC *StubDesc;
    struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
    unsigned long FullPtrRefId;
    unsigned long PointerLength;
    int fInDontFree : 1;
    int fDontCallFreeInst : 1;
    int fInOnlyParam : 1;
    int fHasReturn : 1;
    int fHasExtensions : 1;
    int fHasNewCorrDesc : 1;
    int fIsOicfServer : 1;
    int fHasMemoryValidateCallback : 1;
    int fUnused : 8;
    int fUnused2 : 16;
    unsigned long dwDestContext;
    void *pvDestContext;
    NDR_SCONTEXT *SavedContextHandles;
    long ParamNumber;
    struct IRpcChannelBuffer *pRpcChannelBuffer;
    PARRAY_INFO pArrayInfo;
    unsigned long *SizePtrCountArray;
    unsigned long *SizePtrOffsetArray;
    unsigned long *SizePtrLengthArray;
    void *pArgQueue;
    unsigned long dwStubPhase;
    void *LowStackMark;
    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    unsigned char *pCorrMemory;
    void *pMemoryList;
    CS_STUB_INFO *pCSInfo;
    unsigned char *ConformanceMark;
    unsigned char *VarianceMark;



    INT_PTR Unused;

    struct _NDR_PROC_CONTEXT *pContext;
    void *pUserMarshalList;
    INT_PTR Reserved51_2;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;
  } MIDL_STUB_MESSAGE,*PMIDL_STUB_MESSAGE;

  typedef void *(__attribute__((__stdcall__)) *GENERIC_BINDING_ROUTINE)(void *);
  typedef void (__attribute__((__stdcall__)) *GENERIC_UNBIND_ROUTINE)(void *,unsigned char *);

  typedef struct _GENERIC_BINDING_ROUTINE_PAIR {
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
  } GENERIC_BINDING_ROUTINE_PAIR,*PGENERIC_BINDING_ROUTINE_PAIR;

  typedef struct __GENERIC_BINDING_INFO {
    void *pObj;
    unsigned int Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
  } GENERIC_BINDING_INFO,*PGENERIC_BINDING_INFO;



  typedef void (__attribute__((__stdcall__)) *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);

  typedef struct _XMIT_ROUTINE_QUINTUPLE {
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
  } XMIT_ROUTINE_QUINTUPLE,*PXMIT_ROUTINE_QUINTUPLE;

  typedef ULONG (__attribute__((__stdcall__)) *USER_MARSHAL_SIZING_ROUTINE)(ULONG *,ULONG,void *);
  typedef unsigned char *(__attribute__((__stdcall__)) *USER_MARSHAL_MARSHALLING_ROUTINE)(ULONG *,unsigned char *,void *);
  typedef unsigned char *(__attribute__((__stdcall__)) *USER_MARSHAL_UNMARSHALLING_ROUTINE)(ULONG *,unsigned char *,void *);
  typedef void (__attribute__((__stdcall__)) *USER_MARSHAL_FREEING_ROUTINE)(ULONG *,void *);

  typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE {
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
  } USER_MARSHAL_ROUTINE_QUADRUPLE;



  typedef enum _USER_MARSHAL_CB_TYPE {
    USER_MARSHAL_CB_BUFFER_SIZE,USER_MARSHAL_CB_MARSHALL,USER_MARSHAL_CB_UNMARSHALL,USER_MARSHAL_CB_FREE
  } USER_MARSHAL_CB_TYPE;

  typedef struct _USER_MARSHAL_CB {
    unsigned long Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    unsigned long Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
  } USER_MARSHAL_CB;
  typedef struct _MALLOC_FREE_STRUCT {
    void *(__attribute__((__stdcall__)) *pfnAllocate)(size_t);
    void (__attribute__((__stdcall__)) *pfnFree)(void *);
  } MALLOC_FREE_STRUCT;

  typedef struct _COMM_FAULT_OFFSETS {
    short CommOffset;
    short FaultOffset;
  } COMM_FAULT_OFFSETS;

  typedef enum _IDL_CS_CONVERT {
    IDL_CS_NO_CONVERT,IDL_CS_IN_PLACE_CONVERT,IDL_CS_NEW_BUFFER_CONVERT
  } IDL_CS_CONVERT;

  typedef void (__attribute__((__stdcall__)) *CS_TYPE_NET_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,unsigned long ulLocalBufferSize,IDL_CS_CONVERT *conversionType,unsigned long *pulNetworkBufferSize,error_status_t *pStatus);
  typedef void (__attribute__((__stdcall__)) *CS_TYPE_LOCAL_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,unsigned long ulNetworkBufferSize,IDL_CS_CONVERT *conversionType,unsigned long *pulLocalBufferSize,error_status_t *pStatus);
  typedef void (__attribute__((__stdcall__)) *CS_TYPE_TO_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,void *pLocalData,unsigned long ulLocalDataLength,byte *pNetworkData,unsigned long *pulNetworkDataLength,error_status_t *pStatus);
  typedef void (__attribute__((__stdcall__)) *CS_TYPE_FROM_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,byte *pNetworkData,unsigned long ulNetworkDataLength,unsigned long ulLocalBufferSize,void *pLocalData,unsigned long *pulLocalDataLength,error_status_t *pStatus);
  typedef void (__attribute__((__stdcall__)) *CS_TAG_GETTING_ROUTINE)(RPC_BINDING_HANDLE hBinding,int fServerSide,unsigned long *pulSendingTag,unsigned long *pulDesiredReceivingTag,unsigned long *pulReceivingTag,error_status_t *pStatus);

  void __attribute__((__stdcall__)) RpcCsGetTags(RPC_BINDING_HANDLE hBinding,int fServerSide,unsigned long *pulSendingTag,unsigned long *pulDesiredReceivingTag,unsigned long *pulReceivingTag,error_status_t *pStatus);

  typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES {
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
  } NDR_CS_SIZE_CONVERT_ROUTINES;

  typedef struct _NDR_CS_ROUTINES {
    NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
  } NDR_CS_ROUTINES;

  typedef struct _MIDL_STUB_DESC {
    void *RpcInterfaceInformation;
    void *(__attribute__((__stdcall__)) *pfnAllocate)(size_t);
    void (__attribute__((__stdcall__)) *pfnFree)(void *);
    union {
      handle_t *pAutoHandle;
      handle_t *pPrimitiveHandle;
      PGENERIC_BINDING_INFO pGenericBindingInfo;
    } IMPLICIT_HANDLE_INFO;
    const NDR_RUNDOWN *apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
    const EXPR_EVAL *apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;
    const unsigned char *pFormatTypes;
    int fCheckBounds;
    unsigned long Version;
    MALLOC_FREE_STRUCT *pMallocFreeStruct;
    long MIDLVersion;
    const COMM_FAULT_OFFSETS *CommFaultOffsets;
    const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;
    const NDR_NOTIFY_ROUTINE *NotifyRoutineTable;
    ULONG_PTR mFlags;
    const NDR_CS_ROUTINES *CsRoutineTables;
    void *Reserved4;
    ULONG_PTR Reserved5;
  } MIDL_STUB_DESC;

  typedef const MIDL_STUB_DESC *PMIDL_STUB_DESC;
  typedef void *PMIDL_XMIT_TYPE;

  typedef struct _MIDL_FORMAT_STRING {
    short Pad;
    unsigned char Format[];
  } MIDL_FORMAT_STRING;

  typedef void (__attribute__((__stdcall__)) *STUB_THUNK)(PMIDL_STUB_MESSAGE);
  typedef long (__attribute__((__stdcall__)) *SERVER_ROUTINE)();

  typedef struct _MIDL_SERVER_INFO_ {
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE *DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short *FmtStringOffset;
    const STUB_THUNK *ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
  } MIDL_SERVER_INFO,*PMIDL_SERVER_INFO;



  typedef struct _MIDL_STUBLESS_PROXY_INFO {
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    const unsigned short *FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
  } MIDL_STUBLESS_PROXY_INFO;

  typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;

  struct _MIDL_SYNTAX_INFO {
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    RPC_DISPATCH_TABLE *DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short *FmtStringOffset;
    PFORMAT_STRING TypeString;
    const void *aUserMarshalQuadruple;
    ULONG_PTR pReserved1;
    ULONG_PTR pReserved2;
  };

  typedef unsigned short *PARAM_OFFSETTABLE,*PPARAM_OFFSETTABLE;

  typedef union _CLIENT_CALL_RETURN {
    void *Pointer;
    LONG_PTR Simple;
  } CLIENT_CALL_RETURN;

  typedef enum {
    XLAT_SERVER = 1,XLAT_CLIENT
  } XLAT_SIDE;

  typedef struct _FULL_PTR_TO_REFID_ELEMENT {
    struct _FULL_PTR_TO_REFID_ELEMENT *Next;
    void *Pointer;
    unsigned long RefId;
    unsigned char State;
  } FULL_PTR_TO_REFID_ELEMENT,*PFULL_PTR_TO_REFID_ELEMENT;

  typedef struct _FULL_PTR_XLAT_TABLES {

    struct {
      void **XlatTable;
      unsigned char *StateTable;
      unsigned long NumberOfEntries;
    } RefIdToPointer;
    struct {
      PFULL_PTR_TO_REFID_ELEMENT *XlatTable;
      unsigned long NumberOfBuckets;
      unsigned long HashMask;
    } PointerToRefId;
    unsigned long NextRefId;
    XLAT_SIDE XlatSide;
  } FULL_PTR_XLAT_TABLES,*PFULL_PTR_XLAT_TABLES;

  RPC_STATUS __attribute__((__stdcall__)) NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE *pInf,unsigned long *pCount,MIDL_SYNTAX_INFO **pArr);
  RPC_STATUS __attribute__((__stdcall__)) NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE *pInf,unsigned long *pCount,MIDL_SYNTAX_INFO **pArr,unsigned long *pPreferSyntaxIndex);
           void __attribute__((__stdcall__)) NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,unsigned char FormatChar);
           unsigned char *__attribute__((__stdcall__)) NdrPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrCsArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrCsTagMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrConformantStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrComplexStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrClientContextMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_CCONTEXT ContextHandle,int fCheck);
           void __attribute__((__stdcall__)) NdrServerContextMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_SCONTEXT ContextHandle,NDR_RUNDOWN RundownRoutine);
           void __attribute__((__stdcall__)) NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_SCONTEXT ContextHandle,NDR_RUNDOWN RundownRoutine,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,unsigned char FormatChar);
           unsigned char *__attribute__((__stdcall__)) NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrRangeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           void __attribute__((__stdcall__)) NdrCorrelationInitialize(PMIDL_STUB_MESSAGE pStubMsg,void *pMemory,unsigned long CacheSize,unsigned long flags);
           void __attribute__((__stdcall__)) NdrCorrelationPass(PMIDL_STUB_MESSAGE pStubMsg);
           void __attribute__((__stdcall__)) NdrCorrelationFree(PMIDL_STUB_MESSAGE pStubMsg);
           unsigned char *__attribute__((__stdcall__)) NdrPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           unsigned char *__attribute__((__stdcall__)) NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
           void __attribute__((__stdcall__)) NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_CCONTEXT *pContextHandle,RPC_BINDING_HANDLE BindHandle);
           NDR_SCONTEXT __attribute__((__stdcall__)) NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg);
           NDR_SCONTEXT __attribute__((__stdcall__)) NdrContextHandleInitialize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           NDR_SCONTEXT __attribute__((__stdcall__)) NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrCsTagBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrContextHandleSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrPointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrCsTagMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned long __attribute__((__stdcall__)) NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrPointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrCsArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrSimpleStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrConformantStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrComplexStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrFixedArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrConformantArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrComplexArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrByteCountPointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrUserMarshalFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrInterfacePointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
           void __attribute__((__stdcall__)) NdrConvert2(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat,long NumberParams);
           void __attribute__((__stdcall__)) NdrConvert(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           unsigned char *__attribute__((__stdcall__)) NdrUserMarshalSimpleTypeConvert(unsigned long *pFlags,unsigned char *pBuffer,unsigned char FormatChar);
           void __attribute__((__stdcall__)) NdrClientInitializeNew(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned int ProcNum);
           unsigned char *__attribute__((__stdcall__)) NdrServerInitializeNew(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor);
           void __attribute__((__stdcall__)) NdrServerInitializePartial(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned long RequestedBufferSize);
           void __attribute__((__stdcall__)) NdrClientInitialize(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned int ProcNum);
           unsigned char *__attribute__((__stdcall__)) NdrServerInitialize(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor);
           unsigned char *__attribute__((__stdcall__)) NdrServerInitializeUnmarshall (PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,PRPC_MESSAGE pRpcMsg);
           void __attribute__((__stdcall__)) NdrServerInitializeMarshall (PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg);
           unsigned char *__attribute__((__stdcall__)) NdrGetBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned long BufferLength,RPC_BINDING_HANDLE Handle);
           unsigned char *__attribute__((__stdcall__)) NdrNsGetBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned long BufferLength,RPC_BINDING_HANDLE Handle);
           unsigned char *__attribute__((__stdcall__)) NdrSendReceive(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pBufferEnd);
           unsigned char *__attribute__((__stdcall__)) NdrNsSendReceive(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pBufferEnd,RPC_BINDING_HANDLE *pAutoHandle);
           void __attribute__((__stdcall__)) NdrFreeBuffer(PMIDL_STUB_MESSAGE pStubMsg);
           RPC_STATUS __attribute__((__stdcall__)) NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE pStubMsg,RPC_VERSION *pVersion);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrClientCall2(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);



  CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrDcomAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);

  typedef enum {
    STUB_UNMARSHAL,STUB_CALL_SERVER,STUB_MARSHAL,STUB_CALL_SERVER_NO_HRESULT
  } STUB_PHASE;

  typedef enum {
    PROXY_CALCSIZE,PROXY_GETBUFFER,PROXY_MARSHAL,PROXY_SENDRECEIVE,PROXY_UNMARSHAL
  } PROXY_PHASE;

  struct IRpcStubBuffer;

           void __attribute__((__stdcall__)) NdrAsyncServerCall(PRPC_MESSAGE pRpcMsg);
           long __attribute__((__stdcall__)) NdrAsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
           long __attribute__((__stdcall__)) NdrDcomAsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
           long __attribute__((__stdcall__)) NdrStubCall2(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
           void __attribute__((__stdcall__)) NdrServerCall2(PRPC_MESSAGE pRpcMsg);
           long __attribute__((__stdcall__)) NdrStubCall (struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
           void __attribute__((__stdcall__)) NdrServerCall(PRPC_MESSAGE pRpcMsg);
           int __attribute__((__stdcall__)) NdrServerUnmarshall(struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,void *pParamList);
           void __attribute__((__stdcall__)) NdrServerMarshall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
           RPC_STATUS __attribute__((__stdcall__)) NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE pStubMsg,unsigned long *pCommStatus,unsigned long *pFaultStatus,RPC_STATUS Status);
           int __attribute__((__stdcall__)) NdrSH_UPDecision(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,RPC_BUFPTR pBuffer);
           int __attribute__((__stdcall__)) NdrSH_TLUPDecision(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem);
           int __attribute__((__stdcall__)) NdrSH_TLUPDecisionBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem);
           int __attribute__((__stdcall__)) NdrSH_IfAlloc(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
           int __attribute__((__stdcall__)) NdrSH_IfAllocRef(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
           int __attribute__((__stdcall__)) NdrSH_IfAllocSet(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
           RPC_BUFPTR __attribute__((__stdcall__)) NdrSH_IfCopy(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
           RPC_BUFPTR __attribute__((__stdcall__)) NdrSH_IfAllocCopy(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
           unsigned long __attribute__((__stdcall__)) NdrSH_Copy(unsigned char *pStubMsg,unsigned char *pPtrInMem,unsigned long Count);
           void __attribute__((__stdcall__)) NdrSH_IfFree(PMIDL_STUB_MESSAGE pMessage,unsigned char *pPtr);
           RPC_BUFPTR __attribute__((__stdcall__)) NdrSH_StringMarshall(PMIDL_STUB_MESSAGE pMessage,unsigned char *pMemory,unsigned long Count,int Size);
           RPC_BUFPTR __attribute__((__stdcall__)) NdrSH_StringUnMarshall(PMIDL_STUB_MESSAGE pMessage,unsigned char **pMemory,int Size);

  typedef void *RPC_SS_THREAD_HANDLE;

  typedef void *__attribute__((__stdcall__)) RPC_CLIENT_ALLOC(size_t Size);
  typedef void __attribute__((__stdcall__)) RPC_CLIENT_FREE(void *Ptr);

           void *__attribute__((__stdcall__)) RpcSsAllocate(size_t Size);
           void __attribute__((__stdcall__)) RpcSsDisableAllocate(void);
           void __attribute__((__stdcall__)) RpcSsEnableAllocate(void);
           void __attribute__((__stdcall__)) RpcSsFree(void *NodeToFree);
           RPC_SS_THREAD_HANDLE __attribute__((__stdcall__)) RpcSsGetThreadHandle(void);
           void __attribute__((__stdcall__)) RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree);
           void __attribute__((__stdcall__)) RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id);
           void __attribute__((__stdcall__)) RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree,RPC_CLIENT_ALLOC **OldClientAlloc,RPC_CLIENT_FREE **OldClientFree);
           void *__attribute__((__stdcall__)) RpcSmAllocate(size_t Size,RPC_STATUS *pStatus);
           RPC_STATUS __attribute__((__stdcall__)) RpcSmClientFree(void *pNodeToFree);
           RPC_STATUS __attribute__((__stdcall__)) RpcSmDestroyClientContext(void **ContextHandle);
           RPC_STATUS __attribute__((__stdcall__)) RpcSmDisableAllocate(void);
           RPC_STATUS __attribute__((__stdcall__)) RpcSmEnableAllocate(void);
           RPC_STATUS __attribute__((__stdcall__)) RpcSmFree(void *NodeToFree);
           RPC_SS_THREAD_HANDLE __attribute__((__stdcall__)) RpcSmGetThreadHandle (RPC_STATUS *pStatus);
           RPC_STATUS __attribute__((__stdcall__)) RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree);
           RPC_STATUS __attribute__((__stdcall__)) RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id);
           RPC_STATUS __attribute__((__stdcall__)) RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree,RPC_CLIENT_ALLOC **OldClientAlloc,RPC_CLIENT_FREE **OldClientFree);
           void __attribute__((__stdcall__)) NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE pMessage);
           void __attribute__((__stdcall__)) NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE pMessage);
           void __attribute__((__stdcall__)) NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE pMessage);
           void *__attribute__((__stdcall__)) NdrRpcSmClientAllocate(size_t Size);
           void __attribute__((__stdcall__)) NdrRpcSmClientFree(void *NodeToFree);
           void *__attribute__((__stdcall__)) NdrRpcSsDefaultAllocate(size_t Size);
           void __attribute__((__stdcall__)) NdrRpcSsDefaultFree(void *NodeToFree);
           PFULL_PTR_XLAT_TABLES __attribute__((__stdcall__)) NdrFullPointerXlatInit(unsigned long NumberOfPointers,XLAT_SIDE XlatSide);
           void __attribute__((__stdcall__)) NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES pXlatTables);
           int __attribute__((__stdcall__)) NdrFullPointerQueryPointer(PFULL_PTR_XLAT_TABLES pXlatTables,void *pPointer,unsigned char QueryType,unsigned long *pRefId);
           int __attribute__((__stdcall__)) NdrFullPointerQueryRefId(PFULL_PTR_XLAT_TABLES pXlatTables,unsigned long RefId,unsigned char QueryType,void **ppPointer);
           void __attribute__((__stdcall__)) NdrFullPointerInsertRefId(PFULL_PTR_XLAT_TABLES pXlatTables,unsigned long RefId,void *pPointer);
           int __attribute__((__stdcall__)) NdrFullPointerFree(PFULL_PTR_XLAT_TABLES pXlatTables,void *Pointer);
           void *__attribute__((__stdcall__)) NdrAllocate(PMIDL_STUB_MESSAGE pStubMsg,size_t Len);
           void __attribute__((__stdcall__)) NdrClearOutParameters(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat,void *ArgAddr);
           void *__attribute__((__stdcall__)) NdrOleAllocate(size_t Size);
           void __attribute__((__stdcall__)) NdrOleFree(void *NodeToFree);
  typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1 {
    void *Buffer;
    unsigned long BufferSize;
    void *(__attribute__((__stdcall__)) *pfnAllocate)(size_t);
    void (__attribute__((__stdcall__)) *pfnFree)(void *);
    struct IRpcChannelBuffer *pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
  } NDR_USER_MARSHAL_INFO_LEVEL1;

  typedef struct _NDR_USER_MARSHAL_INFO {
    unsigned long InformationLevel;
    __extension__ union {
      NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    };
  } NDR_USER_MARSHAL_INFO;

  RPC_STATUS __attribute__((__stdcall__)) NdrGetUserMarshalInfo(unsigned long *pFlags,unsigned long InformationLevel,NDR_USER_MARSHAL_INFO *pMarshalInfo);
  RPC_STATUS __attribute__((__stdcall__)) NdrCreateServerInterfaceFromStub(struct IRpcStubBuffer *pStub,RPC_SERVER_INTERFACE *pServerIf);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) NdrClientCall3(MIDL_STUBLESS_PROXY_INFO *pProxyInfo,unsigned long nProcNum,void *pReturnValue,...);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) Ndr64AsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo,unsigned long nProcNum,void *pReturnValue,...);
  CLIENT_CALL_RETURN __attribute__((__cdecl__)) Ndr64DcomAsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo,unsigned long nProcNum,void *pReturnValue,...);

  struct IRpcStubBuffer;

           void __attribute__((__stdcall__)) Ndr64AsyncServerCall(PRPC_MESSAGE pRpcMsg);
           void __attribute__((__stdcall__)) Ndr64AsyncServerCall64(PRPC_MESSAGE pRpcMsg);
           void __attribute__((__stdcall__)) Ndr64AsyncServerCallAll(PRPC_MESSAGE pRpcMsg);
           long __attribute__((__stdcall__)) Ndr64AsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
           long __attribute__((__stdcall__)) Ndr64DcomAsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
           long __attribute__((__stdcall__)) NdrStubCall3 (struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
           void __attribute__((__stdcall__)) NdrServerCallAll(PRPC_MESSAGE pRpcMsg);
           void __attribute__((__stdcall__)) NdrServerCallNdr64(PRPC_MESSAGE pRpcMsg);
           void __attribute__((__stdcall__)) NdrServerCall3(PRPC_MESSAGE pRpcMsg);
           void __attribute__((__stdcall__)) NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE pStubMsg,void *pMemory);
           void __attribute__((__stdcall__)) NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,void **ppMemory);
           void __attribute__((__stdcall__)) NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE pStubMsg,void *pMemory);
           void __attribute__((__stdcall__)) NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE pStubMsg,void **ppMemory,PFORMAT_STRING pFormat);
  void __attribute__((__stdcall__)) RpcUserFree(handle_t AsyncHandle,void *pBuffer);


}
#pragma pack(pop)
#pragma pack(push,8)
#pragma pack(push,8)
#pragma pack(push,8)
struct IUnknown;

extern "C++" {
  template<typename T> void **IID_PPV_ARGS_Helper (T **pp) {
    static_cast<IUnknown *> (*pp);
    return reinterpret_cast<void **> (pp);
  }
}
typedef enum tagREGCLS {
  REGCLS_SINGLEUSE = 0,
  REGCLS_MULTIPLEUSE = 1,
  REGCLS_MULTI_SEPARATE = 2,
  REGCLS_SUSPENDED = 4,
  REGCLS_SURROGATE = 8
} REGCLS;

typedef struct IRpcStubBuffer IRpcStubBuffer;
typedef struct IRpcChannelBuffer IRpcChannelBuffer;

typedef enum tagCOINITBASE {
  COINITBASE_MULTITHREADED = 0x0,
} COINITBASE;
extern "C++" {
__extension__ template<typename T> const GUID &__mingw_uuidof();
}
extern "C" {
extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec;
typedef WCHAR OLECHAR;
typedef OLECHAR *LPOLESTR;
typedef const OLECHAR *LPCOLESTR;
typedef unsigned char UCHAR;
typedef short SHORT;
typedef unsigned short USHORT;
typedef DWORD ULONG;
typedef double DOUBLE;
typedef struct _COAUTHIDENTITY {
    USHORT *User;
    ULONG UserLength;
    USHORT *Domain;
    ULONG DomainLength;
    USHORT *Password;
    ULONG PasswordLength;
    ULONG Flags;
} COAUTHIDENTITY;

typedef struct _COAUTHINFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
} COAUTHINFO;

typedef LONG SCODE;
typedef SCODE *PSCODE;
typedef enum tagMEMCTX {
    MEMCTX_TASK = 1,
    MEMCTX_SHARED = 2,
    MEMCTX_MACSYSTEM = 3,
    MEMCTX_UNKNOWN = -1,
    MEMCTX_SAME = -2
} MEMCTX;
typedef enum tagCLSCTX {
    CLSCTX_INPROC_SERVER = 0x1,
    CLSCTX_INPROC_HANDLER = 0x2,
    CLSCTX_LOCAL_SERVER = 0x4,
    CLSCTX_INPROC_SERVER16 = 0x8,
    CLSCTX_REMOTE_SERVER = 0x10,
    CLSCTX_INPROC_HANDLER16 = 0x20,
    CLSCTX_RESERVED1 = 0x40,
    CLSCTX_RESERVED2 = 0x80,
    CLSCTX_RESERVED3 = 0x100,
    CLSCTX_RESERVED4 = 0x200,
    CLSCTX_NO_CODE_DOWNLOAD = 0x400,
    CLSCTX_RESERVED5 = 0x800,
    CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
    CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
    CLSCTX_NO_FAILURE_LOG = 0x4000,
    CLSCTX_DISABLE_AAA = 0x8000,
    CLSCTX_ENABLE_AAA = 0x10000,
    CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
    CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
    CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
    CLSCTX_ENABLE_CLOAKING = 0x100000,
    CLSCTX_APPCONTAINER = 0x400000,
    CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
    CLSCTX_PS_DLL = (int)0x80000000
} CLSCTX;



typedef enum tagMSHLFLAGS {
    MSHLFLAGS_NORMAL = 0,
    MSHLFLAGS_TABLESTRONG = 1,
    MSHLFLAGS_TABLEWEAK = 2,
    MSHLFLAGS_NOPING = 4,
    MSHLFLAGS_RESERVED1 = 8,
    MSHLFLAGS_RESERVED2 = 16,
    MSHLFLAGS_RESERVED3 = 32,
    MSHLFLAGS_RESERVED4 = 64
} MSHLFLAGS;

typedef enum tagMSHCTX {
    MSHCTX_LOCAL = 0,
    MSHCTX_NOSHAREDMEM = 1,
    MSHCTX_DIFFERENTMACHINE = 2,
    MSHCTX_INPROC = 3,
    MSHCTX_CROSSCTX = 4
} MSHCTX;

typedef struct _BYTE_BLOB {
    ULONG clSize;
    byte abData[1];
} BYTE_BLOB;

typedef BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB {
    ULONG clSize;
    unsigned short asData[1];
} WORD_BLOB;

typedef WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB {
    ULONG clSize;
    ULONG alData[1];
} DWORD_BLOB;

typedef DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB {
    ULONG fFlags;
    ULONG clSize;
    byte abData[1];
} FLAGGED_BYTE_BLOB;

typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB {
    ULONG fFlags;
    ULONG clSize;
    unsigned short asData[1];
} FLAGGED_WORD_BLOB;

typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR {
    ULONG clSize;
    byte *pData;
} BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR {
    ULONG clSize;
    unsigned short *pData;
} WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR {
    ULONG clSize;
    ULONG *pData;
} DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR {
    ULONG clSize;
    long long *pData;
} HYPER_SIZEDARR;




typedef boolean BOOLEAN;





typedef struct tagBLOB {
    ULONG cbSize;
    BYTE *pBlobData;
} BLOB;
typedef struct tagBLOB *LPBLOB;
}
typedef struct IUnknown IUnknown;




typedef struct AsyncIUnknown AsyncIUnknown;




typedef struct IClassFactory IClassFactory;
extern "C" {
typedef IUnknown *LPUNKNOWN;


extern "C" const IID IID_IUnknown;

extern "C++" {
  struct
  IUnknown {
  public:

    virtual HRESULT __attribute__((__stdcall__)) QueryInterface(const IID & riid, void **ppvObject) = 0;
    virtual ULONG __attribute__((__stdcall__)) AddRef(void) = 0;
    virtual ULONG __attribute__((__stdcall__)) Release(void) = 0;

    template<class Q>
    HRESULT __attribute__((__stdcall__)) QueryInterface(Q **pp) {
      return QueryInterface(__mingw_uuidof<__typeof(Q)>(), (void **)pp);
    }

  };
}
extern "C++" { template<> inline const GUID &__mingw_uuidof<IUnknown>() { static const IID __uuid_inst = {0x00000000,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IUnknown*>() { return __mingw_uuidof<IUnknown>(); } }
HRESULT __attribute__((__stdcall__)) IUnknown_QueryInterface_Proxy(IUnknown *This, const IID & riid, void **ppvObject);
void __attribute__((__stdcall__)) IUnknown_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
ULONG __attribute__((__stdcall__)) IUnknown_AddRef_Proxy(IUnknown *This);
void __attribute__((__stdcall__)) IUnknown_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
ULONG __attribute__((__stdcall__)) IUnknown_Release_Proxy(IUnknown *This);
void __attribute__((__stdcall__)) IUnknown_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
extern "C" const GUID IID_AsyncIUnknown;

struct
AsyncIUnknown : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Begin_QueryInterface(
        const IID & riid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Finish_QueryInterface(
        void **ppvObject) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Begin_AddRef(
        ) = 0;

    virtual ULONG __attribute__((__stdcall__)) Finish_AddRef(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Begin_Release(
        ) = 0;

    virtual ULONG __attribute__((__stdcall__)) Finish_Release(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<AsyncIUnknown>() { static const IID __uuid_inst = {0x000e0000,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<AsyncIUnknown*>() { return __mingw_uuidof<AsyncIUnknown>(); } }
HRESULT __attribute__((__stdcall__)) AsyncIUnknown_Begin_QueryInterface_Proxy(
    AsyncIUnknown* This,
    const IID & riid);
void __attribute__((__stdcall__)) AsyncIUnknown_Begin_QueryInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIUnknown_Finish_QueryInterface_Proxy(
    AsyncIUnknown* This,
    void **ppvObject);
void __attribute__((__stdcall__)) AsyncIUnknown_Finish_QueryInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIUnknown_Begin_AddRef_Proxy(
    AsyncIUnknown* This);
void __attribute__((__stdcall__)) AsyncIUnknown_Begin_AddRef_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) AsyncIUnknown_Finish_AddRef_Proxy(
    AsyncIUnknown* This);
void __attribute__((__stdcall__)) AsyncIUnknown_Finish_AddRef_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIUnknown_Begin_Release_Proxy(
    AsyncIUnknown* This);
void __attribute__((__stdcall__)) AsyncIUnknown_Begin_Release_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) AsyncIUnknown_Finish_Release_Proxy(
    AsyncIUnknown* This);
void __attribute__((__stdcall__)) AsyncIUnknown_Finish_Release_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IClassFactory *LPCLASSFACTORY;

extern "C" const GUID IID_IClassFactory;

struct
IClassFactory : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) CreateInstance(
        IUnknown *pUnkOuter,
        const IID & riid,
        void **ppvObject) = 0;

    virtual HRESULT __attribute__((__stdcall__)) LockServer(
        WINBOOL fLock) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IClassFactory>() { static const IID __uuid_inst = {0x00000001,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IClassFactory*>() { return __mingw_uuidof<IClassFactory>(); } }
HRESULT __attribute__((__stdcall__)) IClassFactory_RemoteCreateInstance_Proxy(
    IClassFactory* This,
    const IID & riid,
    IUnknown **ppvObject);
void __attribute__((__stdcall__)) IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IClassFactory_RemoteLockServer_Proxy(
    IClassFactory* This,
    WINBOOL fLock);
void __attribute__((__stdcall__)) IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IClassFactory_CreateInstance_Proxy(
    IClassFactory* This,
    IUnknown *pUnkOuter,
    const IID & riid,
    void **ppvObject);
HRESULT __attribute__((__stdcall__)) IClassFactory_CreateInstance_Stub(
    IClassFactory* This,
    const IID & riid,
    IUnknown **ppvObject);
HRESULT __attribute__((__stdcall__)) IClassFactory_LockServer_Proxy(
    IClassFactory* This,
    WINBOOL fLock);
HRESULT __attribute__((__stdcall__)) IClassFactory_LockServer_Stub(
    IClassFactory* This,
    WINBOOL fLock);
}
typedef struct IMarshal IMarshal;




typedef struct INoMarshal INoMarshal;




typedef struct IAgileObject IAgileObject;




typedef struct IMarshal2 IMarshal2;




typedef struct IMalloc IMalloc;




typedef struct IStdMarshalInfo IStdMarshalInfo;




typedef struct IExternalConnection IExternalConnection;




typedef struct IMultiQI IMultiQI;




typedef struct AsyncIMultiQI AsyncIMultiQI;




typedef struct IInternalUnknown IInternalUnknown;




typedef struct IEnumUnknown IEnumUnknown;




typedef struct IEnumString IEnumString;




typedef struct ISequentialStream ISequentialStream;




typedef struct IStream IStream;




typedef struct IRpcChannelBuffer IRpcChannelBuffer;




typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;




typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;




typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;




typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;




typedef struct IRpcProxyBuffer IRpcProxyBuffer;




typedef struct IRpcStubBuffer IRpcStubBuffer;




typedef struct IPSFactoryBuffer IPSFactoryBuffer;




typedef struct IChannelHook IChannelHook;




typedef struct IClientSecurity IClientSecurity;




typedef struct IServerSecurity IServerSecurity;




typedef struct IRpcOptions IRpcOptions;




typedef struct IGlobalOptions IGlobalOptions;




typedef struct ISurrogate ISurrogate;




typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;




typedef struct ISynchronize ISynchronize;




typedef struct ISynchronizeHandle ISynchronizeHandle;




typedef struct ISynchronizeEvent ISynchronizeEvent;




typedef struct ISynchronizeContainer ISynchronizeContainer;




typedef struct ISynchronizeMutex ISynchronizeMutex;




typedef struct ICancelMethodCalls ICancelMethodCalls;




typedef struct IAsyncManager IAsyncManager;




typedef struct ICallFactory ICallFactory;




typedef struct IRpcHelper IRpcHelper;




typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;




typedef struct IWaitMultiple IWaitMultiple;




typedef struct IAddrTrackingControl IAddrTrackingControl;




typedef struct IAddrExclusionControl IAddrExclusionControl;




typedef struct IPipeByte IPipeByte;




typedef struct IPipeLong IPipeLong;




typedef struct IPipeDouble IPipeDouble;




typedef struct IEnumContextProps IEnumContextProps;




typedef struct IContext IContext;




typedef struct IComThreadingInfo IComThreadingInfo;




typedef struct IProcessInitControl IProcessInitControl;




typedef struct IFastRundown IFastRundown;




typedef struct IMarshalingStream IMarshalingStream;
extern "C" {
typedef struct _COSERVERINFO {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
} COSERVERINFO;







typedef IMarshal *LPMARSHAL;
extern "C" const GUID IID_IMarshal;

struct
IMarshal : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetUnmarshalClass(
        const IID & riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        CLSID *pCid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetMarshalSizeMax(
        const IID & riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        DWORD *pSize) = 0;

    virtual HRESULT __attribute__((__stdcall__)) MarshalInterface(
        IStream *pStm,
        const IID & riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) UnmarshalInterface(
        IStream *pStm,
        const IID & riid,
        void **ppv) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ReleaseMarshalData(
        IStream *pStm) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DisconnectObject(
        DWORD dwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IMarshal>() { static const IID __uuid_inst = {0x00000003,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IMarshal*>() { return __mingw_uuidof<IMarshal>(); } }
HRESULT __attribute__((__stdcall__)) IMarshal_GetUnmarshalClass_Proxy(
    IMarshal* This,
    const IID & riid,
    void *pv,
    DWORD dwDestContext,
    void *pvDestContext,
    DWORD mshlflags,
    CLSID *pCid);
void __attribute__((__stdcall__)) IMarshal_GetUnmarshalClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMarshal_GetMarshalSizeMax_Proxy(
    IMarshal* This,
    const IID & riid,
    void *pv,
    DWORD dwDestContext,
    void *pvDestContext,
    DWORD mshlflags,
    DWORD *pSize);
void __attribute__((__stdcall__)) IMarshal_GetMarshalSizeMax_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMarshal_MarshalInterface_Proxy(
    IMarshal* This,
    IStream *pStm,
    const IID & riid,
    void *pv,
    DWORD dwDestContext,
    void *pvDestContext,
    DWORD mshlflags);
void __attribute__((__stdcall__)) IMarshal_MarshalInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMarshal_UnmarshalInterface_Proxy(
    IMarshal* This,
    IStream *pStm,
    const IID & riid,
    void **ppv);
void __attribute__((__stdcall__)) IMarshal_UnmarshalInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMarshal_ReleaseMarshalData_Proxy(
    IMarshal* This,
    IStream *pStm);
void __attribute__((__stdcall__)) IMarshal_ReleaseMarshalData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMarshal_DisconnectObject_Proxy(
    IMarshal* This,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IMarshal_DisconnectObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_INoMarshal;

struct
INoMarshal : public IUnknown
{
};

extern "C++" { template<> inline const GUID &__mingw_uuidof<INoMarshal>() { static const IID __uuid_inst = {0xecc8691b,0xc1db,0x4dc0, {0x85,0x5e,0x65,0xf6,0xc5,0x51,0xaf,0x49}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<INoMarshal*>() { return __mingw_uuidof<INoMarshal>(); } }
extern "C" const GUID IID_IAgileObject;

struct
IAgileObject : public IUnknown
{
};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IAgileObject>() { static const IID __uuid_inst = {0x94ea2b94,0xe9cc,0x49e0, {0xc0,0xff,0xee,0x64,0xca,0x8f,0x5b,0x90}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IAgileObject*>() { return __mingw_uuidof<IAgileObject>(); } }
typedef IMarshal2 *LPMARSHAL2;
extern "C" const GUID IID_IMarshal2;

struct
IMarshal2 : public IMarshal
{
};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IMarshal2>() { static const IID __uuid_inst = {0x000001cf,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IMarshal2*>() { return __mingw_uuidof<IMarshal2>(); } }
typedef IMalloc *LPMALLOC;

extern "C" const GUID IID_IMalloc;

struct
IMalloc : public IUnknown
{
    virtual void * __attribute__((__stdcall__)) Alloc(
        SIZE_T cb) = 0;

    virtual void * __attribute__((__stdcall__)) Realloc(
        void *pv,
        SIZE_T cb) = 0;

    virtual void __attribute__((__stdcall__)) Free(
        void *pv) = 0;

    virtual SIZE_T __attribute__((__stdcall__)) GetSize(
        void *pv) = 0;

    virtual int __attribute__((__stdcall__)) DidAlloc(
        void *pv) = 0;

    virtual void __attribute__((__stdcall__)) HeapMinimize(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IMalloc>() { static const IID __uuid_inst = {0x00000002,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IMalloc*>() { return __mingw_uuidof<IMalloc>(); } }
void * __attribute__((__stdcall__)) IMalloc_Alloc_Proxy(
    IMalloc* This,
    SIZE_T cb);
void __attribute__((__stdcall__)) IMalloc_Alloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * __attribute__((__stdcall__)) IMalloc_Realloc_Proxy(
    IMalloc* This,
    void *pv,
    SIZE_T cb);
void __attribute__((__stdcall__)) IMalloc_Realloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IMalloc_Free_Proxy(
    IMalloc* This,
    void *pv);
void __attribute__((__stdcall__)) IMalloc_Free_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
SIZE_T __attribute__((__stdcall__)) IMalloc_GetSize_Proxy(
    IMalloc* This,
    void *pv);
void __attribute__((__stdcall__)) IMalloc_GetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
int __attribute__((__stdcall__)) IMalloc_DidAlloc_Proxy(
    IMalloc* This,
    void *pv);
void __attribute__((__stdcall__)) IMalloc_DidAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IMalloc_HeapMinimize_Proxy(
    IMalloc* This);
void __attribute__((__stdcall__)) IMalloc_HeapMinimize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IStdMarshalInfo *LPSTDMARSHALINFO;

extern "C" const GUID IID_IStdMarshalInfo;

struct
IStdMarshalInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetClassForHandler(
        DWORD dwDestContext,
        void *pvDestContext,
        CLSID *pClsid) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IStdMarshalInfo>() { static const IID __uuid_inst = {0x00000018,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IStdMarshalInfo*>() { return __mingw_uuidof<IStdMarshalInfo>(); } }
HRESULT __attribute__((__stdcall__)) IStdMarshalInfo_GetClassForHandler_Proxy(
    IStdMarshalInfo* This,
    DWORD dwDestContext,
    void *pvDestContext,
    CLSID *pClsid);
void __attribute__((__stdcall__)) IStdMarshalInfo_GetClassForHandler_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IExternalConnection *LPEXTERNALCONNECTION;

typedef enum tagEXTCONN {
    EXTCONN_STRONG = 0x1,
    EXTCONN_WEAK = 0x2,
    EXTCONN_CALLABLE = 0x4
} EXTCONN;

extern "C" const GUID IID_IExternalConnection;

struct
IExternalConnection : public IUnknown
{
    virtual DWORD __attribute__((__stdcall__)) AddConnection(
        DWORD extconn,
        DWORD reserved) = 0;

    virtual DWORD __attribute__((__stdcall__)) ReleaseConnection(
        DWORD extconn,
        DWORD reserved,
        WINBOOL fLastReleaseCloses) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IExternalConnection>() { static const IID __uuid_inst = {0x00000019,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IExternalConnection*>() { return __mingw_uuidof<IExternalConnection>(); } }
DWORD __attribute__((__stdcall__)) IExternalConnection_AddConnection_Proxy(
    IExternalConnection* This,
    DWORD extconn,
    DWORD reserved);
void __attribute__((__stdcall__)) IExternalConnection_AddConnection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
DWORD __attribute__((__stdcall__)) IExternalConnection_ReleaseConnection_Proxy(
    IExternalConnection* This,
    DWORD extconn,
    DWORD reserved,
    WINBOOL fLastReleaseCloses);
void __attribute__((__stdcall__)) IExternalConnection_ReleaseConnection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);




typedef IMultiQI *LPMULTIQI;



typedef struct tagMULTI_QI {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
} MULTI_QI;







extern "C" const GUID IID_IMultiQI;

struct
IMultiQI : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) QueryMultipleInterfaces(
        ULONG cMQIs,
        MULTI_QI *pMQIs) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IMultiQI>() { static const IID __uuid_inst = {0x00000020,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IMultiQI*>() { return __mingw_uuidof<IMultiQI>(); } }
HRESULT __attribute__((__stdcall__)) IMultiQI_QueryMultipleInterfaces_Proxy(
    IMultiQI* This,
    ULONG cMQIs,
    MULTI_QI *pMQIs);
void __attribute__((__stdcall__)) IMultiQI_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_AsyncIMultiQI;

struct
AsyncIMultiQI : public IUnknown
{
    virtual void __attribute__((__stdcall__)) Begin_QueryMultipleInterfaces(
        ULONG cMQIs,
        MULTI_QI *pMQIs) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Finish_QueryMultipleInterfaces(
        MULTI_QI *pMQIs) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<AsyncIMultiQI>() { static const IID __uuid_inst = {0x000e0020,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<AsyncIMultiQI*>() { return __mingw_uuidof<AsyncIMultiQI>(); } }
HRESULT __attribute__((__stdcall__)) AsyncIMultiQI_Begin_QueryMultipleInterfaces_Proxy(
    IMultiQI* This,
    ULONG cMQIs,
    MULTI_QI *pMQIs);
void __attribute__((__stdcall__)) AsyncIMultiQI_Begin_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIMultiQI_Finish_QueryMultipleInterfaces_Proxy(
    IMultiQI* This,
    ULONG cMQIs,
    MULTI_QI *pMQIs);
void __attribute__((__stdcall__)) AsyncIMultiQI_Finish_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IInternalUnknown;

struct
IInternalUnknown : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) QueryInternalInterface(
        const IID & riid,
        void **ppv) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternalUnknown>() { static const IID __uuid_inst = {0x00000021,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternalUnknown*>() { return __mingw_uuidof<IInternalUnknown>(); } }
HRESULT __attribute__((__stdcall__)) IInternalUnknown_QueryInternalInterface_Proxy(
    IInternalUnknown* This,
    const IID & riid,
    void **ppv);
void __attribute__((__stdcall__)) IInternalUnknown_QueryInternalInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IEnumUnknown *LPENUMUNKNOWN;

extern "C" const GUID IID_IEnumUnknown;

struct
IEnumUnknown : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Next(
        ULONG celt,
        IUnknown **rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Skip(
        ULONG celt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IEnumUnknown **ppenum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEnumUnknown>() { static const IID __uuid_inst = {0x00000100,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEnumUnknown*>() { return __mingw_uuidof<IEnumUnknown>(); } }
HRESULT __attribute__((__stdcall__)) IEnumUnknown_RemoteNext_Proxy(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Skip_Proxy(
    IEnumUnknown* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumUnknown_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Reset_Proxy(
    IEnumUnknown* This);
void __attribute__((__stdcall__)) IEnumUnknown_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Clone_Proxy(
    IEnumUnknown* This,
    IEnumUnknown **ppenum);
void __attribute__((__stdcall__)) IEnumUnknown_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Next_Proxy(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumUnknown_Next_Stub(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
typedef IEnumString *LPENUMSTRING;

extern "C" const GUID IID_IEnumString;

struct
IEnumString : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Next(
        ULONG celt,
        LPOLESTR *rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Skip(
        ULONG celt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IEnumString **ppenum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEnumString>() { static const IID __uuid_inst = {0x00000101,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEnumString*>() { return __mingw_uuidof<IEnumString>(); } }
HRESULT __attribute__((__stdcall__)) IEnumString_RemoteNext_Proxy(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumString_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumString_Skip_Proxy(
    IEnumString* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumString_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumString_Reset_Proxy(
    IEnumString* This);
void __attribute__((__stdcall__)) IEnumString_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumString_Clone_Proxy(
    IEnumString* This,
    IEnumString **ppenum);
void __attribute__((__stdcall__)) IEnumString_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumString_Next_Proxy(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumString_Next_Stub(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
extern "C" const GUID IID_ISequentialStream;

struct
ISequentialStream : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Read(
        void *pv,
        ULONG cb,
        ULONG *pcbRead) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Write(
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ISequentialStream>() { static const IID __uuid_inst = {0x0c733a30,0x2a1c,0x11ce, {0xad,0xe5,0x00,0xaa,0x00,0x44,0x77,0x3d}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ISequentialStream*>() { return __mingw_uuidof<ISequentialStream>(); } }
HRESULT __attribute__((__stdcall__)) ISequentialStream_RemoteRead_Proxy(
    ISequentialStream* This,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
void __attribute__((__stdcall__)) ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISequentialStream_RemoteWrite_Proxy(
    ISequentialStream* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void __attribute__((__stdcall__)) ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISequentialStream_Read_Proxy(
    ISequentialStream* This,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT __attribute__((__stdcall__)) ISequentialStream_Read_Stub(
    ISequentialStream* This,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT __attribute__((__stdcall__)) ISequentialStream_Write_Proxy(
    ISequentialStream* This,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT __attribute__((__stdcall__)) ISequentialStream_Write_Stub(
    ISequentialStream* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
typedef IStream *LPSTREAM;

typedef struct tagSTATSTG {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
} STATSTG;

typedef enum tagSTGTY {
    STGTY_STORAGE = 1,
    STGTY_STREAM = 2,
    STGTY_LOCKBYTES = 3,
    STGTY_PROPERTY = 4
} STGTY;

typedef enum tagSTREAM_SEEK {
    STREAM_SEEK_SET = 0,
    STREAM_SEEK_CUR = 1,
    STREAM_SEEK_END = 2
} STREAM_SEEK;

typedef enum tagLOCKTYPE {
    LOCK_WRITE = 1,
    LOCK_EXCLUSIVE = 2,
    LOCK_ONLYONCE = 4
} LOCKTYPE;

extern "C" const GUID IID_IStream;

struct
IStream : public ISequentialStream
{
    virtual HRESULT __attribute__((__stdcall__)) Seek(
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetSize(
        ULARGE_INTEGER libNewSize) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CopyTo(
        IStream *pstm,
        ULARGE_INTEGER cb,
        ULARGE_INTEGER *pcbRead,
        ULARGE_INTEGER *pcbWritten) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Commit(
        DWORD grfCommitFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Revert(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) LockRegion(
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) UnlockRegion(
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Stat(
        STATSTG *pstatstg,
        DWORD grfStatFlag) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IStream **ppstm) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IStream>() { static const IID __uuid_inst = {0x0000000c,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IStream*>() { return __mingw_uuidof<IStream>(); } }
HRESULT __attribute__((__stdcall__)) IStream_RemoteSeek_Proxy(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
void __attribute__((__stdcall__)) IStream_RemoteSeek_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_SetSize_Proxy(
    IStream* This,
    ULARGE_INTEGER libNewSize);
void __attribute__((__stdcall__)) IStream_SetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_RemoteCopyTo_Proxy(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
void __attribute__((__stdcall__)) IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_Commit_Proxy(
    IStream* This,
    DWORD grfCommitFlags);
void __attribute__((__stdcall__)) IStream_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_Revert_Proxy(
    IStream* This);
void __attribute__((__stdcall__)) IStream_Revert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_LockRegion_Proxy(
    IStream* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void __attribute__((__stdcall__)) IStream_LockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_UnlockRegion_Proxy(
    IStream* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void __attribute__((__stdcall__)) IStream_UnlockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_Stat_Proxy(
    IStream* This,
    STATSTG *pstatstg,
    DWORD grfStatFlag);
void __attribute__((__stdcall__)) IStream_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_Clone_Proxy(
    IStream* This,
    IStream **ppstm);
void __attribute__((__stdcall__)) IStream_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStream_Seek_Proxy(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
HRESULT __attribute__((__stdcall__)) IStream_Seek_Stub(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
HRESULT __attribute__((__stdcall__)) IStream_CopyTo_Proxy(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
HRESULT __attribute__((__stdcall__)) IStream_CopyTo_Stub(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
typedef ULONG RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void * reserved2[5];
    ULONG rpcFlags;
} RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;

extern "C" const GUID IID_IRpcChannelBuffer;

struct
IRpcChannelBuffer : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetBuffer(
        RPCOLEMESSAGE *pMessage,
        const IID & riid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SendReceive(
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus) = 0;

    virtual HRESULT __attribute__((__stdcall__)) FreeBuffer(
        RPCOLEMESSAGE *pMessage) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDestCtx(
        DWORD *pdwDestContext,
        void **ppvDestContext) = 0;

    virtual HRESULT __attribute__((__stdcall__)) IsConnected(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRpcChannelBuffer>() { static const IID __uuid_inst = {0xd5f56b60,0x593b,0x101a, {0xb5,0x69,0x08,0x00,0x2b,0x2d,0xbf,0x7a}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRpcChannelBuffer*>() { return __mingw_uuidof<IRpcChannelBuffer>(); } }
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_GetBuffer_Proxy(
    IRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMessage,
    const IID & riid);
void __attribute__((__stdcall__)) IRpcChannelBuffer_GetBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_SendReceive_Proxy(
    IRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMessage,
    ULONG *pStatus);
void __attribute__((__stdcall__)) IRpcChannelBuffer_SendReceive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_FreeBuffer_Proxy(
    IRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMessage);
void __attribute__((__stdcall__)) IRpcChannelBuffer_FreeBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_GetDestCtx_Proxy(
    IRpcChannelBuffer* This,
    DWORD *pdwDestContext,
    void **ppvDestContext);
void __attribute__((__stdcall__)) IRpcChannelBuffer_GetDestCtx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer_IsConnected_Proxy(
    IRpcChannelBuffer* This);
void __attribute__((__stdcall__)) IRpcChannelBuffer_IsConnected_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IRpcChannelBuffer2;

struct
IRpcChannelBuffer2 : public IRpcChannelBuffer
{
    virtual HRESULT __attribute__((__stdcall__)) GetProtocolVersion(
        DWORD *pdwVersion) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRpcChannelBuffer2>() { static const IID __uuid_inst = {0x594f31d0,0x7f19,0x11d0, {0xb1,0x94,0x00,0xa0,0xc9,0x0d,0xc8,0xbf}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRpcChannelBuffer2*>() { return __mingw_uuidof<IRpcChannelBuffer2>(); } }
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer2_GetProtocolVersion_Proxy(
    IRpcChannelBuffer2* This,
    DWORD *pdwVersion);
void __attribute__((__stdcall__)) IRpcChannelBuffer2_GetProtocolVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IAsyncRpcChannelBuffer;

struct
IAsyncRpcChannelBuffer : public IRpcChannelBuffer2
{
    virtual HRESULT __attribute__((__stdcall__)) Send(
        RPCOLEMESSAGE *pMsg,
        ISynchronize *pSync,
        ULONG *pulStatus) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Receive(
        RPCOLEMESSAGE *pMsg,
        ULONG *pulStatus) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDestCtxEx(
        RPCOLEMESSAGE *pMsg,
        DWORD *pdwDestContext,
        void **ppvDestContext) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IAsyncRpcChannelBuffer>() { static const IID __uuid_inst = {0xa5029fb6,0x3c34,0x11d1, {0x9c,0x99,0x00,0xc0,0x4f,0xb9,0x98,0xaa}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IAsyncRpcChannelBuffer*>() { return __mingw_uuidof<IAsyncRpcChannelBuffer>(); } }
HRESULT __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_Send_Proxy(
    IAsyncRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMsg,
    ISynchronize *pSync,
    ULONG *pulStatus);
void __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_Send_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_Receive_Proxy(
    IAsyncRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMsg,
    ULONG *pulStatus);
void __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_Receive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy(
    IAsyncRpcChannelBuffer* This,
    RPCOLEMESSAGE *pMsg,
    DWORD *pdwDestContext,
    void **ppvDestContext);
void __attribute__((__stdcall__)) IAsyncRpcChannelBuffer_GetDestCtxEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IRpcChannelBuffer3;

struct
IRpcChannelBuffer3 : public IRpcChannelBuffer2
{
    virtual HRESULT __attribute__((__stdcall__)) Send(
        RPCOLEMESSAGE *pMsg,
        ULONG *pulStatus) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Receive(
        RPCOLEMESSAGE *pMsg,
        ULONG ulSize,
        ULONG *pulStatus) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Cancel(
        RPCOLEMESSAGE *pMsg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetCallContext(
        RPCOLEMESSAGE *pMsg,
        const IID & riid,
        void **pInterface) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDestCtxEx(
        RPCOLEMESSAGE *pMsg,
        DWORD *pdwDestContext,
        void **ppvDestContext) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetState(
        RPCOLEMESSAGE *pMsg,
        DWORD *pState) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RegisterAsync(
        RPCOLEMESSAGE *pMsg,
        IAsyncManager *pAsyncMgr) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRpcChannelBuffer3>() { static const IID __uuid_inst = {0x25b15600,0x0115,0x11d0, {0xbf,0x0d,0x00,0xaa,0x00,0xb8,0xdf,0xd2}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRpcChannelBuffer3*>() { return __mingw_uuidof<IRpcChannelBuffer3>(); } }
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_Send_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    ULONG *pulStatus);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_Send_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_Receive_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    ULONG ulSize,
    ULONG *pulStatus);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_Receive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_Cancel_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_Cancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_GetCallContext_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    const IID & riid,
    void **pInterface);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_GetCallContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_GetDestCtxEx_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    DWORD *pdwDestContext,
    void **ppvDestContext);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_GetDestCtxEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_GetState_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    DWORD *pState);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_GetState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcChannelBuffer3_RegisterAsync_Proxy(
    IRpcChannelBuffer3* This,
    RPCOLEMESSAGE *pMsg,
    IAsyncManager *pAsyncMgr);
void __attribute__((__stdcall__)) IRpcChannelBuffer3_RegisterAsync_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IRpcSyntaxNegotiate;

struct
IRpcSyntaxNegotiate : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) NegotiateSyntax(
        RPCOLEMESSAGE *pMsg) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRpcSyntaxNegotiate>() { static const IID __uuid_inst = {0x58a08519,0x24c8,0x4935, {0xb4,0x82,0x3f,0xd8,0x23,0x33,0x3a,0x4f}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRpcSyntaxNegotiate*>() { return __mingw_uuidof<IRpcSyntaxNegotiate>(); } }
HRESULT __attribute__((__stdcall__)) IRpcSyntaxNegotiate_NegotiateSyntax_Proxy(
    IRpcSyntaxNegotiate* This,
    RPCOLEMESSAGE *pMsg);
void __attribute__((__stdcall__)) IRpcSyntaxNegotiate_NegotiateSyntax_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IRpcProxyBuffer;

struct
IRpcProxyBuffer : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Connect(
        IRpcChannelBuffer *pRpcChannelBuffer) = 0;

    virtual void __attribute__((__stdcall__)) Disconnect(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRpcProxyBuffer>() { static const IID __uuid_inst = {0xd5f56a34,0x593b,0x101a, {0xb5,0x69,0x08,0x00,0x2b,0x2d,0xbf,0x7a}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRpcProxyBuffer*>() { return __mingw_uuidof<IRpcProxyBuffer>(); } }
HRESULT __attribute__((__stdcall__)) IRpcProxyBuffer_Connect_Proxy(
    IRpcProxyBuffer* This,
    IRpcChannelBuffer *pRpcChannelBuffer);
void __attribute__((__stdcall__)) IRpcProxyBuffer_Connect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IRpcProxyBuffer_Disconnect_Proxy(
    IRpcProxyBuffer* This);
void __attribute__((__stdcall__)) IRpcProxyBuffer_Disconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IRpcStubBuffer;

struct
IRpcStubBuffer : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Connect(
        IUnknown *pUnkServer) = 0;

    virtual void __attribute__((__stdcall__)) Disconnect(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Invoke(
        RPCOLEMESSAGE *_prpcmsg,
        IRpcChannelBuffer *_pRpcChannelBuffer) = 0;

    virtual IRpcStubBuffer * __attribute__((__stdcall__)) IsIIDSupported(
        const IID & riid) = 0;

    virtual ULONG __attribute__((__stdcall__)) CountRefs(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DebugServerQueryInterface(
        void **ppv) = 0;

    virtual void __attribute__((__stdcall__)) DebugServerRelease(
        void *pv) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRpcStubBuffer>() { static const IID __uuid_inst = {0xd5f56afc,0x593b,0x101a, {0xb5,0x69,0x08,0x00,0x2b,0x2d,0xbf,0x7a}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRpcStubBuffer*>() { return __mingw_uuidof<IRpcStubBuffer>(); } }
HRESULT __attribute__((__stdcall__)) IRpcStubBuffer_Connect_Proxy(
    IRpcStubBuffer* This,
    IUnknown *pUnkServer);
void __attribute__((__stdcall__)) IRpcStubBuffer_Connect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IRpcStubBuffer_Disconnect_Proxy(
    IRpcStubBuffer* This);
void __attribute__((__stdcall__)) IRpcStubBuffer_Disconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcStubBuffer_Invoke_Proxy(
    IRpcStubBuffer* This,
    RPCOLEMESSAGE *_prpcmsg,
    IRpcChannelBuffer *_pRpcChannelBuffer);
void __attribute__((__stdcall__)) IRpcStubBuffer_Invoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
IRpcStubBuffer * __attribute__((__stdcall__)) IRpcStubBuffer_IsIIDSupported_Proxy(
    IRpcStubBuffer* This,
    const IID & riid);
void __attribute__((__stdcall__)) IRpcStubBuffer_IsIIDSupported_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) IRpcStubBuffer_CountRefs_Proxy(
    IRpcStubBuffer* This);
void __attribute__((__stdcall__)) IRpcStubBuffer_CountRefs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerQueryInterface_Proxy(
    IRpcStubBuffer* This,
    void **ppv);
void __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerQueryInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerRelease_Proxy(
    IRpcStubBuffer* This,
    void *pv);
void __attribute__((__stdcall__)) IRpcStubBuffer_DebugServerRelease_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IPSFactoryBuffer;

struct
IPSFactoryBuffer : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) CreateProxy(
        IUnknown *pUnkOuter,
        const IID & riid,
        IRpcProxyBuffer **ppProxy,
        void **ppv) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CreateStub(
        const IID & riid,
        IUnknown *pUnkServer,
        IRpcStubBuffer **ppStub) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPSFactoryBuffer>() { static const IID __uuid_inst = {0xd5f569d0,0x593b,0x101a, {0xb5,0x69,0x08,0x00,0x2b,0x2d,0xbf,0x7a}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPSFactoryBuffer*>() { return __mingw_uuidof<IPSFactoryBuffer>(); } }
HRESULT __attribute__((__stdcall__)) IPSFactoryBuffer_CreateProxy_Proxy(
    IPSFactoryBuffer* This,
    IUnknown *pUnkOuter,
    const IID & riid,
    IRpcProxyBuffer **ppProxy,
    void **ppv);
void __attribute__((__stdcall__)) IPSFactoryBuffer_CreateProxy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPSFactoryBuffer_CreateStub_Proxy(
    IPSFactoryBuffer* This,
    const IID & riid,
    IUnknown *pUnkServer,
    IRpcStubBuffer **ppStub);
void __attribute__((__stdcall__)) IPSFactoryBuffer_CreateStub_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);







typedef struct SChannelHookCallInfo {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
} SChannelHookCallInfo;







extern "C" const GUID IID_IChannelHook;

struct
IChannelHook : public IUnknown
{
    virtual void __attribute__((__stdcall__)) ClientGetSize(
        const GUID & uExtent,
        const IID & riid,
        ULONG *pDataSize) = 0;

    virtual void __attribute__((__stdcall__)) ClientFillBuffer(
        const GUID & uExtent,
        const IID & riid,
        ULONG *pDataSize,
        void *pDataBuffer) = 0;

    virtual void __attribute__((__stdcall__)) ClientNotify(
        const GUID & uExtent,
        const IID & riid,
        ULONG cbDataSize,
        void *pDataBuffer,
        DWORD lDataRep,
        HRESULT hrFault) = 0;

    virtual void __attribute__((__stdcall__)) ServerNotify(
        const GUID & uExtent,
        const IID & riid,
        ULONG cbDataSize,
        void *pDataBuffer,
        DWORD lDataRep) = 0;

    virtual void __attribute__((__stdcall__)) ServerGetSize(
        const GUID & uExtent,
        const IID & riid,
        HRESULT hrFault,
        ULONG *pDataSize) = 0;

    virtual void __attribute__((__stdcall__)) ServerFillBuffer(
        const GUID & uExtent,
        const IID & riid,
        ULONG *pDataSize,
        void *pDataBuffer,
        HRESULT hrFault) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IChannelHook>() { static const IID __uuid_inst = {0x1008c4a0,0x7613,0x11cf, {0x9a,0xf1,0x00,0x20,0xaf,0x6e,0x72,0xf4}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IChannelHook*>() { return __mingw_uuidof<IChannelHook>(); } }
void __attribute__((__stdcall__)) IChannelHook_ClientGetSize_Proxy(
    IChannelHook* This,
    const GUID & uExtent,
    const IID & riid,
    ULONG *pDataSize);
void __attribute__((__stdcall__)) IChannelHook_ClientGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IChannelHook_ClientFillBuffer_Proxy(
    IChannelHook* This,
    const GUID & uExtent,
    const IID & riid,
    ULONG *pDataSize,
    void *pDataBuffer);
void __attribute__((__stdcall__)) IChannelHook_ClientFillBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IChannelHook_ClientNotify_Proxy(
    IChannelHook* This,
    const GUID & uExtent,
    const IID & riid,
    ULONG cbDataSize,
    void *pDataBuffer,
    DWORD lDataRep,
    HRESULT hrFault);
void __attribute__((__stdcall__)) IChannelHook_ClientNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IChannelHook_ServerNotify_Proxy(
    IChannelHook* This,
    const GUID & uExtent,
    const IID & riid,
    ULONG cbDataSize,
    void *pDataBuffer,
    DWORD lDataRep);
void __attribute__((__stdcall__)) IChannelHook_ServerNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IChannelHook_ServerGetSize_Proxy(
    IChannelHook* This,
    const GUID & uExtent,
    const IID & riid,
    HRESULT hrFault,
    ULONG *pDataSize);
void __attribute__((__stdcall__)) IChannelHook_ServerGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IChannelHook_ServerFillBuffer_Proxy(
    IChannelHook* This,
    const GUID & uExtent,
    const IID & riid,
    ULONG *pDataSize,
    void *pDataBuffer,
    HRESULT hrFault);
void __attribute__((__stdcall__)) IChannelHook_ServerFillBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef struct tagSOLE_AUTHENTICATION_SERVICE {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
} SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES {
    EOAC_NONE = 0x0,
    EOAC_MUTUAL_AUTH = 0x1,
    EOAC_STATIC_CLOAKING = 0x20,
    EOAC_DYNAMIC_CLOAKING = 0x40,
    EOAC_ANY_AUTHORITY = 0x80,
    EOAC_MAKE_FULLSIC = 0x100,
    EOAC_DEFAULT = 0x800,
    EOAC_SECURE_REFS = 0x2,
    EOAC_ACCESS_CONTROL = 0x4,
    EOAC_APPID = 0x8,
    EOAC_DYNAMIC = 0x10,
    EOAC_REQUIRE_FULLSIC = 0x200,
    EOAC_AUTO_IMPERSONATE = 0x400,
    EOAC_NO_CUSTOM_MARSHAL = 0x2000,
    EOAC_DISABLE_AAA = 0x1000
} EOLE_AUTHENTICATION_CAPABILITIES;






typedef struct tagSOLE_AUTHENTICATION_INFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
} SOLE_AUTHENTICATION_INFO;
typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_LIST {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
} SOLE_AUTHENTICATION_LIST;
typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;

extern "C" const GUID IID_IClientSecurity;

struct
IClientSecurity : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) QueryBlanket(
        IUnknown *pProxy,
        DWORD *pAuthnSvc,
        DWORD *pAuthzSvc,
        OLECHAR **pServerPrincName,
        DWORD *pAuthnLevel,
        DWORD *pImpLevel,
        void **pAuthInfo,
        DWORD *pCapabilites) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetBlanket(
        IUnknown *pProxy,
        DWORD dwAuthnSvc,
        DWORD dwAuthzSvc,
        OLECHAR *pServerPrincName,
        DWORD dwAuthnLevel,
        DWORD dwImpLevel,
        void *pAuthInfo,
        DWORD dwCapabilities) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CopyProxy(
        IUnknown *pProxy,
        IUnknown **ppCopy) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IClientSecurity>() { static const IID __uuid_inst = {0x0000013d,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IClientSecurity*>() { return __mingw_uuidof<IClientSecurity>(); } }
HRESULT __attribute__((__stdcall__)) IClientSecurity_QueryBlanket_Proxy(
    IClientSecurity* This,
    IUnknown *pProxy,
    DWORD *pAuthnSvc,
    DWORD *pAuthzSvc,
    OLECHAR **pServerPrincName,
    DWORD *pAuthnLevel,
    DWORD *pImpLevel,
    void **pAuthInfo,
    DWORD *pCapabilites);
void __attribute__((__stdcall__)) IClientSecurity_QueryBlanket_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IClientSecurity_SetBlanket_Proxy(
    IClientSecurity* This,
    IUnknown *pProxy,
    DWORD dwAuthnSvc,
    DWORD dwAuthzSvc,
    OLECHAR *pServerPrincName,
    DWORD dwAuthnLevel,
    DWORD dwImpLevel,
    void *pAuthInfo,
    DWORD dwCapabilities);
void __attribute__((__stdcall__)) IClientSecurity_SetBlanket_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IClientSecurity_CopyProxy_Proxy(
    IClientSecurity* This,
    IUnknown *pProxy,
    IUnknown **ppCopy);
void __attribute__((__stdcall__)) IClientSecurity_CopyProxy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IServerSecurity;

struct
IServerSecurity : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) QueryBlanket(
        DWORD *pAuthnSvc,
        DWORD *pAuthzSvc,
        OLECHAR **pServerPrincName,
        DWORD *pAuthnLevel,
        DWORD *pImpLevel,
        void **pPrivs,
        DWORD *pCapabilities) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ImpersonateClient(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RevertToSelf(
        ) = 0;

    virtual WINBOOL __attribute__((__stdcall__)) IsImpersonating(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IServerSecurity>() { static const IID __uuid_inst = {0x0000013e,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IServerSecurity*>() { return __mingw_uuidof<IServerSecurity>(); } }
HRESULT __attribute__((__stdcall__)) IServerSecurity_QueryBlanket_Proxy(
    IServerSecurity* This,
    DWORD *pAuthnSvc,
    DWORD *pAuthzSvc,
    OLECHAR **pServerPrincName,
    DWORD *pAuthnLevel,
    DWORD *pImpLevel,
    void **pPrivs,
    DWORD *pCapabilities);
void __attribute__((__stdcall__)) IServerSecurity_QueryBlanket_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IServerSecurity_ImpersonateClient_Proxy(
    IServerSecurity* This);
void __attribute__((__stdcall__)) IServerSecurity_ImpersonateClient_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IServerSecurity_RevertToSelf_Proxy(
    IServerSecurity* This);
void __attribute__((__stdcall__)) IServerSecurity_RevertToSelf_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
WINBOOL __attribute__((__stdcall__)) IServerSecurity_IsImpersonating_Proxy(
    IServerSecurity* This);
void __attribute__((__stdcall__)) IServerSecurity_IsImpersonating_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);




typedef enum tagRPCOPT_PROPERTIES {
    COMBND_RPCTIMEOUT = 0x1,
    COMBND_SERVER_LOCALITY = 0x2,
    COMBND_RESERVED1 = 0x4
} RPCOPT_PROPERTIES;

typedef enum tagRPCOPT_SERVER_LOCALITY_VALUES {
    SERVER_LOCALITY_PROCESS_LOCAL = 0,
    SERVER_LOCALITY_MACHINE_LOCAL = 1,
    SERVER_LOCALITY_REMOTE = 2
} RPCOPT_SERVER_LOCALITY_VALUES;







extern "C" const GUID IID_IRpcOptions;

struct
IRpcOptions : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Set(
        IUnknown *pPrx,
        RPCOPT_PROPERTIES dwProperty,
        ULONG_PTR dwValue) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Query(
        IUnknown *pPrx,
        RPCOPT_PROPERTIES dwProperty,
        ULONG_PTR *pdwValue) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRpcOptions>() { static const IID __uuid_inst = {0x00000144,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRpcOptions*>() { return __mingw_uuidof<IRpcOptions>(); } }
HRESULT __attribute__((__stdcall__)) IRpcOptions_Set_Proxy(
    IRpcOptions* This,
    IUnknown *pPrx,
    RPCOPT_PROPERTIES dwProperty,
    ULONG_PTR dwValue);
void __attribute__((__stdcall__)) IRpcOptions_Set_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcOptions_Query_Proxy(
    IRpcOptions* This,
    IUnknown *pPrx,
    RPCOPT_PROPERTIES dwProperty,
    ULONG_PTR *pdwValue);
void __attribute__((__stdcall__)) IRpcOptions_Query_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






typedef enum tagGLOBALOPT_PROPERTIES {
    COMGLB_EXCEPTION_HANDLING = 1,
    COMGLB_APPID = 2,
    COMGLB_RPC_THREADPOOL_SETTING = 3,
    COMGLB_RO_SETTINGS = 4,
    COMGLB_UNMARSHALING_POLICY = 5
} GLOBALOPT_PROPERTIES;

typedef enum tagGLOBALOPT_EH_VALUES {
    COMGLB_EXCEPTION_HANDLE = 0,
    COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
    COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
    COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
} GLOBALOPT_EH_VALUES;

typedef enum tagGLOBALOPT_RPCTP_VALUES {
    COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
    COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
} GLOBALOPT_RPCTP_VALUES;

typedef enum tagGLOBALOPT_RO_FLAGS {
    COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
    COMGLB_FAST_RUNDOWN = 0x8,
    COMGLB_RESERVED1 = 0x10,
    COMGLB_RESERVED2 = 0x20,
    COMGLB_RESERVED3 = 0x40,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80
} GLOBALOPT_RO_FLAGS;

typedef enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES {
    COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
    COMGLB_UNMARSHALING_POLICY_STRONG = 1,
    COMGLB_UNMARSHALING_POLICY_HYBRID = 2
} GLOBALOPT_UNMARSHALING_POLICY_VALUES;







extern "C" const GUID IID_IGlobalOptions;

struct
IGlobalOptions : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Set(
        GLOBALOPT_PROPERTIES dwProperty,
        ULONG_PTR dwValue) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Query(
        GLOBALOPT_PROPERTIES dwProperty,
        ULONG_PTR *pdwValue) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IGlobalOptions>() { static const IID __uuid_inst = {0x0000015b,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IGlobalOptions*>() { return __mingw_uuidof<IGlobalOptions>(); } }
HRESULT __attribute__((__stdcall__)) IGlobalOptions_Set_Proxy(
    IGlobalOptions* This,
    GLOBALOPT_PROPERTIES dwProperty,
    ULONG_PTR dwValue);
void __attribute__((__stdcall__)) IGlobalOptions_Set_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IGlobalOptions_Query_Proxy(
    IGlobalOptions* This,
    GLOBALOPT_PROPERTIES dwProperty,
    ULONG_PTR *pdwValue);
void __attribute__((__stdcall__)) IGlobalOptions_Query_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ISurrogate *LPSURROGATE;

extern "C" const GUID IID_ISurrogate;

struct
ISurrogate : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) LoadDllServer(
        const IID & Clsid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) FreeSurrogate(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ISurrogate>() { static const IID __uuid_inst = {0x00000022,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ISurrogate*>() { return __mingw_uuidof<ISurrogate>(); } }
HRESULT __attribute__((__stdcall__)) ISurrogate_LoadDllServer_Proxy(
    ISurrogate* This,
    const IID & Clsid);
void __attribute__((__stdcall__)) ISurrogate_LoadDllServer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISurrogate_FreeSurrogate_Proxy(
    ISurrogate* This);
void __attribute__((__stdcall__)) ISurrogate_FreeSurrogate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;

extern "C" const GUID IID_IGlobalInterfaceTable;

struct
IGlobalInterfaceTable : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) RegisterInterfaceInGlobal(
        IUnknown *pUnk,
        const IID & riid,
        DWORD *pdwCookie) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RevokeInterfaceFromGlobal(
        DWORD dwCookie) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetInterfaceFromGlobal(
        DWORD dwCookie,
        const IID & riid,
        void **ppv) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IGlobalInterfaceTable>() { static const IID __uuid_inst = {0x00000146,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IGlobalInterfaceTable*>() { return __mingw_uuidof<IGlobalInterfaceTable>(); } }
HRESULT __attribute__((__stdcall__)) IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy(
    IGlobalInterfaceTable* This,
    IUnknown *pUnk,
    const IID & riid,
    DWORD *pdwCookie);
void __attribute__((__stdcall__)) IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy(
    IGlobalInterfaceTable* This,
    DWORD dwCookie);
void __attribute__((__stdcall__)) IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy(
    IGlobalInterfaceTable* This,
    DWORD dwCookie,
    const IID & riid,
    void **ppv);
void __attribute__((__stdcall__)) IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_ISynchronize;

struct
ISynchronize : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Wait(
        DWORD dwFlags,
        DWORD dwMilliseconds) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Signal(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ISynchronize>() { static const IID __uuid_inst = {0x00000030,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ISynchronize*>() { return __mingw_uuidof<ISynchronize>(); } }
HRESULT __attribute__((__stdcall__)) ISynchronize_Wait_Proxy(
    ISynchronize* This,
    DWORD dwFlags,
    DWORD dwMilliseconds);
void __attribute__((__stdcall__)) ISynchronize_Wait_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISynchronize_Signal_Proxy(
    ISynchronize* This);
void __attribute__((__stdcall__)) ISynchronize_Signal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISynchronize_Reset_Proxy(
    ISynchronize* This);
void __attribute__((__stdcall__)) ISynchronize_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_ISynchronizeHandle;

struct
ISynchronizeHandle : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetHandle(
        HANDLE *ph) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ISynchronizeHandle>() { static const IID __uuid_inst = {0x00000031,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ISynchronizeHandle*>() { return __mingw_uuidof<ISynchronizeHandle>(); } }
HRESULT __attribute__((__stdcall__)) ISynchronizeHandle_GetHandle_Proxy(
    ISynchronizeHandle* This,
    HANDLE *ph);
void __attribute__((__stdcall__)) ISynchronizeHandle_GetHandle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_ISynchronizeEvent;

struct
ISynchronizeEvent : public ISynchronizeHandle
{
    virtual HRESULT __attribute__((__stdcall__)) SetEventHandle(
        HANDLE *ph) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ISynchronizeEvent>() { static const IID __uuid_inst = {0x00000032,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ISynchronizeEvent*>() { return __mingw_uuidof<ISynchronizeEvent>(); } }
HRESULT __attribute__((__stdcall__)) ISynchronizeEvent_SetEventHandle_Proxy(
    ISynchronizeEvent* This,
    HANDLE *ph);
void __attribute__((__stdcall__)) ISynchronizeEvent_SetEventHandle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_ISynchronizeContainer;

struct
ISynchronizeContainer : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) AddSynchronize(
        ISynchronize *pSync) = 0;

    virtual HRESULT __attribute__((__stdcall__)) WaitMultiple(
        DWORD dwFlags,
        DWORD dwTimeOut,
        ISynchronize **ppSync) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ISynchronizeContainer>() { static const IID __uuid_inst = {0x00000033,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ISynchronizeContainer*>() { return __mingw_uuidof<ISynchronizeContainer>(); } }
HRESULT __attribute__((__stdcall__)) ISynchronizeContainer_AddSynchronize_Proxy(
    ISynchronizeContainer* This,
    ISynchronize *pSync);
void __attribute__((__stdcall__)) ISynchronizeContainer_AddSynchronize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISynchronizeContainer_WaitMultiple_Proxy(
    ISynchronizeContainer* This,
    DWORD dwFlags,
    DWORD dwTimeOut,
    ISynchronize **ppSync);
void __attribute__((__stdcall__)) ISynchronizeContainer_WaitMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_ISynchronizeMutex;

struct
ISynchronizeMutex : public ISynchronize
{
    virtual HRESULT __attribute__((__stdcall__)) ReleaseMutex(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ISynchronizeMutex>() { static const IID __uuid_inst = {0x00000025,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ISynchronizeMutex*>() { return __mingw_uuidof<ISynchronizeMutex>(); } }
HRESULT __attribute__((__stdcall__)) ISynchronizeMutex_ReleaseMutex_Proxy(
    ISynchronizeMutex* This);
void __attribute__((__stdcall__)) ISynchronizeMutex_ReleaseMutex_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;

extern "C" const GUID IID_ICancelMethodCalls;

struct
ICancelMethodCalls : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Cancel(
        ULONG ulSeconds) = 0;

    virtual HRESULT __attribute__((__stdcall__)) TestCancel(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ICancelMethodCalls>() { static const IID __uuid_inst = {0x00000029,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ICancelMethodCalls*>() { return __mingw_uuidof<ICancelMethodCalls>(); } }
HRESULT __attribute__((__stdcall__)) ICancelMethodCalls_Cancel_Proxy(
    ICancelMethodCalls* This,
    ULONG ulSeconds);
void __attribute__((__stdcall__)) ICancelMethodCalls_Cancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICancelMethodCalls_TestCancel_Proxy(
    ICancelMethodCalls* This);
void __attribute__((__stdcall__)) ICancelMethodCalls_TestCancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef enum tagDCOM_CALL_STATE {
    DCOM_NONE = 0x0,
    DCOM_CALL_COMPLETE = 0x1,
    DCOM_CALL_CANCELED = 0x2
} DCOM_CALL_STATE;

extern "C" const GUID IID_IAsyncManager;

struct
IAsyncManager : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) CompleteCall(
        HRESULT Result) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetCallContext(
        const IID & riid,
        void **pInterface) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetState(
        ULONG *pulStateFlags) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IAsyncManager>() { static const IID __uuid_inst = {0x0000002a,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IAsyncManager*>() { return __mingw_uuidof<IAsyncManager>(); } }
HRESULT __attribute__((__stdcall__)) IAsyncManager_CompleteCall_Proxy(
    IAsyncManager* This,
    HRESULT Result);
void __attribute__((__stdcall__)) IAsyncManager_CompleteCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAsyncManager_GetCallContext_Proxy(
    IAsyncManager* This,
    const IID & riid,
    void **pInterface);
void __attribute__((__stdcall__)) IAsyncManager_GetCallContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAsyncManager_GetState_Proxy(
    IAsyncManager* This,
    ULONG *pulStateFlags);
void __attribute__((__stdcall__)) IAsyncManager_GetState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_ICallFactory;

struct
ICallFactory : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) CreateCall(
        const IID & riid,
        IUnknown *pCtrlUnk,
        const IID & riid2,
        IUnknown **ppv) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ICallFactory>() { static const IID __uuid_inst = {0x1c733a30,0x2a1c,0x11ce, {0xad,0xe5,0x00,0xaa,0x00,0x44,0x77,0x3d}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ICallFactory*>() { return __mingw_uuidof<ICallFactory>(); } }
HRESULT __attribute__((__stdcall__)) ICallFactory_CreateCall_Proxy(
    ICallFactory* This,
    const IID & riid,
    IUnknown *pCtrlUnk,
    const IID & riid2,
    IUnknown **ppv);
void __attribute__((__stdcall__)) ICallFactory_CreateCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IRpcHelper;

struct
IRpcHelper : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetDCOMProtocolVersion(
        DWORD *pComVersion) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetIIDFromOBJREF(
        void *pObjRef,
        IID **piid) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRpcHelper>() { static const IID __uuid_inst = {0x00000149,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRpcHelper*>() { return __mingw_uuidof<IRpcHelper>(); } }
HRESULT __attribute__((__stdcall__)) IRpcHelper_GetDCOMProtocolVersion_Proxy(
    IRpcHelper* This,
    DWORD *pComVersion);
void __attribute__((__stdcall__)) IRpcHelper_GetDCOMProtocolVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRpcHelper_GetIIDFromOBJREF_Proxy(
    IRpcHelper* This,
    void *pObjRef,
    IID **piid);
void __attribute__((__stdcall__)) IRpcHelper_GetIIDFromOBJREF_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IReleaseMarshalBuffers;

struct
IReleaseMarshalBuffers : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) ReleaseMarshalBuffer(
        RPCOLEMESSAGE *pMsg,
        DWORD dwFlags,
        IUnknown *pChnl) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IReleaseMarshalBuffers>() { static const IID __uuid_inst = {0xeb0cb9e8,0x7996,0x11d2, {0x87,0x2e,0x00,0x00,0xf8,0x08,0x08,0x59}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IReleaseMarshalBuffers*>() { return __mingw_uuidof<IReleaseMarshalBuffers>(); } }
HRESULT __attribute__((__stdcall__)) IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy(
    IReleaseMarshalBuffers* This,
    RPCOLEMESSAGE *pMsg,
    DWORD dwFlags,
    IUnknown *pChnl);
void __attribute__((__stdcall__)) IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IWaitMultiple;

struct
IWaitMultiple : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) WaitMultiple(
        DWORD timeout,
        ISynchronize **pSync) = 0;

    virtual HRESULT __attribute__((__stdcall__)) AddSynchronize(
        ISynchronize *pSync) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IWaitMultiple>() { static const IID __uuid_inst = {0x0000002b,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IWaitMultiple*>() { return __mingw_uuidof<IWaitMultiple>(); } }
HRESULT __attribute__((__stdcall__)) IWaitMultiple_WaitMultiple_Proxy(
    IWaitMultiple* This,
    DWORD timeout,
    ISynchronize **pSync);
void __attribute__((__stdcall__)) IWaitMultiple_WaitMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IWaitMultiple_AddSynchronize_Proxy(
    IWaitMultiple* This,
    ISynchronize *pSync);
void __attribute__((__stdcall__)) IWaitMultiple_AddSynchronize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;
extern "C" const GUID IID_IAddrTrackingControl;

struct
IAddrTrackingControl : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) EnableCOMDynamicAddrTracking(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DisableCOMDynamicAddrTracking(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IAddrTrackingControl>() { static const IID __uuid_inst = {0x00000147,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IAddrTrackingControl*>() { return __mingw_uuidof<IAddrTrackingControl>(); } }
HRESULT __attribute__((__stdcall__)) IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy(
    IAddrTrackingControl* This);
void __attribute__((__stdcall__)) IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy(
    IAddrTrackingControl* This);
void __attribute__((__stdcall__)) IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;
extern "C" const GUID IID_IAddrExclusionControl;

struct
IAddrExclusionControl : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetCurrentAddrExclusionList(
        const IID & riid,
        void **ppEnumerator) = 0;

    virtual HRESULT __attribute__((__stdcall__)) UpdateAddrExclusionList(
        IUnknown *pEnumerator) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IAddrExclusionControl>() { static const IID __uuid_inst = {0x00000148,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IAddrExclusionControl*>() { return __mingw_uuidof<IAddrExclusionControl>(); } }
HRESULT __attribute__((__stdcall__)) IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy(
    IAddrExclusionControl* This,
    const IID & riid,
    void **ppEnumerator);
void __attribute__((__stdcall__)) IAddrExclusionControl_GetCurrentAddrExclusionList_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAddrExclusionControl_UpdateAddrExclusionList_Proxy(
    IAddrExclusionControl* This,
    IUnknown *pEnumerator);
void __attribute__((__stdcall__)) IAddrExclusionControl_UpdateAddrExclusionList_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IPipeByte;

struct
IPipeByte : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Pull(
        BYTE *buf,
        ULONG cRequest,
        ULONG *pcReturned) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Push(
        BYTE *buf,
        ULONG cSent) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPipeByte>() { static const IID __uuid_inst = {0xdb2f3aca,0x2f86,0x11d1, {0x8e,0x04,0x00,0xc0,0x4f,0xb9,0x98,0x9a}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPipeByte*>() { return __mingw_uuidof<IPipeByte>(); } }
HRESULT __attribute__((__stdcall__)) IPipeByte_Pull_Proxy(
    IPipeByte* This,
    BYTE *buf,
    ULONG cRequest,
    ULONG *pcReturned);
void __attribute__((__stdcall__)) IPipeByte_Pull_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPipeByte_Push_Proxy(
    IPipeByte* This,
    BYTE *buf,
    ULONG cSent);
void __attribute__((__stdcall__)) IPipeByte_Push_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IPipeLong;

struct
IPipeLong : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Pull(
        LONG *buf,
        ULONG cRequest,
        ULONG *pcReturned) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Push(
        LONG *buf,
        ULONG cSent) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPipeLong>() { static const IID __uuid_inst = {0xdb2f3acc,0x2f86,0x11d1, {0x8e,0x04,0x00,0xc0,0x4f,0xb9,0x98,0x9a}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPipeLong*>() { return __mingw_uuidof<IPipeLong>(); } }
HRESULT __attribute__((__stdcall__)) IPipeLong_Pull_Proxy(
    IPipeLong* This,
    LONG *buf,
    ULONG cRequest,
    ULONG *pcReturned);
void __attribute__((__stdcall__)) IPipeLong_Pull_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPipeLong_Push_Proxy(
    IPipeLong* This,
    LONG *buf,
    ULONG cSent);
void __attribute__((__stdcall__)) IPipeLong_Push_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IPipeDouble;

struct
IPipeDouble : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Pull(
        DOUBLE *buf,
        ULONG cRequest,
        ULONG *pcReturned) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Push(
        DOUBLE *buf,
        ULONG cSent) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPipeDouble>() { static const IID __uuid_inst = {0xdb2f3ace,0x2f86,0x11d1, {0x8e,0x04,0x00,0xc0,0x4f,0xb9,0x98,0x9a}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPipeDouble*>() { return __mingw_uuidof<IPipeDouble>(); } }
HRESULT __attribute__((__stdcall__)) IPipeDouble_Pull_Proxy(
    IPipeDouble* This,
    DOUBLE *buf,
    ULONG cRequest,
    ULONG *pcReturned);
void __attribute__((__stdcall__)) IPipeDouble_Pull_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPipeDouble_Push_Proxy(
    IPipeDouble* This,
    DOUBLE *buf,
    ULONG cSent);
void __attribute__((__stdcall__)) IPipeDouble_Push_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef enum _APTTYPEQUALIFIER {
    APTTYPEQUALIFIER_NONE = 0,
    APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
    APTTYPEQUALIFIER_NA_ON_MTA = 2,
    APTTYPEQUALIFIER_NA_ON_STA = 3,
    APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
    APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
    APTTYPEQUALIFIER_APPLICATION_STA = 6
} APTTYPEQUALIFIER;

typedef enum _APTTYPE {
    APTTYPE_CURRENT = -1,
    APTTYPE_STA = 0,
    APTTYPE_MTA = 1,
    APTTYPE_NA = 2,
    APTTYPE_MAINSTA = 3
} APTTYPE;



typedef enum _THDTYPE {
    THDTYPE_BLOCKMESSAGES = 0,
    THDTYPE_PROCESSMESSAGES = 1
} THDTYPE;

typedef DWORD APARTMENTID;







extern "C" const GUID IID_IComThreadingInfo;

struct
IComThreadingInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetCurrentApartmentType(
        APTTYPE *pAptType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetCurrentThreadType(
        THDTYPE *pThreadType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetCurrentLogicalThreadId(
        GUID *pguidLogicalThreadId) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetCurrentLogicalThreadId(
        const GUID & rguid) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IComThreadingInfo>() { static const IID __uuid_inst = {0x000001ce,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IComThreadingInfo*>() { return __mingw_uuidof<IComThreadingInfo>(); } }
HRESULT __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentApartmentType_Proxy(
    IComThreadingInfo* This,
    APTTYPE *pAptType);
void __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentApartmentType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentThreadType_Proxy(
    IComThreadingInfo* This,
    THDTYPE *pThreadType);
void __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentThreadType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentLogicalThreadId_Proxy(
    IComThreadingInfo* This,
    GUID *pguidLogicalThreadId);
void __attribute__((__stdcall__)) IComThreadingInfo_GetCurrentLogicalThreadId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IComThreadingInfo_SetCurrentLogicalThreadId_Proxy(
    IComThreadingInfo* This,
    const GUID & rguid);
void __attribute__((__stdcall__)) IComThreadingInfo_SetCurrentLogicalThreadId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IProcessInitControl;

struct
IProcessInitControl : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) ResetInitializerTimeout(
        DWORD dwSecondsRemaining) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IProcessInitControl>() { static const IID __uuid_inst = {0x72380d55,0x8d2b,0x43a3, {0x85,0x13,0x2b,0x6e,0xf3,0x14,0x34,0xe9}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IProcessInitControl*>() { return __mingw_uuidof<IProcessInitControl>(); } }
HRESULT __attribute__((__stdcall__)) IProcessInitControl_ResetInitializerTimeout_Proxy(
    IProcessInitControl* This,
    DWORD dwSecondsRemaining);
void __attribute__((__stdcall__)) IProcessInitControl_ResetInitializerTimeout_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IFastRundown;

struct
IFastRundown : public IUnknown
{
};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IFastRundown>() { static const IID __uuid_inst = {0x00000040,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IFastRundown*>() { return __mingw_uuidof<IFastRundown>(); } }
typedef enum CO_MARSHALING_CONTEXT_ATTRIBUTES {
    CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0
} CO_MARSHALING_CONTEXT_ATTRIBUTES;







extern "C" const GUID IID_IMarshalingStream;

struct
IMarshalingStream : public IStream
{
    virtual HRESULT __attribute__((__stdcall__)) GetMarshalingContextAttribute(
        CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,
        ULONG_PTR *pAttributeValue) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IMarshalingStream>() { static const IID __uuid_inst = {0xd8f2f5e6,0x6102,0x4863, {0x9f,0x26,0x38,0x9a,0x46,0x76,0xef,0xde}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IMarshalingStream*>() { return __mingw_uuidof<IMarshalingStream>(); } }
HRESULT __attribute__((__stdcall__)) IMarshalingStream_GetMarshalingContextAttribute_Proxy(
    IMarshalingStream* This,
    CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,
    ULONG_PTR *pAttributeValue);
void __attribute__((__stdcall__)) IMarshalingStream_GetMarshalingContextAttribute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






extern "C" const GUID IID_ICallbackWithNoReentrancyToApplicationSTA;
}
extern "C++" {
__extension__ template<typename T> const GUID &__mingw_uuidof();
}
extern "C" {


  extern const IID GUID_NULL;
  extern const IID CATID_MARSHALER;
  extern const IID IID_IRpcChannel;
  extern const IID IID_IRpcStub;
  extern const IID IID_IStubManager;
  extern const IID IID_IRpcProxy;
  extern const IID IID_IProxyManager;
  extern const IID IID_IPSFactory;
  extern const IID IID_IInternalMoniker;
  extern const IID IID_IDfReserved1;
  extern const IID IID_IDfReserved2;
  extern const IID IID_IDfReserved3;
  extern const CLSID CLSID_StdMarshal;
  extern const CLSID CLSID_AggStdMarshal;
  extern const CLSID CLSID_StdAsyncActManager;
  extern const IID IID_IStub;
  extern const IID IID_IProxy;
  extern const IID IID_IEnumGeneric;
  extern const IID IID_IEnumHolder;
  extern const IID IID_IEnumCallback;
  extern const IID IID_IOleManager;
  extern const IID IID_IOlePresObj;
  extern const IID IID_IDebug;
  extern const IID IID_IDebugStream;
  extern const CLSID CLSID_PSGenObject;
  extern const CLSID CLSID_PSClientSite;
  extern const CLSID CLSID_PSClassObject;
  extern const CLSID CLSID_PSInPlaceActive;
  extern const CLSID CLSID_PSInPlaceFrame;
  extern const CLSID CLSID_PSDragDrop;
  extern const CLSID CLSID_PSBindCtx;
  extern const CLSID CLSID_PSEnumerators;
  extern const CLSID CLSID_StaticMetafile;
  extern const CLSID CLSID_StaticDib;
  extern const CLSID CID_CDfsVolume;
  extern const CLSID CLSID_DCOMAccessControl;
  extern const CLSID CLSID_StdGlobalInterfaceTable;
  extern const CLSID CLSID_ComBinding;
  extern const CLSID CLSID_StdEvent;
  extern const CLSID CLSID_ManualResetEvent;
  extern const CLSID CLSID_SynchronizeContainer;
  extern const CLSID CLSID_AddrControl;
  extern const CLSID CLSID_CCDFormKrnl;
  extern const CLSID CLSID_CCDPropertyPage;
  extern const CLSID CLSID_CCDFormDialog;
  extern const CLSID CLSID_CCDCommandButton;
  extern const CLSID CLSID_CCDComboBox;
  extern const CLSID CLSID_CCDTextBox;
  extern const CLSID CLSID_CCDCheckBox;
  extern const CLSID CLSID_CCDLabel;
  extern const CLSID CLSID_CCDOptionButton;
  extern const CLSID CLSID_CCDListBox;
  extern const CLSID CLSID_CCDScrollBar;
  extern const CLSID CLSID_CCDGroupBox;
  extern const CLSID CLSID_CCDGeneralPropertyPage;
  extern const CLSID CLSID_CCDGenericPropertyPage;
  extern const CLSID CLSID_CCDFontPropertyPage;
  extern const CLSID CLSID_CCDColorPropertyPage;
  extern const CLSID CLSID_CCDLabelPropertyPage;
  extern const CLSID CLSID_CCDCheckBoxPropertyPage;
  extern const CLSID CLSID_CCDTextBoxPropertyPage;
  extern const CLSID CLSID_CCDOptionButtonPropertyPage;
  extern const CLSID CLSID_CCDListBoxPropertyPage;
  extern const CLSID CLSID_CCDCommandButtonPropertyPage;
  extern const CLSID CLSID_CCDComboBoxPropertyPage;
  extern const CLSID CLSID_CCDScrollBarPropertyPage;
  extern const CLSID CLSID_CCDGroupBoxPropertyPage;
  extern const CLSID CLSID_CCDXObjectPropertyPage;
  extern const CLSID CLSID_CStdPropertyFrame;
  extern const CLSID CLSID_CFormPropertyPage;
  extern const CLSID CLSID_CGridPropertyPage;
  extern const CLSID CLSID_CWSJArticlePage;
  extern const CLSID CLSID_CSystemPage;
  extern const CLSID CLSID_IdentityUnmarshal;
  extern const CLSID CLSID_InProcFreeMarshaler;
  extern const CLSID CLSID_Picture_Metafile;
  extern const CLSID CLSID_Picture_EnhMetafile;
  extern const CLSID CLSID_Picture_Dib;
  extern const GUID GUID_TRISTATE;


}
extern "C" HRESULT __attribute__((__stdcall__)) CreateStreamOnHGlobal (HGLOBAL hGlobal, WINBOOL fDeleteOnRelease, LPSTREAM *ppstm);
extern "C" HRESULT __attribute__((__stdcall__)) GetHGlobalFromStream (LPSTREAM pstm, HGLOBAL *phglobal);
extern "C" void __attribute__((__stdcall__)) CoUninitialize (void);
extern "C" HRESULT __attribute__((__stdcall__)) CoInitializeEx (LPVOID pvReserved, DWORD dwCoInit);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetCurrentLogicalThreadId (GUID *pguid);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetContextToken (ULONG_PTR *pToken);



extern "C" HRESULT __attribute__((__stdcall__)) CoGetObjectContext (const IID & riid, LPVOID *ppv);
extern "C" HRESULT __attribute__((__stdcall__)) CoRegisterClassObject (const IID & rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister);
extern "C" HRESULT __attribute__((__stdcall__)) CoRevokeClassObject (DWORD dwRegister);
extern "C" HRESULT __attribute__((__stdcall__)) CoResumeClassObjects (void);
extern "C" HRESULT __attribute__((__stdcall__)) CoSuspendClassObjects (void);



extern "C" HRESULT __attribute__((__stdcall__)) CoGetMalloc (DWORD dwMemContext, LPMALLOC *ppMalloc);
extern "C" DWORD __attribute__((__stdcall__)) CoGetCurrentProcess (void);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetCallerTID (LPDWORD lpdwTID);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetDefaultContext (APTTYPE aptType, const IID & riid, void **ppv);







extern "C" HRESULT __attribute__((__stdcall__)) CoGetClassObject (const IID & rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID & riid, LPVOID *ppv);
extern "C" ULONG __attribute__((__stdcall__)) CoAddRefServerProcess (void);
extern "C" ULONG __attribute__((__stdcall__)) CoReleaseServerProcess (void);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetPSClsid (const IID & riid, CLSID *pClsid);
extern "C" HRESULT __attribute__((__stdcall__)) CoRegisterPSClsid (const IID & riid, const IID & rclsid);
extern "C" HRESULT __attribute__((__stdcall__)) CoRegisterSurrogate (LPSURROGATE pSurrogate);
extern "C" HRESULT __attribute__((__stdcall__)) CoMarshalHresult (LPSTREAM pstm, HRESULT hresult);
extern "C" HRESULT __attribute__((__stdcall__)) CoUnmarshalHresult (LPSTREAM pstm, HRESULT *phresult);
extern "C" HRESULT __attribute__((__stdcall__)) CoLockObjectExternal (LPUNKNOWN pUnk, WINBOOL fLock, WINBOOL fLastUnlockReleases);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetStdMarshalEx (LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner);



typedef enum tagSTDMSHLFLAGS {
  SMEXF_SERVER = 0x01,
  SMEXF_HANDLER = 0x02
} STDMSHLFLAGS;

extern "C" HRESULT __attribute__((__stdcall__)) CoGetMarshalSizeMax (ULONG *pulSize, const IID & riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern "C" HRESULT __attribute__((__stdcall__)) CoMarshalInterface (LPSTREAM pStm, const IID & riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern "C" HRESULT __attribute__((__stdcall__)) CoUnmarshalInterface (LPSTREAM pStm, const IID & riid, LPVOID *ppv);
extern "C" HRESULT __attribute__((__stdcall__)) CoReleaseMarshalData (LPSTREAM pStm);
extern "C" HRESULT __attribute__((__stdcall__)) CoDisconnectObject (LPUNKNOWN pUnk, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetStandardMarshal (const IID & riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal);
extern "C" HRESULT __attribute__((__stdcall__)) CoMarshalInterThreadInterfaceInStream (const IID & riid, LPUNKNOWN pUnk, LPSTREAM *ppStm);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetInterfaceAndReleaseStream (LPSTREAM pStm, const IID & iid, LPVOID *ppv);
extern "C" HRESULT __attribute__((__stdcall__)) CoCreateFreeThreadedMarshaler (LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal);
extern "C" void __attribute__((__stdcall__)) CoFreeUnusedLibraries (void);
extern "C" void __attribute__((__stdcall__)) CoFreeUnusedLibrariesEx (DWORD dwUnloadDelay, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) CoInitializeSecurity (PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3);
extern "C" HRESULT __attribute__((__stdcall__)) CoSwitchCallContext (IUnknown *pNewObject, IUnknown **ppOldObject);







extern "C" HRESULT __attribute__((__stdcall__)) CoCreateInstanceFromApp (const IID & Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults);




extern "C" WINBOOL __attribute__((__stdcall__)) CoIsHandlerConnected (LPUNKNOWN pUnk);



extern "C" HRESULT __attribute__((__stdcall__)) CoGetCallContext (const IID & riid, void **ppInterface);
extern "C" HRESULT __attribute__((__stdcall__)) CoQueryProxyBlanket (IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites);
extern "C" HRESULT __attribute__((__stdcall__)) CoSetProxyBlanket (IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities);
extern "C" HRESULT __attribute__((__stdcall__)) CoCopyProxy (IUnknown *pProxy, IUnknown **ppCopy);
extern "C" HRESULT __attribute__((__stdcall__)) CoQueryClientBlanket (DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities);
extern "C" HRESULT __attribute__((__stdcall__)) CoImpersonateClient (void);
extern "C" HRESULT __attribute__((__stdcall__)) CoRevertToSelf (void);
extern "C" HRESULT __attribute__((__stdcall__)) CoQueryAuthenticationServices (DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc);
extern "C" HRESULT __attribute__((__stdcall__)) CoCreateInstance (const IID & rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID & riid, LPVOID *ppv);
extern "C" HRESULT __attribute__((__stdcall__)) CoCreateInstanceEx (const IID & Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetCancelObject (DWORD dwThreadId, const IID & iid, void **ppUnk);
extern "C" HRESULT __attribute__((__stdcall__)) CoSetCancelObject (IUnknown *pUnk);
extern "C" HRESULT __attribute__((__stdcall__)) CoCancelCall (DWORD dwThreadId, ULONG ulTimeout);
extern "C" HRESULT __attribute__((__stdcall__)) CoTestCancel (void);
extern "C" HRESULT __attribute__((__stdcall__)) CoEnableCallCancellation (LPVOID pReserved);
extern "C" HRESULT __attribute__((__stdcall__)) CoDisableCallCancellation (LPVOID pReserved);



extern "C" HRESULT __attribute__((__stdcall__)) StringFromCLSID (const IID & rclsid, LPOLESTR *lplpsz);
extern "C" HRESULT __attribute__((__stdcall__)) CLSIDFromString (LPCOLESTR lpsz, LPCLSID pclsid);
extern "C" HRESULT __attribute__((__stdcall__)) StringFromIID (const IID & rclsid, LPOLESTR *lplpsz);
extern "C" HRESULT __attribute__((__stdcall__)) IIDFromString (LPCOLESTR lpsz, LPIID lpiid);



extern "C" HRESULT __attribute__((__stdcall__)) ProgIDFromCLSID (const IID & clsid, LPOLESTR *lplpszProgID);
extern "C" HRESULT __attribute__((__stdcall__)) CLSIDFromProgID (LPCOLESTR lpszProgID, LPCLSID lpclsid);



extern "C" int __attribute__((__stdcall__)) StringFromGUID2 (const GUID & rguid, LPOLESTR lpsz, int cchMax);
extern "C" HRESULT __attribute__((__stdcall__)) CoCreateGuid (GUID *pguid);

typedef struct tagPROPVARIANT PROPVARIANT;

extern "C" HRESULT __attribute__((__stdcall__)) PropVariantCopy (PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc);
extern "C" HRESULT __attribute__((__stdcall__)) PropVariantClear (PROPVARIANT *pvar);
extern "C" HRESULT __attribute__((__stdcall__)) FreePropVariantArray (ULONG cVariants, PROPVARIANT *rgvars);



extern "C" HRESULT __attribute__((__stdcall__)) CoWaitForMultipleHandles (DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex);



typedef enum tagCOWAIT_FLAGS {
  COWAIT_DEFAULT = 0,
  COWAIT_WAITALL = 1,
  COWAIT_ALERTABLE = 2,
  COWAIT_INPUTAVAILABLE = 4


  , COWAIT_DISPATCH_CALLS = 8,
  COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10


} COWAIT_FLAGS;
extern "C" HRESULT __attribute__((__stdcall__)) CoGetTreatAsClass (const IID & clsidOld, LPCLSID pClsidNew);
extern "C" HRESULT __attribute__((__stdcall__)) CoInvalidateRemoteMachineBindings (LPOLESTR pszMachineName);



typedef HRESULT (__attribute__((__stdcall__)) *LPFNGETCLASSOBJECT) (const IID &, const IID &, LPVOID *);
typedef HRESULT (__attribute__((__stdcall__)) *LPFNCANUNLOADNOW) (void);

extern "C" HRESULT __attribute__((__stdcall__)) DllGetClassObject (const IID & rclsid, const IID & riid, LPVOID *ppv);
extern "C" HRESULT __attribute__((__stdcall__)) DllCanUnloadNow (void);
extern "C" LPVOID __attribute__((__stdcall__)) CoTaskMemAlloc (SIZE_T cb);
extern "C" LPVOID __attribute__((__stdcall__)) CoTaskMemRealloc (LPVOID pv, SIZE_T cb);
extern "C" void __attribute__((__stdcall__)) CoTaskMemFree (LPVOID pv);
#pragma pack(pop)







typedef enum tagCOINIT {
  COINIT_APARTMENTTHREADED = 0x2,
  COINIT_MULTITHREADED = COINITBASE_MULTITHREADED,
  COINIT_DISABLE_OLE1DDE = 0x4,
  COINIT_SPEED_OVER_MEMORY = 0x8
} COINIT;
typedef DWORD STGFMT;
typedef struct IMallocSpy IMallocSpy;




typedef struct IBindCtx IBindCtx;




typedef struct IEnumMoniker IEnumMoniker;




typedef struct IRunnableObject IRunnableObject;




typedef struct IRunningObjectTable IRunningObjectTable;




typedef struct IPersist IPersist;




typedef struct IPersistStream IPersistStream;




typedef struct IMoniker IMoniker;




typedef struct IROTData IROTData;




typedef struct IEnumSTATSTG IEnumSTATSTG;




typedef struct IStorage IStorage;




typedef struct IPersistFile IPersistFile;




typedef struct IPersistStorage IPersistStorage;




typedef struct ILockBytes ILockBytes;




typedef struct IEnumFORMATETC IEnumFORMATETC;




typedef struct IEnumSTATDATA IEnumSTATDATA;




typedef struct IRootStorage IRootStorage;




typedef struct IAdviseSink IAdviseSink;




typedef struct AsyncIAdviseSink AsyncIAdviseSink;




typedef struct IAdviseSink2 IAdviseSink2;




typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;




typedef struct IDataObject IDataObject;




typedef struct IDataAdviseHolder IDataAdviseHolder;




typedef struct IMessageFilter IMessageFilter;




typedef struct IClassActivator IClassActivator;




typedef struct IFillLockBytes IFillLockBytes;




typedef struct IProgressNotify IProgressNotify;




typedef struct ILayoutStorage ILayoutStorage;




typedef struct IBlockingLock IBlockingLock;




typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;




typedef struct IOplockStorage IOplockStorage;




typedef struct IDirectWriterLock IDirectWriterLock;




typedef struct IUrlMon IUrlMon;




typedef struct IForegroundTransfer IForegroundTransfer;




typedef struct IThumbnailExtractor IThumbnailExtractor;




typedef struct IDummyHICONIncluder IDummyHICONIncluder;




typedef struct IProcessLock IProcessLock;




typedef struct ISurrogateService ISurrogateService;




typedef struct IInitializeSpy IInitializeSpy;




typedef struct IApartmentShutdown IApartmentShutdown;
extern "C" {
extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
typedef struct tagRemHGLOBAL {
    LONG fNullHGlobal;
    ULONG cbData;
    byte data[1];
} RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
    byte data[1];
} RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE {
    ULONG cbData;
    byte data[1];
} RemHENHMETAFILE;
typedef struct tagRemHBITMAP {
    ULONG cbData;
    byte data[1];
} RemHBITMAP;

typedef struct tagRemHPALETTE {
    ULONG cbData;
    byte data[1];
} RemHPALETTE;

typedef struct tagRemBRUSH {
    ULONG cbData;
    byte data[1];
} RemHBRUSH;
typedef enum tagDVASPECT {
    DVASPECT_CONTENT = 1,
    DVASPECT_THUMBNAIL = 2,
    DVASPECT_ICON = 4,
    DVASPECT_DOCPRINT = 8
} DVASPECT;

typedef enum tagSTGC {
    STGC_DEFAULT = 0,
    STGC_OVERWRITE = 1,
    STGC_ONLYIFCURRENT = 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
    STGC_CONSOLIDATE = 8
} STGC;

typedef enum tagSTGMOVE {
    STGMOVE_MOVE = 0,
    STGMOVE_COPY = 1,
    STGMOVE_SHALLOWCOPY = 2
} STGMOVE;

typedef enum tagSTATFLAG {
    STATFLAG_DEFAULT = 0,
    STATFLAG_NONAME = 1,
    STATFLAG_NOOPEN = 2
} STATFLAG;
typedef void *HCONTEXT;
typedef struct _userCLIPFORMAT {
    LONG fContext;
    union {
        DWORD dwValue;
        wchar_t *pwszName;
    } u;
} userCLIPFORMAT;

typedef userCLIPFORMAT *wireCLIPFORMAT;
typedef WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE {
    LONG fContext;
    union {
        LONG hInproc;
        DWORD_BLOB *hRemote;
    } u;
} GDI_NONREMOTE;

typedef struct _userHGLOBAL {
    LONG fContext;
    union {
        LONG hInproc;
        FLAGGED_BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHGLOBAL;

typedef userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE {
    LONG fContext;
    union {
        LONG hInproc;
        BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHMETAFILE;

typedef struct _remoteMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE *hMF;
} remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT {
    LONG fContext;
    union {
        LONG hInproc;
        remoteMETAFILEPICT *hRemote;
        INT64 hInproc64;
    } u;
} userHMETAFILEPICT;

typedef struct _userHENHMETAFILE {
    LONG fContext;
    union {
        LONG hInproc;
        BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHENHMETAFILE;

typedef struct _userBITMAP {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
    byte pBuffer[1];
} userBITMAP;

typedef struct _userHBITMAP {
    LONG fContext;
    union {
        LONG hInproc;
        userBITMAP *hRemote;
        INT64 hInproc64;
    } u;
} userHBITMAP;

typedef struct _userHPALETTE {
    LONG fContext;
    union {
        LONG hInproc;
        LOGPALETTE *hRemote;
        INT64 hInproc64;
    } u;
} userHPALETTE;

typedef struct _RemotableHandle {
    LONG fContext;
    union {
        LONG hInproc;
        LONG hRemote;
    } u;
} RemotableHandle;

typedef RemotableHandle *wireHWND;
typedef RemotableHandle *wireHMENU;
typedef RemotableHandle *wireHACCEL;
typedef RemotableHandle *wireHBRUSH;
typedef RemotableHandle *wireHFONT;
typedef RemotableHandle *wireHDC;
typedef RemotableHandle *wireHICON;
typedef RemotableHandle *wireHRGN;
typedef RemotableHandle *wireHMONITOR;
typedef userHBITMAP *wireHBITMAP;
typedef userHPALETTE *wireHPALETTE;
typedef userHENHMETAFILE *wireHENHMETAFILE;
typedef userHMETAFILE *wireHMETAFILE;
typedef userHMETAFILEPICT *wireHMETAFILEPICT;
typedef void *HMETAFILEPICT;




typedef double DATE;
typedef union tagCY {
  __extension__ struct {
    unsigned long Lo;
    long Hi;
  } ;
  LONGLONG int64;
} CY;



typedef CY *LPCY;
typedef struct tagDEC {
  USHORT wReserved;
  __extension__ union {
    __extension__ struct {
      BYTE scale;
      BYTE sign;
    } ;
    USHORT signscale;
  } ;
  ULONG Hi32;
  __extension__ union {
    __extension__ struct {
      ULONG Lo32;
      ULONG Mid32;
    } ;
    ULONGLONG Lo64;
  } ;
} DECIMAL;





typedef DECIMAL *LPDECIMAL;

typedef FLAGGED_WORD_BLOB *wireBSTR;
typedef OLECHAR *BSTR;

typedef BSTR *LPBSTR;

typedef short VARIANT_BOOL;
typedef struct tagBSTRBLOB {
    ULONG cbSize;
    BYTE *pData;
} BSTRBLOB;
typedef struct tagBSTRBLOB *LPBSTRBLOB;





typedef struct tagCLIPDATA {
    ULONG cbSize;
    LONG ulClipFmt;
    BYTE *pClipData;
} CLIPDATA;



typedef unsigned short VARTYPE;

enum VARENUM {
    VT_EMPTY = 0,
    VT_NULL = 1,
    VT_I2 = 2,
    VT_I4 = 3,
    VT_R4 = 4,
    VT_R8 = 5,
    VT_CY = 6,
    VT_DATE = 7,
    VT_BSTR = 8,
    VT_DISPATCH = 9,
    VT_ERROR = 10,
    VT_BOOL = 11,
    VT_VARIANT = 12,
    VT_UNKNOWN = 13,
    VT_DECIMAL = 14,
    VT_I1 = 16,
    VT_UI1 = 17,
    VT_UI2 = 18,
    VT_UI4 = 19,
    VT_I8 = 20,
    VT_UI8 = 21,
    VT_INT = 22,
    VT_UINT = 23,
    VT_VOID = 24,
    VT_HRESULT = 25,
    VT_PTR = 26,
    VT_SAFEARRAY = 27,
    VT_CARRAY = 28,
    VT_USERDEFINED = 29,
    VT_LPSTR = 30,
    VT_LPWSTR = 31,
    VT_RECORD = 36,
    VT_INT_PTR = 37,
    VT_UINT_PTR = 38,
    VT_FILETIME = 64,
    VT_BLOB = 65,
    VT_STREAM = 66,
    VT_STORAGE = 67,
    VT_STREAMED_OBJECT = 68,
    VT_STORED_OBJECT = 69,
    VT_BLOB_OBJECT = 70,
    VT_CF = 71,
    VT_CLSID = 72,
    VT_VERSIONED_STREAM = 73,
    VT_BSTR_BLOB = 0xfff,
    VT_VECTOR = 0x1000,
    VT_ARRAY = 0x2000,
    VT_BYREF = 0x4000,
    VT_RESERVED = 0x8000,
    VT_ILLEGAL = 0xffff,
    VT_ILLEGALMASKED = 0xfff,
    VT_TYPEMASK = 0xfff
};


typedef ULONG PROPID;




typedef struct _tagpropertykey {
    GUID fmtid;
    DWORD pid;
} PROPERTYKEY;


typedef struct tagCSPLATFORM {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
} CSPLATFORM;

typedef struct tagQUERYCONTEXT {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
} QUERYCONTEXT;

typedef enum tagTYSPEC {
    TYSPEC_CLSID = 0,
    TYSPEC_FILEEXT = 1,
    TYSPEC_MIMETYPE = 2,
    TYSPEC_FILENAME = 3,
    TYSPEC_PROGID = 4,
    TYSPEC_PACKAGENAME = 5,
    TYSPEC_OBJECTID = 6
} TYSPEC;

typedef struct __WIDL_wtypes_generated_name_00000001 {
    DWORD tyspec;
    union {
        CLSID clsid;
        LPOLESTR pFileExt;
        LPOLESTR pMimeType;
        LPOLESTR pProgId;
        LPOLESTR pFileName;
        struct {
            LPOLESTR pPackageName;
            GUID PolicyId;
        } ByName;
        struct {
            GUID ObjectId;
            GUID PolicyId;
        } ByObjectId;
    } tagged_union;
} uCLSSPEC;






}





extern "C" {
}
extern "C" {
typedef IMallocSpy *LPMALLOCSPY;
extern "C" const GUID IID_IMallocSpy;

struct
IMallocSpy : public IUnknown
{
    virtual SIZE_T __attribute__((__stdcall__)) PreAlloc(
        SIZE_T cbRequest) = 0;

    virtual void * __attribute__((__stdcall__)) PostAlloc(
        void *pActual) = 0;

    virtual void * __attribute__((__stdcall__)) PreFree(
        void *pRequest,
        WINBOOL fSpyed) = 0;

    virtual void __attribute__((__stdcall__)) PostFree(
        WINBOOL fSpyed) = 0;

    virtual SIZE_T __attribute__((__stdcall__)) PreRealloc(
        void *pRequest,
        SIZE_T cbRequest,
        void **ppNewRequest,
        WINBOOL fSpyed) = 0;

    virtual void * __attribute__((__stdcall__)) PostRealloc(
        void *pActual,
        WINBOOL fSpyed) = 0;

    virtual void * __attribute__((__stdcall__)) PreGetSize(
        void *pRequest,
        WINBOOL fSpyed) = 0;

    virtual SIZE_T __attribute__((__stdcall__)) PostGetSize(
        SIZE_T cbActual,
        WINBOOL fSpyed) = 0;

    virtual void * __attribute__((__stdcall__)) PreDidAlloc(
        void *pRequest,
        WINBOOL fSpyed) = 0;

    virtual int __attribute__((__stdcall__)) PostDidAlloc(
        void *pRequest,
        WINBOOL fSpyed,
        int fActual) = 0;

    virtual void __attribute__((__stdcall__)) PreHeapMinimize(
        ) = 0;

    virtual void __attribute__((__stdcall__)) PostHeapMinimize(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IMallocSpy>() { static const IID __uuid_inst = {0x0000001d,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IMallocSpy*>() { return __mingw_uuidof<IMallocSpy>(); } }
SIZE_T __attribute__((__stdcall__)) IMallocSpy_PreAlloc_Proxy(
    IMallocSpy* This,
    SIZE_T cbRequest);
void __attribute__((__stdcall__)) IMallocSpy_PreAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * __attribute__((__stdcall__)) IMallocSpy_PostAlloc_Proxy(
    IMallocSpy* This,
    void *pActual);
void __attribute__((__stdcall__)) IMallocSpy_PostAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * __attribute__((__stdcall__)) IMallocSpy_PreFree_Proxy(
    IMallocSpy* This,
    void *pRequest,
    WINBOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PreFree_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IMallocSpy_PostFree_Proxy(
    IMallocSpy* This,
    WINBOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PostFree_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
SIZE_T __attribute__((__stdcall__)) IMallocSpy_PreRealloc_Proxy(
    IMallocSpy* This,
    void *pRequest,
    SIZE_T cbRequest,
    void **ppNewRequest,
    WINBOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PreRealloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * __attribute__((__stdcall__)) IMallocSpy_PostRealloc_Proxy(
    IMallocSpy* This,
    void *pActual,
    WINBOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PostRealloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * __attribute__((__stdcall__)) IMallocSpy_PreGetSize_Proxy(
    IMallocSpy* This,
    void *pRequest,
    WINBOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PreGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
SIZE_T __attribute__((__stdcall__)) IMallocSpy_PostGetSize_Proxy(
    IMallocSpy* This,
    SIZE_T cbActual,
    WINBOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PostGetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void * __attribute__((__stdcall__)) IMallocSpy_PreDidAlloc_Proxy(
    IMallocSpy* This,
    void *pRequest,
    WINBOOL fSpyed);
void __attribute__((__stdcall__)) IMallocSpy_PreDidAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
int __attribute__((__stdcall__)) IMallocSpy_PostDidAlloc_Proxy(
    IMallocSpy* This,
    void *pRequest,
    WINBOOL fSpyed,
    int fActual);
void __attribute__((__stdcall__)) IMallocSpy_PostDidAlloc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IMallocSpy_PreHeapMinimize_Proxy(
    IMallocSpy* This);
void __attribute__((__stdcall__)) IMallocSpy_PreHeapMinimize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IMallocSpy_PostHeapMinimize_Proxy(
    IMallocSpy* This);
void __attribute__((__stdcall__)) IMallocSpy_PostHeapMinimize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IBindCtx *LPBC;
typedef IBindCtx *LPBINDCTX;

typedef struct tagBIND_OPTS {
  DWORD cbStruct;
  DWORD grfFlags;
  DWORD grfMode;
  DWORD dwTickCountDeadline;
} BIND_OPTS, *LPBIND_OPTS;
typedef struct tagBIND_OPTS2 : tagBIND_OPTS {
DWORD dwTrackFlags;
DWORD dwClassContext;
LCID locale;
COSERVERINFO * pServerInfo;
} BIND_OPTS2, * LPBIND_OPTS2;
typedef struct tagBIND_OPTS3 : tagBIND_OPTS2 {
HWND hwnd;
} BIND_OPTS3, * LPBIND_OPTS3;
typedef enum tagBIND_FLAGS {
    BIND_MAYBOTHERUSER = 1,
    BIND_JUSTTESTEXISTENCE = 2
} BIND_FLAGS;
extern "C" const GUID IID_IBindCtx;

struct
IBindCtx : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) RegisterObjectBound(
        IUnknown *punk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RevokeObjectBound(
        IUnknown *punk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ReleaseBoundObjects(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetBindOptions(
        BIND_OPTS *pbindopts) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetBindOptions(
        BIND_OPTS *pbindopts) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetRunningObjectTable(
        IRunningObjectTable **pprot) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RegisterObjectParam(
        LPOLESTR pszKey,
        IUnknown *punk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetObjectParam(
        LPOLESTR pszKey,
        IUnknown **ppunk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnumObjectParam(
        IEnumString **ppenum) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RevokeObjectParam(
        LPOLESTR pszKey) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IBindCtx>() { static const IID __uuid_inst = {0x0000000e,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IBindCtx*>() { return __mingw_uuidof<IBindCtx>(); } }
HRESULT __attribute__((__stdcall__)) IBindCtx_RegisterObjectBound_Proxy(
    IBindCtx* This,
    IUnknown *punk);
void __attribute__((__stdcall__)) IBindCtx_RegisterObjectBound_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_RevokeObjectBound_Proxy(
    IBindCtx* This,
    IUnknown *punk);
void __attribute__((__stdcall__)) IBindCtx_RevokeObjectBound_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_ReleaseBoundObjects_Proxy(
    IBindCtx* This);
void __attribute__((__stdcall__)) IBindCtx_ReleaseBoundObjects_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_RemoteSetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
void __attribute__((__stdcall__)) IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_RemoteGetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
void __attribute__((__stdcall__)) IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetRunningObjectTable_Proxy(
    IBindCtx* This,
    IRunningObjectTable **pprot);
void __attribute__((__stdcall__)) IBindCtx_GetRunningObjectTable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_RegisterObjectParam_Proxy(
    IBindCtx* This,
    LPOLESTR pszKey,
    IUnknown *punk);
void __attribute__((__stdcall__)) IBindCtx_RegisterObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetObjectParam_Proxy(
    IBindCtx* This,
    LPOLESTR pszKey,
    IUnknown **ppunk);
void __attribute__((__stdcall__)) IBindCtx_GetObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_EnumObjectParam_Proxy(
    IBindCtx* This,
    IEnumString **ppenum);
void __attribute__((__stdcall__)) IBindCtx_EnumObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_RevokeObjectParam_Proxy(
    IBindCtx* This,
    LPOLESTR pszKey);
void __attribute__((__stdcall__)) IBindCtx_RevokeObjectParam_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindCtx_SetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS *pbindopts);
HRESULT __attribute__((__stdcall__)) IBindCtx_SetBindOptions_Stub(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS *pbindopts);
HRESULT __attribute__((__stdcall__)) IBindCtx_GetBindOptions_Stub(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
typedef IEnumMoniker *LPENUMMONIKER;
extern "C" const GUID IID_IEnumMoniker;

struct
IEnumMoniker : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Next(
        ULONG celt,
        IMoniker **rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Skip(
        ULONG celt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IEnumMoniker **ppenum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEnumMoniker>() { static const IID __uuid_inst = {0x00000102,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEnumMoniker*>() { return __mingw_uuidof<IEnumMoniker>(); } }
HRESULT __attribute__((__stdcall__)) IEnumMoniker_RemoteNext_Proxy(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Skip_Proxy(
    IEnumMoniker* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumMoniker_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Reset_Proxy(
    IEnumMoniker* This);
void __attribute__((__stdcall__)) IEnumMoniker_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Clone_Proxy(
    IEnumMoniker* This,
    IEnumMoniker **ppenum);
void __attribute__((__stdcall__)) IEnumMoniker_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Next_Proxy(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumMoniker_Next_Stub(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
typedef IRunnableObject *LPRUNNABLEOBJECT;
extern "C" const GUID IID_IRunnableObject;

struct
IRunnableObject : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetRunningClass(
        LPCLSID lpClsid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Run(
        LPBINDCTX pbc) = 0;

    virtual WINBOOL __attribute__((__stdcall__)) IsRunning(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) LockRunning(
        WINBOOL fLock,
        WINBOOL fLastUnlockCloses) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetContainedObject(
        WINBOOL fContained) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRunnableObject>() { static const IID __uuid_inst = {0x00000126,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRunnableObject*>() { return __mingw_uuidof<IRunnableObject>(); } }
HRESULT __attribute__((__stdcall__)) IRunnableObject_GetRunningClass_Proxy(
    IRunnableObject* This,
    LPCLSID lpClsid);
void __attribute__((__stdcall__)) IRunnableObject_GetRunningClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunnableObject_Run_Proxy(
    IRunnableObject* This,
    LPBINDCTX pbc);
void __attribute__((__stdcall__)) IRunnableObject_Run_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunnableObject_RemoteIsRunning_Proxy(
    IRunnableObject* This);
void __attribute__((__stdcall__)) IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunnableObject_LockRunning_Proxy(
    IRunnableObject* This,
    WINBOOL fLock,
    WINBOOL fLastUnlockCloses);
void __attribute__((__stdcall__)) IRunnableObject_LockRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunnableObject_SetContainedObject_Proxy(
    IRunnableObject* This,
    WINBOOL fContained);
void __attribute__((__stdcall__)) IRunnableObject_SetContainedObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
WINBOOL __attribute__((__stdcall__)) IRunnableObject_IsRunning_Proxy(
    IRunnableObject* This);
HRESULT __attribute__((__stdcall__)) IRunnableObject_IsRunning_Stub(
    IRunnableObject* This);
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;
extern "C" const GUID IID_IRunningObjectTable;

struct
IRunningObjectTable : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Register(
        DWORD grfFlags,
        IUnknown *punkObject,
        IMoniker *pmkObjectName,
        DWORD *pdwRegister) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Revoke(
        DWORD dwRegister) = 0;

    virtual HRESULT __attribute__((__stdcall__)) IsRunning(
        IMoniker *pmkObjectName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetObjectW(
        IMoniker *pmkObjectName,
        IUnknown **ppunkObject) = 0;

    virtual HRESULT __attribute__((__stdcall__)) NoteChangeTime(
        DWORD dwRegister,
        FILETIME *pfiletime) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetTimeOfLastChange(
        IMoniker *pmkObjectName,
        FILETIME *pfiletime) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnumRunning(
        IEnumMoniker **ppenumMoniker) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRunningObjectTable>() { static const IID __uuid_inst = {0x00000010,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRunningObjectTable*>() { return __mingw_uuidof<IRunningObjectTable>(); } }
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_Register_Proxy(
    IRunningObjectTable* This,
    DWORD grfFlags,
    IUnknown *punkObject,
    IMoniker *pmkObjectName,
    DWORD *pdwRegister);
void __attribute__((__stdcall__)) IRunningObjectTable_Register_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_Revoke_Proxy(
    IRunningObjectTable* This,
    DWORD dwRegister);
void __attribute__((__stdcall__)) IRunningObjectTable_Revoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_IsRunning_Proxy(
    IRunningObjectTable* This,
    IMoniker *pmkObjectName);
void __attribute__((__stdcall__)) IRunningObjectTable_IsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_GetObject_Proxy(
    IRunningObjectTable* This,
    IMoniker *pmkObjectName,
    IUnknown **ppunkObject);
void __attribute__((__stdcall__)) IRunningObjectTable_GetObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_NoteChangeTime_Proxy(
    IRunningObjectTable* This,
    DWORD dwRegister,
    FILETIME *pfiletime);
void __attribute__((__stdcall__)) IRunningObjectTable_NoteChangeTime_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_GetTimeOfLastChange_Proxy(
    IRunningObjectTable* This,
    IMoniker *pmkObjectName,
    FILETIME *pfiletime);
void __attribute__((__stdcall__)) IRunningObjectTable_GetTimeOfLastChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRunningObjectTable_EnumRunning_Proxy(
    IRunningObjectTable* This,
    IEnumMoniker **ppenumMoniker);
void __attribute__((__stdcall__)) IRunningObjectTable_EnumRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPersist *LPPERSIST;
extern "C" const GUID IID_IPersist;

struct
IPersist : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetClassID(
        CLSID *pClassID) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPersist>() { static const IID __uuid_inst = {0x0000010c,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPersist*>() { return __mingw_uuidof<IPersist>(); } }
HRESULT __attribute__((__stdcall__)) IPersist_GetClassID_Proxy(
    IPersist* This,
    CLSID *pClassID);
void __attribute__((__stdcall__)) IPersist_GetClassID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPersistStream *LPPERSISTSTREAM;
extern "C" const GUID IID_IPersistStream;

struct
IPersistStream : public IPersist
{
    virtual HRESULT __attribute__((__stdcall__)) IsDirty(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Load(
        IStream *pStm) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Save(
        IStream *pStm,
        WINBOOL fClearDirty) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetSizeMax(
        ULARGE_INTEGER *pcbSize) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPersistStream>() { static const IID __uuid_inst = {0x00000109,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPersistStream*>() { return __mingw_uuidof<IPersistStream>(); } }
HRESULT __attribute__((__stdcall__)) IPersistStream_IsDirty_Proxy(
    IPersistStream* This);
void __attribute__((__stdcall__)) IPersistStream_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStream_Load_Proxy(
    IPersistStream* This,
    IStream *pStm);
void __attribute__((__stdcall__)) IPersistStream_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStream_Save_Proxy(
    IPersistStream* This,
    IStream *pStm,
    WINBOOL fClearDirty);
void __attribute__((__stdcall__)) IPersistStream_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStream_GetSizeMax_Proxy(
    IPersistStream* This,
    ULARGE_INTEGER *pcbSize);
void __attribute__((__stdcall__)) IPersistStream_GetSizeMax_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IMoniker *LPMONIKER;
typedef enum tagMKSYS {
    MKSYS_NONE = 0,
    MKSYS_GENERICCOMPOSITE = 1,
    MKSYS_FILEMONIKER = 2,
    MKSYS_ANTIMONIKER = 3,
    MKSYS_ITEMMONIKER = 4,
    MKSYS_POINTERMONIKER = 5,
    MKSYS_CLASSMONIKER = 7,
    MKSYS_OBJREFMONIKER = 8,
    MKSYS_SESSIONMONIKER = 9,
    MKSYS_LUAMONIKER = 10
} MKSYS;
typedef enum tagMKREDUCE {
    MKRREDUCE_ONE = 3 << 16,
    MKRREDUCE_TOUSER = 2 << 16,
    MKRREDUCE_THROUGHUSER = 1 << 16,
    MKRREDUCE_ALL = 0
} MKRREDUCE;
extern "C" const GUID IID_IMoniker;

struct
IMoniker : public IPersistStream
{
    virtual HRESULT __attribute__((__stdcall__)) BindToObject(
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        const IID & riidResult,
        void **ppvResult) = 0;

    virtual HRESULT __attribute__((__stdcall__)) BindToStorage(
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        const IID & riid,
        void **ppvObj) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reduce(
        IBindCtx *pbc,
        DWORD dwReduceHowFar,
        IMoniker **ppmkToLeft,
        IMoniker **ppmkReduced) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ComposeWith(
        IMoniker *pmkRight,
        WINBOOL fOnlyIfNotGeneric,
        IMoniker **ppmkComposite) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Enum(
        WINBOOL fForward,
        IEnumMoniker **ppenumMoniker) = 0;

    virtual HRESULT __attribute__((__stdcall__)) IsEqual(
        IMoniker *pmkOtherMoniker) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Hash(
        DWORD *pdwHash) = 0;

    virtual HRESULT __attribute__((__stdcall__)) IsRunning(
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        IMoniker *pmkNewlyRunning) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetTimeOfLastChange(
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        FILETIME *pFileTime) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Inverse(
        IMoniker **ppmk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CommonPrefixWith(
        IMoniker *pmkOther,
        IMoniker **ppmkPrefix) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RelativePathTo(
        IMoniker *pmkOther,
        IMoniker **ppmkRelPath) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDisplayName(
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        LPOLESTR *ppszDisplayName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ParseDisplayName(
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut) = 0;

    virtual HRESULT __attribute__((__stdcall__)) IsSystemMoniker(
        DWORD *pdwMksys) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IMoniker>() { static const IID __uuid_inst = {0x0000000f,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IMoniker*>() { return __mingw_uuidof<IMoniker>(); } }
HRESULT __attribute__((__stdcall__)) IMoniker_RemoteBindToObject_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID & riidResult,
    IUnknown **ppvResult);
void __attribute__((__stdcall__)) IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_RemoteBindToStorage_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID & riid,
    IUnknown **ppvObj);
void __attribute__((__stdcall__)) IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_Reduce_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    DWORD dwReduceHowFar,
    IMoniker **ppmkToLeft,
    IMoniker **ppmkReduced);
void __attribute__((__stdcall__)) IMoniker_Reduce_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_ComposeWith_Proxy(
    IMoniker* This,
    IMoniker *pmkRight,
    WINBOOL fOnlyIfNotGeneric,
    IMoniker **ppmkComposite);
void __attribute__((__stdcall__)) IMoniker_ComposeWith_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_Enum_Proxy(
    IMoniker* This,
    WINBOOL fForward,
    IEnumMoniker **ppenumMoniker);
void __attribute__((__stdcall__)) IMoniker_Enum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_IsEqual_Proxy(
    IMoniker* This,
    IMoniker *pmkOtherMoniker);
void __attribute__((__stdcall__)) IMoniker_IsEqual_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_Hash_Proxy(
    IMoniker* This,
    DWORD *pdwHash);
void __attribute__((__stdcall__)) IMoniker_Hash_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_IsRunning_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    IMoniker *pmkNewlyRunning);
void __attribute__((__stdcall__)) IMoniker_IsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_GetTimeOfLastChange_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    FILETIME *pFileTime);
void __attribute__((__stdcall__)) IMoniker_GetTimeOfLastChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_Inverse_Proxy(
    IMoniker* This,
    IMoniker **ppmk);
void __attribute__((__stdcall__)) IMoniker_Inverse_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_CommonPrefixWith_Proxy(
    IMoniker* This,
    IMoniker *pmkOther,
    IMoniker **ppmkPrefix);
void __attribute__((__stdcall__)) IMoniker_CommonPrefixWith_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_RelativePathTo_Proxy(
    IMoniker* This,
    IMoniker *pmkOther,
    IMoniker **ppmkRelPath);
void __attribute__((__stdcall__)) IMoniker_RelativePathTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_GetDisplayName_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    LPOLESTR *ppszDisplayName);
void __attribute__((__stdcall__)) IMoniker_GetDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_ParseDisplayName_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    LPOLESTR pszDisplayName,
    ULONG *pchEaten,
    IMoniker **ppmkOut);
void __attribute__((__stdcall__)) IMoniker_ParseDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_IsSystemMoniker_Proxy(
    IMoniker* This,
    DWORD *pdwMksys);
void __attribute__((__stdcall__)) IMoniker_IsSystemMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToObject_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID & riidResult,
    void **ppvResult);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToObject_Stub(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID & riidResult,
    IUnknown **ppvResult);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToStorage_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID & riid,
    void **ppvObj);
HRESULT __attribute__((__stdcall__)) IMoniker_BindToStorage_Stub(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID & riid,
    IUnknown **ppvObj);
extern "C" const GUID IID_IROTData;

struct
IROTData : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetComparisonData(
        byte *pbData,
        ULONG cbMax,
        ULONG *pcbData) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IROTData>() { static const IID __uuid_inst = {0xf29f6bc0,0x5021,0x11ce, {0xaa,0x15,0x00,0x00,0x69,0x01,0x29,0x3f}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IROTData*>() { return __mingw_uuidof<IROTData>(); } }
HRESULT __attribute__((__stdcall__)) IROTData_GetComparisonData_Proxy(
    IROTData* This,
    byte *pbData,
    ULONG cbMax,
    ULONG *pcbData);
void __attribute__((__stdcall__)) IROTData_GetComparisonData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IEnumSTATSTG *LPENUMSTATSTG;
extern "C" const GUID IID_IEnumSTATSTG;

struct
IEnumSTATSTG : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Next(
        ULONG celt,
        STATSTG *rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Skip(
        ULONG celt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IEnumSTATSTG **ppenum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEnumSTATSTG>() { static const IID __uuid_inst = {0x0000000d,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEnumSTATSTG*>() { return __mingw_uuidof<IEnumSTATSTG>(); } }
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_RemoteNext_Proxy(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Skip_Proxy(
    IEnumSTATSTG* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumSTATSTG_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Reset_Proxy(
    IEnumSTATSTG* This);
void __attribute__((__stdcall__)) IEnumSTATSTG_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Clone_Proxy(
    IEnumSTATSTG* This,
    IEnumSTATSTG **ppenum);
void __attribute__((__stdcall__)) IEnumSTATSTG_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Next_Proxy(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumSTATSTG_Next_Stub(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);
typedef IStorage *LPSTORAGE;
typedef struct tagRemSNB {
    ULONG ulCntStr;
    ULONG ulCntChar;
    OLECHAR rgString[1];
} RemSNB;
typedef RemSNB *wireSNB;
typedef LPOLESTR *SNB;
extern "C" const GUID IID_IStorage;

struct
IStorage : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) CreateStream(
        const OLECHAR *pwcsName,
        DWORD grfMode,
        DWORD reserved1,
        DWORD reserved2,
        IStream **ppstm) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OpenStream(
        const OLECHAR *pwcsName,
        void *reserved1,
        DWORD grfMode,
        DWORD reserved2,
        IStream **ppstm) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CreateStorage(
        const OLECHAR *pwcsName,
        DWORD grfMode,
        DWORD reserved1,
        DWORD reserved2,
        IStorage **ppstg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OpenStorage(
        const OLECHAR *pwcsName,
        IStorage *pstgPriority,
        DWORD grfMode,
        SNB snbExclude,
        DWORD reserved,
        IStorage **ppstg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CopyTo(
        DWORD ciidExclude,
        const IID *rgiidExclude,
        SNB snbExclude,
        IStorage *pstgDest) = 0;

    virtual HRESULT __attribute__((__stdcall__)) MoveElementTo(
        const OLECHAR *pwcsName,
        IStorage *pstgDest,
        const OLECHAR *pwcsNewName,
        DWORD grfFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Commit(
        DWORD grfCommitFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Revert(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnumElements(
        DWORD reserved1,
        void *reserved2,
        DWORD reserved3,
        IEnumSTATSTG **ppenum) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DestroyElement(
        const OLECHAR *pwcsName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RenameElement(
        const OLECHAR *pwcsOldName,
        const OLECHAR *pwcsNewName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetElementTimes(
        const OLECHAR *pwcsName,
        const FILETIME *pctime,
        const FILETIME *patime,
        const FILETIME *pmtime) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetClass(
        const IID & clsid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetStateBits(
        DWORD grfStateBits,
        DWORD grfMask) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Stat(
        STATSTG *pstatstg,
        DWORD grfStatFlag) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IStorage>() { static const IID __uuid_inst = {0x0000000b,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IStorage*>() { return __mingw_uuidof<IStorage>(); } }
HRESULT __attribute__((__stdcall__)) IStorage_CreateStream_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    DWORD grfMode,
    DWORD reserved1,
    DWORD reserved2,
    IStream **ppstm);
void __attribute__((__stdcall__)) IStorage_CreateStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_RemoteOpenStream_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    ULONG cbReserved1,
    byte *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
void __attribute__((__stdcall__)) IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_CreateStorage_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    DWORD grfMode,
    DWORD reserved1,
    DWORD reserved2,
    IStorage **ppstg);
void __attribute__((__stdcall__)) IStorage_CreateStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_OpenStorage_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    IStorage *pstgPriority,
    DWORD grfMode,
    SNB snbExclude,
    DWORD reserved,
    IStorage **ppstg);
void __attribute__((__stdcall__)) IStorage_OpenStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_RemoteCopyTo_Proxy(
    IStorage* This,
    DWORD ciidExclude,
    const IID *rgiidExclude,
    SNB snbExclude,
    IStorage *pstgDest);
void __attribute__((__stdcall__)) IStorage_RemoteCopyTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_MoveElementTo_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    IStorage *pstgDest,
    const OLECHAR *pwcsNewName,
    DWORD grfFlags);
void __attribute__((__stdcall__)) IStorage_MoveElementTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_Commit_Proxy(
    IStorage* This,
    DWORD grfCommitFlags);
void __attribute__((__stdcall__)) IStorage_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_Revert_Proxy(
    IStorage* This);
void __attribute__((__stdcall__)) IStorage_Revert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_RemoteEnumElements_Proxy(
    IStorage* This,
    DWORD reserved1,
    ULONG cbReserved2,
    byte *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
void __attribute__((__stdcall__)) IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_DestroyElement_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName);
void __attribute__((__stdcall__)) IStorage_DestroyElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_RenameElement_Proxy(
    IStorage* This,
    const OLECHAR *pwcsOldName,
    const OLECHAR *pwcsNewName);
void __attribute__((__stdcall__)) IStorage_RenameElement_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_SetElementTimes_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    const FILETIME *pctime,
    const FILETIME *patime,
    const FILETIME *pmtime);
void __attribute__((__stdcall__)) IStorage_SetElementTimes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_SetClass_Proxy(
    IStorage* This,
    const IID & clsid);
void __attribute__((__stdcall__)) IStorage_SetClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_SetStateBits_Proxy(
    IStorage* This,
    DWORD grfStateBits,
    DWORD grfMask);
void __attribute__((__stdcall__)) IStorage_SetStateBits_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_Stat_Proxy(
    IStorage* This,
    STATSTG *pstatstg,
    DWORD grfStatFlag);
void __attribute__((__stdcall__)) IStorage_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IStorage_OpenStream_Proxy(
    IStorage* This,
    const OLECHAR *pwcsName,
    void *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
HRESULT __attribute__((__stdcall__)) IStorage_OpenStream_Stub(
    IStorage* This,
    const OLECHAR *pwcsName,
    ULONG cbReserved1,
    byte *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
HRESULT __attribute__((__stdcall__)) IStorage_CopyTo_Proxy(
    IStorage* This,
    DWORD ciidExclude,
    const IID *rgiidExclude,
    SNB snbExclude,
    IStorage *pstgDest);
HRESULT __attribute__((__stdcall__)) IStorage_CopyTo_Stub(
    IStorage* This,
    DWORD ciidExclude,
    const IID *rgiidExclude,
    SNB snbExclude,
    IStorage *pstgDest);
HRESULT __attribute__((__stdcall__)) IStorage_EnumElements_Proxy(
    IStorage* This,
    DWORD reserved1,
    void *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
HRESULT __attribute__((__stdcall__)) IStorage_EnumElements_Stub(
    IStorage* This,
    DWORD reserved1,
    ULONG cbReserved2,
    byte *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
typedef IPersistFile *LPPERSISTFILE;
extern "C" const GUID IID_IPersistFile;

struct
IPersistFile : public IPersist
{
    virtual HRESULT __attribute__((__stdcall__)) IsDirty(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Load(
        LPCOLESTR pszFileName,
        DWORD dwMode) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Save(
        LPCOLESTR pszFileName,
        WINBOOL fRemember) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SaveCompleted(
        LPCOLESTR pszFileName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetCurFile(
        LPOLESTR *ppszFileName) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPersistFile>() { static const IID __uuid_inst = {0x0000010b,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPersistFile*>() { return __mingw_uuidof<IPersistFile>(); } }
HRESULT __attribute__((__stdcall__)) IPersistFile_IsDirty_Proxy(
    IPersistFile* This);
void __attribute__((__stdcall__)) IPersistFile_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistFile_Load_Proxy(
    IPersistFile* This,
    LPCOLESTR pszFileName,
    DWORD dwMode);
void __attribute__((__stdcall__)) IPersistFile_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistFile_Save_Proxy(
    IPersistFile* This,
    LPCOLESTR pszFileName,
    WINBOOL fRemember);
void __attribute__((__stdcall__)) IPersistFile_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistFile_SaveCompleted_Proxy(
    IPersistFile* This,
    LPCOLESTR pszFileName);
void __attribute__((__stdcall__)) IPersistFile_SaveCompleted_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistFile_GetCurFile_Proxy(
    IPersistFile* This,
    LPOLESTR *ppszFileName);
void __attribute__((__stdcall__)) IPersistFile_GetCurFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPersistStorage *LPPERSISTSTORAGE;
extern "C" const GUID IID_IPersistStorage;

struct
IPersistStorage : public IPersist
{
    virtual HRESULT __attribute__((__stdcall__)) IsDirty(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) InitNew(
        IStorage *pStg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Load(
        IStorage *pStg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Save(
        IStorage *pStgSave,
        WINBOOL fSameAsLoad) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SaveCompleted(
        IStorage *pStgNew) = 0;

    virtual HRESULT __attribute__((__stdcall__)) HandsOffStorage(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPersistStorage>() { static const IID __uuid_inst = {0x0000010a,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPersistStorage*>() { return __mingw_uuidof<IPersistStorage>(); } }
HRESULT __attribute__((__stdcall__)) IPersistStorage_IsDirty_Proxy(
    IPersistStorage* This);
void __attribute__((__stdcall__)) IPersistStorage_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStorage_InitNew_Proxy(
    IPersistStorage* This,
    IStorage *pStg);
void __attribute__((__stdcall__)) IPersistStorage_InitNew_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStorage_Load_Proxy(
    IPersistStorage* This,
    IStorage *pStg);
void __attribute__((__stdcall__)) IPersistStorage_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStorage_Save_Proxy(
    IPersistStorage* This,
    IStorage *pStgSave,
    WINBOOL fSameAsLoad);
void __attribute__((__stdcall__)) IPersistStorage_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStorage_SaveCompleted_Proxy(
    IPersistStorage* This,
    IStorage *pStgNew);
void __attribute__((__stdcall__)) IPersistStorage_SaveCompleted_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistStorage_HandsOffStorage_Proxy(
    IPersistStorage* This);
void __attribute__((__stdcall__)) IPersistStorage_HandsOffStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ILockBytes *LPLOCKBYTES;
extern "C" const GUID IID_ILockBytes;

struct
ILockBytes : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) ReadAt(
        ULARGE_INTEGER ulOffset,
        void *pv,
        ULONG cb,
        ULONG *pcbRead) = 0;

    virtual HRESULT __attribute__((__stdcall__)) WriteAt(
        ULARGE_INTEGER ulOffset,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Flush(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetSize(
        ULARGE_INTEGER cb) = 0;

    virtual HRESULT __attribute__((__stdcall__)) LockRegion(
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) UnlockRegion(
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Stat(
        STATSTG *pstatstg,
        DWORD grfStatFlag) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ILockBytes>() { static const IID __uuid_inst = {0x0000000a,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ILockBytes*>() { return __mingw_uuidof<ILockBytes>(); } }
HRESULT __attribute__((__stdcall__)) ILockBytes_RemoteReadAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
void __attribute__((__stdcall__)) ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_RemoteWriteAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void __attribute__((__stdcall__)) ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_Flush_Proxy(
    ILockBytes* This);
void __attribute__((__stdcall__)) ILockBytes_Flush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_SetSize_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER cb);
void __attribute__((__stdcall__)) ILockBytes_SetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_LockRegion_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void __attribute__((__stdcall__)) ILockBytes_LockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_UnlockRegion_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER libOffset,
    ULARGE_INTEGER cb,
    DWORD dwLockType);
void __attribute__((__stdcall__)) ILockBytes_UnlockRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_Stat_Proxy(
    ILockBytes* This,
    STATSTG *pstatstg,
    DWORD grfStatFlag);
void __attribute__((__stdcall__)) ILockBytes_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILockBytes_ReadAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT __attribute__((__stdcall__)) ILockBytes_ReadAt_Stub(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT __attribute__((__stdcall__)) ILockBytes_WriteAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT __attribute__((__stdcall__)) ILockBytes_WriteAt_Stub(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
typedef IEnumFORMATETC *LPENUMFORMATETC;
typedef struct tagDVTARGETDEVICE {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE tdData[1];
} DVTARGETDEVICE;
typedef CLIPFORMAT *LPCLIPFORMAT;
typedef struct tagFORMATETC {
    CLIPFORMAT cfFormat;
    DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
} FORMATETC;
typedef struct tagFORMATETC *LPFORMATETC;
extern "C" const GUID IID_IEnumFORMATETC;

struct
IEnumFORMATETC : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Next(
        ULONG celt,
        FORMATETC *rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Skip(
        ULONG celt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IEnumFORMATETC **ppenum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEnumFORMATETC>() { static const IID __uuid_inst = {0x00000103,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEnumFORMATETC*>() { return __mingw_uuidof<IEnumFORMATETC>(); } }
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_RemoteNext_Proxy(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Skip_Proxy(
    IEnumFORMATETC* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumFORMATETC_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Reset_Proxy(
    IEnumFORMATETC* This);
void __attribute__((__stdcall__)) IEnumFORMATETC_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Clone_Proxy(
    IEnumFORMATETC* This,
    IEnumFORMATETC **ppenum);
void __attribute__((__stdcall__)) IEnumFORMATETC_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Next_Proxy(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumFORMATETC_Next_Stub(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);
typedef IEnumSTATDATA *LPENUMSTATDATA;
typedef enum tagADVF {
    ADVF_NODATA = 1,
    ADVF_PRIMEFIRST = 2,
    ADVF_ONLYONCE = 4,
    ADVF_DATAONSTOP = 64,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_ONSAVE = 32
} ADVF;
typedef struct tagSTATDATA {
    FORMATETC formatetc;
    DWORD advf;
    IAdviseSink *pAdvSink;
    DWORD dwConnection;
} STATDATA;
typedef STATDATA *LPSTATDATA;
extern "C" const GUID IID_IEnumSTATDATA;

struct
IEnumSTATDATA : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Next(
        ULONG celt,
        STATDATA *rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Skip(
        ULONG celt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IEnumSTATDATA **ppenum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEnumSTATDATA>() { static const IID __uuid_inst = {0x00000105,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEnumSTATDATA*>() { return __mingw_uuidof<IEnumSTATDATA>(); } }
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_RemoteNext_Proxy(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Skip_Proxy(
    IEnumSTATDATA* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumSTATDATA_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Reset_Proxy(
    IEnumSTATDATA* This);
void __attribute__((__stdcall__)) IEnumSTATDATA_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Clone_Proxy(
    IEnumSTATDATA* This,
    IEnumSTATDATA **ppenum);
void __attribute__((__stdcall__)) IEnumSTATDATA_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Next_Proxy(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumSTATDATA_Next_Stub(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);
typedef IRootStorage *LPROOTSTORAGE;
extern "C" const GUID IID_IRootStorage;

struct
IRootStorage : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SwitchToFile(
        LPOLESTR pszFile) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRootStorage>() { static const IID __uuid_inst = {0x00000012,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRootStorage*>() { return __mingw_uuidof<IRootStorage>(); } }
HRESULT __attribute__((__stdcall__)) IRootStorage_SwitchToFile_Proxy(
    IRootStorage* This,
    LPOLESTR pszFile);
void __attribute__((__stdcall__)) IRootStorage_SwitchToFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IAdviseSink *LPADVISESINK;
typedef enum tagTYMED {
    TYMED_HGLOBAL = 1,
    TYMED_FILE = 2,
    TYMED_ISTREAM = 4,
    TYMED_ISTORAGE = 8,
    TYMED_GDI = 16,
    TYMED_MFPICT = 32,
    TYMED_ENHMF = 64,
    TYMED_NULL = 0
} TYMED;
typedef struct tagRemSTGMEDIUM {
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
    byte data[1];
} RemSTGMEDIUM;
typedef struct tagSTGMEDIUM {
    DWORD tymed;
    __extension__ union {
        HBITMAP hBitmap;
        HMETAFILEPICT hMetaFilePict;
        HENHMETAFILE hEnhMetaFile;
        HGLOBAL hGlobal;
        LPOLESTR lpszFileName;
        IStream *pstm;
        IStorage *pstg;
    } ;
    IUnknown *pUnkForRelease;
} uSTGMEDIUM;

typedef struct _GDI_OBJECT {
    DWORD ObjectType;
    union {
        wireHBITMAP hBitmap;
        wireHPALETTE hPalette;
        wireHGLOBAL hGeneric;
    } u;
} GDI_OBJECT;
typedef struct _userSTGMEDIUM {
    __extension__ struct _STGMEDIUM_UNION {
        DWORD tymed;
        union {
            wireHMETAFILEPICT hMetaFilePict;
            wireHENHMETAFILE hHEnhMetaFile;
            GDI_OBJECT *hGdiHandle;
            wireHGLOBAL hGlobal;
            LPOLESTR lpszFileName;
            BYTE_BLOB *pstm;
            BYTE_BLOB *pstg;
        } u;
    } ;
    IUnknown *pUnkForRelease;
} userSTGMEDIUM;
typedef userSTGMEDIUM *wireSTGMEDIUM;
typedef uSTGMEDIUM STGMEDIUM;
typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;
typedef STGMEDIUM ASYNC_STGMEDIUM;
typedef STGMEDIUM *LPSTGMEDIUM;
typedef struct _userFLAG_STGMEDIUM {
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
} userFLAG_STGMEDIUM;
typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
typedef struct _FLAG_STGMEDIUM {
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
} FLAG_STGMEDIUM;
extern "C" const GUID IID_IAdviseSink;

struct
IAdviseSink : public IUnknown
{
    virtual void __attribute__((__stdcall__)) OnDataChange(
        FORMATETC *pFormatetc,
        STGMEDIUM *pStgmed) = 0;

    virtual void __attribute__((__stdcall__)) OnViewChange(
        DWORD dwAspect,
        LONG lindex) = 0;

    virtual void __attribute__((__stdcall__)) OnRename(
        IMoniker *pmk) = 0;

    virtual void __attribute__((__stdcall__)) OnSave(
        ) = 0;

    virtual void __attribute__((__stdcall__)) OnClose(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IAdviseSink>() { static const IID __uuid_inst = {0x0000010f,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IAdviseSink*>() { return __mingw_uuidof<IAdviseSink>(); } }
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnSave_Proxy(
    IAdviseSink* This);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IAdviseSink_RemoteOnClose_Proxy(
    IAdviseSink* This);
void __attribute__((__stdcall__)) IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IAdviseSink_OnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    STGMEDIUM *pStgmed);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnDataChange_Stub(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void __attribute__((__stdcall__)) IAdviseSink_OnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnViewChange_Stub(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void __attribute__((__stdcall__)) IAdviseSink_OnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnRename_Stub(
    IAdviseSink* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) IAdviseSink_OnSave_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnSave_Stub(
    IAdviseSink* This);
void __attribute__((__stdcall__)) IAdviseSink_OnClose_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) IAdviseSink_OnClose_Stub(
    IAdviseSink* This);
extern "C" const GUID IID_AsyncIAdviseSink;

struct
AsyncIAdviseSink : public IUnknown
{
    virtual void __attribute__((__stdcall__)) Begin_OnDataChange(
        FORMATETC *pFormatetc,
        STGMEDIUM *pStgmed) = 0;

    virtual void __attribute__((__stdcall__)) Finish_OnDataChange(
        ) = 0;

    virtual void __attribute__((__stdcall__)) Begin_OnViewChange(
        DWORD dwAspect,
        LONG lindex) = 0;

    virtual void __attribute__((__stdcall__)) Finish_OnViewChange(
        ) = 0;

    virtual void __attribute__((__stdcall__)) Begin_OnRename(
        IMoniker *pmk) = 0;

    virtual void __attribute__((__stdcall__)) Finish_OnRename(
        ) = 0;

    virtual void __attribute__((__stdcall__)) Begin_OnSave(
        ) = 0;

    virtual void __attribute__((__stdcall__)) Finish_OnSave(
        ) = 0;

    virtual void __attribute__((__stdcall__)) Begin_OnClose(
        ) = 0;

    virtual void __attribute__((__stdcall__)) Finish_OnClose(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<AsyncIAdviseSink>() { static const IID __uuid_inst = {0x00000150,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<AsyncIAdviseSink*>() { return __mingw_uuidof<AsyncIAdviseSink>(); } }
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
    IAdviseSink* This);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
    IAdviseSink* This);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
    IAdviseSink* This);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
    IAdviseSink* This);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_OnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    STGMEDIUM *pStgmed);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_OnDataChange_Stub(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_OnDataChange_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_OnDataChange_Stub(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_OnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_OnViewChange_Stub(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_OnViewChange_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_OnViewChange_Stub(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_OnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_OnRename_Stub(
    IAdviseSink* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_OnRename_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_OnRename_Stub(
    IAdviseSink* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_OnSave_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_OnSave_Stub(
    IAdviseSink* This);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_OnSave_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_OnSave_Stub(
    IAdviseSink* This);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_OnClose_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Begin_OnClose_Stub(
    IAdviseSink* This);
void __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_OnClose_Proxy(
    IAdviseSink* This);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink_Finish_OnClose_Stub(
    IAdviseSink* This);
typedef IAdviseSink2 *LPADVISESINK2;
extern "C" const GUID IID_IAdviseSink2;

struct
IAdviseSink2 : public IAdviseSink
{
    virtual void __attribute__((__stdcall__)) OnLinkSrcChange(
        IMoniker *pmk) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IAdviseSink2>() { static const IID __uuid_inst = {0x00000125,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IAdviseSink2*>() { return __mingw_uuidof<IAdviseSink2>(); } }
HRESULT __attribute__((__stdcall__)) IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) IAdviseSink2_OnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
HRESULT __attribute__((__stdcall__)) IAdviseSink2_OnLinkSrcChange_Stub(
    IAdviseSink2* This,
    IMoniker *pmk);
extern "C" const GUID IID_AsyncIAdviseSink2;

struct
AsyncIAdviseSink2 : public IAdviseSink
{
    virtual void __attribute__((__stdcall__)) Begin_OnLinkSrcChange(
        IMoniker *pmk) = 0;

    virtual void __attribute__((__stdcall__)) Finish_OnLinkSrcChange(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<AsyncIAdviseSink2>() { static const IID __uuid_inst = {0x00000151,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<AsyncIAdviseSink2*>() { return __mingw_uuidof<AsyncIAdviseSink2>(); } }
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void __attribute__((__stdcall__)) AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
    IAdviseSink2* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
    IAdviseSink2* This);
HRESULT __attribute__((__stdcall__)) AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
    IAdviseSink2* This,
    IMoniker *pmk);
typedef IDataObject *LPDATAOBJECT;
typedef enum tagDATADIR {
    DATADIR_GET = 1,
    DATADIR_SET = 2
} DATADIR;
extern "C" const GUID IID_IDataObject;

struct
IDataObject : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetData(
        FORMATETC *pformatetcIn,
        STGMEDIUM *pmedium) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDataHere(
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium) = 0;

    virtual HRESULT __attribute__((__stdcall__)) QueryGetData(
        FORMATETC *pformatetc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetCanonicalFormatEtc(
        FORMATETC *pformatectIn,
        FORMATETC *pformatetcOut) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetData(
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        WINBOOL fRelease) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnumFormatEtc(
        DWORD dwDirection,
        IEnumFORMATETC **ppenumFormatEtc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DAdvise(
        FORMATETC *pformatetc,
        DWORD advf,
        IAdviseSink *pAdvSink,
        DWORD *pdwConnection) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DUnadvise(
        DWORD dwConnection) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnumDAdvise(
        IEnumSTATDATA **ppenumAdvise) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IDataObject>() { static const IID __uuid_inst = {0x0000010e,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IDataObject*>() { return __mingw_uuidof<IDataObject>(); } }
HRESULT __attribute__((__stdcall__)) IDataObject_RemoteGetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pRemoteMedium);
void __attribute__((__stdcall__)) IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_RemoteGetDataHere_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pRemoteMedium);
void __attribute__((__stdcall__)) IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_QueryGetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc);
void __attribute__((__stdcall__)) IDataObject_QueryGetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_GetCanonicalFormatEtc_Proxy(
    IDataObject* This,
    FORMATETC *pformatectIn,
    FORMATETC *pformatetcOut);
void __attribute__((__stdcall__)) IDataObject_GetCanonicalFormatEtc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_RemoteSetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    FLAG_STGMEDIUM *pmedium,
    WINBOOL fRelease);
void __attribute__((__stdcall__)) IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_EnumFormatEtc_Proxy(
    IDataObject* This,
    DWORD dwDirection,
    IEnumFORMATETC **ppenumFormatEtc);
void __attribute__((__stdcall__)) IDataObject_EnumFormatEtc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_DAdvise_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    DWORD advf,
    IAdviseSink *pAdvSink,
    DWORD *pdwConnection);
void __attribute__((__stdcall__)) IDataObject_DAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_DUnadvise_Proxy(
    IDataObject* This,
    DWORD dwConnection);
void __attribute__((__stdcall__)) IDataObject_DUnadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_EnumDAdvise_Proxy(
    IDataObject* This,
    IEnumSTATDATA **ppenumAdvise);
void __attribute__((__stdcall__)) IDataObject_EnumDAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataObject_GetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pmedium);
HRESULT __attribute__((__stdcall__)) IDataObject_GetData_Stub(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pRemoteMedium);
HRESULT __attribute__((__stdcall__)) IDataObject_GetDataHere_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium);
HRESULT __attribute__((__stdcall__)) IDataObject_GetDataHere_Stub(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pRemoteMedium);
HRESULT __attribute__((__stdcall__)) IDataObject_SetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium,
    WINBOOL fRelease);
HRESULT __attribute__((__stdcall__)) IDataObject_SetData_Stub(
    IDataObject* This,
    FORMATETC *pformatetc,
    FLAG_STGMEDIUM *pmedium,
    WINBOOL fRelease);
typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
extern "C" const GUID IID_IDataAdviseHolder;

struct
IDataAdviseHolder : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Advise(
        IDataObject *pDataObject,
        FORMATETC *pFetc,
        DWORD advf,
        IAdviseSink *pAdvise,
        DWORD *pdwConnection) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Unadvise(
        DWORD dwConnection) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnumAdvise(
        IEnumSTATDATA **ppenumAdvise) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SendOnDataChange(
        IDataObject *pDataObject,
        DWORD dwReserved,
        DWORD advf) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IDataAdviseHolder>() { static const IID __uuid_inst = {0x00000110,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IDataAdviseHolder*>() { return __mingw_uuidof<IDataAdviseHolder>(); } }
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_Advise_Proxy(
    IDataAdviseHolder* This,
    IDataObject *pDataObject,
    FORMATETC *pFetc,
    DWORD advf,
    IAdviseSink *pAdvise,
    DWORD *pdwConnection);
void __attribute__((__stdcall__)) IDataAdviseHolder_Advise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_Unadvise_Proxy(
    IDataAdviseHolder* This,
    DWORD dwConnection);
void __attribute__((__stdcall__)) IDataAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_EnumAdvise_Proxy(
    IDataAdviseHolder* This,
    IEnumSTATDATA **ppenumAdvise);
void __attribute__((__stdcall__)) IDataAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataAdviseHolder_SendOnDataChange_Proxy(
    IDataAdviseHolder* This,
    IDataObject *pDataObject,
    DWORD dwReserved,
    DWORD advf);
void __attribute__((__stdcall__)) IDataAdviseHolder_SendOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IMessageFilter *LPMESSAGEFILTER;
typedef enum tagCALLTYPE {
    CALLTYPE_TOPLEVEL = 1,
    CALLTYPE_NESTED = 2,
    CALLTYPE_ASYNC = 3,
    CALLTYPE_TOPLEVEL_CALLPENDING = 4,
    CALLTYPE_ASYNC_CALLPENDING = 5
} CALLTYPE;
typedef enum tagSERVERCALL {
    SERVERCALL_ISHANDLED = 0,
    SERVERCALL_REJECTED = 1,
    SERVERCALL_RETRYLATER = 2
} SERVERCALL;
typedef enum tagPENDINGTYPE {
    PENDINGTYPE_TOPLEVEL = 1,
    PENDINGTYPE_NESTED = 2
} PENDINGTYPE;
typedef enum tagPENDINGMSG {
    PENDINGMSG_CANCELCALL = 0,
    PENDINGMSG_WAITNOPROCESS = 1,
    PENDINGMSG_WAITDEFPROCESS = 2
} PENDINGMSG;
typedef struct tagINTERFACEINFO {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
} INTERFACEINFO;
typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
extern "C" const GUID IID_IMessageFilter;

struct
IMessageFilter : public IUnknown
{
    virtual DWORD __attribute__((__stdcall__)) HandleInComingCall(
        DWORD dwCallType,
        HTASK htaskCaller,
        DWORD dwTickCount,
        LPINTERFACEINFO lpInterfaceInfo) = 0;

    virtual DWORD __attribute__((__stdcall__)) RetryRejectedCall(
        HTASK htaskCallee,
        DWORD dwTickCount,
        DWORD dwRejectType) = 0;

    virtual DWORD __attribute__((__stdcall__)) MessagePending(
        HTASK htaskCallee,
        DWORD dwTickCount,
        DWORD dwPendingType) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IMessageFilter>() { static const IID __uuid_inst = {0x00000016,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IMessageFilter*>() { return __mingw_uuidof<IMessageFilter>(); } }
DWORD __attribute__((__stdcall__)) IMessageFilter_HandleInComingCall_Proxy(
    IMessageFilter* This,
    DWORD dwCallType,
    HTASK htaskCaller,
    DWORD dwTickCount,
    LPINTERFACEINFO lpInterfaceInfo);
void __attribute__((__stdcall__)) IMessageFilter_HandleInComingCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
DWORD __attribute__((__stdcall__)) IMessageFilter_RetryRejectedCall_Proxy(
    IMessageFilter* This,
    HTASK htaskCallee,
    DWORD dwTickCount,
    DWORD dwRejectType);
void __attribute__((__stdcall__)) IMessageFilter_RetryRejectedCall_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
DWORD __attribute__((__stdcall__)) IMessageFilter_MessagePending_Proxy(
    IMessageFilter* This,
    HTASK htaskCallee,
    DWORD dwTickCount,
    DWORD dwPendingType);
void __attribute__((__stdcall__)) IMessageFilter_MessagePending_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);




extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;







extern "C" const GUID IID_IClassActivator;

struct
IClassActivator : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetClassObject(
        const IID & rclsid,
        DWORD dwClassContext,
        LCID locale,
        const IID & riid,
        void **ppv) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IClassActivator>() { static const IID __uuid_inst = {0x00000140,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IClassActivator*>() { return __mingw_uuidof<IClassActivator>(); } }
HRESULT __attribute__((__stdcall__)) IClassActivator_GetClassObject_Proxy(
    IClassActivator* This,
    const IID & rclsid,
    DWORD dwClassContext,
    LCID locale,
    const IID & riid,
    void **ppv);
void __attribute__((__stdcall__)) IClassActivator_GetClassObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IFillLockBytes;

struct
IFillLockBytes : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) FillAppend(
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten) = 0;

    virtual HRESULT __attribute__((__stdcall__)) FillAt(
        ULARGE_INTEGER ulOffset,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetFillSize(
        ULARGE_INTEGER ulSize) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Terminate(
        WINBOOL bCanceled) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IFillLockBytes>() { static const IID __uuid_inst = {0x99caf010,0x415e,0x11cf, {0x88,0x14,0x00,0xaa,0x00,0xb5,0x69,0xf5}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IFillLockBytes*>() { return __mingw_uuidof<IFillLockBytes>(); } }
HRESULT __attribute__((__stdcall__)) IFillLockBytes_RemoteFillAppend_Proxy(
    IFillLockBytes* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void __attribute__((__stdcall__)) IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_RemoteFillAt_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void __attribute__((__stdcall__)) IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_SetFillSize_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulSize);
void __attribute__((__stdcall__)) IFillLockBytes_SetFillSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_Terminate_Proxy(
    IFillLockBytes* This,
    WINBOOL bCanceled);
void __attribute__((__stdcall__)) IFillLockBytes_Terminate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_FillAppend_Proxy(
    IFillLockBytes* This,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_FillAppend_Stub(
    IFillLockBytes* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_FillAt_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT __attribute__((__stdcall__)) IFillLockBytes_FillAt_Stub(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
extern "C" const GUID IID_IProgressNotify;

struct
IProgressNotify : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) OnProgress(
        DWORD dwProgressCurrent,
        DWORD dwProgressMaximum,
        WINBOOL fAccurate,
        WINBOOL fOwner) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IProgressNotify>() { static const IID __uuid_inst = {0xa9d758a0,0x4617,0x11cf, {0x95,0xfc,0x00,0xaa,0x00,0x68,0x0d,0xb4}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IProgressNotify*>() { return __mingw_uuidof<IProgressNotify>(); } }
HRESULT __attribute__((__stdcall__)) IProgressNotify_OnProgress_Proxy(
    IProgressNotify* This,
    DWORD dwProgressCurrent,
    DWORD dwProgressMaximum,
    WINBOOL fAccurate,
    WINBOOL fOwner);
void __attribute__((__stdcall__)) IProgressNotify_OnProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef struct tagStorageLayout {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
} StorageLayout;
extern "C" const GUID IID_ILayoutStorage;

struct
ILayoutStorage : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) LayoutScript(
        StorageLayout *pStorageLayout,
        DWORD nEntries,
        DWORD glfInterleavedFlag) = 0;

    virtual HRESULT __attribute__((__stdcall__)) BeginMonitor(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EndMonitor(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ReLayoutDocfile(
        OLECHAR *pwcsNewDfName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ReLayoutDocfileOnILockBytes(
        ILockBytes *pILockBytes) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ILayoutStorage>() { static const IID __uuid_inst = {0x0e6d4d90,0x6738,0x11cf, {0x96,0x08,0x00,0xaa,0x00,0x68,0x0d,0xb4}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ILayoutStorage*>() { return __mingw_uuidof<ILayoutStorage>(); } }
HRESULT __attribute__((__stdcall__)) ILayoutStorage_LayoutScript_Proxy(
    ILayoutStorage* This,
    StorageLayout *pStorageLayout,
    DWORD nEntries,
    DWORD glfInterleavedFlag);
void __attribute__((__stdcall__)) ILayoutStorage_LayoutScript_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILayoutStorage_BeginMonitor_Proxy(
    ILayoutStorage* This);
void __attribute__((__stdcall__)) ILayoutStorage_BeginMonitor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILayoutStorage_EndMonitor_Proxy(
    ILayoutStorage* This);
void __attribute__((__stdcall__)) ILayoutStorage_EndMonitor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILayoutStorage_ReLayoutDocfile_Proxy(
    ILayoutStorage* This,
    OLECHAR *pwcsNewDfName);
void __attribute__((__stdcall__)) ILayoutStorage_ReLayoutDocfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy(
    ILayoutStorage* This,
    ILockBytes *pILockBytes);
void __attribute__((__stdcall__)) ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IBlockingLock;

struct
IBlockingLock : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Lock(
        DWORD dwTimeout) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Unlock(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IBlockingLock>() { static const IID __uuid_inst = {0x30f3d47a,0x6447,0x11d1, {0x8e,0x3c,0x00,0xc0,0x4f,0xb9,0x38,0x6d}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IBlockingLock*>() { return __mingw_uuidof<IBlockingLock>(); } }
HRESULT __attribute__((__stdcall__)) IBlockingLock_Lock_Proxy(
    IBlockingLock* This,
    DWORD dwTimeout);
void __attribute__((__stdcall__)) IBlockingLock_Lock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBlockingLock_Unlock_Proxy(
    IBlockingLock* This);
void __attribute__((__stdcall__)) IBlockingLock_Unlock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_ITimeAndNoticeControl;

struct
ITimeAndNoticeControl : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SuppressChanges(
        DWORD res1,
        DWORD res2) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ITimeAndNoticeControl>() { static const IID __uuid_inst = {0xbc0bf6ae,0x8878,0x11d1, {0x83,0xe9,0x00,0xc0,0x4f,0xc2,0xc6,0xd4}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ITimeAndNoticeControl*>() { return __mingw_uuidof<ITimeAndNoticeControl>(); } }
HRESULT __attribute__((__stdcall__)) ITimeAndNoticeControl_SuppressChanges_Proxy(
    ITimeAndNoticeControl* This,
    DWORD res1,
    DWORD res2);
void __attribute__((__stdcall__)) ITimeAndNoticeControl_SuppressChanges_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IOplockStorage;

struct
IOplockStorage : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) CreateStorageEx(
        LPCWSTR pwcsName,
        DWORD grfMode,
        DWORD stgfmt,
        DWORD grfAttrs,
        const IID & riid,
        void **ppstgOpen) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OpenStorageEx(
        LPCWSTR pwcsName,
        DWORD grfMode,
        DWORD stgfmt,
        DWORD grfAttrs,
        const IID & riid,
        void **ppstgOpen) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOplockStorage>() { static const IID __uuid_inst = {0x8d19c834,0x8879,0x11d1, {0x83,0xe9,0x00,0xc0,0x4f,0xc2,0xc6,0xd4}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOplockStorage*>() { return __mingw_uuidof<IOplockStorage>(); } }
HRESULT __attribute__((__stdcall__)) IOplockStorage_CreateStorageEx_Proxy(
    IOplockStorage* This,
    LPCWSTR pwcsName,
    DWORD grfMode,
    DWORD stgfmt,
    DWORD grfAttrs,
    const IID & riid,
    void **ppstgOpen);
void __attribute__((__stdcall__)) IOplockStorage_CreateStorageEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOplockStorage_OpenStorageEx_Proxy(
    IOplockStorage* This,
    LPCWSTR pwcsName,
    DWORD grfMode,
    DWORD stgfmt,
    DWORD grfAttrs,
    const IID & riid,
    void **ppstgOpen);
void __attribute__((__stdcall__)) IOplockStorage_OpenStorageEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IDirectWriterLock;

struct
IDirectWriterLock : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) WaitForWriteAccess(
        DWORD dwTimeout) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ReleaseWriteAccess(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) HaveWriteAccess(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IDirectWriterLock>() { static const IID __uuid_inst = {0x0e6d4d92,0x6738,0x11cf, {0x96,0x08,0x00,0xaa,0x00,0x68,0x0d,0xb4}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IDirectWriterLock*>() { return __mingw_uuidof<IDirectWriterLock>(); } }
HRESULT __attribute__((__stdcall__)) IDirectWriterLock_WaitForWriteAccess_Proxy(
    IDirectWriterLock* This,
    DWORD dwTimeout);
void __attribute__((__stdcall__)) IDirectWriterLock_WaitForWriteAccess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDirectWriterLock_ReleaseWriteAccess_Proxy(
    IDirectWriterLock* This);
void __attribute__((__stdcall__)) IDirectWriterLock_ReleaseWriteAccess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDirectWriterLock_HaveWriteAccess_Proxy(
    IDirectWriterLock* This);
void __attribute__((__stdcall__)) IDirectWriterLock_HaveWriteAccess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IUrlMon;

struct
IUrlMon : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) AsyncGetClassBits(
        const IID & rclsid,
        LPCWSTR pszTYPE,
        LPCWSTR pszExt,
        DWORD dwFileVersionMS,
        DWORD dwFileVersionLS,
        LPCWSTR pszCodeBase,
        IBindCtx *pbc,
        DWORD dwClassContext,
        const IID & riid,
        DWORD flags) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IUrlMon>() { static const IID __uuid_inst = {0x00000026,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IUrlMon*>() { return __mingw_uuidof<IUrlMon>(); } }
HRESULT __attribute__((__stdcall__)) IUrlMon_AsyncGetClassBits_Proxy(
    IUrlMon* This,
    const IID & rclsid,
    LPCWSTR pszTYPE,
    LPCWSTR pszExt,
    DWORD dwFileVersionMS,
    DWORD dwFileVersionLS,
    LPCWSTR pszCodeBase,
    IBindCtx *pbc,
    DWORD dwClassContext,
    const IID & riid,
    DWORD flags);
void __attribute__((__stdcall__)) IUrlMon_AsyncGetClassBits_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IForegroundTransfer;

struct
IForegroundTransfer : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) AllowForegroundTransfer(
        void *lpvReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IForegroundTransfer>() { static const IID __uuid_inst = {0x00000145,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IForegroundTransfer*>() { return __mingw_uuidof<IForegroundTransfer>(); } }
HRESULT __attribute__((__stdcall__)) IForegroundTransfer_AllowForegroundTransfer_Proxy(
    IForegroundTransfer* This,
    void *lpvReserved);
void __attribute__((__stdcall__)) IForegroundTransfer_AllowForegroundTransfer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IThumbnailExtractor;

struct
IThumbnailExtractor : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) ExtractThumbnail(
        IStorage *pStg,
        ULONG ulLength,
        ULONG ulHeight,
        ULONG *pulOutputLength,
        ULONG *pulOutputHeight,
        HBITMAP *phOutputBitmap) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnFileUpdated(
        IStorage *pStg) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IThumbnailExtractor>() { static const IID __uuid_inst = {0x969dc708,0x5c76,0x11d1, {0x8d,0x86,0x00,0x00,0xf8,0x04,0xb0,0x57}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IThumbnailExtractor*>() { return __mingw_uuidof<IThumbnailExtractor>(); } }
HRESULT __attribute__((__stdcall__)) IThumbnailExtractor_ExtractThumbnail_Proxy(
    IThumbnailExtractor* This,
    IStorage *pStg,
    ULONG ulLength,
    ULONG ulHeight,
    ULONG *pulOutputLength,
    ULONG *pulOutputHeight,
    HBITMAP *phOutputBitmap);
void __attribute__((__stdcall__)) IThumbnailExtractor_ExtractThumbnail_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IThumbnailExtractor_OnFileUpdated_Proxy(
    IThumbnailExtractor* This,
    IStorage *pStg);
void __attribute__((__stdcall__)) IThumbnailExtractor_OnFileUpdated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IDummyHICONIncluder;

struct
IDummyHICONIncluder : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Dummy(
        HICON h1,
        HDC h2) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IDummyHICONIncluder>() { static const IID __uuid_inst = {0x947990de,0xcc28,0x11d2, {0xa0,0xf7,0x00,0x80,0x5f,0x85,0x8f,0xb1}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IDummyHICONIncluder*>() { return __mingw_uuidof<IDummyHICONIncluder>(); } }
HRESULT __attribute__((__stdcall__)) IDummyHICONIncluder_Dummy_Proxy(
    IDummyHICONIncluder* This,
    HICON h1,
    HDC h2);
void __attribute__((__stdcall__)) IDummyHICONIncluder_Dummy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);



typedef enum tagApplicationType {
    ServerApplication = 0,
    LibraryApplication = 1
} ApplicationType;
typedef enum tagShutdownType {
    IdleShutdown = 0,
    ForcedShutdown = 1
} ShutdownType;






extern "C" const GUID IID_IProcessLock;

struct
IProcessLock : public IUnknown
{
    virtual ULONG __attribute__((__stdcall__)) AddRefOnProcess(
        ) = 0;

    virtual ULONG __attribute__((__stdcall__)) ReleaseRefOnProcess(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IProcessLock>() { static const IID __uuid_inst = {0x000001d5,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IProcessLock*>() { return __mingw_uuidof<IProcessLock>(); } }
ULONG __attribute__((__stdcall__)) IProcessLock_AddRefOnProcess_Proxy(
    IProcessLock* This);
void __attribute__((__stdcall__)) IProcessLock_AddRefOnProcess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) IProcessLock_ReleaseRefOnProcess_Proxy(
    IProcessLock* This);
void __attribute__((__stdcall__)) IProcessLock_ReleaseRefOnProcess_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_ISurrogateService;

struct
ISurrogateService : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Init(
        const GUID & rguidProcessID,
        IProcessLock *pProcessLock,
        WINBOOL *pfApplicationAware) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ApplicationLaunch(
        const GUID & rguidApplID,
        ApplicationType appType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ApplicationFree(
        const GUID & rguidApplID) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CatalogRefresh(
        ULONG ulReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ProcessShutdown(
        ShutdownType shutdownType) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ISurrogateService>() { static const IID __uuid_inst = {0x000001d4,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ISurrogateService*>() { return __mingw_uuidof<ISurrogateService>(); } }
HRESULT __attribute__((__stdcall__)) ISurrogateService_Init_Proxy(
    ISurrogateService* This,
    const GUID & rguidProcessID,
    IProcessLock *pProcessLock,
    WINBOOL *pfApplicationAware);
void __attribute__((__stdcall__)) ISurrogateService_Init_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISurrogateService_ApplicationLaunch_Proxy(
    ISurrogateService* This,
    const GUID & rguidApplID,
    ApplicationType appType);
void __attribute__((__stdcall__)) ISurrogateService_ApplicationLaunch_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISurrogateService_ApplicationFree_Proxy(
    ISurrogateService* This,
    const GUID & rguidApplID);
void __attribute__((__stdcall__)) ISurrogateService_ApplicationFree_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISurrogateService_CatalogRefresh_Proxy(
    ISurrogateService* This,
    ULONG ulReserved);
void __attribute__((__stdcall__)) ISurrogateService_CatalogRefresh_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISurrogateService_ProcessShutdown_Proxy(
    ISurrogateService* This,
    ShutdownType shutdownType);
void __attribute__((__stdcall__)) ISurrogateService_ProcessShutdown_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInitializeSpy *LPINITIALIZESPY;
extern "C" const GUID IID_IInitializeSpy;

struct
IInitializeSpy : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) PreInitialize(
        DWORD dwCoInit,
        DWORD dwCurThreadAptRefs) = 0;

    virtual HRESULT __attribute__((__stdcall__)) PostInitialize(
        HRESULT hrCoInit,
        DWORD dwCoInit,
        DWORD dwNewThreadAptRefs) = 0;

    virtual HRESULT __attribute__((__stdcall__)) PreUninitialize(
        DWORD dwCurThreadAptRefs) = 0;

    virtual HRESULT __attribute__((__stdcall__)) PostUninitialize(
        DWORD dwNewThreadAptRefs) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInitializeSpy>() { static const IID __uuid_inst = {0x00000034,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInitializeSpy*>() { return __mingw_uuidof<IInitializeSpy>(); } }
HRESULT __attribute__((__stdcall__)) IInitializeSpy_PreInitialize_Proxy(
    IInitializeSpy* This,
    DWORD dwCoInit,
    DWORD dwCurThreadAptRefs);
void __attribute__((__stdcall__)) IInitializeSpy_PreInitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInitializeSpy_PostInitialize_Proxy(
    IInitializeSpy* This,
    HRESULT hrCoInit,
    DWORD dwCoInit,
    DWORD dwNewThreadAptRefs);
void __attribute__((__stdcall__)) IInitializeSpy_PostInitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInitializeSpy_PreUninitialize_Proxy(
    IInitializeSpy* This,
    DWORD dwCurThreadAptRefs);
void __attribute__((__stdcall__)) IInitializeSpy_PreUninitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInitializeSpy_PostUninitialize_Proxy(
    IInitializeSpy* This,
    DWORD dwNewThreadAptRefs);
void __attribute__((__stdcall__)) IInitializeSpy_PostUninitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IApartmentShutdown;

struct
IApartmentShutdown : public IUnknown
{
    virtual void __attribute__((__stdcall__)) OnUninitialize(
        UINT64 ui64ApartmentIdentifier) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IApartmentShutdown>() { static const IID __uuid_inst = {0xa2f05a09,0x27a2,0x42b5, {0xbc,0x0e,0xac,0x16,0x3e,0xf4,0x9d,0x9b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IApartmentShutdown*>() { return __mingw_uuidof<IApartmentShutdown>(); } }
void __attribute__((__stdcall__)) IApartmentShutdown_OnUninitialize_Proxy(
    IApartmentShutdown* This,
    UINT64 ui64ApartmentIdentifier);
void __attribute__((__stdcall__)) IApartmentShutdown_OnUninitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);






ULONG __attribute__((__stdcall__)) SNB_UserSize (ULONG *, ULONG, SNB *);
unsigned char * __attribute__((__stdcall__)) SNB_UserMarshal (ULONG *, unsigned char *, SNB *);
unsigned char * __attribute__((__stdcall__)) SNB_UserUnmarshal(ULONG *, unsigned char *, SNB *);
void __attribute__((__stdcall__)) SNB_UserFree (ULONG *, SNB *);
ULONG __attribute__((__stdcall__)) CLIPFORMAT_UserSize (ULONG *, ULONG, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserMarshal (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void __attribute__((__stdcall__)) CLIPFORMAT_UserFree (ULONG *, CLIPFORMAT *);
ULONG __attribute__((__stdcall__)) STGMEDIUM_UserSize (ULONG *, ULONG, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserMarshal (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void __attribute__((__stdcall__)) STGMEDIUM_UserFree (ULONG *, STGMEDIUM *);
ULONG __attribute__((__stdcall__)) ASYNC_STGMEDIUM_UserSize (ULONG *, ULONG, ASYNC_STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) ASYNC_STGMEDIUM_UserMarshal (ULONG *, unsigned char *, ASYNC_STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) ASYNC_STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, ASYNC_STGMEDIUM *);
void __attribute__((__stdcall__)) ASYNC_STGMEDIUM_UserFree (ULONG *, ASYNC_STGMEDIUM *);
ULONG __attribute__((__stdcall__)) FLAG_STGMEDIUM_UserSize (ULONG *, ULONG, FLAG_STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) FLAG_STGMEDIUM_UserMarshal (ULONG *, unsigned char *, FLAG_STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) FLAG_STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, FLAG_STGMEDIUM *);
void __attribute__((__stdcall__)) FLAG_STGMEDIUM_UserFree (ULONG *, FLAG_STGMEDIUM *);
ULONG __attribute__((__stdcall__)) HBITMAP_UserSize (ULONG *, ULONG, HBITMAP *);
unsigned char * __attribute__((__stdcall__)) HBITMAP_UserMarshal (ULONG *, unsigned char *, HBITMAP *);
unsigned char * __attribute__((__stdcall__)) HBITMAP_UserUnmarshal(ULONG *, unsigned char *, HBITMAP *);
void __attribute__((__stdcall__)) HBITMAP_UserFree (ULONG *, HBITMAP *);
ULONG __attribute__((__stdcall__)) HICON_UserSize (ULONG *, ULONG, HICON *);
unsigned char * __attribute__((__stdcall__)) HICON_UserMarshal (ULONG *, unsigned char *, HICON *);
unsigned char * __attribute__((__stdcall__)) HICON_UserUnmarshal(ULONG *, unsigned char *, HICON *);
void __attribute__((__stdcall__)) HICON_UserFree (ULONG *, HICON *);
ULONG __attribute__((__stdcall__)) HDC_UserSize (ULONG *, ULONG, HDC *);
unsigned char * __attribute__((__stdcall__)) HDC_UserMarshal (ULONG *, unsigned char *, HDC *);
unsigned char * __attribute__((__stdcall__)) HDC_UserUnmarshal(ULONG *, unsigned char *, HDC *);
void __attribute__((__stdcall__)) HDC_UserFree (ULONG *, HDC *);




}
extern "C" DWORD __attribute__((__stdcall__)) CoBuildVersion (void);
extern "C" HRESULT __attribute__((__stdcall__)) CoInitialize (LPVOID pvReserved);
extern "C" HRESULT __attribute__((__stdcall__)) CoRegisterMallocSpy (LPMALLOCSPY pMallocSpy);
extern "C" HRESULT __attribute__((__stdcall__)) CoRevokeMallocSpy (void);
extern "C" HRESULT __attribute__((__stdcall__)) CoCreateStandardMalloc (DWORD memctx, IMalloc **ppMalloc);
extern "C" HRESULT __attribute__((__stdcall__)) CoRegisterInitializeSpy (LPINITIALIZESPY pSpy, ULARGE_INTEGER *puliCookie);
extern "C" HRESULT __attribute__((__stdcall__)) CoRevokeInitializeSpy (ULARGE_INTEGER uliCookie);

typedef enum tagCOMSD {
  SD_LAUNCHPERMISSIONS = 0,
  SD_ACCESSPERMISSIONS = 1,
  SD_LAUNCHRESTRICTIONS = 2,
  SD_ACCESSRESTRICTIONS = 3
} COMSD;

extern "C" HRESULT __attribute__((__stdcall__)) CoGetSystemSecurityPermissions (COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD);
extern "C" HINSTANCE __attribute__((__stdcall__)) CoLoadLibrary (LPOLESTR lpszLibName, WINBOOL bAutoFree);
extern "C" void __attribute__((__stdcall__)) CoFreeLibrary (HINSTANCE hInst);
extern "C" void __attribute__((__stdcall__)) CoFreeAllLibraries (void);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetInstanceFromFile (COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR *pwszName, DWORD dwCount, MULTI_QI *pResults);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetInstanceFromIStorage (COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, struct IStorage *pstg, DWORD dwCount, MULTI_QI *pResults);
extern "C" HRESULT __attribute__((__stdcall__)) CoAllowSetForegroundWindow (IUnknown *pUnk, LPVOID lpvReserved);
extern "C" HRESULT __attribute__((__stdcall__)) DcomChannelSetHResult (LPVOID pvReserved, ULONG *pulReserved, HRESULT appsHR);
extern "C" WINBOOL __attribute__((__stdcall__)) CoIsOle1Class (const IID & rclsid);
extern "C" HRESULT __attribute__((__stdcall__)) CLSIDFromProgIDEx (LPCOLESTR lpszProgID, LPCLSID lpclsid);
extern "C" WINBOOL __attribute__((__stdcall__)) CoFileTimeToDosDateTime (FILETIME *lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
extern "C" WINBOOL __attribute__((__stdcall__)) CoDosDateTimeToFileTime (WORD nDosDate, WORD nDosTime, FILETIME *lpFileTime);
extern "C" HRESULT __attribute__((__stdcall__)) CoFileTimeNow (FILETIME *lpFileTime);
extern "C" HRESULT __attribute__((__stdcall__)) CoRegisterMessageFilter (LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER *lplpMessageFilter);
extern "C" HRESULT __attribute__((__stdcall__)) CoRegisterChannelHook (const GUID & ExtensionUuid, IChannelHook *pChannelHook);
extern "C" HRESULT __attribute__((__stdcall__)) CoTreatAsClass (const IID & clsidOld, const IID & clsidNew);
extern "C" HRESULT __attribute__((__stdcall__)) CreateDataAdviseHolder (LPDATAADVISEHOLDER *ppDAHolder);
extern "C" HRESULT __attribute__((__stdcall__)) CreateDataCache (LPUNKNOWN pUnkOuter, const IID & rclsid, const IID & iid, LPVOID *ppv);
extern "C" HRESULT __attribute__((__stdcall__)) StgOpenLayoutDocfile (OLECHAR const *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen);



extern "C" HRESULT __attribute__((__stdcall__)) StgCreateDocfile (const WCHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen);
extern "C" HRESULT __attribute__((__stdcall__)) StgCreateDocfileOnILockBytes (ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen);
extern "C" HRESULT __attribute__((__stdcall__)) StgOpenStorage (const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen);
extern "C" HRESULT __attribute__((__stdcall__)) StgOpenStorageOnILockBytes (ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen);
extern "C" HRESULT __attribute__((__stdcall__)) StgIsStorageFile (const WCHAR *pwcsName);
extern "C" HRESULT __attribute__((__stdcall__)) StgIsStorageILockBytes (ILockBytes *plkbyt);
extern "C" HRESULT __attribute__((__stdcall__)) StgSetTimes (const WCHAR *lpszName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime);
extern "C" HRESULT __attribute__((__stdcall__)) StgOpenAsyncDocfileOnIFillLockBytes (IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage **ppstgOpen);
extern "C" HRESULT __attribute__((__stdcall__)) StgGetIFillLockBytesOnILockBytes (ILockBytes *pilb, IFillLockBytes **ppflb);
extern "C" HRESULT __attribute__((__stdcall__)) StgGetIFillLockBytesOnFile (OLECHAR const *pwcsName, IFillLockBytes **ppflb);




typedef struct tagSTGOPTIONS {
  USHORT usVersion;
  USHORT reserved;
  ULONG ulSectorSize;

  const WCHAR *pwcsTemplateFile;

} STGOPTIONS;


extern "C" HRESULT __attribute__((__stdcall__)) StgCreateStorageEx (const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID & riid, void **ppObjectOpen);
extern "C" HRESULT __attribute__((__stdcall__)) StgOpenStorageEx (const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID & riid, void **ppObjectOpen);
extern "C" HRESULT __attribute__((__stdcall__)) BindMoniker (LPMONIKER pmk, DWORD grfOpt, const IID & iidResult, LPVOID *ppvResult);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetObject (LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID & riid, void **ppv);
extern "C" HRESULT __attribute__((__stdcall__)) MkParseDisplayName (LPBC pbc, LPCOLESTR szUserName, ULONG *pchEaten, LPMONIKER *ppmk);
extern "C" HRESULT __attribute__((__stdcall__)) MonikerRelativePathTo (LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER *ppmkRelPath, WINBOOL dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) MonikerCommonPrefixWith (LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER *ppmkCommon);
extern "C" HRESULT __attribute__((__stdcall__)) CreateBindCtx (DWORD reserved, LPBC *ppbc);
extern "C" HRESULT __attribute__((__stdcall__)) CreateGenericComposite (LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER *ppmkComposite);
extern "C" HRESULT __attribute__((__stdcall__)) GetClassFile (LPCOLESTR szFilename, CLSID *pclsid);
extern "C" HRESULT __attribute__((__stdcall__)) CreateClassMoniker (const IID & rclsid, LPMONIKER *ppmk);
extern "C" HRESULT __attribute__((__stdcall__)) CreateFileMoniker (LPCOLESTR lpszPathName, LPMONIKER *ppmk);
extern "C" HRESULT __attribute__((__stdcall__)) CreateItemMoniker (LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER *ppmk);
extern "C" HRESULT __attribute__((__stdcall__)) CreateAntiMoniker (LPMONIKER *ppmk);
extern "C" HRESULT __attribute__((__stdcall__)) CreatePointerMoniker (LPUNKNOWN punk, LPMONIKER *ppmk);
extern "C" HRESULT __attribute__((__stdcall__)) CreateObjrefMoniker (LPUNKNOWN punk, LPMONIKER *ppmk);



extern "C" HRESULT __attribute__((__stdcall__)) CoInstall (IBindCtx *pbc, DWORD dwFlags, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, LPWSTR pszCodeBase);
extern "C" HRESULT __attribute__((__stdcall__)) GetRunningObjectTable (DWORD reserved, LPRUNNINGOBJECTTABLE *pprot);
typedef struct IPersistMoniker IPersistMoniker;




typedef struct IMonikerProp IMonikerProp;




typedef struct IBindProtocol IBindProtocol;




typedef struct IBinding IBinding;




typedef struct IBindStatusCallback IBindStatusCallback;




typedef struct IBindStatusCallbackEx IBindStatusCallbackEx;




typedef struct IAuthenticate IAuthenticate;




typedef struct IAuthenticateEx IAuthenticateEx;




typedef struct IHttpNegotiate IHttpNegotiate;




typedef struct IHttpNegotiate2 IHttpNegotiate2;




typedef struct IHttpNegotiate3 IHttpNegotiate3;




typedef struct IWinInetFileStream IWinInetFileStream;




typedef struct IWindowForBindingUI IWindowForBindingUI;




typedef struct ICodeInstall ICodeInstall;




typedef struct IUri IUri;




typedef struct IUriContainer IUriContainer;




typedef struct IUriBuilder IUriBuilder;




typedef struct IUriBuilderFactory IUriBuilderFactory;




typedef struct IWinInetInfo IWinInetInfo;




typedef struct IHttpSecurity IHttpSecurity;




typedef struct IWinInetHttpInfo IWinInetHttpInfo;




typedef struct IWinInetHttpTimeouts IWinInetHttpTimeouts;




typedef struct IWinInetCacheHints IWinInetCacheHints;




typedef struct IWinInetCacheHints2 IWinInetCacheHints2;




typedef struct IBindHost IBindHost;




typedef struct IInternet IInternet;




typedef struct IInternetBindInfo IInternetBindInfo;




typedef struct IInternetBindInfoEx IInternetBindInfoEx;




typedef struct IInternetProtocolRoot IInternetProtocolRoot;




typedef struct IInternetProtocol IInternetProtocol;




typedef struct IInternetProtocolEx IInternetProtocolEx;




typedef struct IInternetProtocolSink IInternetProtocolSink;




typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;




typedef struct IInternetSession IInternetSession;




typedef struct IInternetThreadSwitch IInternetThreadSwitch;




typedef struct IInternetPriority IInternetPriority;




typedef struct IInternetProtocolInfo IInternetProtocolInfo;




typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;




typedef struct IInternetSecurityManager IInternetSecurityManager;




typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;




typedef struct IInternetSecurityManagerEx2 IInternetSecurityManagerEx2;




typedef struct IZoneIdentifier IZoneIdentifier;




typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;




typedef struct IInternetZoneManager IInternetZoneManager;




typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;




typedef struct IInternetZoneManagerEx2 IInternetZoneManagerEx2;




typedef struct ISoftDistExt ISoftDistExt;




typedef struct ICatalogFileInfo ICatalogFileInfo;




typedef struct IDataFilter IDataFilter;




typedef struct IEncodingFilterFactory IEncodingFilterFactory;




typedef struct IWrappedProtocol IWrappedProtocol;




typedef struct IGetBindHandle IGetBindHandle;




typedef struct IBindCallbackRedirect IBindCallbackRedirect;
typedef struct IOleAdviseHolder IOleAdviseHolder;




typedef struct IOleCache IOleCache;




typedef struct IOleCache2 IOleCache2;




typedef struct IOleCacheControl IOleCacheControl;




typedef struct IParseDisplayName IParseDisplayName;




typedef struct IOleContainer IOleContainer;




typedef struct IOleClientSite IOleClientSite;




typedef struct IOleObject IOleObject;




typedef struct IOleWindow IOleWindow;




typedef struct IOleLink IOleLink;




typedef struct IOleItemContainer IOleItemContainer;




typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;




typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;




typedef struct IOleInPlaceFrame IOleInPlaceFrame;




typedef struct IOleInPlaceObject IOleInPlaceObject;




typedef struct IOleInPlaceSite IOleInPlaceSite;




typedef struct IContinue IContinue;




typedef struct IViewObject IViewObject;




typedef struct IViewObject2 IViewObject2;




typedef struct IDropSource IDropSource;




typedef struct IDropTarget IDropTarget;




typedef struct IDropSourceNotify IDropSourceNotify;




typedef struct IEnumOLEVERB IEnumOLEVERB;
extern "C" {
typedef IOleAdviseHolder *LPOLEADVISEHOLDER;

extern "C" const GUID IID_IOleAdviseHolder;

struct
IOleAdviseHolder : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Advise(
        IAdviseSink *pAdvise,
        DWORD *pdwConnection) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Unadvise(
        DWORD dwConnection) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnumAdvise(
        IEnumSTATDATA **ppenumAdvise) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SendOnRename(
        IMoniker *pmk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SendOnSave(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SendOnClose(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleAdviseHolder>() { static const IID __uuid_inst = {0x00000111,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleAdviseHolder*>() { return __mingw_uuidof<IOleAdviseHolder>(); } }
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_Advise_Proxy(
    IOleAdviseHolder* This,
    IAdviseSink *pAdvise,
    DWORD *pdwConnection);
void __attribute__((__stdcall__)) IOleAdviseHolder_Advise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_Unadvise_Proxy(
    IOleAdviseHolder* This,
    DWORD dwConnection);
void __attribute__((__stdcall__)) IOleAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_EnumAdvise_Proxy(
    IOleAdviseHolder* This,
    IEnumSTATDATA **ppenumAdvise);
void __attribute__((__stdcall__)) IOleAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_SendOnRename_Proxy(
    IOleAdviseHolder* This,
    IMoniker *pmk);
void __attribute__((__stdcall__)) IOleAdviseHolder_SendOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_SendOnSave_Proxy(
    IOleAdviseHolder* This);
void __attribute__((__stdcall__)) IOleAdviseHolder_SendOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleAdviseHolder_SendOnClose_Proxy(
    IOleAdviseHolder* This);
void __attribute__((__stdcall__)) IOleAdviseHolder_SendOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleCache *LPOLECACHE;

extern "C" const GUID IID_IOleCache;

struct
IOleCache : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Cache(
        FORMATETC *pformatetc,
        DWORD advf,
        DWORD *pdwConnection) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Uncache(
        DWORD dwConnection) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnumCache(
        IEnumSTATDATA **ppenumSTATDATA) = 0;

    virtual HRESULT __attribute__((__stdcall__)) InitCache(
        IDataObject *pDataObject) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetData(
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        WINBOOL fRelease) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleCache>() { static const IID __uuid_inst = {0x0000011e,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleCache*>() { return __mingw_uuidof<IOleCache>(); } }
HRESULT __attribute__((__stdcall__)) IOleCache_Cache_Proxy(
    IOleCache* This,
    FORMATETC *pformatetc,
    DWORD advf,
    DWORD *pdwConnection);
void __attribute__((__stdcall__)) IOleCache_Cache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache_Uncache_Proxy(
    IOleCache* This,
    DWORD dwConnection);
void __attribute__((__stdcall__)) IOleCache_Uncache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache_EnumCache_Proxy(
    IOleCache* This,
    IEnumSTATDATA **ppenumSTATDATA);
void __attribute__((__stdcall__)) IOleCache_EnumCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache_InitCache_Proxy(
    IOleCache* This,
    IDataObject *pDataObject);
void __attribute__((__stdcall__)) IOleCache_InitCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache_SetData_Proxy(
    IOleCache* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium,
    WINBOOL fRelease);
void __attribute__((__stdcall__)) IOleCache_SetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleCache2 *LPOLECACHE2;
typedef enum tagDISCARDCACHE {
    DISCARDCACHE_SAVEIFDIRTY = 0,
    DISCARDCACHE_NOSAVE = 1
} DISCARDCACHE;

extern "C" const GUID IID_IOleCache2;

struct
IOleCache2 : public IOleCache
{
    virtual HRESULT __attribute__((__stdcall__)) UpdateCache(
        LPDATAOBJECT pDataObject,
        DWORD grfUpdf,
        LPVOID pReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DiscardCache(
        DWORD dwDiscardOptions) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleCache2>() { static const IID __uuid_inst = {0x00000128,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleCache2*>() { return __mingw_uuidof<IOleCache2>(); } }
HRESULT __attribute__((__stdcall__)) IOleCache2_RemoteUpdateCache_Proxy(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LONG_PTR pReserved);
void __attribute__((__stdcall__)) IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache2_DiscardCache_Proxy(
    IOleCache2* This,
    DWORD dwDiscardOptions);
void __attribute__((__stdcall__)) IOleCache2_DiscardCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCache2_UpdateCache_Proxy(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LPVOID pReserved);
HRESULT __attribute__((__stdcall__)) IOleCache2_UpdateCache_Stub(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LONG_PTR pReserved);
typedef IOleCacheControl *LPOLECACHECONTROL;

extern "C" const GUID IID_IOleCacheControl;

struct
IOleCacheControl : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) OnRun(
        LPDATAOBJECT pDataObject) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnStop(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleCacheControl>() { static const IID __uuid_inst = {0x00000129,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleCacheControl*>() { return __mingw_uuidof<IOleCacheControl>(); } }
HRESULT __attribute__((__stdcall__)) IOleCacheControl_OnRun_Proxy(
    IOleCacheControl* This,
    LPDATAOBJECT pDataObject);
void __attribute__((__stdcall__)) IOleCacheControl_OnRun_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleCacheControl_OnStop_Proxy(
    IOleCacheControl* This);
void __attribute__((__stdcall__)) IOleCacheControl_OnStop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IParseDisplayName *LPPARSEDISPLAYNAME;

extern "C" const GUID IID_IParseDisplayName;

struct
IParseDisplayName : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) ParseDisplayName(
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IParseDisplayName>() { static const IID __uuid_inst = {0x0000011a,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IParseDisplayName*>() { return __mingw_uuidof<IParseDisplayName>(); } }
HRESULT __attribute__((__stdcall__)) IParseDisplayName_ParseDisplayName_Proxy(
    IParseDisplayName* This,
    IBindCtx *pbc,
    LPOLESTR pszDisplayName,
    ULONG *pchEaten,
    IMoniker **ppmkOut);
void __attribute__((__stdcall__)) IParseDisplayName_ParseDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleContainer *LPOLECONTAINER;

extern "C" const GUID IID_IOleContainer;

struct
IOleContainer : public IParseDisplayName
{
    virtual HRESULT __attribute__((__stdcall__)) EnumObjects(
        DWORD grfFlags,
        IEnumUnknown **ppenum) = 0;

    virtual HRESULT __attribute__((__stdcall__)) LockContainer(
        WINBOOL fLock) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleContainer>() { static const IID __uuid_inst = {0x0000011b,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleContainer*>() { return __mingw_uuidof<IOleContainer>(); } }
HRESULT __attribute__((__stdcall__)) IOleContainer_EnumObjects_Proxy(
    IOleContainer* This,
    DWORD grfFlags,
    IEnumUnknown **ppenum);
void __attribute__((__stdcall__)) IOleContainer_EnumObjects_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleContainer_LockContainer_Proxy(
    IOleContainer* This,
    WINBOOL fLock);
void __attribute__((__stdcall__)) IOleContainer_LockContainer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleClientSite *LPOLECLIENTSITE;

extern "C" const GUID IID_IOleClientSite;

struct
IOleClientSite : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SaveObject(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetMoniker(
        DWORD dwAssign,
        DWORD dwWhichMoniker,
        IMoniker **ppmk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetContainer(
        IOleContainer **ppContainer) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ShowObject(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnShowWindow(
        WINBOOL fShow) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RequestNewObjectLayout(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleClientSite>() { static const IID __uuid_inst = {0x00000118,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleClientSite*>() { return __mingw_uuidof<IOleClientSite>(); } }
HRESULT __attribute__((__stdcall__)) IOleClientSite_SaveObject_Proxy(
    IOleClientSite* This);
void __attribute__((__stdcall__)) IOleClientSite_SaveObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleClientSite_GetMoniker_Proxy(
    IOleClientSite* This,
    DWORD dwAssign,
    DWORD dwWhichMoniker,
    IMoniker **ppmk);
void __attribute__((__stdcall__)) IOleClientSite_GetMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleClientSite_GetContainer_Proxy(
    IOleClientSite* This,
    IOleContainer **ppContainer);
void __attribute__((__stdcall__)) IOleClientSite_GetContainer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleClientSite_ShowObject_Proxy(
    IOleClientSite* This);
void __attribute__((__stdcall__)) IOleClientSite_ShowObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleClientSite_OnShowWindow_Proxy(
    IOleClientSite* This,
    WINBOOL fShow);
void __attribute__((__stdcall__)) IOleClientSite_OnShowWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleClientSite_RequestNewObjectLayout_Proxy(
    IOleClientSite* This);
void __attribute__((__stdcall__)) IOleClientSite_RequestNewObjectLayout_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleObject *LPOLEOBJECT;

typedef enum tagOLEGETMONIKER {
    OLEGETMONIKER_ONLYIFTHERE = 1,
    OLEGETMONIKER_FORCEASSIGN = 2,
    OLEGETMONIKER_UNASSIGN = 3,
    OLEGETMONIKER_TEMPFORUSER = 4
} OLEGETMONIKER;

typedef enum tagOLEWHICHMK {
    OLEWHICHMK_CONTAINER = 1,
    OLEWHICHMK_OBJREL = 2,
    OLEWHICHMK_OBJFULL = 3
} OLEWHICHMK;

typedef enum tagUSERCLASSTYPE {
    USERCLASSTYPE_FULL = 1,
    USERCLASSTYPE_SHORT = 2,
    USERCLASSTYPE_APPNAME = 3
} USERCLASSTYPE;

typedef enum tagOLEMISC {
    OLEMISC_RECOMPOSEONRESIZE = 0x1,
    OLEMISC_ONLYICONIC = 0x2,
    OLEMISC_INSERTNOTREPLACE = 0x4,
    OLEMISC_STATIC = 0x8,
    OLEMISC_CANTLINKINSIDE = 0x10,
    OLEMISC_CANLINKBYOLE1 = 0x20,
    OLEMISC_ISLINKOBJECT = 0x40,
    OLEMISC_INSIDEOUT = 0x80,
    OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
    OLEMISC_INVISIBLEATRUNTIME = 0x400,
    OLEMISC_ALWAYSRUN = 0x800,
    OLEMISC_ACTSLIKEBUTTON = 0x1000,
    OLEMISC_ACTSLIKELABEL = 0x2000,
    OLEMISC_NOUIACTIVATE = 0x4000,
    OLEMISC_ALIGNABLE = 0x8000,
    OLEMISC_SIMPLEFRAME = 0x10000,
    OLEMISC_SETCLIENTSITEFIRST = 0x20000,
    OLEMISC_IMEMODE = 0x40000,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
    OLEMISC_WANTSTOMENUMERGE = 0x100000,
    OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
} OLEMISC;
typedef enum tagOLECLOSE {
    OLECLOSE_SAVEIFDIRTY = 0,
    OLECLOSE_NOSAVE = 1,
    OLECLOSE_PROMPTSAVE = 2
} OLECLOSE;

extern "C" const GUID IID_IOleObject;

struct
IOleObject : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SetClientSite(
        IOleClientSite *pClientSite) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetClientSite(
        IOleClientSite **ppClientSite) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetHostNames(
        LPCOLESTR szContainerApp,
        LPCOLESTR szContainerObj) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Close(
        DWORD dwSaveOption) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetMoniker(
        DWORD dwWhichMoniker,
        IMoniker *pmk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetMoniker(
        DWORD dwAssign,
        DWORD dwWhichMoniker,
        IMoniker **ppmk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) InitFromData(
        IDataObject *pDataObject,
        WINBOOL fCreation,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetClipboardData(
        DWORD dwReserved,
        IDataObject **ppDataObject) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DoVerb(
        LONG iVerb,
        LPMSG lpmsg,
        IOleClientSite *pActiveSite,
        LONG lindex,
        HWND hwndParent,
        LPCRECT lprcPosRect) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnumVerbs(
        IEnumOLEVERB **ppEnumOleVerb) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Update(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) IsUpToDate(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetUserClassID(
        CLSID *pClsid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetUserType(
        DWORD dwFormOfType,
        LPOLESTR *pszUserType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetExtent(
        DWORD dwDrawAspect,
        SIZEL *psizel) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetExtent(
        DWORD dwDrawAspect,
        SIZEL *psizel) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Advise(
        IAdviseSink *pAdvSink,
        DWORD *pdwConnection) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Unadvise(
        DWORD dwConnection) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnumAdvise(
        IEnumSTATDATA **ppenumAdvise) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetMiscStatus(
        DWORD dwAspect,
        DWORD *pdwStatus) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetColorScheme(
        LOGPALETTE *pLogpal) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleObject>() { static const IID __uuid_inst = {0x00000112,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleObject*>() { return __mingw_uuidof<IOleObject>(); } }
HRESULT __attribute__((__stdcall__)) IOleObject_SetClientSite_Proxy(
    IOleObject* This,
    IOleClientSite *pClientSite);
void __attribute__((__stdcall__)) IOleObject_SetClientSite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetClientSite_Proxy(
    IOleObject* This,
    IOleClientSite **ppClientSite);
void __attribute__((__stdcall__)) IOleObject_GetClientSite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_SetHostNames_Proxy(
    IOleObject* This,
    LPCOLESTR szContainerApp,
    LPCOLESTR szContainerObj);
void __attribute__((__stdcall__)) IOleObject_SetHostNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_Close_Proxy(
    IOleObject* This,
    DWORD dwSaveOption);
void __attribute__((__stdcall__)) IOleObject_Close_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_SetMoniker_Proxy(
    IOleObject* This,
    DWORD dwWhichMoniker,
    IMoniker *pmk);
void __attribute__((__stdcall__)) IOleObject_SetMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetMoniker_Proxy(
    IOleObject* This,
    DWORD dwAssign,
    DWORD dwWhichMoniker,
    IMoniker **ppmk);
void __attribute__((__stdcall__)) IOleObject_GetMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_InitFromData_Proxy(
    IOleObject* This,
    IDataObject *pDataObject,
    WINBOOL fCreation,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IOleObject_InitFromData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetClipboardData_Proxy(
    IOleObject* This,
    DWORD dwReserved,
    IDataObject **ppDataObject);
void __attribute__((__stdcall__)) IOleObject_GetClipboardData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_DoVerb_Proxy(
    IOleObject* This,
    LONG iVerb,
    LPMSG lpmsg,
    IOleClientSite *pActiveSite,
    LONG lindex,
    HWND hwndParent,
    LPCRECT lprcPosRect);
void __attribute__((__stdcall__)) IOleObject_DoVerb_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_EnumVerbs_Proxy(
    IOleObject* This,
    IEnumOLEVERB **ppEnumOleVerb);
void __attribute__((__stdcall__)) IOleObject_EnumVerbs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_Update_Proxy(
    IOleObject* This);
void __attribute__((__stdcall__)) IOleObject_Update_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_IsUpToDate_Proxy(
    IOleObject* This);
void __attribute__((__stdcall__)) IOleObject_IsUpToDate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetUserClassID_Proxy(
    IOleObject* This,
    CLSID *pClsid);
void __attribute__((__stdcall__)) IOleObject_GetUserClassID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetUserType_Proxy(
    IOleObject* This,
    DWORD dwFormOfType,
    LPOLESTR *pszUserType);
void __attribute__((__stdcall__)) IOleObject_GetUserType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_SetExtent_Proxy(
    IOleObject* This,
    DWORD dwDrawAspect,
    SIZEL *psizel);
void __attribute__((__stdcall__)) IOleObject_SetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetExtent_Proxy(
    IOleObject* This,
    DWORD dwDrawAspect,
    SIZEL *psizel);
void __attribute__((__stdcall__)) IOleObject_GetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_Advise_Proxy(
    IOleObject* This,
    IAdviseSink *pAdvSink,
    DWORD *pdwConnection);
void __attribute__((__stdcall__)) IOleObject_Advise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_Unadvise_Proxy(
    IOleObject* This,
    DWORD dwConnection);
void __attribute__((__stdcall__)) IOleObject_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_EnumAdvise_Proxy(
    IOleObject* This,
    IEnumSTATDATA **ppenumAdvise);
void __attribute__((__stdcall__)) IOleObject_EnumAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_GetMiscStatus_Proxy(
    IOleObject* This,
    DWORD dwAspect,
    DWORD *pdwStatus);
void __attribute__((__stdcall__)) IOleObject_GetMiscStatus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleObject_SetColorScheme_Proxy(
    IOleObject* This,
    LOGPALETTE *pLogpal);
void __attribute__((__stdcall__)) IOleObject_SetColorScheme_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
typedef enum tagOLERENDER {
    OLERENDER_NONE = 0,
    OLERENDER_DRAW = 1,
    OLERENDER_FORMAT = 2,
    OLERENDER_ASIS = 3
} OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
} OBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
typedef IOleWindow *LPOLEWINDOW;

extern "C" const GUID IID_IOleWindow;

struct
IOleWindow : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetWindow(
        HWND *phwnd) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ContextSensitiveHelp(
        WINBOOL fEnterMode) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleWindow>() { static const IID __uuid_inst = {0x00000114,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleWindow*>() { return __mingw_uuidof<IOleWindow>(); } }
HRESULT __attribute__((__stdcall__)) IOleWindow_GetWindow_Proxy(
    IOleWindow* This,
    HWND *phwnd);
void __attribute__((__stdcall__)) IOleWindow_GetWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleWindow_ContextSensitiveHelp_Proxy(
    IOleWindow* This,
    WINBOOL fEnterMode);
void __attribute__((__stdcall__)) IOleWindow_ContextSensitiveHelp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleLink *LPOLELINK;

typedef enum tagOLEUPDATE {
    OLEUPDATE_ALWAYS = 1,
    OLEUPDATE_ONCALL = 3
} OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;
typedef OLEUPDATE *POLEUPDATE;

typedef enum tagOLELINKBIND {
    OLELINKBIND_EVENIFCLASSDIFF = 1
} OLELINKBIND;

extern "C" const GUID IID_IOleLink;

struct
IOleLink : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SetUpdateOptions(
        DWORD dwUpdateOpt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetUpdateOptions(
        DWORD *pdwUpdateOpt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetSourceMoniker(
        IMoniker *pmk,
        const IID & rclsid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetSourceMoniker(
        IMoniker **ppmk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetSourceDisplayName(
        LPCOLESTR pszStatusText) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetSourceDisplayName(
        LPOLESTR *ppszDisplayName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) BindToSource(
        DWORD bindflags,
        IBindCtx *pbc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) BindIfRunning(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetBoundSource(
        IUnknown **ppunk) = 0;

    virtual HRESULT __attribute__((__stdcall__)) UnbindSource(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Update(
        IBindCtx *pbc) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleLink>() { static const IID __uuid_inst = {0x0000011d,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleLink*>() { return __mingw_uuidof<IOleLink>(); } }
HRESULT __attribute__((__stdcall__)) IOleLink_SetUpdateOptions_Proxy(
    IOleLink* This,
    DWORD dwUpdateOpt);
void __attribute__((__stdcall__)) IOleLink_SetUpdateOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_GetUpdateOptions_Proxy(
    IOleLink* This,
    DWORD *pdwUpdateOpt);
void __attribute__((__stdcall__)) IOleLink_GetUpdateOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_SetSourceMoniker_Proxy(
    IOleLink* This,
    IMoniker *pmk,
    const IID & rclsid);
void __attribute__((__stdcall__)) IOleLink_SetSourceMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_GetSourceMoniker_Proxy(
    IOleLink* This,
    IMoniker **ppmk);
void __attribute__((__stdcall__)) IOleLink_GetSourceMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_SetSourceDisplayName_Proxy(
    IOleLink* This,
    LPCOLESTR pszStatusText);
void __attribute__((__stdcall__)) IOleLink_SetSourceDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_GetSourceDisplayName_Proxy(
    IOleLink* This,
    LPOLESTR *ppszDisplayName);
void __attribute__((__stdcall__)) IOleLink_GetSourceDisplayName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_BindToSource_Proxy(
    IOleLink* This,
    DWORD bindflags,
    IBindCtx *pbc);
void __attribute__((__stdcall__)) IOleLink_BindToSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_BindIfRunning_Proxy(
    IOleLink* This);
void __attribute__((__stdcall__)) IOleLink_BindIfRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_GetBoundSource_Proxy(
    IOleLink* This,
    IUnknown **ppunk);
void __attribute__((__stdcall__)) IOleLink_GetBoundSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_UnbindSource_Proxy(
    IOleLink* This);
void __attribute__((__stdcall__)) IOleLink_UnbindSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleLink_Update_Proxy(
    IOleLink* This,
    IBindCtx *pbc);
void __attribute__((__stdcall__)) IOleLink_Update_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleItemContainer *LPOLEITEMCONTAINER;

typedef enum tagBINDSPEED {
    BINDSPEED_INDEFINITE = 1,
    BINDSPEED_MODERATE = 2,
    BINDSPEED_IMMEDIATE = 3
} BINDSPEED;

typedef enum tagOLECONTF {
    OLECONTF_EMBEDDINGS = 1,
    OLECONTF_LINKS = 2,
    OLECONTF_OTHERS = 4,
    OLECONTF_ONLYUSER = 8,
    OLECONTF_ONLYIFRUNNING = 16
} OLECONTF;

extern "C" const GUID IID_IOleItemContainer;

struct
IOleItemContainer : public IOleContainer
{
    virtual HRESULT __attribute__((__stdcall__)) GetObjectW(
        LPOLESTR pszItem,
        DWORD dwSpeedNeeded,
        IBindCtx *pbc,
        const IID & riid,
        void **ppvObject) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetObjectStorage(
        LPOLESTR pszItem,
        IBindCtx *pbc,
        const IID & riid,
        void **ppvStorage) = 0;

    virtual HRESULT __attribute__((__stdcall__)) IsRunning(
        LPOLESTR pszItem) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleItemContainer>() { static const IID __uuid_inst = {0x0000011c,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleItemContainer*>() { return __mingw_uuidof<IOleItemContainer>(); } }
HRESULT __attribute__((__stdcall__)) IOleItemContainer_GetObject_Proxy(
    IOleItemContainer* This,
    LPOLESTR pszItem,
    DWORD dwSpeedNeeded,
    IBindCtx *pbc,
    const IID & riid,
    void **ppvObject);
void __attribute__((__stdcall__)) IOleItemContainer_GetObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleItemContainer_GetObjectStorage_Proxy(
    IOleItemContainer* This,
    LPOLESTR pszItem,
    IBindCtx *pbc,
    const IID & riid,
    void **ppvStorage);
void __attribute__((__stdcall__)) IOleItemContainer_GetObjectStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleItemContainer_IsRunning_Proxy(
    IOleItemContainer* This,
    LPOLESTR pszItem);
void __attribute__((__stdcall__)) IOleItemContainer_IsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
typedef RECT BORDERWIDTHS;
typedef LPRECT LPBORDERWIDTHS;
typedef LPCRECT LPCBORDERWIDTHS;

extern "C" const GUID IID_IOleInPlaceUIWindow;

struct
IOleInPlaceUIWindow : public IOleWindow
{
    virtual HRESULT __attribute__((__stdcall__)) GetBorder(
        LPRECT lprectBorder) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RequestBorderSpace(
        LPCBORDERWIDTHS pborderwidths) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetBorderSpace(
        LPCBORDERWIDTHS pborderwidths) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetActiveObject(
        IOleInPlaceActiveObject *pActiveObject,
        LPCOLESTR pszObjName) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleInPlaceUIWindow>() { static const IID __uuid_inst = {0x00000115,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleInPlaceUIWindow*>() { return __mingw_uuidof<IOleInPlaceUIWindow>(); } }
HRESULT __attribute__((__stdcall__)) IOleInPlaceUIWindow_GetBorder_Proxy(
    IOleInPlaceUIWindow* This,
    LPRECT lprectBorder);
void __attribute__((__stdcall__)) IOleInPlaceUIWindow_GetBorder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceUIWindow_RequestBorderSpace_Proxy(
    IOleInPlaceUIWindow* This,
    LPCBORDERWIDTHS pborderwidths);
void __attribute__((__stdcall__)) IOleInPlaceUIWindow_RequestBorderSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceUIWindow_SetBorderSpace_Proxy(
    IOleInPlaceUIWindow* This,
    LPCBORDERWIDTHS pborderwidths);
void __attribute__((__stdcall__)) IOleInPlaceUIWindow_SetBorderSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceUIWindow_SetActiveObject_Proxy(
    IOleInPlaceUIWindow* This,
    IOleInPlaceActiveObject *pActiveObject,
    LPCOLESTR pszObjName);
void __attribute__((__stdcall__)) IOleInPlaceUIWindow_SetActiveObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;

extern "C" const GUID IID_IOleInPlaceActiveObject;

struct
IOleInPlaceActiveObject : public IOleWindow
{
    virtual HRESULT __attribute__((__stdcall__)) TranslateAcceleratorW(
        LPMSG lpmsg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnFrameWindowActivate(
        WINBOOL fActivate) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnDocWindowActivate(
        WINBOOL fActivate) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ResizeBorder(
        LPCRECT prcBorder,
        IOleInPlaceUIWindow *pUIWindow,
        WINBOOL fFrameWindow) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnableModeless(
        WINBOOL fEnable) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleInPlaceActiveObject>() { static const IID __uuid_inst = {0x00000117,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleInPlaceActiveObject*>() { return __mingw_uuidof<IOleInPlaceActiveObject>(); } }
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
    IOleInPlaceActiveObject* This);
void __attribute__((__stdcall__)) IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy(
    IOleInPlaceActiveObject* This,
    WINBOOL fActivate);
void __attribute__((__stdcall__)) IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_OnDocWindowActivate_Proxy(
    IOleInPlaceActiveObject* This,
    WINBOOL fActivate);
void __attribute__((__stdcall__)) IOleInPlaceActiveObject_OnDocWindowActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    const IID & riid,
    IOleInPlaceUIWindow *pUIWindow,
    WINBOOL fFrameWindow);
void __attribute__((__stdcall__)) IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_EnableModeless_Proxy(
    IOleInPlaceActiveObject* This,
    WINBOOL fEnable);
void __attribute__((__stdcall__)) IOleInPlaceActiveObject_EnableModeless_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    IOleInPlaceActiveObject* This,
    LPMSG lpmsg);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_TranslateAccelerator_Stub(
    IOleInPlaceActiveObject* This);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_ResizeBorder_Proxy(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    IOleInPlaceUIWindow *pUIWindow,
    WINBOOL fFrameWindow);
HRESULT __attribute__((__stdcall__)) IOleInPlaceActiveObject_ResizeBorder_Stub(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    const IID & riid,
    IOleInPlaceUIWindow *pUIWindow,
    WINBOOL fFrameWindow);
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI {
    UINT cb;
    WINBOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
} OLEINPLACEFRAMEINFO;
typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths {
    LONG width[6];
} OLEMENUGROUPWIDTHS;
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;

extern "C" const GUID IID_IOleInPlaceFrame;

struct
IOleInPlaceFrame : public IOleInPlaceUIWindow
{
    virtual HRESULT __attribute__((__stdcall__)) InsertMenus(
        HMENU hmenuShared,
        LPOLEMENUGROUPWIDTHS lpMenuWidths) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetMenu(
        HMENU hmenuShared,
        HOLEMENU holemenu,
        HWND hwndActiveObject) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RemoveMenus(
        HMENU hmenuShared) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetStatusText(
        LPCOLESTR pszStatusText) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnableModeless(
        WINBOOL fEnable) = 0;

    virtual HRESULT __attribute__((__stdcall__)) TranslateAcceleratorW(
        LPMSG lpmsg,
        WORD wID) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleInPlaceFrame>() { static const IID __uuid_inst = {0x00000116,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleInPlaceFrame*>() { return __mingw_uuidof<IOleInPlaceFrame>(); } }
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_InsertMenus_Proxy(
    IOleInPlaceFrame* This,
    HMENU hmenuShared,
    LPOLEMENUGROUPWIDTHS lpMenuWidths);
void __attribute__((__stdcall__)) IOleInPlaceFrame_InsertMenus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_SetMenu_Proxy(
    IOleInPlaceFrame* This,
    HMENU hmenuShared,
    HOLEMENU holemenu,
    HWND hwndActiveObject);
void __attribute__((__stdcall__)) IOleInPlaceFrame_SetMenu_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_RemoveMenus_Proxy(
    IOleInPlaceFrame* This,
    HMENU hmenuShared);
void __attribute__((__stdcall__)) IOleInPlaceFrame_RemoveMenus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_SetStatusText_Proxy(
    IOleInPlaceFrame* This,
    LPCOLESTR pszStatusText);
void __attribute__((__stdcall__)) IOleInPlaceFrame_SetStatusText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_EnableModeless_Proxy(
    IOleInPlaceFrame* This,
    WINBOOL fEnable);
void __attribute__((__stdcall__)) IOleInPlaceFrame_EnableModeless_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceFrame_TranslateAccelerator_Proxy(
    IOleInPlaceFrame* This,
    LPMSG lpmsg,
    WORD wID);
void __attribute__((__stdcall__)) IOleInPlaceFrame_TranslateAccelerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;

extern "C" const GUID IID_IOleInPlaceObject;

struct
IOleInPlaceObject : public IOleWindow
{
    virtual HRESULT __attribute__((__stdcall__)) InPlaceDeactivate(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) UIDeactivate(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetObjectRects(
        LPCRECT lprcPosRect,
        LPCRECT lprcClipRect) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ReactivateAndUndo(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleInPlaceObject>() { static const IID __uuid_inst = {0x00000113,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleInPlaceObject*>() { return __mingw_uuidof<IOleInPlaceObject>(); } }
HRESULT __attribute__((__stdcall__)) IOleInPlaceObject_InPlaceDeactivate_Proxy(
    IOleInPlaceObject* This);
void __attribute__((__stdcall__)) IOleInPlaceObject_InPlaceDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceObject_UIDeactivate_Proxy(
    IOleInPlaceObject* This);
void __attribute__((__stdcall__)) IOleInPlaceObject_UIDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceObject_SetObjectRects_Proxy(
    IOleInPlaceObject* This,
    LPCRECT lprcPosRect,
    LPCRECT lprcClipRect);
void __attribute__((__stdcall__)) IOleInPlaceObject_SetObjectRects_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceObject_ReactivateAndUndo_Proxy(
    IOleInPlaceObject* This);
void __attribute__((__stdcall__)) IOleInPlaceObject_ReactivateAndUndo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IOleInPlaceSite *LPOLEINPLACESITE;

extern "C" const GUID IID_IOleInPlaceSite;

struct
IOleInPlaceSite : public IOleWindow
{
    virtual HRESULT __attribute__((__stdcall__)) CanInPlaceActivate(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnInPlaceActivate(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnUIActivate(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetWindowContext(
        IOleInPlaceFrame **ppFrame,
        IOleInPlaceUIWindow **ppDoc,
        LPRECT lprcPosRect,
        LPRECT lprcClipRect,
        LPOLEINPLACEFRAMEINFO lpFrameInfo) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Scroll(
        SIZE scrollExtant) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnUIDeactivate(
        WINBOOL fUndoable) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnInPlaceDeactivate(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DiscardUndoState(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DeactivateAndUndo(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnPosRectChange(
        LPCRECT lprcPosRect) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IOleInPlaceSite>() { static const IID __uuid_inst = {0x00000119,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IOleInPlaceSite*>() { return __mingw_uuidof<IOleInPlaceSite>(); } }
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_CanInPlaceActivate_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_CanInPlaceActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_OnInPlaceActivate_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_OnInPlaceActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_OnUIActivate_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_OnUIActivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_GetWindowContext_Proxy(
    IOleInPlaceSite* This,
    IOleInPlaceFrame **ppFrame,
    IOleInPlaceUIWindow **ppDoc,
    LPRECT lprcPosRect,
    LPRECT lprcClipRect,
    LPOLEINPLACEFRAMEINFO lpFrameInfo);
void __attribute__((__stdcall__)) IOleInPlaceSite_GetWindowContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_Scroll_Proxy(
    IOleInPlaceSite* This,
    SIZE scrollExtant);
void __attribute__((__stdcall__)) IOleInPlaceSite_Scroll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_OnUIDeactivate_Proxy(
    IOleInPlaceSite* This,
    WINBOOL fUndoable);
void __attribute__((__stdcall__)) IOleInPlaceSite_OnUIDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_OnInPlaceDeactivate_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_OnInPlaceDeactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_DiscardUndoState_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_DiscardUndoState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_DeactivateAndUndo_Proxy(
    IOleInPlaceSite* This);
void __attribute__((__stdcall__)) IOleInPlaceSite_DeactivateAndUndo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IOleInPlaceSite_OnPosRectChange_Proxy(
    IOleInPlaceSite* This,
    LPCRECT lprcPosRect);
void __attribute__((__stdcall__)) IOleInPlaceSite_OnPosRectChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IContinue;

struct
IContinue : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) FContinue(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IContinue>() { static const IID __uuid_inst = {0x0000012a,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IContinue*>() { return __mingw_uuidof<IContinue>(); } }
HRESULT __attribute__((__stdcall__)) IContinue_FContinue_Proxy(
    IContinue* This);
void __attribute__((__stdcall__)) IContinue_FContinue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IViewObject *LPVIEWOBJECT;

extern "C" const GUID IID_IViewObject;

struct
IViewObject : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Draw(
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hdcTargetDev,
        HDC hdcDraw,
        LPCRECTL lprcBounds,
        LPCRECTL lprcWBounds,
        WINBOOL (__attribute__((__stdcall__)) *pfnContinue)(ULONG_PTR dwContinue),
        ULONG_PTR dwContinue) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetColorSet(
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hicTargetDev,
        LOGPALETTE **ppColorSet) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Freeze(
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DWORD *pdwFreeze) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Unfreeze(
        DWORD dwFreeze) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetAdvise(
        DWORD aspects,
        DWORD advf,
        IAdviseSink *pAdvSink) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetAdvise(
        DWORD *pAspects,
        DWORD *pAdvf,
        IAdviseSink **ppAdvSink) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IViewObject>() { static const IID __uuid_inst = {0x0000010d,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IViewObject*>() { return __mingw_uuidof<IViewObject>(); } }
HRESULT __attribute__((__stdcall__)) IViewObject_RemoteDraw_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hdcTargetDev,
    HDC hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    IContinue *pContinue);
void __attribute__((__stdcall__)) IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_RemoteGetColorSet_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hicTargetDev,
    LOGPALETTE **ppColorSet);
void __attribute__((__stdcall__)) IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_RemoteFreeze_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DWORD *pdwFreeze);
void __attribute__((__stdcall__)) IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_Unfreeze_Proxy(
    IViewObject* This,
    DWORD dwFreeze);
void __attribute__((__stdcall__)) IViewObject_Unfreeze_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_SetAdvise_Proxy(
    IViewObject* This,
    DWORD aspects,
    DWORD advf,
    IAdviseSink *pAdvSink);
void __attribute__((__stdcall__)) IViewObject_SetAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_RemoteGetAdvise_Proxy(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
void __attribute__((__stdcall__)) IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IViewObject_Draw_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hdcTargetDev,
    HDC hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    WINBOOL (__attribute__((__stdcall__)) *pfnContinue)(ULONG_PTR dwContinue),
    ULONG_PTR dwContinue);
HRESULT __attribute__((__stdcall__)) IViewObject_Draw_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hdcTargetDev,
    HDC hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    IContinue *pContinue);
HRESULT __attribute__((__stdcall__)) IViewObject_GetColorSet_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hicTargetDev,
    LOGPALETTE **ppColorSet);
HRESULT __attribute__((__stdcall__)) IViewObject_GetColorSet_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hicTargetDev,
    LOGPALETTE **ppColorSet);
HRESULT __attribute__((__stdcall__)) IViewObject_Freeze_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DWORD *pdwFreeze);
HRESULT __attribute__((__stdcall__)) IViewObject_Freeze_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DWORD *pdwFreeze);
HRESULT __attribute__((__stdcall__)) IViewObject_GetAdvise_Proxy(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
HRESULT __attribute__((__stdcall__)) IViewObject_GetAdvise_Stub(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
typedef IViewObject2 *LPVIEWOBJECT2;

extern "C" const GUID IID_IViewObject2;

struct
IViewObject2 : public IViewObject
{
    virtual HRESULT __attribute__((__stdcall__)) GetExtent(
        DWORD dwDrawAspect,
        LONG lindex,
        DVTARGETDEVICE *ptd,
        LPSIZEL lpsizel) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IViewObject2>() { static const IID __uuid_inst = {0x00000127,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IViewObject2*>() { return __mingw_uuidof<IViewObject2>(); } }
HRESULT __attribute__((__stdcall__)) IViewObject2_GetExtent_Proxy(
    IViewObject2* This,
    DWORD dwDrawAspect,
    LONG lindex,
    DVTARGETDEVICE *ptd,
    LPSIZEL lpsizel);
void __attribute__((__stdcall__)) IViewObject2_GetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IDropSource *LPDROPSOURCE;

extern "C" const GUID IID_IDropSource;

struct
IDropSource : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) QueryContinueDrag(
        WINBOOL fEscapePressed,
        DWORD grfKeyState) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GiveFeedback(
        DWORD dwEffect) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IDropSource>() { static const IID __uuid_inst = {0x00000121,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IDropSource*>() { return __mingw_uuidof<IDropSource>(); } }
HRESULT __attribute__((__stdcall__)) IDropSource_QueryContinueDrag_Proxy(
    IDropSource* This,
    WINBOOL fEscapePressed,
    DWORD grfKeyState);
void __attribute__((__stdcall__)) IDropSource_QueryContinueDrag_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDropSource_GiveFeedback_Proxy(
    IDropSource* This,
    DWORD dwEffect);
void __attribute__((__stdcall__)) IDropSource_GiveFeedback_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IDropTarget *LPDROPTARGET;
extern "C" const GUID IID_IDropTarget;

struct
IDropTarget : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) DragEnter(
        IDataObject *pDataObj,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DragOver(
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DragLeave(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Drop(
        IDataObject *pDataObj,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IDropTarget>() { static const IID __uuid_inst = {0x00000122,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IDropTarget*>() { return __mingw_uuidof<IDropTarget>(); } }
HRESULT __attribute__((__stdcall__)) IDropTarget_DragEnter_Proxy(
    IDropTarget* This,
    IDataObject *pDataObj,
    DWORD grfKeyState,
    POINTL pt,
    DWORD *pdwEffect);
void __attribute__((__stdcall__)) IDropTarget_DragEnter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDropTarget_DragOver_Proxy(
    IDropTarget* This,
    DWORD grfKeyState,
    POINTL pt,
    DWORD *pdwEffect);
void __attribute__((__stdcall__)) IDropTarget_DragOver_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDropTarget_DragLeave_Proxy(
    IDropTarget* This);
void __attribute__((__stdcall__)) IDropTarget_DragLeave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDropTarget_Drop_Proxy(
    IDropTarget* This,
    IDataObject *pDataObj,
    DWORD grfKeyState,
    POINTL pt,
    DWORD *pdwEffect);
void __attribute__((__stdcall__)) IDropTarget_Drop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IDropSourceNotify;

struct
IDropSourceNotify : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) DragEnterTarget(
        HWND hwndTarget) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DragLeaveTarget(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IDropSourceNotify>() { static const IID __uuid_inst = {0x0000012b,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IDropSourceNotify*>() { return __mingw_uuidof<IDropSourceNotify>(); } }
HRESULT __attribute__((__stdcall__)) IDropSourceNotify_DragEnterTarget_Proxy(
    IDropSourceNotify* This,
    HWND hwndTarget);
void __attribute__((__stdcall__)) IDropSourceNotify_DragEnterTarget_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDropSourceNotify_DragLeaveTarget_Proxy(
    IDropSourceNotify* This);
void __attribute__((__stdcall__)) IDropSourceNotify_DragLeaveTarget_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
} OLEVERB;
typedef struct tagOLEVERB *LPOLEVERB;

typedef enum tagOLEVERBATTRIB {
    OLEVERBATTRIB_NEVERDIRTIES = 1,
    OLEVERBATTRIB_ONCONTAINERMENU = 2
} OLEVERBATTRIB;

extern "C" const GUID IID_IEnumOLEVERB;

struct
IEnumOLEVERB : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Next(
        ULONG celt,
        LPOLEVERB rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Skip(
        ULONG celt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IEnumOLEVERB **ppenum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEnumOLEVERB>() { static const IID __uuid_inst = {0x00000104,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEnumOLEVERB*>() { return __mingw_uuidof<IEnumOLEVERB>(); } }
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_RemoteNext_Proxy(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_Skip_Proxy(
    IEnumOLEVERB* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumOLEVERB_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_Reset_Proxy(
    IEnumOLEVERB* This);
void __attribute__((__stdcall__)) IEnumOLEVERB_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_Clone_Proxy(
    IEnumOLEVERB* This,
    IEnumOLEVERB **ppenum);
void __attribute__((__stdcall__)) IEnumOLEVERB_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_Next_Proxy(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumOLEVERB_Next_Stub(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);






ULONG __attribute__((__stdcall__)) CLIPFORMAT_UserSize (ULONG *, ULONG, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserMarshal (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void __attribute__((__stdcall__)) CLIPFORMAT_UserFree (ULONG *, CLIPFORMAT *);
ULONG __attribute__((__stdcall__)) STGMEDIUM_UserSize (ULONG *, ULONG, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserMarshal (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void __attribute__((__stdcall__)) STGMEDIUM_UserFree (ULONG *, STGMEDIUM *);
ULONG __attribute__((__stdcall__)) HWND_UserSize (ULONG *, ULONG, HWND *);
unsigned char * __attribute__((__stdcall__)) HWND_UserMarshal (ULONG *, unsigned char *, HWND *);
unsigned char * __attribute__((__stdcall__)) HWND_UserUnmarshal(ULONG *, unsigned char *, HWND *);
void __attribute__((__stdcall__)) HWND_UserFree (ULONG *, HWND *);
ULONG __attribute__((__stdcall__)) HMENU_UserSize (ULONG *, ULONG, HMENU *);
unsigned char * __attribute__((__stdcall__)) HMENU_UserMarshal (ULONG *, unsigned char *, HMENU *);
unsigned char * __attribute__((__stdcall__)) HMENU_UserUnmarshal(ULONG *, unsigned char *, HMENU *);
void __attribute__((__stdcall__)) HMENU_UserFree (ULONG *, HMENU *);
ULONG __attribute__((__stdcall__)) HGLOBAL_UserSize (ULONG *, ULONG, HGLOBAL *);
unsigned char * __attribute__((__stdcall__)) HGLOBAL_UserMarshal (ULONG *, unsigned char *, HGLOBAL *);
unsigned char * __attribute__((__stdcall__)) HGLOBAL_UserUnmarshal(ULONG *, unsigned char *, HGLOBAL *);
void __attribute__((__stdcall__)) HGLOBAL_UserFree (ULONG *, HGLOBAL *);
ULONG __attribute__((__stdcall__)) HACCEL_UserSize (ULONG *, ULONG, HACCEL *);
unsigned char * __attribute__((__stdcall__)) HACCEL_UserMarshal (ULONG *, unsigned char *, HACCEL *);
unsigned char * __attribute__((__stdcall__)) HACCEL_UserUnmarshal(ULONG *, unsigned char *, HACCEL *);
void __attribute__((__stdcall__)) HACCEL_UserFree (ULONG *, HACCEL *);
ULONG __attribute__((__stdcall__)) HDC_UserSize (ULONG *, ULONG, HDC *);
unsigned char * __attribute__((__stdcall__)) HDC_UserMarshal (ULONG *, unsigned char *, HDC *);
unsigned char * __attribute__((__stdcall__)) HDC_UserUnmarshal(ULONG *, unsigned char *, HDC *);
void __attribute__((__stdcall__)) HDC_UserFree (ULONG *, HDC *);




}
typedef struct IServiceProvider IServiceProvider;
extern "C" {
typedef IServiceProvider *LPSERVICEPROVIDER;

extern "C" const IID IID_IServiceProvider;
extern "C++" {
struct
IServiceProvider : public IUnknown {
public:
virtual HRESULT __attribute__((__stdcall__)) QueryService(const GUID & guidService, const IID & riid, void **ppvObject) = 0;

template <class Q>
HRESULT __attribute__((__stdcall__)) QueryService(const GUID & guidService, Q **pp) {
  return QueryService(guidService, __mingw_uuidof<__typeof(Q)>(), (void **)pp);
}
};
}

HRESULT __attribute__((__stdcall__)) IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *This, const GUID & guidService, const IID & riid, IUnknown **ppvObject);
void __attribute__((__stdcall__)) IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);

extern "C++" { template<> inline const GUID &__mingw_uuidof<IServiceProvider>() { static const IID __uuid_inst = {0x6d5140c1,0x7436,0x11ce, {0x80,0x34,0x00,0xaa,0x00,0x60,0x09,0xfa}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IServiceProvider*>() { return __mingw_uuidof<IServiceProvider>(); } }
}
typedef struct ICreateTypeInfo ICreateTypeInfo;




typedef struct ICreateTypeInfo2 ICreateTypeInfo2;




typedef struct ICreateTypeLib ICreateTypeLib;




typedef struct ICreateTypeLib2 ICreateTypeLib2;




typedef struct IDispatch IDispatch;




typedef struct IEnumVARIANT IEnumVARIANT;




typedef struct ITypeComp ITypeComp;




typedef struct ITypeInfo ITypeInfo;




typedef struct ITypeInfo2 ITypeInfo2;




typedef struct ITypeLib ITypeLib;




typedef struct ITypeLib2 ITypeLib2;




typedef struct ITypeChangeEvents ITypeChangeEvents;




typedef struct IErrorInfo IErrorInfo;




typedef struct ICreateErrorInfo ICreateErrorInfo;




typedef struct ISupportErrorInfo ISupportErrorInfo;




typedef struct ITypeFactory ITypeFactory;




typedef struct ITypeMarshal ITypeMarshal;




typedef struct IRecordInfo IRecordInfo;




typedef struct IErrorLog IErrorLog;




typedef struct IPropertyBag IPropertyBag;
extern "C" {
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
typedef CY CURRENCY;
typedef struct tagSAFEARRAYBOUND {
    ULONG cElements;
    LONG lLbound;
} SAFEARRAYBOUND;
typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;

typedef struct _wireVARIANT *wireVARIANT;
typedef struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR {
    ULONG Size;
    wireBSTR *aBstr;
} SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN {
    ULONG Size;
    IUnknown **apUnknown;
} SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH {
    ULONG Size;
    IDispatch **apDispatch;
} SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT {
    ULONG Size;
    wireVARIANT *aVariant;
} SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD {
    ULONG Size;
    wireBRECORD *aRecord;
} SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID {
    ULONG Size;
    IUnknown **apUnknown;
    IID iid;
} SAFEARR_HAVEIID;

typedef enum tagSF_TYPE {
    SF_ERROR = VT_ERROR,
    SF_I1 = VT_I1,
    SF_I2 = VT_I2,
    SF_I4 = VT_I4,
    SF_I8 = VT_I8,
    SF_BSTR = VT_BSTR,
    SF_UNKNOWN = VT_UNKNOWN,
    SF_DISPATCH = VT_DISPATCH,
    SF_VARIANT = VT_VARIANT,
    SF_RECORD = VT_RECORD,
    SF_HAVEIID = VT_UNKNOWN | VT_RESERVED
} SF_TYPE;

typedef struct _wireSAFEARRAY_UNION {
    ULONG sfType;
    union {
        SAFEARR_BSTR BstrStr;
        SAFEARR_UNKNOWN UnknownStr;
        SAFEARR_DISPATCH DispatchStr;
        SAFEARR_VARIANT VariantStr;
        SAFEARR_BRECORD RecordStr;
        SAFEARR_HAVEIID HaveIidStr;
        BYTE_SIZEDARR ByteStr;
        WORD_SIZEDARR WordStr;
        DWORD_SIZEDARR LongStr;
        HYPER_SIZEDARR HyperStr;
    } u;
} SAFEARRAYUNION;

typedef struct _wireSAFEARRAY {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
    SAFEARRAYBOUND rgsabound[1];
} *wireSAFEARRAY;
typedef wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[1];
} SAFEARRAY;
typedef SAFEARRAY *LPSAFEARRAY;
typedef struct tagVARIANT VARIANT;

struct tagVARIANT {
    union {
        struct {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                } ;
            } ;
        } ;
        DECIMAL decVal;
    } ;
};


typedef VARIANT *LPVARIANT;
typedef VARIANT VARIANTARG;
typedef VARIANT *LPVARIANTARG;
struct _wireBRECORD {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
    byte *pRecord;
};


struct _wireVARIANT {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
    __extension__ union {
        LONGLONG llVal;
        LONG lVal;
        BYTE bVal;
        SHORT iVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        wireBSTR bstrVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        wirePSAFEARRAY parray;
        wireBRECORD brecVal;
        BYTE *pbVal;
        SHORT *piVal;
        LONG *plVal;
        LONGLONG *pllVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        wireBSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        wirePSAFEARRAY *pparray;
        wireVARIANT *pvarVal;
        CHAR cVal;
        USHORT uiVal;
        ULONG ulVal;
        ULONGLONG ullVal;
        INT intVal;
        UINT uintVal;
        DECIMAL decVal;
        DECIMAL *pdecVal;
        CHAR *pcVal;
        USHORT *puiVal;
        ULONG *pulVal;
        ULONGLONG *pullVal;
        INT *pintVal;
        UINT *puintVal;
    } ;
};


typedef LONG DISPID;
typedef DISPID MEMBERID;
typedef DWORD HREFTYPE;
typedef enum tagTYPEKIND {
    TKIND_ENUM = 0,
    TKIND_RECORD = 1,
    TKIND_MODULE = 2,
    TKIND_INTERFACE = 3,
    TKIND_DISPATCH = 4,
    TKIND_COCLASS = 5,
    TKIND_ALIAS = 6,
    TKIND_UNION = 7,
    TKIND_MAX = 8
} TYPEKIND;

typedef struct tagTYPEDESC {
    __extension__ union {
        struct tagTYPEDESC *lptdesc;
        struct tagARRAYDESC *lpadesc;
        HREFTYPE hreftype;
    } ;
    VARTYPE vt;
} TYPEDESC;

typedef struct tagARRAYDESC {
    TYPEDESC tdescElem;
    USHORT cDims;
    SAFEARRAYBOUND rgbounds[1];
} ARRAYDESC;

typedef struct tagPARAMDESCEX {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
} PARAMDESCEX;
typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
} PARAMDESC;
typedef struct tagPARAMDESC *LPPARAMDESC;
typedef struct tagIDLDESC {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
} IDLDESC;
typedef struct tagIDLDESC *LPIDLDESC;
  typedef struct tagELEMDESC {
    TYPEDESC tdesc;
    __extension__ union {
      IDLDESC idldesc;
      PARAMDESC paramdesc;
    } ;
  } ELEMDESC,*LPELEMDESC;


typedef struct tagTYPEATTR {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
} TYPEATTR;
typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS {
    VARIANTARG *rgvarg;
    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
} DISPPARAMS;
  typedef struct tagEXCEPINFO {
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__attribute__((__stdcall__)) *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
  } EXCEPINFO, *LPEXCEPINFO;


typedef enum tagCALLCONV {
    CC_FASTCALL = 0,
    CC_CDECL = 1,
    CC_MSCPASCAL = 2,
    CC_PASCAL = CC_MSCPASCAL,
    CC_MACPASCAL = 3,
    CC_STDCALL = 4,
    CC_FPFASTCALL = 5,
    CC_SYSCALL = 6,
    CC_MPWCDECL = 7,
    CC_MPWPASCAL = 8,
    CC_MAX = 9
} CALLCONV;

typedef enum tagFUNCKIND {
    FUNC_VIRTUAL = 0,
    FUNC_PUREVIRTUAL = 1,
    FUNC_NONVIRTUAL = 2,
    FUNC_STATIC = 3,
    FUNC_DISPATCH = 4
} FUNCKIND;

typedef enum tagINVOKEKIND {
    INVOKE_FUNC = 1,
    INVOKE_PROPERTYGET = 2,
    INVOKE_PROPERTYPUT = 4,
    INVOKE_PROPERTYPUTREF = 8
} INVOKEKIND;

typedef struct tagFUNCDESC {
    MEMBERID memid;
    SCODE *lprgscode;
    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
} FUNCDESC;
typedef struct tagFUNCDESC *LPFUNCDESC;

typedef enum tagVARKIND {
    VAR_PERINSTANCE = 0,
    VAR_STATIC = 1,
    VAR_CONST = 2,
    VAR_DISPATCH = 3
} VARKIND;
typedef struct tagVARDESC {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
    __extension__ union {
        ULONG oInst;
        VARIANT *lpvarValue;
    } ;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
} VARDESC;
typedef struct tagVARDESC *LPVARDESC;

typedef enum tagTYPEFLAGS {
    TYPEFLAG_FAPPOBJECT = 0x1,
    TYPEFLAG_FCANCREATE = 0x2,
    TYPEFLAG_FLICENSED = 0x4,
    TYPEFLAG_FPREDECLID = 0x8,
    TYPEFLAG_FHIDDEN = 0x10,
    TYPEFLAG_FCONTROL = 0x20,
    TYPEFLAG_FDUAL = 0x40,
    TYPEFLAG_FNONEXTENSIBLE = 0x80,
    TYPEFLAG_FOLEAUTOMATION = 0x100,
    TYPEFLAG_FRESTRICTED = 0x200,
    TYPEFLAG_FAGGREGATABLE = 0x400,
    TYPEFLAG_FREPLACEABLE = 0x800,
    TYPEFLAG_FDISPATCHABLE = 0x1000,
    TYPEFLAG_FREVERSEBIND = 0x2000,
    TYPEFLAG_FPROXY = 0x4000
} TYPEFLAGS;

typedef enum tagFUNCFLAGS {
    FUNCFLAG_FRESTRICTED = 0x1,
    FUNCFLAG_FSOURCE = 0x2,
    FUNCFLAG_FBINDABLE = 0x4,
    FUNCFLAG_FREQUESTEDIT = 0x8,
    FUNCFLAG_FDISPLAYBIND = 0x10,
    FUNCFLAG_FDEFAULTBIND = 0x20,
    FUNCFLAG_FHIDDEN = 0x40,
    FUNCFLAG_FUSESGETLASTERROR = 0x80,
    FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
    FUNCFLAG_FUIDEFAULT = 0x200,
    FUNCFLAG_FNONBROWSABLE = 0x400,
    FUNCFLAG_FREPLACEABLE = 0x800,
    FUNCFLAG_FIMMEDIATEBIND = 0x1000
} FUNCFLAGS;

typedef enum tagVARFLAGS {
    VARFLAG_FREADONLY = 0x1,
    VARFLAG_FSOURCE = 0x2,
    VARFLAG_FBINDABLE = 0x4,
    VARFLAG_FREQUESTEDIT = 0x8,
    VARFLAG_FDISPLAYBIND = 0x10,
    VARFLAG_FDEFAULTBIND = 0x20,
    VARFLAG_FHIDDEN = 0x40,
    VARFLAG_FRESTRICTED = 0x80,
    VARFLAG_FDEFAULTCOLLELEM = 0x100,
    VARFLAG_FUIDEFAULT = 0x200,
    VARFLAG_FNONBROWSABLE = 0x400,
    VARFLAG_FREPLACEABLE = 0x800,
    VARFLAG_FIMMEDIATEBIND = 0x1000
} VARFLAGS;

typedef struct tagCLEANLOCALSTORAGE {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
} CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM {
    GUID guid;
    VARIANTARG varValue;
} CUSTDATAITEM;
typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA {
    DWORD cCustData;
    LPCUSTDATAITEM prgCustData;
} CUSTDATA;
typedef struct tagCUSTDATA *LPCUSTDATA;
typedef ICreateTypeInfo *LPCREATETYPEINFO;

extern "C" const GUID IID_ICreateTypeInfo;

struct
ICreateTypeInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SetGuid(
        const GUID & guid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetTypeFlags(
        UINT uTypeFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetDocString(
        LPOLESTR pStrDoc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetHelpContext(
        DWORD dwHelpContext) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetVersion(
        WORD wMajorVerNum,
        WORD wMinorVerNum) = 0;

    virtual HRESULT __attribute__((__stdcall__)) AddRefTypeInfo(
        ITypeInfo *pTInfo,
        HREFTYPE *phRefType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) AddFuncDesc(
        UINT index,
        FUNCDESC *pFuncDesc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) AddImplType(
        UINT index,
        HREFTYPE hRefType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetImplTypeFlags(
        UINT index,
        INT implTypeFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetAlignment(
        WORD cbAlignment) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetSchema(
        LPOLESTR pStrSchema) = 0;

    virtual HRESULT __attribute__((__stdcall__)) AddVarDesc(
        UINT index,
        VARDESC *pVarDesc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetFuncAndParamNames(
        UINT index,
        LPOLESTR *rgszNames,
        UINT cNames) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetVarName(
        UINT index,
        LPOLESTR szName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetTypeDescAlias(
        TYPEDESC *pTDescAlias) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DefineFuncAsDllEntry(
        UINT index,
        LPOLESTR szDllName,
        LPOLESTR szProcName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetFuncDocString(
        UINT index,
        LPOLESTR szDocString) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetVarDocString(
        UINT index,
        LPOLESTR szDocString) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetFuncHelpContext(
        UINT index,
        DWORD dwHelpContext) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetVarHelpContext(
        UINT index,
        DWORD dwHelpContext) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetMops(
        UINT index,
        BSTR bstrMops) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetTypeIdldesc(
        IDLDESC *pIdlDesc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) LayOut(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ICreateTypeInfo>() { static const IID __uuid_inst = {0x00020405,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ICreateTypeInfo*>() { return __mingw_uuidof<ICreateTypeInfo>(); } }
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetGuid_Proxy(
    ICreateTypeInfo* This,
    const GUID & guid);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeFlags_Proxy(
    ICreateTypeInfo* This,
    UINT uTypeFlags);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetDocString_Proxy(
    ICreateTypeInfo* This,
    LPOLESTR pStrDoc);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetHelpContext_Proxy(
    ICreateTypeInfo* This,
    DWORD dwHelpContext);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetVersion_Proxy(
    ICreateTypeInfo* This,
    WORD wMajorVerNum,
    WORD wMinorVerNum);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_AddRefTypeInfo_Proxy(
    ICreateTypeInfo* This,
    ITypeInfo *pTInfo,
    HREFTYPE *phRefType);
void __attribute__((__stdcall__)) ICreateTypeInfo_AddRefTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_AddFuncDesc_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    FUNCDESC *pFuncDesc);
void __attribute__((__stdcall__)) ICreateTypeInfo_AddFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_AddImplType_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    HREFTYPE hRefType);
void __attribute__((__stdcall__)) ICreateTypeInfo_AddImplType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetImplTypeFlags_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    INT implTypeFlags);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetImplTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetAlignment_Proxy(
    ICreateTypeInfo* This,
    WORD cbAlignment);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetAlignment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetSchema_Proxy(
    ICreateTypeInfo* This,
    LPOLESTR pStrSchema);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetSchema_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_AddVarDesc_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    VARDESC *pVarDesc);
void __attribute__((__stdcall__)) ICreateTypeInfo_AddVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncAndParamNames_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR *rgszNames,
    UINT cNames);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncAndParamNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetVarName_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szName);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetVarName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeDescAlias_Proxy(
    ICreateTypeInfo* This,
    TYPEDESC *pTDescAlias);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeDescAlias_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_DefineFuncAsDllEntry_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szDllName,
    LPOLESTR szProcName);
void __attribute__((__stdcall__)) ICreateTypeInfo_DefineFuncAsDllEntry_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncDocString_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szDocString);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetVarDocString_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    LPOLESTR szDocString);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetVarDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncHelpContext_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    DWORD dwHelpContext);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetFuncHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetVarHelpContext_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    DWORD dwHelpContext);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetVarHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetMops_Proxy(
    ICreateTypeInfo* This,
    UINT index,
    BSTR bstrMops);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetMops_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeIdldesc_Proxy(
    ICreateTypeInfo* This,
    IDLDESC *pIdlDesc);
void __attribute__((__stdcall__)) ICreateTypeInfo_SetTypeIdldesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo_LayOut_Proxy(
    ICreateTypeInfo* This);
void __attribute__((__stdcall__)) ICreateTypeInfo_LayOut_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;

extern "C" const GUID IID_ICreateTypeInfo2;

struct
ICreateTypeInfo2 : public ICreateTypeInfo
{
    virtual HRESULT __attribute__((__stdcall__)) DeleteFuncDesc(
        UINT index) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DeleteFuncDescByMemId(
        MEMBERID memid,
        INVOKEKIND invKind) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DeleteVarDesc(
        UINT index) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DeleteVarDescByMemId(
        MEMBERID memid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DeleteImplType(
        UINT index) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetCustData(
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetFuncCustData(
        UINT index,
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetParamCustData(
        UINT indexFunc,
        UINT indexParam,
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetVarCustData(
        UINT index,
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetImplTypeCustData(
        UINT index,
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetHelpStringContext(
        ULONG dwHelpStringContext) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetFuncHelpStringContext(
        UINT index,
        ULONG dwHelpStringContext) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetVarHelpStringContext(
        UINT index,
        ULONG dwHelpStringContext) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Invalidate(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetName(
        LPOLESTR szName) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ICreateTypeInfo2>() { static const IID __uuid_inst = {0x0002040e,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ICreateTypeInfo2*>() { return __mingw_uuidof<ICreateTypeInfo2>(); } }
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteFuncDesc_Proxy(
    ICreateTypeInfo2* This,
    UINT index);
void __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy(
    ICreateTypeInfo2* This,
    MEMBERID memid,
    INVOKEKIND invKind);
void __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteVarDesc_Proxy(
    ICreateTypeInfo2* This,
    UINT index);
void __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteVarDescByMemId_Proxy(
    ICreateTypeInfo2* This,
    MEMBERID memid);
void __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteVarDescByMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteImplType_Proxy(
    ICreateTypeInfo2* This,
    UINT index);
void __attribute__((__stdcall__)) ICreateTypeInfo2_DeleteImplType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetCustData_Proxy(
    ICreateTypeInfo2* This,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetFuncCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetFuncCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetParamCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT indexFunc,
    UINT indexParam,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetParamCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetVarCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetVarCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetImplTypeCustData_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetImplTypeCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetHelpStringContext_Proxy(
    ICreateTypeInfo2* This,
    ULONG dwHelpStringContext);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetFuncHelpStringContext_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    ULONG dwHelpStringContext);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetFuncHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetVarHelpStringContext_Proxy(
    ICreateTypeInfo2* This,
    UINT index,
    ULONG dwHelpStringContext);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetVarHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_Invalidate_Proxy(
    ICreateTypeInfo2* This);
void __attribute__((__stdcall__)) ICreateTypeInfo2_Invalidate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeInfo2_SetName_Proxy(
    ICreateTypeInfo2* This,
    LPOLESTR szName);
void __attribute__((__stdcall__)) ICreateTypeInfo2_SetName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICreateTypeLib *LPCREATETYPELIB;

extern "C" const GUID IID_ICreateTypeLib;

struct
ICreateTypeLib : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) CreateTypeInfo(
        LPOLESTR szName,
        TYPEKIND tkind,
        ICreateTypeInfo **ppCTInfo) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetName(
        LPOLESTR szName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetVersion(
        WORD wMajorVerNum,
        WORD wMinorVerNum) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetGuid(
        const GUID & guid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetDocString(
        LPOLESTR szDoc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetHelpFileName(
        LPOLESTR szHelpFileName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetHelpContext(
        DWORD dwHelpContext) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetLcid(
        LCID lcid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetLibFlags(
        UINT uLibFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SaveAllChanges(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ICreateTypeLib>() { static const IID __uuid_inst = {0x00020406,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ICreateTypeLib*>() { return __mingw_uuidof<ICreateTypeLib>(); } }
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_CreateTypeInfo_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szName,
    TYPEKIND tkind,
    ICreateTypeInfo **ppCTInfo);
void __attribute__((__stdcall__)) ICreateTypeLib_CreateTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetName_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szName);
void __attribute__((__stdcall__)) ICreateTypeLib_SetName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetVersion_Proxy(
    ICreateTypeLib* This,
    WORD wMajorVerNum,
    WORD wMinorVerNum);
void __attribute__((__stdcall__)) ICreateTypeLib_SetVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetGuid_Proxy(
    ICreateTypeLib* This,
    const GUID & guid);
void __attribute__((__stdcall__)) ICreateTypeLib_SetGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetDocString_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szDoc);
void __attribute__((__stdcall__)) ICreateTypeLib_SetDocString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetHelpFileName_Proxy(
    ICreateTypeLib* This,
    LPOLESTR szHelpFileName);
void __attribute__((__stdcall__)) ICreateTypeLib_SetHelpFileName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetHelpContext_Proxy(
    ICreateTypeLib* This,
    DWORD dwHelpContext);
void __attribute__((__stdcall__)) ICreateTypeLib_SetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetLcid_Proxy(
    ICreateTypeLib* This,
    LCID lcid);
void __attribute__((__stdcall__)) ICreateTypeLib_SetLcid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SetLibFlags_Proxy(
    ICreateTypeLib* This,
    UINT uLibFlags);
void __attribute__((__stdcall__)) ICreateTypeLib_SetLibFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib_SaveAllChanges_Proxy(
    ICreateTypeLib* This);
void __attribute__((__stdcall__)) ICreateTypeLib_SaveAllChanges_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICreateTypeLib2 *LPCREATETYPELIB2;
extern "C" const GUID IID_ICreateTypeLib2;

struct
ICreateTypeLib2 : public ICreateTypeLib
{
    virtual HRESULT __attribute__((__stdcall__)) DeleteTypeInfo(
        LPOLESTR szName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetCustData(
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetHelpStringContext(
        ULONG dwHelpStringContext) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetHelpStringDll(
        LPOLESTR szFileName) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ICreateTypeLib2>() { static const IID __uuid_inst = {0x0002040f,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ICreateTypeLib2*>() { return __mingw_uuidof<ICreateTypeLib2>(); } }
HRESULT __attribute__((__stdcall__)) ICreateTypeLib2_DeleteTypeInfo_Proxy(
    ICreateTypeLib2* This,
    LPOLESTR szName);
void __attribute__((__stdcall__)) ICreateTypeLib2_DeleteTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib2_SetCustData_Proxy(
    ICreateTypeLib2* This,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ICreateTypeLib2_SetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib2_SetHelpStringContext_Proxy(
    ICreateTypeLib2* This,
    ULONG dwHelpStringContext);
void __attribute__((__stdcall__)) ICreateTypeLib2_SetHelpStringContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateTypeLib2_SetHelpStringDll_Proxy(
    ICreateTypeLib2* This,
    LPOLESTR szFileName);
void __attribute__((__stdcall__)) ICreateTypeLib2_SetHelpStringDll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IDispatch *LPDISPATCH;
extern "C" const GUID IID_IDispatch;

struct
IDispatch : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetTypeInfoCount(
        UINT *pctinfo) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetTypeInfo(
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetIDsOfNames(
        const IID & riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Invoke(
        DISPID dispIdMember,
        const IID & riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IDispatch>() { static const IID __uuid_inst = {0x00020400,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IDispatch*>() { return __mingw_uuidof<IDispatch>(); } }
HRESULT __attribute__((__stdcall__)) IDispatch_GetTypeInfoCount_Proxy(
    IDispatch* This,
    UINT *pctinfo);
void __attribute__((__stdcall__)) IDispatch_GetTypeInfoCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDispatch_GetTypeInfo_Proxy(
    IDispatch* This,
    UINT iTInfo,
    LCID lcid,
    ITypeInfo **ppTInfo);
void __attribute__((__stdcall__)) IDispatch_GetTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDispatch_GetIDsOfNames_Proxy(
    IDispatch* This,
    const IID & riid,
    LPOLESTR *rgszNames,
    UINT cNames,
    LCID lcid,
    DISPID *rgDispId);
void __attribute__((__stdcall__)) IDispatch_GetIDsOfNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDispatch_RemoteInvoke_Proxy(
    IDispatch* This,
    DISPID dispIdMember,
    const IID & riid,
    LCID lcid,
    DWORD dwFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *pArgErr,
    UINT cVarRef,
    UINT *rgVarRefIdx,
    VARIANTARG *rgVarRef);
void __attribute__((__stdcall__)) IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDispatch_Invoke_Proxy(
    IDispatch* This,
    DISPID dispIdMember,
    const IID & riid,
    LCID lcid,
    WORD wFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *puArgErr);
HRESULT __attribute__((__stdcall__)) IDispatch_Invoke_Stub(
    IDispatch* This,
    DISPID dispIdMember,
    const IID & riid,
    LCID lcid,
    DWORD dwFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *pArgErr,
    UINT cVarRef,
    UINT *rgVarRefIdx,
    VARIANTARG *rgVarRef);
typedef IEnumVARIANT *LPENUMVARIANT;

extern "C" const GUID IID_IEnumVARIANT;

struct
IEnumVARIANT : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Next(
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Skip(
        ULONG celt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IEnumVARIANT **ppEnum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEnumVARIANT>() { static const IID __uuid_inst = {0x00020404,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEnumVARIANT*>() { return __mingw_uuidof<IEnumVARIANT>(); } }
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_RemoteNext_Proxy(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
void __attribute__((__stdcall__)) IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_Skip_Proxy(
    IEnumVARIANT* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumVARIANT_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_Reset_Proxy(
    IEnumVARIANT* This);
void __attribute__((__stdcall__)) IEnumVARIANT_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_Clone_Proxy(
    IEnumVARIANT* This,
    IEnumVARIANT **ppEnum);
void __attribute__((__stdcall__)) IEnumVARIANT_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_Next_Proxy(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
HRESULT __attribute__((__stdcall__)) IEnumVARIANT_Next_Stub(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
typedef ITypeComp *LPTYPECOMP;

typedef enum tagDESCKIND {
    DESCKIND_NONE = 0,
    DESCKIND_FUNCDESC = 1,
    DESCKIND_VARDESC = 2,
    DESCKIND_TYPECOMP = 3,
    DESCKIND_IMPLICITAPPOBJ = 4,
    DESCKIND_MAX = 5
} DESCKIND;

typedef union tagBINDPTR {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
} BINDPTR;
typedef union tagBINDPTR *LPBINDPTR;

extern "C" const GUID IID_ITypeComp;

struct
ITypeComp : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Bind(
        LPOLESTR szName,
        ULONG lHashVal,
        WORD wFlags,
        ITypeInfo **ppTInfo,
        DESCKIND *pDescKind,
        BINDPTR *pBindPtr) = 0;

    virtual HRESULT __attribute__((__stdcall__)) BindType(
        LPOLESTR szName,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        ITypeComp **ppTComp) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ITypeComp>() { static const IID __uuid_inst = {0x00020403,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ITypeComp*>() { return __mingw_uuidof<ITypeComp>(); } }
HRESULT __attribute__((__stdcall__)) ITypeComp_RemoteBind_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    LPFUNCDESC *ppFuncDesc,
    LPVARDESC *ppVarDesc,
    ITypeComp **ppTypeComp,
    CLEANLOCALSTORAGE *pDummy);
void __attribute__((__stdcall__)) ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeComp_RemoteBindType_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo);
void __attribute__((__stdcall__)) ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeComp_Bind_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    BINDPTR *pBindPtr);
HRESULT __attribute__((__stdcall__)) ITypeComp_Bind_Stub(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    LPFUNCDESC *ppFuncDesc,
    LPVARDESC *ppVarDesc,
    ITypeComp **ppTypeComp,
    CLEANLOCALSTORAGE *pDummy);
HRESULT __attribute__((__stdcall__)) ITypeComp_BindType_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    ITypeComp **ppTComp);
HRESULT __attribute__((__stdcall__)) ITypeComp_BindType_Stub(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo);
typedef ITypeInfo *LPTYPEINFO;

extern "C" const GUID IID_ITypeInfo;

struct
ITypeInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetTypeAttr(
        TYPEATTR **ppTypeAttr) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetTypeComp(
        ITypeComp **ppTComp) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetFuncDesc(
        UINT index,
        FUNCDESC **ppFuncDesc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetVarDesc(
        UINT index,
        VARDESC **ppVarDesc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetNames(
        MEMBERID memid,
        BSTR *rgBstrNames,
        UINT cMaxNames,
        UINT *pcNames) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetRefTypeOfImplType(
        UINT index,
        HREFTYPE *pRefType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetImplTypeFlags(
        UINT index,
        INT *pImplTypeFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetIDsOfNames(
        LPOLESTR *rgszNames,
        UINT cNames,
        MEMBERID *pMemId) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Invoke(
        PVOID pvInstance,
        MEMBERID memid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDocumentation(
        MEMBERID memid,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDllEntry(
        MEMBERID memid,
        INVOKEKIND invKind,
        BSTR *pBstrDllName,
        BSTR *pBstrName,
        WORD *pwOrdinal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetRefTypeInfo(
        HREFTYPE hRefType,
        ITypeInfo **ppTInfo) = 0;

    virtual HRESULT __attribute__((__stdcall__)) AddressOfMember(
        MEMBERID memid,
        INVOKEKIND invKind,
        PVOID *ppv) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CreateInstance(
        IUnknown *pUnkOuter,
        const IID & riid,
        PVOID *ppvObj) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetMops(
        MEMBERID memid,
        BSTR *pBstrMops) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetContainingTypeLib(
        ITypeLib **ppTLib,
        UINT *pIndex) = 0;

    virtual void __attribute__((__stdcall__)) ReleaseTypeAttr(
        TYPEATTR *pTypeAttr) = 0;

    virtual void __attribute__((__stdcall__)) ReleaseFuncDesc(
        FUNCDESC *pFuncDesc) = 0;

    virtual void __attribute__((__stdcall__)) ReleaseVarDesc(
        VARDESC *pVarDesc) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ITypeInfo>() { static const IID __uuid_inst = {0x00020401,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ITypeInfo*>() { return __mingw_uuidof<ITypeInfo>(); } }
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetTypeAttr_Proxy(
    ITypeInfo* This,
    LPTYPEATTR *ppTypeAttr,
    CLEANLOCALSTORAGE *pDummy);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetTypeComp_Proxy(
    ITypeInfo* This,
    ITypeComp **ppTComp);
void __attribute__((__stdcall__)) ITypeInfo_GetTypeComp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetFuncDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    LPFUNCDESC *ppFuncDesc,
    CLEANLOCALSTORAGE *pDummy);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetVarDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    LPVARDESC *ppVarDesc,
    CLEANLOCALSTORAGE *pDummy);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetNames_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetRefTypeOfImplType_Proxy(
    ITypeInfo* This,
    UINT index,
    HREFTYPE *pRefType);
void __attribute__((__stdcall__)) ITypeInfo_GetRefTypeOfImplType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetImplTypeFlags_Proxy(
    ITypeInfo* This,
    UINT index,
    INT *pImplTypeFlags);
void __attribute__((__stdcall__)) ITypeInfo_GetImplTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalGetIDsOfNames_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalInvoke_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetDocumentation_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetDllEntry_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    DWORD refPtrFlags,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetRefTypeInfo_Proxy(
    ITypeInfo* This,
    HREFTYPE hRefType,
    ITypeInfo **ppTInfo);
void __attribute__((__stdcall__)) ITypeInfo_GetRefTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalAddressOfMember_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteCreateInstance_Proxy(
    ITypeInfo* This,
    const IID & riid,
    IUnknown **ppvObj);
void __attribute__((__stdcall__)) ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetMops_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *pBstrMops);
void __attribute__((__stdcall__)) ITypeInfo_GetMops_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_RemoteGetContainingTypeLib_Proxy(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
void __attribute__((__stdcall__)) ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalReleaseTypeAttr_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalReleaseFuncDesc_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_LocalReleaseVarDesc_Proxy(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetTypeAttr_Proxy(
    ITypeInfo* This,
    TYPEATTR **ppTypeAttr);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetTypeAttr_Stub(
    ITypeInfo* This,
    LPTYPEATTR *ppTypeAttr,
    CLEANLOCALSTORAGE *pDummy);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetFuncDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    FUNCDESC **ppFuncDesc);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetFuncDesc_Stub(
    ITypeInfo* This,
    UINT index,
    LPFUNCDESC *ppFuncDesc,
    CLEANLOCALSTORAGE *pDummy);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetVarDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    VARDESC **ppVarDesc);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetVarDesc_Stub(
    ITypeInfo* This,
    UINT index,
    LPVARDESC *ppVarDesc,
    CLEANLOCALSTORAGE *pDummy);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetNames_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetNames_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetIDsOfNames_Proxy(
    ITypeInfo* This,
    LPOLESTR *rgszNames,
    UINT cNames,
    MEMBERID *pMemId);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetIDsOfNames_Stub(
    ITypeInfo* This);
HRESULT __attribute__((__stdcall__)) ITypeInfo_Invoke_Proxy(
    ITypeInfo* This,
    PVOID pvInstance,
    MEMBERID memid,
    WORD wFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *puArgErr);
HRESULT __attribute__((__stdcall__)) ITypeInfo_Invoke_Stub(
    ITypeInfo* This);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetDocumentation_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetDocumentation_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetDllEntry_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetDllEntry_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    DWORD refPtrFlags,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
HRESULT __attribute__((__stdcall__)) ITypeInfo_AddressOfMember_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    PVOID *ppv);
HRESULT __attribute__((__stdcall__)) ITypeInfo_AddressOfMember_Stub(
    ITypeInfo* This);
HRESULT __attribute__((__stdcall__)) ITypeInfo_CreateInstance_Proxy(
    ITypeInfo* This,
    IUnknown *pUnkOuter,
    const IID & riid,
    PVOID *ppvObj);
HRESULT __attribute__((__stdcall__)) ITypeInfo_CreateInstance_Stub(
    ITypeInfo* This,
    const IID & riid,
    IUnknown **ppvObj);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetContainingTypeLib_Proxy(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
HRESULT __attribute__((__stdcall__)) ITypeInfo_GetContainingTypeLib_Stub(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
void __attribute__((__stdcall__)) ITypeInfo_ReleaseTypeAttr_Proxy(
    ITypeInfo* This,
    TYPEATTR *pTypeAttr);
HRESULT __attribute__((__stdcall__)) ITypeInfo_ReleaseTypeAttr_Stub(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_ReleaseFuncDesc_Proxy(
    ITypeInfo* This,
    FUNCDESC *pFuncDesc);
HRESULT __attribute__((__stdcall__)) ITypeInfo_ReleaseFuncDesc_Stub(
    ITypeInfo* This);
void __attribute__((__stdcall__)) ITypeInfo_ReleaseVarDesc_Proxy(
    ITypeInfo* This,
    VARDESC *pVarDesc);
HRESULT __attribute__((__stdcall__)) ITypeInfo_ReleaseVarDesc_Stub(
    ITypeInfo* This);
typedef ITypeInfo2 *LPTYPEINFO2;

extern "C" const GUID IID_ITypeInfo2;

struct
ITypeInfo2 : public ITypeInfo
{
    virtual HRESULT __attribute__((__stdcall__)) GetTypeKind(
        TYPEKIND *pTypeKind) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetTypeFlags(
        ULONG *pTypeFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetFuncIndexOfMemId(
        MEMBERID memid,
        INVOKEKIND invKind,
        UINT *pFuncIndex) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetVarIndexOfMemId(
        MEMBERID memid,
        UINT *pVarIndex) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetCustData(
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetFuncCustData(
        UINT index,
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetParamCustData(
        UINT indexFunc,
        UINT indexParam,
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetVarCustData(
        UINT index,
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetImplTypeCustData(
        UINT index,
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDocumentation2(
        MEMBERID memid,
        LCID lcid,
        BSTR *pbstrHelpString,
        DWORD *pdwHelpStringContext,
        BSTR *pbstrHelpStringDll) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetAllCustData(
        CUSTDATA *pCustData) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetAllFuncCustData(
        UINT index,
        CUSTDATA *pCustData) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetAllParamCustData(
        UINT indexFunc,
        UINT indexParam,
        CUSTDATA *pCustData) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetAllVarCustData(
        UINT index,
        CUSTDATA *pCustData) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetAllImplTypeCustData(
        UINT index,
        CUSTDATA *pCustData) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ITypeInfo2>() { static const IID __uuid_inst = {0x00020412,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ITypeInfo2*>() { return __mingw_uuidof<ITypeInfo2>(); } }
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetTypeKind_Proxy(
    ITypeInfo2* This,
    TYPEKIND *pTypeKind);
void __attribute__((__stdcall__)) ITypeInfo2_GetTypeKind_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetTypeFlags_Proxy(
    ITypeInfo2* This,
    ULONG *pTypeFlags);
void __attribute__((__stdcall__)) ITypeInfo2_GetTypeFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetFuncIndexOfMemId_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    UINT *pFuncIndex);
void __attribute__((__stdcall__)) ITypeInfo2_GetFuncIndexOfMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetVarIndexOfMemId_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    UINT *pVarIndex);
void __attribute__((__stdcall__)) ITypeInfo2_GetVarIndexOfMemId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetCustData_Proxy(
    ITypeInfo2* This,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeInfo2_GetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetFuncCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeInfo2_GetFuncCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetParamCustData_Proxy(
    ITypeInfo2* This,
    UINT indexFunc,
    UINT indexParam,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeInfo2_GetParamCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetVarCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeInfo2_GetVarCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetImplTypeCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeInfo2_GetImplTypeCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_RemoteGetDocumentation2_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
void __attribute__((__stdcall__)) ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetAllCustData_Proxy(
    ITypeInfo2* This,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeInfo2_GetAllCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetAllFuncCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeInfo2_GetAllFuncCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetAllParamCustData_Proxy(
    ITypeInfo2* This,
    UINT indexFunc,
    UINT indexParam,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeInfo2_GetAllParamCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetAllVarCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeInfo2_GetAllVarCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetAllImplTypeCustData_Proxy(
    ITypeInfo2* This,
    UINT index,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeInfo2_GetAllImplTypeCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetDocumentation2_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
HRESULT __attribute__((__stdcall__)) ITypeInfo2_GetDocumentation2_Stub(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
typedef enum tagSYSKIND {
    SYS_WIN16 = 0,
    SYS_WIN32 = 1,
    SYS_MAC = 2,
    SYS_WIN64 = 3
} SYSKIND;

typedef enum tagLIBFLAGS {
    LIBFLAG_FRESTRICTED = 0x1,
    LIBFLAG_FCONTROL = 0x2,
    LIBFLAG_FHIDDEN = 0x4,
    LIBFLAG_FHASDISKIMAGE = 0x8
} LIBFLAGS;

typedef ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
} TLIBATTR;
typedef struct tagTLIBATTR *LPTLIBATTR;

extern "C" const GUID IID_ITypeLib;

struct
ITypeLib : public IUnknown
{
    virtual UINT __attribute__((__stdcall__)) GetTypeInfoCount(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetTypeInfo(
        UINT index,
        ITypeInfo **ppTInfo) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetTypeInfoType(
        UINT index,
        TYPEKIND *pTKind) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetTypeInfoOfGuid(
        const GUID & guid,
        ITypeInfo **ppTinfo) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetLibAttr(
        TLIBATTR **ppTLibAttr) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetTypeComp(
        ITypeComp **ppTComp) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDocumentation(
        INT index,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile) = 0;

    virtual HRESULT __attribute__((__stdcall__)) IsName(
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        WINBOOL *pfName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) FindName(
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        MEMBERID *rgMemId,
        USHORT *pcFound) = 0;

    virtual void __attribute__((__stdcall__)) ReleaseTLibAttr(
        TLIBATTR *pTLibAttr) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ITypeLib>() { static const IID __uuid_inst = {0x00020402,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ITypeLib*>() { return __mingw_uuidof<ITypeLib>(); } }
HRESULT __attribute__((__stdcall__)) ITypeLib_RemoteGetTypeInfoCount_Proxy(
    ITypeLib* This,
    UINT *pcTInfo);
void __attribute__((__stdcall__)) ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetTypeInfo_Proxy(
    ITypeLib* This,
    UINT index,
    ITypeInfo **ppTInfo);
void __attribute__((__stdcall__)) ITypeLib_GetTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetTypeInfoType_Proxy(
    ITypeLib* This,
    UINT index,
    TYPEKIND *pTKind);
void __attribute__((__stdcall__)) ITypeLib_GetTypeInfoType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetTypeInfoOfGuid_Proxy(
    ITypeLib* This,
    const GUID & guid,
    ITypeInfo **ppTinfo);
void __attribute__((__stdcall__)) ITypeLib_GetTypeInfoOfGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_RemoteGetLibAttr_Proxy(
    ITypeLib* This,
    LPTLIBATTR *ppTLibAttr,
    CLEANLOCALSTORAGE *pDummy);
void __attribute__((__stdcall__)) ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetTypeComp_Proxy(
    ITypeLib* This,
    ITypeComp **ppTComp);
void __attribute__((__stdcall__)) ITypeLib_GetTypeComp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_RemoteGetDocumentation_Proxy(
    ITypeLib* This,
    INT index,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
void __attribute__((__stdcall__)) ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_RemoteIsName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    WINBOOL *pfName,
    BSTR *pBstrLibName);
void __attribute__((__stdcall__)) ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_RemoteFindName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound,
    BSTR *pBstrLibName);
void __attribute__((__stdcall__)) ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib_LocalReleaseTLibAttr_Proxy(
    ITypeLib* This);
void __attribute__((__stdcall__)) ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
UINT __attribute__((__stdcall__)) ITypeLib_GetTypeInfoCount_Proxy(
    ITypeLib* This);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetTypeInfoCount_Stub(
    ITypeLib* This,
    UINT *pcTInfo);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetLibAttr_Proxy(
    ITypeLib* This,
    TLIBATTR **ppTLibAttr);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetLibAttr_Stub(
    ITypeLib* This,
    LPTLIBATTR *ppTLibAttr,
    CLEANLOCALSTORAGE *pDummy);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetDocumentation_Proxy(
    ITypeLib* This,
    INT index,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT __attribute__((__stdcall__)) ITypeLib_GetDocumentation_Stub(
    ITypeLib* This,
    INT index,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT __attribute__((__stdcall__)) ITypeLib_IsName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    WINBOOL *pfName);
HRESULT __attribute__((__stdcall__)) ITypeLib_IsName_Stub(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    WINBOOL *pfName,
    BSTR *pBstrLibName);
HRESULT __attribute__((__stdcall__)) ITypeLib_FindName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound);
HRESULT __attribute__((__stdcall__)) ITypeLib_FindName_Stub(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound,
    BSTR *pBstrLibName);
void __attribute__((__stdcall__)) ITypeLib_ReleaseTLibAttr_Proxy(
    ITypeLib* This,
    TLIBATTR *pTLibAttr);
HRESULT __attribute__((__stdcall__)) ITypeLib_ReleaseTLibAttr_Stub(
    ITypeLib* This);
typedef ITypeLib2 *LPTYPELIB2;

extern "C" const GUID IID_ITypeLib2;

struct
ITypeLib2 : public ITypeLib
{
    virtual HRESULT __attribute__((__stdcall__)) GetCustData(
        const GUID & guid,
        VARIANT *pVarVal) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetLibStatistics(
        ULONG *pcUniqueNames,
        ULONG *pcchUniqueNames) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDocumentation2(
        INT index,
        LCID lcid,
        BSTR *pbstrHelpString,
        DWORD *pdwHelpStringContext,
        BSTR *pbstrHelpStringDll) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetAllCustData(
        CUSTDATA *pCustData) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ITypeLib2>() { static const IID __uuid_inst = {0x00020411,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ITypeLib2*>() { return __mingw_uuidof<ITypeLib2>(); } }
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetCustData_Proxy(
    ITypeLib2* This,
    const GUID & guid,
    VARIANT *pVarVal);
void __attribute__((__stdcall__)) ITypeLib2_GetCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib2_RemoteGetLibStatistics_Proxy(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
void __attribute__((__stdcall__)) ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib2_RemoteGetDocumentation2_Proxy(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
void __attribute__((__stdcall__)) ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetAllCustData_Proxy(
    ITypeLib2* This,
    CUSTDATA *pCustData);
void __attribute__((__stdcall__)) ITypeLib2_GetAllCustData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetLibStatistics_Proxy(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetLibStatistics_Stub(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetDocumentation2_Proxy(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
HRESULT __attribute__((__stdcall__)) ITypeLib2_GetDocumentation2_Stub(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef enum tagCHANGEKIND {
    CHANGEKIND_ADDMEMBER = 0,
    CHANGEKIND_DELETEMEMBER = 1,
    CHANGEKIND_SETNAMES = 2,
    CHANGEKIND_SETDOCUMENTATION = 3,
    CHANGEKIND_GENERAL = 4,
    CHANGEKIND_INVALIDATE = 5,
    CHANGEKIND_CHANGEFAILED = 6,
    CHANGEKIND_MAX = 7
} CHANGEKIND;

extern "C" const GUID IID_ITypeChangeEvents;

struct
ITypeChangeEvents : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) RequestTypeChange(
        CHANGEKIND changeKind,
        ITypeInfo *pTInfoBefore,
        LPOLESTR pStrName,
        INT *pfCancel) = 0;

    virtual HRESULT __attribute__((__stdcall__)) AfterTypeChange(
        CHANGEKIND changeKind,
        ITypeInfo *pTInfoAfter,
        LPOLESTR pStrName) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ITypeChangeEvents>() { static const IID __uuid_inst = {0x00020410,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ITypeChangeEvents*>() { return __mingw_uuidof<ITypeChangeEvents>(); } }
HRESULT __attribute__((__stdcall__)) ITypeChangeEvents_RequestTypeChange_Proxy(
    ITypeChangeEvents* This,
    CHANGEKIND changeKind,
    ITypeInfo *pTInfoBefore,
    LPOLESTR pStrName,
    INT *pfCancel);
void __attribute__((__stdcall__)) ITypeChangeEvents_RequestTypeChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeChangeEvents_AfterTypeChange_Proxy(
    ITypeChangeEvents* This,
    CHANGEKIND changeKind,
    ITypeInfo *pTInfoAfter,
    LPOLESTR pStrName);
void __attribute__((__stdcall__)) ITypeChangeEvents_AfterTypeChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IErrorInfo *LPERRORINFO;

extern "C" const GUID IID_IErrorInfo;

struct
IErrorInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetGUID(
        GUID *pGUID) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetSource(
        BSTR *pBstrSource) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDescription(
        BSTR *pBstrDescription) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetHelpFile(
        BSTR *pBstrHelpFile) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetHelpContext(
        DWORD *pdwHelpContext) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IErrorInfo>() { static const IID __uuid_inst = {0x1cf2b120,0x547d,0x101b, {0x8e,0x65,0x08,0x00,0x2b,0x2b,0xd1,0x19}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IErrorInfo*>() { return __mingw_uuidof<IErrorInfo>(); } }
HRESULT __attribute__((__stdcall__)) IErrorInfo_GetGUID_Proxy(
    IErrorInfo* This,
    GUID *pGUID);
void __attribute__((__stdcall__)) IErrorInfo_GetGUID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IErrorInfo_GetSource_Proxy(
    IErrorInfo* This,
    BSTR *pBstrSource);
void __attribute__((__stdcall__)) IErrorInfo_GetSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IErrorInfo_GetDescription_Proxy(
    IErrorInfo* This,
    BSTR *pBstrDescription);
void __attribute__((__stdcall__)) IErrorInfo_GetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IErrorInfo_GetHelpFile_Proxy(
    IErrorInfo* This,
    BSTR *pBstrHelpFile);
void __attribute__((__stdcall__)) IErrorInfo_GetHelpFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IErrorInfo_GetHelpContext_Proxy(
    IErrorInfo* This,
    DWORD *pdwHelpContext);
void __attribute__((__stdcall__)) IErrorInfo_GetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICreateErrorInfo *LPCREATEERRORINFO;

extern "C" const GUID IID_ICreateErrorInfo;

struct
ICreateErrorInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SetGUID(
        const GUID & rguid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetSource(
        LPOLESTR szSource) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetDescription(
        LPOLESTR szDescription) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetHelpFile(
        LPOLESTR szHelpFile) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetHelpContext(
        DWORD dwHelpContext) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ICreateErrorInfo>() { static const IID __uuid_inst = {0x22f03340,0x547d,0x101b, {0x8e,0x65,0x08,0x00,0x2b,0x2b,0xd1,0x19}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ICreateErrorInfo*>() { return __mingw_uuidof<ICreateErrorInfo>(); } }
HRESULT __attribute__((__stdcall__)) ICreateErrorInfo_SetGUID_Proxy(
    ICreateErrorInfo* This,
    const GUID & rguid);
void __attribute__((__stdcall__)) ICreateErrorInfo_SetGUID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateErrorInfo_SetSource_Proxy(
    ICreateErrorInfo* This,
    LPOLESTR szSource);
void __attribute__((__stdcall__)) ICreateErrorInfo_SetSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateErrorInfo_SetDescription_Proxy(
    ICreateErrorInfo* This,
    LPOLESTR szDescription);
void __attribute__((__stdcall__)) ICreateErrorInfo_SetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateErrorInfo_SetHelpFile_Proxy(
    ICreateErrorInfo* This,
    LPOLESTR szHelpFile);
void __attribute__((__stdcall__)) ICreateErrorInfo_SetHelpFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICreateErrorInfo_SetHelpContext_Proxy(
    ICreateErrorInfo* This,
    DWORD dwHelpContext);
void __attribute__((__stdcall__)) ICreateErrorInfo_SetHelpContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;

extern "C" const GUID IID_ISupportErrorInfo;

struct
ISupportErrorInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) InterfaceSupportsErrorInfo(
        const IID & riid) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ISupportErrorInfo>() { static const IID __uuid_inst = {0xdf0b3d60,0x548f,0x101b, {0x8e,0x65,0x08,0x00,0x2b,0x2b,0xd1,0x19}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ISupportErrorInfo*>() { return __mingw_uuidof<ISupportErrorInfo>(); } }
HRESULT __attribute__((__stdcall__)) ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy(
    ISupportErrorInfo* This,
    const IID & riid);
void __attribute__((__stdcall__)) ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_ITypeFactory;

struct
ITypeFactory : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) CreateFromTypeInfo(
        ITypeInfo *pTypeInfo,
        const IID & riid,
        IUnknown **ppv) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ITypeFactory>() { static const IID __uuid_inst = {0x0000002e,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ITypeFactory*>() { return __mingw_uuidof<ITypeFactory>(); } }
HRESULT __attribute__((__stdcall__)) ITypeFactory_CreateFromTypeInfo_Proxy(
    ITypeFactory* This,
    ITypeInfo *pTypeInfo,
    const IID & riid,
    IUnknown **ppv);
void __attribute__((__stdcall__)) ITypeFactory_CreateFromTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_ITypeMarshal;

struct
ITypeMarshal : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Size(
        PVOID pvType,
        DWORD dwDestContext,
        PVOID pvDestContext,
        ULONG *pSize) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Marshal(
        PVOID pvType,
        DWORD dwDestContext,
        PVOID pvDestContext,
        ULONG cbBufferLength,
        BYTE *pBuffer,
        ULONG *pcbWritten) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Unmarshal(
        PVOID pvType,
        DWORD dwFlags,
        ULONG cbBufferLength,
        BYTE *pBuffer,
        ULONG *pcbRead) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Free(
        PVOID pvType) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ITypeMarshal>() { static const IID __uuid_inst = {0x0000002d,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ITypeMarshal*>() { return __mingw_uuidof<ITypeMarshal>(); } }
HRESULT __attribute__((__stdcall__)) ITypeMarshal_Size_Proxy(
    ITypeMarshal* This,
    PVOID pvType,
    DWORD dwDestContext,
    PVOID pvDestContext,
    ULONG *pSize);
void __attribute__((__stdcall__)) ITypeMarshal_Size_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeMarshal_Marshal_Proxy(
    ITypeMarshal* This,
    PVOID pvType,
    DWORD dwDestContext,
    PVOID pvDestContext,
    ULONG cbBufferLength,
    BYTE *pBuffer,
    ULONG *pcbWritten);
void __attribute__((__stdcall__)) ITypeMarshal_Marshal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeMarshal_Unmarshal_Proxy(
    ITypeMarshal* This,
    PVOID pvType,
    DWORD dwFlags,
    ULONG cbBufferLength,
    BYTE *pBuffer,
    ULONG *pcbRead);
void __attribute__((__stdcall__)) ITypeMarshal_Unmarshal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ITypeMarshal_Free_Proxy(
    ITypeMarshal* This,
    PVOID pvType);
void __attribute__((__stdcall__)) ITypeMarshal_Free_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IRecordInfo *LPRECORDINFO;

extern "C" const GUID IID_IRecordInfo;

struct
IRecordInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) RecordInit(
        PVOID pvNew) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RecordClear(
        PVOID pvExisting) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RecordCopy(
        PVOID pvExisting,
        PVOID pvNew) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetGuid(
        GUID *pguid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetName(
        BSTR *pbstrName) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetSize(
        ULONG *pcbSize) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetTypeInfo(
        ITypeInfo **ppTypeInfo) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetField(
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetFieldNoCopy(
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField,
        PVOID *ppvDataCArray) = 0;

    virtual HRESULT __attribute__((__stdcall__)) PutField(
        ULONG wFlags,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField) = 0;

    virtual HRESULT __attribute__((__stdcall__)) PutFieldNoCopy(
        ULONG wFlags,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetFieldNames(
        ULONG *pcNames,
        BSTR *rgBstrNames) = 0;

    virtual WINBOOL __attribute__((__stdcall__)) IsMatchingType(
        IRecordInfo *pRecordInfo) = 0;

    virtual PVOID __attribute__((__stdcall__)) RecordCreate(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RecordCreateCopy(
        PVOID pvSource,
        PVOID *ppvDest) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RecordDestroy(
        PVOID pvRecord) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IRecordInfo>() { static const IID __uuid_inst = {0x0000002f,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IRecordInfo*>() { return __mingw_uuidof<IRecordInfo>(); } }
HRESULT __attribute__((__stdcall__)) IRecordInfo_RecordInit_Proxy(
    IRecordInfo* This,
    PVOID pvNew);
void __attribute__((__stdcall__)) IRecordInfo_RecordInit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_RecordClear_Proxy(
    IRecordInfo* This,
    PVOID pvExisting);
void __attribute__((__stdcall__)) IRecordInfo_RecordClear_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_RecordCopy_Proxy(
    IRecordInfo* This,
    PVOID pvExisting,
    PVOID pvNew);
void __attribute__((__stdcall__)) IRecordInfo_RecordCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetGuid_Proxy(
    IRecordInfo* This,
    GUID *pguid);
void __attribute__((__stdcall__)) IRecordInfo_GetGuid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetName_Proxy(
    IRecordInfo* This,
    BSTR *pbstrName);
void __attribute__((__stdcall__)) IRecordInfo_GetName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetSize_Proxy(
    IRecordInfo* This,
    ULONG *pcbSize);
void __attribute__((__stdcall__)) IRecordInfo_GetSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetTypeInfo_Proxy(
    IRecordInfo* This,
    ITypeInfo **ppTypeInfo);
void __attribute__((__stdcall__)) IRecordInfo_GetTypeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetField_Proxy(
    IRecordInfo* This,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField);
void __attribute__((__stdcall__)) IRecordInfo_GetField_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetFieldNoCopy_Proxy(
    IRecordInfo* This,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField,
    PVOID *ppvDataCArray);
void __attribute__((__stdcall__)) IRecordInfo_GetFieldNoCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_PutField_Proxy(
    IRecordInfo* This,
    ULONG wFlags,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField);
void __attribute__((__stdcall__)) IRecordInfo_PutField_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_PutFieldNoCopy_Proxy(
    IRecordInfo* This,
    ULONG wFlags,
    PVOID pvData,
    LPCOLESTR szFieldName,
    VARIANT *pvarField);
void __attribute__((__stdcall__)) IRecordInfo_PutFieldNoCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_GetFieldNames_Proxy(
    IRecordInfo* This,
    ULONG *pcNames,
    BSTR *rgBstrNames);
void __attribute__((__stdcall__)) IRecordInfo_GetFieldNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
WINBOOL __attribute__((__stdcall__)) IRecordInfo_IsMatchingType_Proxy(
    IRecordInfo* This,
    IRecordInfo *pRecordInfo);
void __attribute__((__stdcall__)) IRecordInfo_IsMatchingType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
PVOID __attribute__((__stdcall__)) IRecordInfo_RecordCreate_Proxy(
    IRecordInfo* This);
void __attribute__((__stdcall__)) IRecordInfo_RecordCreate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_RecordCreateCopy_Proxy(
    IRecordInfo* This,
    PVOID pvSource,
    PVOID *ppvDest);
void __attribute__((__stdcall__)) IRecordInfo_RecordCreateCopy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IRecordInfo_RecordDestroy_Proxy(
    IRecordInfo* This,
    PVOID pvRecord);
void __attribute__((__stdcall__)) IRecordInfo_RecordDestroy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IErrorLog *LPERRORLOG;

extern "C" const GUID IID_IErrorLog;

struct
IErrorLog : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) AddError(
        LPCOLESTR pszPropName,
        EXCEPINFO *pExcepInfo) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IErrorLog>() { static const IID __uuid_inst = {0x3127ca40,0x446e,0x11ce, {0x81,0x35,0x00,0xaa,0x00,0x4b,0xb8,0x51}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IErrorLog*>() { return __mingw_uuidof<IErrorLog>(); } }
HRESULT __attribute__((__stdcall__)) IErrorLog_AddError_Proxy(
    IErrorLog* This,
    LPCOLESTR pszPropName,
    EXCEPINFO *pExcepInfo);
void __attribute__((__stdcall__)) IErrorLog_AddError_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPropertyBag *LPPROPERTYBAG;

extern "C" const GUID IID_IPropertyBag;

struct
IPropertyBag : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Read(
        LPCOLESTR pszPropName,
        VARIANT *pVar,
        IErrorLog *pErrorLog) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Write(
        LPCOLESTR pszPropName,
        VARIANT *pVar) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPropertyBag>() { static const IID __uuid_inst = {0x55272a00,0x42cb,0x11ce, {0x81,0x35,0x00,0xaa,0x00,0x4b,0xb8,0x51}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPropertyBag*>() { return __mingw_uuidof<IPropertyBag>(); } }
HRESULT __attribute__((__stdcall__)) IPropertyBag_RemoteRead_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog,
    DWORD varType,
    IUnknown *pUnkObj);
void __attribute__((__stdcall__)) IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyBag_Write_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar);
void __attribute__((__stdcall__)) IPropertyBag_Write_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyBag_Read_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog);
HRESULT __attribute__((__stdcall__)) IPropertyBag_Read_Stub(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog,
    DWORD varType,
    IUnknown *pUnkObj);






ULONG __attribute__((__stdcall__)) VARIANT_UserSize (ULONG *, ULONG, VARIANT *);
unsigned char * __attribute__((__stdcall__)) VARIANT_UserMarshal (ULONG *, unsigned char *, VARIANT *);
unsigned char * __attribute__((__stdcall__)) VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void __attribute__((__stdcall__)) VARIANT_UserFree (ULONG *, VARIANT *);
ULONG __attribute__((__stdcall__)) BSTR_UserSize (ULONG *, ULONG, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserMarshal (ULONG *, unsigned char *, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void __attribute__((__stdcall__)) BSTR_UserFree (ULONG *, BSTR *);
ULONG __attribute__((__stdcall__)) CLEANLOCALSTORAGE_UserSize (ULONG *, ULONG, CLEANLOCALSTORAGE *);
unsigned char * __attribute__((__stdcall__)) CLEANLOCALSTORAGE_UserMarshal (ULONG *, unsigned char *, CLEANLOCALSTORAGE *);
unsigned char * __attribute__((__stdcall__)) CLEANLOCALSTORAGE_UserUnmarshal(ULONG *, unsigned char *, CLEANLOCALSTORAGE *);
void __attribute__((__stdcall__)) CLEANLOCALSTORAGE_UserFree (ULONG *, CLEANLOCALSTORAGE *);




}





extern "C" {






typedef struct IXMLDOMImplementation IXMLDOMImplementation;




typedef struct IXMLDOMNode IXMLDOMNode;




typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;




typedef struct IXMLDOMDocument IXMLDOMDocument;




typedef struct IXMLDOMNodeList IXMLDOMNodeList;




typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;




typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;




typedef struct IXMLDOMAttribute IXMLDOMAttribute;




typedef struct IXMLDOMElement IXMLDOMElement;




typedef struct IXMLDOMText IXMLDOMText;




typedef struct IXMLDOMComment IXMLDOMComment;




typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;




typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;




typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;




typedef struct IXMLDOMNotation IXMLDOMNotation;




typedef struct IXMLDOMEntity IXMLDOMEntity;




typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;




typedef struct IXMLDOMParseError IXMLDOMParseError;




typedef struct IXTLRuntime IXTLRuntime;




typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;





typedef class DOMDocument DOMDocument;
typedef class DOMFreeThreadedDocument DOMFreeThreadedDocument;







typedef struct IXMLHttpRequest IXMLHttpRequest;





typedef class XMLHTTPRequest XMLHTTPRequest;







typedef struct IXMLDSOControl IXMLDSOControl;





typedef class XMLDSOControl XMLDSOControl;







typedef struct IXMLElementCollection IXMLElementCollection;




typedef struct IXMLDocument IXMLDocument;




typedef struct IXMLDocument2 IXMLDocument2;




typedef struct IXMLElement IXMLElement;




typedef struct IXMLElement2 IXMLElement2;




typedef struct IXMLAttribute IXMLAttribute;




typedef struct IXMLError IXMLError;






typedef class XMLDocument XMLDocument;






  typedef struct _xml_error {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
  } XML_ERROR;

  extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_s_ifspec;




  typedef enum tagDOMNodeType {
    NODE_INVALID = 0,NODE_ELEMENT,NODE_ATTRIBUTE,NODE_TEXT,NODE_CDATA_SECTION,
    NODE_ENTITY_REFERENCE,NODE_ENTITY,NODE_PROCESSING_INSTRUCTION,NODE_COMMENT,
    NODE_DOCUMENT,NODE_DOCUMENT_TYPE,NODE_DOCUMENT_FRAGMENT,NODE_NOTATION
  } DOMNodeType;

  typedef enum tagXMLEMEM_TYPE {
    XMLELEMTYPE_ELEMENT = 0,XMLELEMTYPE_TEXT,XMLELEMTYPE_COMMENT,XMLELEMTYPE_DOCUMENT,
    XMLELEMTYPE_DTD,XMLELEMTYPE_PI,XMLELEMTYPE_OTHER
  } XMLELEM_TYPE;

  extern "C" const IID LIBID_MSXML;



  extern "C" const IID IID_IXMLDOMImplementation;

  struct IXMLDOMImplementation : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) hasFeature(BSTR feature,BSTR version,VARIANT_BOOL *hasFeature) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMImplementation_hasFeature_Proxy(IXMLDOMImplementation *This,BSTR feature,BSTR version,VARIANT_BOOL *hasFeature);
  void __attribute__((__stdcall__)) IXMLDOMImplementation_hasFeature_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMNode;

  struct IXMLDOMNode : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_nodeName(BSTR *name) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_nodeValue(VARIANT *value) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_nodeValue(VARIANT value) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_nodeType(DOMNodeType *type) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_parentNode(IXMLDOMNode **parent) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_childNodes(IXMLDOMNodeList **childList) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_firstChild(IXMLDOMNode **firstChild) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_lastChild(IXMLDOMNode **lastChild) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_previousSibling(IXMLDOMNode **previousSibling) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_nextSibling(IXMLDOMNode **nextSibling) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_attributes(IXMLDOMNamedNodeMap **attributeMap) = 0;
    virtual HRESULT __attribute__((__stdcall__)) insertBefore(IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild) = 0;
    virtual HRESULT __attribute__((__stdcall__)) replaceChild(IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild) = 0;
    virtual HRESULT __attribute__((__stdcall__)) removeChild(IXMLDOMNode *childNode,IXMLDOMNode **oldChild) = 0;
    virtual HRESULT __attribute__((__stdcall__)) appendChild(IXMLDOMNode *newChild,IXMLDOMNode **outNewChild) = 0;
    virtual HRESULT __attribute__((__stdcall__)) hasChildNodes(VARIANT_BOOL *hasChild) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_ownerDocument(IXMLDOMDocument **DOMDocument) = 0;
    virtual HRESULT __attribute__((__stdcall__)) cloneNode(VARIANT_BOOL deep,IXMLDOMNode **cloneRoot) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_nodeTypeString(BSTR *nodeType) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_text(BSTR *text) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_text(BSTR text) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_specified(VARIANT_BOOL *isSpecified) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_definition(IXMLDOMNode **definitionNode) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_nodeTypedValue(VARIANT *typedValue) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_nodeTypedValue(VARIANT typedValue) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_dataType(VARIANT *dataTypeName) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_dataType(BSTR dataTypeName) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_xml(BSTR *xmlString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) transformNode(IXMLDOMNode *stylesheet,BSTR *xmlString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) selectNodes(BSTR queryString,IXMLDOMNodeList **resultList) = 0;
    virtual HRESULT __attribute__((__stdcall__)) selectSingleNode(BSTR queryString,IXMLDOMNode **resultNode) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_parsed(VARIANT_BOOL *isParsed) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_namespaceURI(BSTR *namespaceURI) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_prefix(BSTR *prefixString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_baseName(BSTR *nameString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) transformNodeToObject(IXMLDOMNode *stylesheet,VARIANT outputObject) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nodeName_Proxy(IXMLDOMNode *This,BSTR *name);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_nodeName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nodeValue_Proxy(IXMLDOMNode *This,VARIANT *value);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_nodeValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_put_nodeValue_Proxy(IXMLDOMNode *This,VARIANT value);
  void __attribute__((__stdcall__)) IXMLDOMNode_put_nodeValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nodeType_Proxy(IXMLDOMNode *This,DOMNodeType *type);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_nodeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_parentNode_Proxy(IXMLDOMNode *This,IXMLDOMNode **parent);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_parentNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_childNodes_Proxy(IXMLDOMNode *This,IXMLDOMNodeList **childList);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_childNodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_firstChild_Proxy(IXMLDOMNode *This,IXMLDOMNode **firstChild);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_firstChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_lastChild_Proxy(IXMLDOMNode *This,IXMLDOMNode **lastChild);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_lastChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_previousSibling_Proxy(IXMLDOMNode *This,IXMLDOMNode **previousSibling);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_previousSibling_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nextSibling_Proxy(IXMLDOMNode *This,IXMLDOMNode **nextSibling);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_nextSibling_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_attributes_Proxy(IXMLDOMNode *This,IXMLDOMNamedNodeMap **attributeMap);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_attributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_insertBefore_Proxy(IXMLDOMNode *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
  void __attribute__((__stdcall__)) IXMLDOMNode_insertBefore_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_replaceChild_Proxy(IXMLDOMNode *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
  void __attribute__((__stdcall__)) IXMLDOMNode_replaceChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_removeChild_Proxy(IXMLDOMNode *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
  void __attribute__((__stdcall__)) IXMLDOMNode_removeChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_appendChild_Proxy(IXMLDOMNode *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
  void __attribute__((__stdcall__)) IXMLDOMNode_appendChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_hasChildNodes_Proxy(IXMLDOMNode *This,VARIANT_BOOL *hasChild);
  void __attribute__((__stdcall__)) IXMLDOMNode_hasChildNodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_ownerDocument_Proxy(IXMLDOMNode *This,IXMLDOMDocument **DOMDocument);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_ownerDocument_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_cloneNode_Proxy(IXMLDOMNode *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
  void __attribute__((__stdcall__)) IXMLDOMNode_cloneNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nodeTypeString_Proxy(IXMLDOMNode *This,BSTR *nodeType);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_nodeTypeString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_text_Proxy(IXMLDOMNode *This,BSTR *text);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_put_text_Proxy(IXMLDOMNode *This,BSTR text);
  void __attribute__((__stdcall__)) IXMLDOMNode_put_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_specified_Proxy(IXMLDOMNode *This,VARIANT_BOOL *isSpecified);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_specified_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_definition_Proxy(IXMLDOMNode *This,IXMLDOMNode **definitionNode);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_definition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_nodeTypedValue_Proxy(IXMLDOMNode *This,VARIANT *typedValue);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_nodeTypedValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_put_nodeTypedValue_Proxy(IXMLDOMNode *This,VARIANT typedValue);
  void __attribute__((__stdcall__)) IXMLDOMNode_put_nodeTypedValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_dataType_Proxy(IXMLDOMNode *This,VARIANT *dataTypeName);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_dataType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_put_dataType_Proxy(IXMLDOMNode *This,BSTR dataTypeName);
  void __attribute__((__stdcall__)) IXMLDOMNode_put_dataType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_xml_Proxy(IXMLDOMNode *This,BSTR *xmlString);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_xml_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_transformNode_Proxy(IXMLDOMNode *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
  void __attribute__((__stdcall__)) IXMLDOMNode_transformNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_selectNodes_Proxy(IXMLDOMNode *This,BSTR queryString,IXMLDOMNodeList **resultList);
  void __attribute__((__stdcall__)) IXMLDOMNode_selectNodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_selectSingleNode_Proxy(IXMLDOMNode *This,BSTR queryString,IXMLDOMNode **resultNode);
  void __attribute__((__stdcall__)) IXMLDOMNode_selectSingleNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_parsed_Proxy(IXMLDOMNode *This,VARIANT_BOOL *isParsed);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_parsed_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_namespaceURI_Proxy(IXMLDOMNode *This,BSTR *namespaceURI);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_namespaceURI_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_prefix_Proxy(IXMLDOMNode *This,BSTR *prefixString);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_prefix_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_get_baseName_Proxy(IXMLDOMNode *This,BSTR *nameString);
  void __attribute__((__stdcall__)) IXMLDOMNode_get_baseName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNode_transformNodeToObject_Proxy(IXMLDOMNode *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
  void __attribute__((__stdcall__)) IXMLDOMNode_transformNodeToObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMDocumentFragment;

  struct IXMLDOMDocumentFragment : public IXMLDOMNode {
  };
  extern "C" const IID IID_IXMLDOMDocument;

  struct IXMLDOMDocument : public IXMLDOMNode {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_doctype(IXMLDOMDocumentType **documentType) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_implementation(IXMLDOMImplementation **impl) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_documentElement(IXMLDOMElement **DOMElement) = 0;
    virtual HRESULT __attribute__((__stdcall__)) putref_documentElement(IXMLDOMElement *DOMElement) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createElement(BSTR tagName,IXMLDOMElement **element) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createDocumentFragment(IXMLDOMDocumentFragment **docFrag) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createTextNode(BSTR data,IXMLDOMText **text) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createComment(BSTR data,IXMLDOMComment **comment) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createCDATASection(BSTR data,IXMLDOMCDATASection **cdata) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createProcessingInstruction(BSTR target,BSTR data,IXMLDOMProcessingInstruction **pi) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createAttribute(BSTR name,IXMLDOMAttribute **attribute) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createEntityReference(BSTR name,IXMLDOMEntityReference **entityRef) = 0;
    virtual HRESULT __attribute__((__stdcall__)) getElementsByTagName(BSTR tagName,IXMLDOMNodeList **resultList) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createNode(VARIANT Type,BSTR name,BSTR namespaceURI,IXMLDOMNode **node) = 0;
    virtual HRESULT __attribute__((__stdcall__)) nodeFromID(BSTR idString,IXMLDOMNode **node) = 0;
    virtual HRESULT __attribute__((__stdcall__)) load(VARIANT xmlSource,VARIANT_BOOL *isSuccessful) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_readyState(LONG *value) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_parseError(IXMLDOMParseError **errorObj) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_url(BSTR *urlString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_async(VARIANT_BOOL *isAsync) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_async(VARIANT_BOOL isAsync) = 0;
    virtual HRESULT __attribute__((__stdcall__)) abort(void) = 0;
    virtual HRESULT __attribute__((__stdcall__)) loadXML(BSTR bstrXML,VARIANT_BOOL *isSuccessful) = 0;
    virtual HRESULT __attribute__((__stdcall__)) save(VARIANT destination) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_validateOnParse(VARIANT_BOOL *isValidating) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_validateOnParse(VARIANT_BOOL isValidating) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_resolveExternals(VARIANT_BOOL *isResolving) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_resolveExternals(VARIANT_BOOL isResolving) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_preserveWhiteSpace(VARIANT_BOOL *isPreserving) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_preserveWhiteSpace(VARIANT_BOOL isPreserving) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_onreadystatechange(VARIANT readystatechangeSink) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_ondataavailable(VARIANT ondataavailableSink) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_ontransformnode(VARIANT ontransformnodeSink) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_doctype_Proxy(IXMLDOMDocument *This,IXMLDOMDocumentType **documentType);
  void __attribute__((__stdcall__)) IXMLDOMDocument_get_doctype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_implementation_Proxy(IXMLDOMDocument *This,IXMLDOMImplementation **impl);
  void __attribute__((__stdcall__)) IXMLDOMDocument_get_implementation_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_documentElement_Proxy(IXMLDOMDocument *This,IXMLDOMElement **DOMElement);
  void __attribute__((__stdcall__)) IXMLDOMDocument_get_documentElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_putref_documentElement_Proxy(IXMLDOMDocument *This,IXMLDOMElement *DOMElement);
  void __attribute__((__stdcall__)) IXMLDOMDocument_putref_documentElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createElement_Proxy(IXMLDOMDocument *This,BSTR tagName,IXMLDOMElement **element);
  void __attribute__((__stdcall__)) IXMLDOMDocument_createElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createDocumentFragment_Proxy(IXMLDOMDocument *This,IXMLDOMDocumentFragment **docFrag);
  void __attribute__((__stdcall__)) IXMLDOMDocument_createDocumentFragment_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createTextNode_Proxy(IXMLDOMDocument *This,BSTR data,IXMLDOMText **text);
  void __attribute__((__stdcall__)) IXMLDOMDocument_createTextNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createComment_Proxy(IXMLDOMDocument *This,BSTR data,IXMLDOMComment **comment);
  void __attribute__((__stdcall__)) IXMLDOMDocument_createComment_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createCDATASection_Proxy(IXMLDOMDocument *This,BSTR data,IXMLDOMCDATASection **cdata);
  void __attribute__((__stdcall__)) IXMLDOMDocument_createCDATASection_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createProcessingInstruction_Proxy(IXMLDOMDocument *This,BSTR target,BSTR data,IXMLDOMProcessingInstruction **pi);
  void __attribute__((__stdcall__)) IXMLDOMDocument_createProcessingInstruction_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createAttribute_Proxy(IXMLDOMDocument *This,BSTR name,IXMLDOMAttribute **attribute);
  void __attribute__((__stdcall__)) IXMLDOMDocument_createAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createEntityReference_Proxy(IXMLDOMDocument *This,BSTR name,IXMLDOMEntityReference **entityRef);
  void __attribute__((__stdcall__)) IXMLDOMDocument_createEntityReference_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_getElementsByTagName_Proxy(IXMLDOMDocument *This,BSTR tagName,IXMLDOMNodeList **resultList);
  void __attribute__((__stdcall__)) IXMLDOMDocument_getElementsByTagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_createNode_Proxy(IXMLDOMDocument *This,VARIANT Type,BSTR name,BSTR namespaceURI,IXMLDOMNode **node);
  void __attribute__((__stdcall__)) IXMLDOMDocument_createNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_nodeFromID_Proxy(IXMLDOMDocument *This,BSTR idString,IXMLDOMNode **node);
  void __attribute__((__stdcall__)) IXMLDOMDocument_nodeFromID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_load_Proxy(IXMLDOMDocument *This,VARIANT xmlSource,VARIANT_BOOL *isSuccessful);
  void __attribute__((__stdcall__)) IXMLDOMDocument_load_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_readyState_Proxy(IXMLDOMDocument *This,LONG *value);
  void __attribute__((__stdcall__)) IXMLDOMDocument_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_parseError_Proxy(IXMLDOMDocument *This,IXMLDOMParseError **errorObj);
  void __attribute__((__stdcall__)) IXMLDOMDocument_get_parseError_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_url_Proxy(IXMLDOMDocument *This,BSTR *urlString);
  void __attribute__((__stdcall__)) IXMLDOMDocument_get_url_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_async_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isAsync);
  void __attribute__((__stdcall__)) IXMLDOMDocument_get_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_async_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isAsync);
  void __attribute__((__stdcall__)) IXMLDOMDocument_put_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_abort_Proxy(IXMLDOMDocument *This);
  void __attribute__((__stdcall__)) IXMLDOMDocument_abort_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_loadXML_Proxy(IXMLDOMDocument *This,BSTR bstrXML,VARIANT_BOOL *isSuccessful);
  void __attribute__((__stdcall__)) IXMLDOMDocument_loadXML_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_save_Proxy(IXMLDOMDocument *This,VARIANT destination);
  void __attribute__((__stdcall__)) IXMLDOMDocument_save_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_validateOnParse_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isValidating);
  void __attribute__((__stdcall__)) IXMLDOMDocument_get_validateOnParse_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_validateOnParse_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isValidating);
  void __attribute__((__stdcall__)) IXMLDOMDocument_put_validateOnParse_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_resolveExternals_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isResolving);
  void __attribute__((__stdcall__)) IXMLDOMDocument_get_resolveExternals_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_resolveExternals_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isResolving);
  void __attribute__((__stdcall__)) IXMLDOMDocument_put_resolveExternals_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_get_preserveWhiteSpace_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isPreserving);
  void __attribute__((__stdcall__)) IXMLDOMDocument_get_preserveWhiteSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_preserveWhiteSpace_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isPreserving);
  void __attribute__((__stdcall__)) IXMLDOMDocument_put_preserveWhiteSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_onreadystatechange_Proxy(IXMLDOMDocument *This,VARIANT readystatechangeSink);
  void __attribute__((__stdcall__)) IXMLDOMDocument_put_onreadystatechange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_ondataavailable_Proxy(IXMLDOMDocument *This,VARIANT ondataavailableSink);
  void __attribute__((__stdcall__)) IXMLDOMDocument_put_ondataavailable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocument_put_ontransformnode_Proxy(IXMLDOMDocument *This,VARIANT ontransformnodeSink);
  void __attribute__((__stdcall__)) IXMLDOMDocument_put_ontransformnode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMNodeList;

  struct IXMLDOMNodeList : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_item(LONG index,IXMLDOMNode **listItem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_length(LONG *listLength) = 0;
    virtual HRESULT __attribute__((__stdcall__)) nextNode(IXMLDOMNode **nextItem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) reset(void) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get__newEnum(IUnknown **ppUnk) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMNodeList_get_item_Proxy(IXMLDOMNodeList *This,LONG index,IXMLDOMNode **listItem);
  void __attribute__((__stdcall__)) IXMLDOMNodeList_get_item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNodeList_get_length_Proxy(IXMLDOMNodeList *This,LONG *listLength);
  void __attribute__((__stdcall__)) IXMLDOMNodeList_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNodeList_nextNode_Proxy(IXMLDOMNodeList *This,IXMLDOMNode **nextItem);
  void __attribute__((__stdcall__)) IXMLDOMNodeList_nextNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNodeList_reset_Proxy(IXMLDOMNodeList *This);
  void __attribute__((__stdcall__)) IXMLDOMNodeList_reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNodeList_get__newEnum_Proxy(IXMLDOMNodeList *This,IUnknown **ppUnk);
  void __attribute__((__stdcall__)) IXMLDOMNodeList_get__newEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMNamedNodeMap;

  struct IXMLDOMNamedNodeMap : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) getNamedItem(BSTR name,IXMLDOMNode **namedItem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) setNamedItem(IXMLDOMNode *newItem,IXMLDOMNode **nameItem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) removeNamedItem(BSTR name,IXMLDOMNode **namedItem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_item(LONG index,IXMLDOMNode **listItem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_length(LONG *listLength) = 0;
    virtual HRESULT __attribute__((__stdcall__)) getQualifiedItem(BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) removeQualifiedItem(BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) nextNode(IXMLDOMNode **nextItem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) reset(void) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get__newEnum(IUnknown **ppUnk) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_getNamedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR name,IXMLDOMNode **namedItem);
  void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_getNamedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_setNamedItem_Proxy(IXMLDOMNamedNodeMap *This,IXMLDOMNode *newItem,IXMLDOMNode **nameItem);
  void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_setNamedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_removeNamedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR name,IXMLDOMNode **namedItem);
  void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_removeNamedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_get_item_Proxy(IXMLDOMNamedNodeMap *This,LONG index,IXMLDOMNode **listItem);
  void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_get_item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_get_length_Proxy(IXMLDOMNamedNodeMap *This,LONG *listLength);
  void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_getQualifiedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem);
  void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_getQualifiedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem);
  void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_removeQualifiedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_nextNode_Proxy(IXMLDOMNamedNodeMap *This,IXMLDOMNode **nextItem);
  void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_nextNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_reset_Proxy(IXMLDOMNamedNodeMap *This);
  void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_get__newEnum_Proxy(IXMLDOMNamedNodeMap *This,IUnknown **ppUnk);
  void __attribute__((__stdcall__)) IXMLDOMNamedNodeMap_get__newEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMCharacterData;

  struct IXMLDOMCharacterData : public IXMLDOMNode {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_data(BSTR *data) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_data(BSTR data) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_length(LONG *dataLength) = 0;
    virtual HRESULT __attribute__((__stdcall__)) substringData(LONG offset,LONG count,BSTR *data) = 0;
    virtual HRESULT __attribute__((__stdcall__)) appendData(BSTR data) = 0;
    virtual HRESULT __attribute__((__stdcall__)) insertData(LONG offset,BSTR data) = 0;
    virtual HRESULT __attribute__((__stdcall__)) deleteData(LONG offset,LONG count) = 0;
    virtual HRESULT __attribute__((__stdcall__)) replaceData(LONG offset,LONG count,BSTR data) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_get_data_Proxy(IXMLDOMCharacterData *This,BSTR *data);
  void __attribute__((__stdcall__)) IXMLDOMCharacterData_get_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_put_data_Proxy(IXMLDOMCharacterData *This,BSTR data);
  void __attribute__((__stdcall__)) IXMLDOMCharacterData_put_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_get_length_Proxy(IXMLDOMCharacterData *This,LONG *dataLength);
  void __attribute__((__stdcall__)) IXMLDOMCharacterData_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_substringData_Proxy(IXMLDOMCharacterData *This,LONG offset,LONG count,BSTR *data);
  void __attribute__((__stdcall__)) IXMLDOMCharacterData_substringData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_appendData_Proxy(IXMLDOMCharacterData *This,BSTR data);
  void __attribute__((__stdcall__)) IXMLDOMCharacterData_appendData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_insertData_Proxy(IXMLDOMCharacterData *This,LONG offset,BSTR data);
  void __attribute__((__stdcall__)) IXMLDOMCharacterData_insertData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_deleteData_Proxy(IXMLDOMCharacterData *This,LONG offset,LONG count);
  void __attribute__((__stdcall__)) IXMLDOMCharacterData_deleteData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMCharacterData_replaceData_Proxy(IXMLDOMCharacterData *This,LONG offset,LONG count,BSTR data);
  void __attribute__((__stdcall__)) IXMLDOMCharacterData_replaceData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMAttribute;

  struct IXMLDOMAttribute : public IXMLDOMNode {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_name(BSTR *attributeName) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_value(VARIANT *attributeValue) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_value(VARIANT attributeValue) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMAttribute_get_name_Proxy(IXMLDOMAttribute *This,BSTR *attributeName);
  void __attribute__((__stdcall__)) IXMLDOMAttribute_get_name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMAttribute_get_value_Proxy(IXMLDOMAttribute *This,VARIANT *attributeValue);
  void __attribute__((__stdcall__)) IXMLDOMAttribute_get_value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMAttribute_put_value_Proxy(IXMLDOMAttribute *This,VARIANT attributeValue);
  void __attribute__((__stdcall__)) IXMLDOMAttribute_put_value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMElement;

  struct IXMLDOMElement : public IXMLDOMNode {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_tagName(BSTR *tagName) = 0;
    virtual HRESULT __attribute__((__stdcall__)) getAttribute(BSTR name,VARIANT *value) = 0;
    virtual HRESULT __attribute__((__stdcall__)) setAttribute(BSTR name,VARIANT value) = 0;
    virtual HRESULT __attribute__((__stdcall__)) removeAttribute(BSTR name) = 0;
    virtual HRESULT __attribute__((__stdcall__)) getAttributeNode(BSTR name,IXMLDOMAttribute **attributeNode) = 0;
    virtual HRESULT __attribute__((__stdcall__)) setAttributeNode(IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode) = 0;
    virtual HRESULT __attribute__((__stdcall__)) removeAttributeNode(IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode) = 0;
    virtual HRESULT __attribute__((__stdcall__)) getElementsByTagName(BSTR tagName,IXMLDOMNodeList **resultList) = 0;
    virtual HRESULT __attribute__((__stdcall__)) normalize(void) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMElement_get_tagName_Proxy(IXMLDOMElement *This,BSTR *tagName);
  void __attribute__((__stdcall__)) IXMLDOMElement_get_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMElement_getAttribute_Proxy(IXMLDOMElement *This,BSTR name,VARIANT *value);
  void __attribute__((__stdcall__)) IXMLDOMElement_getAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMElement_setAttribute_Proxy(IXMLDOMElement *This,BSTR name,VARIANT value);
  void __attribute__((__stdcall__)) IXMLDOMElement_setAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMElement_removeAttribute_Proxy(IXMLDOMElement *This,BSTR name);
  void __attribute__((__stdcall__)) IXMLDOMElement_removeAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMElement_getAttributeNode_Proxy(IXMLDOMElement *This,BSTR name,IXMLDOMAttribute **attributeNode);
  void __attribute__((__stdcall__)) IXMLDOMElement_getAttributeNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMElement_setAttributeNode_Proxy(IXMLDOMElement *This,IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode);
  void __attribute__((__stdcall__)) IXMLDOMElement_setAttributeNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMElement_removeAttributeNode_Proxy(IXMLDOMElement *This,IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode);
  void __attribute__((__stdcall__)) IXMLDOMElement_removeAttributeNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMElement_getElementsByTagName_Proxy(IXMLDOMElement *This,BSTR tagName,IXMLDOMNodeList **resultList);
  void __attribute__((__stdcall__)) IXMLDOMElement_getElementsByTagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMElement_normalize_Proxy(IXMLDOMElement *This);
  void __attribute__((__stdcall__)) IXMLDOMElement_normalize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMText;

  struct IXMLDOMText : public IXMLDOMCharacterData {
  public:
    virtual HRESULT __attribute__((__stdcall__)) splitText(LONG offset,IXMLDOMText **rightHandTextNode) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMText_splitText_Proxy(IXMLDOMText *This,LONG offset,IXMLDOMText **rightHandTextNode);
  void __attribute__((__stdcall__)) IXMLDOMText_splitText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMComment;

  struct IXMLDOMComment : public IXMLDOMCharacterData {
  };
  extern "C" const IID IID_IXMLDOMProcessingInstruction;

  struct IXMLDOMProcessingInstruction : public IXMLDOMNode {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_target(BSTR *name) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_data(BSTR *value) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_data(BSTR value) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_get_target_Proxy(IXMLDOMProcessingInstruction *This,BSTR *name);
  void __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_get_target_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_get_data_Proxy(IXMLDOMProcessingInstruction *This,BSTR *value);
  void __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_get_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_put_data_Proxy(IXMLDOMProcessingInstruction *This,BSTR value);
  void __attribute__((__stdcall__)) IXMLDOMProcessingInstruction_put_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMCDATASection;

  struct IXMLDOMCDATASection : public IXMLDOMText {
  };
  extern "C" const IID IID_IXMLDOMDocumentType;

  struct IXMLDOMDocumentType : public IXMLDOMNode {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_name(BSTR *rootName) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_entities(IXMLDOMNamedNodeMap **entityMap) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_notations(IXMLDOMNamedNodeMap **notationMap) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocumentType_get_name_Proxy(IXMLDOMDocumentType *This,BSTR *rootName);
  void __attribute__((__stdcall__)) IXMLDOMDocumentType_get_name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocumentType_get_entities_Proxy(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **entityMap);
  void __attribute__((__stdcall__)) IXMLDOMDocumentType_get_entities_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMDocumentType_get_notations_Proxy(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **notationMap);
  void __attribute__((__stdcall__)) IXMLDOMDocumentType_get_notations_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMNotation;

  struct IXMLDOMNotation : public IXMLDOMNode {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_publicId(VARIANT *publicID) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_systemId(VARIANT *systemID) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMNotation_get_publicId_Proxy(IXMLDOMNotation *This,VARIANT *publicID);
  void __attribute__((__stdcall__)) IXMLDOMNotation_get_publicId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMNotation_get_systemId_Proxy(IXMLDOMNotation *This,VARIANT *systemID);
  void __attribute__((__stdcall__)) IXMLDOMNotation_get_systemId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMEntity;

  struct IXMLDOMEntity : public IXMLDOMNode {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_publicId(VARIANT *publicID) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_systemId(VARIANT *systemID) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_notationName(BSTR *name) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMEntity_get_publicId_Proxy(IXMLDOMEntity *This,VARIANT *publicID);
  void __attribute__((__stdcall__)) IXMLDOMEntity_get_publicId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMEntity_get_systemId_Proxy(IXMLDOMEntity *This,VARIANT *systemID);
  void __attribute__((__stdcall__)) IXMLDOMEntity_get_systemId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMEntity_get_notationName_Proxy(IXMLDOMEntity *This,BSTR *name);
  void __attribute__((__stdcall__)) IXMLDOMEntity_get_notationName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDOMEntityReference;

  struct IXMLDOMEntityReference : public IXMLDOMNode {
  };
  extern "C" const IID IID_IXMLDOMParseError;

  struct IXMLDOMParseError : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_errorCode(LONG *errorCode) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_url(BSTR *urlString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_reason(BSTR *reasonString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_srcText(BSTR *sourceString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_line(LONG *lineNumber) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_linepos(LONG *linePosition) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_filepos(LONG *filePosition) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_errorCode_Proxy(IXMLDOMParseError *This,LONG *errorCode);
  void __attribute__((__stdcall__)) IXMLDOMParseError_get_errorCode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_url_Proxy(IXMLDOMParseError *This,BSTR *urlString);
  void __attribute__((__stdcall__)) IXMLDOMParseError_get_url_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_reason_Proxy(IXMLDOMParseError *This,BSTR *reasonString);
  void __attribute__((__stdcall__)) IXMLDOMParseError_get_reason_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_srcText_Proxy(IXMLDOMParseError *This,BSTR *sourceString);
  void __attribute__((__stdcall__)) IXMLDOMParseError_get_srcText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_line_Proxy(IXMLDOMParseError *This,LONG *lineNumber);
  void __attribute__((__stdcall__)) IXMLDOMParseError_get_line_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_linepos_Proxy(IXMLDOMParseError *This,LONG *linePosition);
  void __attribute__((__stdcall__)) IXMLDOMParseError_get_linepos_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDOMParseError_get_filepos_Proxy(IXMLDOMParseError *This,LONG *filePosition);
  void __attribute__((__stdcall__)) IXMLDOMParseError_get_filepos_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXTLRuntime;

  struct IXTLRuntime : public IXMLDOMNode {
  public:
    virtual HRESULT __attribute__((__stdcall__)) uniqueID(IXMLDOMNode *pNode,LONG *pID) = 0;
    virtual HRESULT __attribute__((__stdcall__)) depth(IXMLDOMNode *pNode,LONG *pDepth) = 0;
    virtual HRESULT __attribute__((__stdcall__)) childNumber(IXMLDOMNode *pNode,LONG *pNumber) = 0;
    virtual HRESULT __attribute__((__stdcall__)) ancestorChildNumber(BSTR bstrNodeName,IXMLDOMNode *pNode,LONG *pNumber) = 0;
    virtual HRESULT __attribute__((__stdcall__)) absoluteChildNumber(IXMLDOMNode *pNode,LONG *pNumber) = 0;
    virtual HRESULT __attribute__((__stdcall__)) formatIndex(LONG lIndex,BSTR bstrFormat,BSTR *pbstrFormattedString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) formatNumber(double dblNumber,BSTR bstrFormat,BSTR *pbstrFormattedString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) formatDate(VARIANT varDate,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString) = 0;
    virtual HRESULT __attribute__((__stdcall__)) formatTime(VARIANT varTime,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXTLRuntime_uniqueID_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pID);
  void __attribute__((__stdcall__)) IXTLRuntime_uniqueID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXTLRuntime_depth_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pDepth);
  void __attribute__((__stdcall__)) IXTLRuntime_depth_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXTLRuntime_childNumber_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pNumber);
  void __attribute__((__stdcall__)) IXTLRuntime_childNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXTLRuntime_ancestorChildNumber_Proxy(IXTLRuntime *This,BSTR bstrNodeName,IXMLDOMNode *pNode,LONG *pNumber);
  void __attribute__((__stdcall__)) IXTLRuntime_ancestorChildNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXTLRuntime_absoluteChildNumber_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pNumber);
  void __attribute__((__stdcall__)) IXTLRuntime_absoluteChildNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXTLRuntime_formatIndex_Proxy(IXTLRuntime *This,LONG lIndex,BSTR bstrFormat,BSTR *pbstrFormattedString);
  void __attribute__((__stdcall__)) IXTLRuntime_formatIndex_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXTLRuntime_formatNumber_Proxy(IXTLRuntime *This,double dblNumber,BSTR bstrFormat,BSTR *pbstrFormattedString);
  void __attribute__((__stdcall__)) IXTLRuntime_formatNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXTLRuntime_formatDate_Proxy(IXTLRuntime *This,VARIANT varDate,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString);
  void __attribute__((__stdcall__)) IXTLRuntime_formatDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXTLRuntime_formatTime_Proxy(IXTLRuntime *This,VARIANT varTime,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString);
  void __attribute__((__stdcall__)) IXTLRuntime_formatTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID DIID_XMLDOMDocumentEvents;

  struct XMLDOMDocumentEvents : public IDispatch {
  };
  extern "C" const CLSID CLSID_DOMDocument;

  class DOMDocument;

  extern "C" const CLSID CLSID_DOMFreeThreadedDocument;

  class DOMFreeThreadedDocument;




  extern "C" const IID IID_IXMLHttpRequest;

  struct IXMLHttpRequest : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) open(BSTR bstrMethod,BSTR bstrUrl,VARIANT varAsync,VARIANT bstrUser,VARIANT bstrPassword) = 0;
    virtual HRESULT __attribute__((__stdcall__)) setRequestHeader(BSTR bstrHeader,BSTR bstrValue) = 0;
    virtual HRESULT __attribute__((__stdcall__)) getResponseHeader(BSTR bstrHeader,BSTR *pbstrValue) = 0;
    virtual HRESULT __attribute__((__stdcall__)) getAllResponseHeaders(BSTR *pbstrHeaders) = 0;
    virtual HRESULT __attribute__((__stdcall__)) send(VARIANT varBody) = 0;
    virtual HRESULT __attribute__((__stdcall__)) abort(void) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_status(LONG *plStatus) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_statusText(BSTR *pbstrStatus) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_responseXML(IDispatch **ppBody) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_responseText(BSTR *pbstrBody) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_responseBody(VARIANT *pvarBody) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_responseStream(VARIANT *pvarBody) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_readyState(LONG *plState) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_onreadystatechange(IDispatch *pReadyStateSink) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_open_Proxy(IXMLHttpRequest *This,BSTR bstrMethod,BSTR bstrUrl,VARIANT varAsync,VARIANT bstrUser,VARIANT bstrPassword);
  void __attribute__((__stdcall__)) IXMLHttpRequest_open_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_setRequestHeader_Proxy(IXMLHttpRequest *This,BSTR bstrHeader,BSTR bstrValue);
  void __attribute__((__stdcall__)) IXMLHttpRequest_setRequestHeader_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_getResponseHeader_Proxy(IXMLHttpRequest *This,BSTR bstrHeader,BSTR *pbstrValue);
  void __attribute__((__stdcall__)) IXMLHttpRequest_getResponseHeader_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_getAllResponseHeaders_Proxy(IXMLHttpRequest *This,BSTR *pbstrHeaders);
  void __attribute__((__stdcall__)) IXMLHttpRequest_getAllResponseHeaders_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_send_Proxy(IXMLHttpRequest *This,VARIANT varBody);
  void __attribute__((__stdcall__)) IXMLHttpRequest_send_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_abort_Proxy(IXMLHttpRequest *This);
  void __attribute__((__stdcall__)) IXMLHttpRequest_abort_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_status_Proxy(IXMLHttpRequest *This,LONG *plStatus);
  void __attribute__((__stdcall__)) IXMLHttpRequest_get_status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_statusText_Proxy(IXMLHttpRequest *This,BSTR *pbstrStatus);
  void __attribute__((__stdcall__)) IXMLHttpRequest_get_statusText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_responseXML_Proxy(IXMLHttpRequest *This,IDispatch **ppBody);
  void __attribute__((__stdcall__)) IXMLHttpRequest_get_responseXML_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_responseText_Proxy(IXMLHttpRequest *This,BSTR *pbstrBody);
  void __attribute__((__stdcall__)) IXMLHttpRequest_get_responseText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_responseBody_Proxy(IXMLHttpRequest *This,VARIANT *pvarBody);
  void __attribute__((__stdcall__)) IXMLHttpRequest_get_responseBody_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_responseStream_Proxy(IXMLHttpRequest *This,VARIANT *pvarBody);
  void __attribute__((__stdcall__)) IXMLHttpRequest_get_responseStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_get_readyState_Proxy(IXMLHttpRequest *This,LONG *plState);
  void __attribute__((__stdcall__)) IXMLHttpRequest_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLHttpRequest_put_onreadystatechange_Proxy(IXMLHttpRequest *This,IDispatch *pReadyStateSink);
  void __attribute__((__stdcall__)) IXMLHttpRequest_put_onreadystatechange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);


  extern "C" const CLSID CLSID_XMLHTTPRequest;

  class XMLHTTPRequest;




  extern "C" const IID IID_IXMLDSOControl;

  struct IXMLDSOControl : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_XMLDocument(IXMLDOMDocument **ppDoc) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_XMLDocument(IXMLDOMDocument *ppDoc) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_JavaDSOCompatible(WINBOOL *fJavaDSOCompatible) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_JavaDSOCompatible(WINBOOL fJavaDSOCompatible) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_readyState(LONG *state) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDSOControl_get_XMLDocument_Proxy(IXMLDSOControl *This,IXMLDOMDocument **ppDoc);
  void __attribute__((__stdcall__)) IXMLDSOControl_get_XMLDocument_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDSOControl_put_XMLDocument_Proxy(IXMLDSOControl *This,IXMLDOMDocument *ppDoc);
  void __attribute__((__stdcall__)) IXMLDSOControl_put_XMLDocument_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDSOControl_get_JavaDSOCompatible_Proxy(IXMLDSOControl *This,WINBOOL *fJavaDSOCompatible);
  void __attribute__((__stdcall__)) IXMLDSOControl_get_JavaDSOCompatible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDSOControl_put_JavaDSOCompatible_Proxy(IXMLDSOControl *This,WINBOOL fJavaDSOCompatible);
  void __attribute__((__stdcall__)) IXMLDSOControl_put_JavaDSOCompatible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDSOControl_get_readyState_Proxy(IXMLDSOControl *This,LONG *state);
  void __attribute__((__stdcall__)) IXMLDSOControl_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);


  extern "C" const CLSID CLSID_XMLDSOControl;

  class XMLDSOControl;




  extern "C" const IID IID_IXMLElementCollection;

  struct IXMLElementCollection : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) put_length(LONG v) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_length(LONG *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get__newEnum(IUnknown **ppUnk) = 0;
    virtual HRESULT __attribute__((__stdcall__)) item(VARIANT var1,VARIANT var2,IDispatch **ppDisp) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLElementCollection_put_length_Proxy(IXMLElementCollection *This,LONG v);
  void __attribute__((__stdcall__)) IXMLElementCollection_put_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElementCollection_get_length_Proxy(IXMLElementCollection *This,LONG *p);
  void __attribute__((__stdcall__)) IXMLElementCollection_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElementCollection_get__newEnum_Proxy(IXMLElementCollection *This,IUnknown **ppUnk);
  void __attribute__((__stdcall__)) IXMLElementCollection_get__newEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElementCollection_item_Proxy(IXMLElementCollection *This,VARIANT var1,VARIANT var2,IDispatch **ppDisp);
  void __attribute__((__stdcall__)) IXMLElementCollection_item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDocument;

  struct IXMLDocument : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_root(IXMLElement **p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_fileSize(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_fileModifiedDate(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_fileUpdatedDate(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_URL(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_URL(BSTR p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_mimeType(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_readyState(LONG *pl) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_charset(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_charset(BSTR p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_version(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_doctype(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_dtdURL(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createElement(VARIANT vType,VARIANT var1,IXMLElement **ppElem) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_root_Proxy(IXMLDocument *This,IXMLElement **p);
  void __attribute__((__stdcall__)) IXMLDocument_get_root_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_fileSize_Proxy(IXMLDocument *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument_get_fileSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_fileModifiedDate_Proxy(IXMLDocument *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument_get_fileModifiedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_fileUpdatedDate_Proxy(IXMLDocument *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument_get_fileUpdatedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_URL_Proxy(IXMLDocument *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument_get_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_put_URL_Proxy(IXMLDocument *This,BSTR p);
  void __attribute__((__stdcall__)) IXMLDocument_put_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_mimeType_Proxy(IXMLDocument *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument_get_mimeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_readyState_Proxy(IXMLDocument *This,LONG *pl);
  void __attribute__((__stdcall__)) IXMLDocument_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_charset_Proxy(IXMLDocument *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument_get_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_put_charset_Proxy(IXMLDocument *This,BSTR p);
  void __attribute__((__stdcall__)) IXMLDocument_put_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_version_Proxy(IXMLDocument *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument_get_version_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_doctype_Proxy(IXMLDocument *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument_get_doctype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_get_dtdURL_Proxy(IXMLDocument *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument_get_dtdURL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument_createElement_Proxy(IXMLDocument *This,VARIANT vType,VARIANT var1,IXMLElement **ppElem);
  void __attribute__((__stdcall__)) IXMLDocument_createElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLDocument2;

  struct IXMLDocument2 : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_root(IXMLElement2 **p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_fileSize(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_fileModifiedDate(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_fileUpdatedDate(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_URL(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_URL(BSTR p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_mimeType(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_readyState(LONG *pl) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_charset(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_charset(BSTR p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_version(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_doctype(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_dtdURL(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) createElement(VARIANT vType,VARIANT var1,IXMLElement2 **ppElem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_async(VARIANT_BOOL *pf) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_async(VARIANT_BOOL f) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_root_Proxy(IXMLDocument2 *This,IXMLElement2 **p);
  void __attribute__((__stdcall__)) IXMLDocument2_get_root_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_fileSize_Proxy(IXMLDocument2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument2_get_fileSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_fileModifiedDate_Proxy(IXMLDocument2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument2_get_fileModifiedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_fileUpdatedDate_Proxy(IXMLDocument2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument2_get_fileUpdatedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_URL_Proxy(IXMLDocument2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument2_get_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_put_URL_Proxy(IXMLDocument2 *This,BSTR p);
  void __attribute__((__stdcall__)) IXMLDocument2_put_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_mimeType_Proxy(IXMLDocument2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument2_get_mimeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_readyState_Proxy(IXMLDocument2 *This,LONG *pl);
  void __attribute__((__stdcall__)) IXMLDocument2_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_charset_Proxy(IXMLDocument2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument2_get_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_put_charset_Proxy(IXMLDocument2 *This,BSTR p);
  void __attribute__((__stdcall__)) IXMLDocument2_put_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_version_Proxy(IXMLDocument2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument2_get_version_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_doctype_Proxy(IXMLDocument2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument2_get_doctype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_dtdURL_Proxy(IXMLDocument2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLDocument2_get_dtdURL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_createElement_Proxy(IXMLDocument2 *This,VARIANT vType,VARIANT var1,IXMLElement2 **ppElem);
  void __attribute__((__stdcall__)) IXMLDocument2_createElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_get_async_Proxy(IXMLDocument2 *This,VARIANT_BOOL *pf);
  void __attribute__((__stdcall__)) IXMLDocument2_get_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLDocument2_put_async_Proxy(IXMLDocument2 *This,VARIANT_BOOL f);
  void __attribute__((__stdcall__)) IXMLDocument2_put_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLElement;

  struct IXMLElement : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_tagName(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_tagName(BSTR p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_parent(IXMLElement **ppParent) = 0;
    virtual HRESULT __attribute__((__stdcall__)) setAttribute(BSTR strPropertyName,VARIANT PropertyValue) = 0;
    virtual HRESULT __attribute__((__stdcall__)) getAttribute(BSTR strPropertyName,VARIANT *PropertyValue) = 0;
    virtual HRESULT __attribute__((__stdcall__)) removeAttribute(BSTR strPropertyName) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_children(IXMLElementCollection **pp) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_type(LONG *plType) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_text(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_text(BSTR p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) addChild(IXMLElement *pChildElem,LONG lIndex,LONG lReserved) = 0;
    virtual HRESULT __attribute__((__stdcall__)) removeChild(IXMLElement *pChildElem) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLElement_get_tagName_Proxy(IXMLElement *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLElement_get_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_put_tagName_Proxy(IXMLElement *This,BSTR p);
  void __attribute__((__stdcall__)) IXMLElement_put_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_get_parent_Proxy(IXMLElement *This,IXMLElement **ppParent);
  void __attribute__((__stdcall__)) IXMLElement_get_parent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_setAttribute_Proxy(IXMLElement *This,BSTR strPropertyName,VARIANT PropertyValue);
  void __attribute__((__stdcall__)) IXMLElement_setAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_getAttribute_Proxy(IXMLElement *This,BSTR strPropertyName,VARIANT *PropertyValue);
  void __attribute__((__stdcall__)) IXMLElement_getAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_removeAttribute_Proxy(IXMLElement *This,BSTR strPropertyName);
  void __attribute__((__stdcall__)) IXMLElement_removeAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_get_children_Proxy(IXMLElement *This,IXMLElementCollection **pp);
  void __attribute__((__stdcall__)) IXMLElement_get_children_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_get_type_Proxy(IXMLElement *This,LONG *plType);
  void __attribute__((__stdcall__)) IXMLElement_get_type_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_get_text_Proxy(IXMLElement *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLElement_get_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_put_text_Proxy(IXMLElement *This,BSTR p);
  void __attribute__((__stdcall__)) IXMLElement_put_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_addChild_Proxy(IXMLElement *This,IXMLElement *pChildElem,LONG lIndex,LONG lReserved);
  void __attribute__((__stdcall__)) IXMLElement_addChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement_removeChild_Proxy(IXMLElement *This,IXMLElement *pChildElem);
  void __attribute__((__stdcall__)) IXMLElement_removeChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLElement2;

  struct IXMLElement2 : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_tagName(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_tagName(BSTR p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_parent(IXMLElement2 **ppParent) = 0;
    virtual HRESULT __attribute__((__stdcall__)) setAttribute(BSTR strPropertyName,VARIANT PropertyValue) = 0;
    virtual HRESULT __attribute__((__stdcall__)) getAttribute(BSTR strPropertyName,VARIANT *PropertyValue) = 0;
    virtual HRESULT __attribute__((__stdcall__)) removeAttribute(BSTR strPropertyName) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_children(IXMLElementCollection **pp) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_type(LONG *plType) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_text(BSTR *p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) put_text(BSTR p) = 0;
    virtual HRESULT __attribute__((__stdcall__)) addChild(IXMLElement2 *pChildElem,LONG lIndex,LONG lReserved) = 0;
    virtual HRESULT __attribute__((__stdcall__)) removeChild(IXMLElement2 *pChildElem) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_attributes(IXMLElementCollection **pp) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLElement2_get_tagName_Proxy(IXMLElement2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLElement2_get_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_put_tagName_Proxy(IXMLElement2 *This,BSTR p);
  void __attribute__((__stdcall__)) IXMLElement2_put_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_get_parent_Proxy(IXMLElement2 *This,IXMLElement2 **ppParent);
  void __attribute__((__stdcall__)) IXMLElement2_get_parent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_setAttribute_Proxy(IXMLElement2 *This,BSTR strPropertyName,VARIANT PropertyValue);
  void __attribute__((__stdcall__)) IXMLElement2_setAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_getAttribute_Proxy(IXMLElement2 *This,BSTR strPropertyName,VARIANT *PropertyValue);
  void __attribute__((__stdcall__)) IXMLElement2_getAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_removeAttribute_Proxy(IXMLElement2 *This,BSTR strPropertyName);
  void __attribute__((__stdcall__)) IXMLElement2_removeAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_get_children_Proxy(IXMLElement2 *This,IXMLElementCollection **pp);
  void __attribute__((__stdcall__)) IXMLElement2_get_children_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_get_type_Proxy(IXMLElement2 *This,LONG *plType);
  void __attribute__((__stdcall__)) IXMLElement2_get_type_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_get_text_Proxy(IXMLElement2 *This,BSTR *p);
  void __attribute__((__stdcall__)) IXMLElement2_get_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_put_text_Proxy(IXMLElement2 *This,BSTR p);
  void __attribute__((__stdcall__)) IXMLElement2_put_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_addChild_Proxy(IXMLElement2 *This,IXMLElement2 *pChildElem,LONG lIndex,LONG lReserved);
  void __attribute__((__stdcall__)) IXMLElement2_addChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_removeChild_Proxy(IXMLElement2 *This,IXMLElement2 *pChildElem);
  void __attribute__((__stdcall__)) IXMLElement2_removeChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLElement2_get_attributes_Proxy(IXMLElement2 *This,IXMLElementCollection **pp);
  void __attribute__((__stdcall__)) IXMLElement2_get_attributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLAttribute;

  struct IXMLAttribute : public IDispatch {
  public:
    virtual HRESULT __attribute__((__stdcall__)) get_name(BSTR *n) = 0;
    virtual HRESULT __attribute__((__stdcall__)) get_value(BSTR *v) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLAttribute_get_name_Proxy(IXMLAttribute *This,BSTR *n);
  void __attribute__((__stdcall__)) IXMLAttribute_get_name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT __attribute__((__stdcall__)) IXMLAttribute_get_value_Proxy(IXMLAttribute *This,BSTR *v);
  void __attribute__((__stdcall__)) IXMLAttribute_get_value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);




  extern "C" const IID IID_IXMLError;

  struct IXMLError : public IUnknown {
  public:
    virtual HRESULT __attribute__((__stdcall__)) GetErrorInfo(XML_ERROR *pErrorReturn) = 0;
  };
  HRESULT __attribute__((__stdcall__)) IXMLError_GetErrorInfo_Proxy(IXMLError *This,XML_ERROR *pErrorReturn);
  void __attribute__((__stdcall__)) IXMLError_GetErrorInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);


  extern "C" const CLSID CLSID_XMLDocument;

  class XMLDocument;
}





extern "C" {







#pragma comment(lib,"uuid.lib")
typedef struct IBindStatusCallbackMsg IBindStatusCallbackMsg;
extern "C" const IID CLSID_SBS_StdURLMoniker;
extern "C" const IID CLSID_SBS_HttpProtocol;
extern "C" const IID CLSID_SBS_FtpProtocol;
extern "C" const IID CLSID_SBS_GopherProtocol;
extern "C" const IID CLSID_SBS_HttpSProtocol;
extern "C" const IID CLSID_SBS_FileProtocol;
extern "C" const IID CLSID_SBS_MkProtocol;
extern "C" const IID CLSID_SBS_UrlMkBindCtx;
extern "C" const IID CLSID_SBS_SoftDistExt;
extern "C" const IID CLSID_SBS_CdlProtocol;
extern "C" const IID CLSID_SBS_ClassInstallFilter;
extern "C" const IID CLSID_SBS_InternetSecurityManager;
extern "C" const IID CLSID_SBS_InternetZoneManager;
extern "C" const IID IID_IAsyncMoniker;
extern "C" const IID CLSID_StdURLMoniker;
extern "C" const IID CLSID_HttpProtocol;
extern "C" const IID CLSID_FtpProtocol;
extern "C" const IID CLSID_GopherProtocol;
extern "C" const IID CLSID_HttpSProtocol;
extern "C" const IID CLSID_FileProtocol;
extern "C" const IID CLSID_MkProtocol;
extern "C" const IID CLSID_StdURLProtocol;
extern "C" const IID CLSID_UrlMkBindCtx;
extern "C" const IID CLSID_CdlProtocol;
extern "C" const IID CLSID_ClassInstallFilter;
extern "C" const IID IID_IAsyncBindCtx;
extern "C" HRESULT __attribute__((__stdcall__)) CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk);
extern "C" HRESULT __attribute__((__stdcall__)) CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk, DWORD dwFlags);
extern "C" HRESULT __attribute__((__stdcall__)) GetClassURL(LPCWSTR szURL, CLSID *pClsID);
extern "C" HRESULT __attribute__((__stdcall__)) CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC);



extern "C" HRESULT __attribute__((__stdcall__)) CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved);
extern "C" HRESULT __attribute__((__stdcall__)) MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk);
extern "C" HRESULT __attribute__((__stdcall__)) RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback **ppBSCBPrev, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb);
extern "C" HRESULT __attribute__((__stdcall__)) GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid);
extern "C" HRESULT __attribute__((__stdcall__)) IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) CoGetClassObjectFromURL(const IID & rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID & riid, LPVOID *ppv);
extern "C" HRESULT __attribute__((__stdcall__)) IEInstallScope(LPDWORD pdwScope);
extern "C" HRESULT __attribute__((__stdcall__)) FaultInIEFeature(HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags);
extern "C" HRESULT __attribute__((__stdcall__)) GetComponentIDFromCLSSPEC(uCLSSPEC *pCl__stdcallpec, LPSTR *ppszComponentID);





extern "C" HRESULT __attribute__((__stdcall__)) IsAsyncMoniker(IMoniker *pmk);
extern "C" HRESULT __attribute__((__stdcall__)) CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);
extern "C" HRESULT __attribute__((__stdcall__)) RegisterMediaTypes(UINT ctypes, const LPCSTR *rgszTypes, CLIPFORMAT *rgcfTypes);
extern "C" HRESULT __attribute__((__stdcall__)) FindMediaType(LPCSTR rgszTypes, CLIPFORMAT *rgcfTypes);
extern "C" HRESULT __attribute__((__stdcall__)) CreateFormatEnumerator(UINT cfmtetc, FORMATETC *rgfmtetc, IEnumFORMATETC **ppenumfmtetc);
extern "C" HRESULT __attribute__((__stdcall__)) RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);
extern "C" HRESULT __attribute__((__stdcall__)) RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc);
extern "C" HRESULT __attribute__((__stdcall__)) RegisterMediaTypeClass(LPBC pBC,UINT ctypes, const LPCSTR *rgszTypes, CLSID *rgclsID, DWORD reserved);
extern "C" HRESULT __attribute__((__stdcall__)) FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);
extern "C" HRESULT __attribute__((__stdcall__)) UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) FindMimeFromData(LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize);
extern "C" HRESULT __attribute__((__stdcall__)) CompareSecurityIds(BYTE *pbSecurityId1, DWORD dwLen1, BYTE *pbSecurityId2, DWORD dwLen2, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);
typedef IPersistMoniker *LPPERSISTMONIKER;

extern "C" const GUID IID_IPersistMoniker;

struct
IPersistMoniker : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetClassID(
        CLSID *pClassID) = 0;

    virtual HRESULT __attribute__((__stdcall__)) IsDirty(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Load(
        WINBOOL fFullyAvailable,
        IMoniker *pimkName,
        LPBC pibc,
        DWORD grfMode) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Save(
        IMoniker *pimkName,
        LPBC pbc,
        WINBOOL fRemember) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SaveCompleted(
        IMoniker *pimkName,
        LPBC pibc) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetCurMoniker(
        IMoniker **ppimkName) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPersistMoniker>() { static const IID __uuid_inst = {0x79eac9c9,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPersistMoniker*>() { return __mingw_uuidof<IPersistMoniker>(); } }
HRESULT __attribute__((__stdcall__)) IPersistMoniker_GetClassID_Proxy(
    IPersistMoniker* This,
    CLSID *pClassID);
void __attribute__((__stdcall__)) IPersistMoniker_GetClassID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistMoniker_IsDirty_Proxy(
    IPersistMoniker* This);
void __attribute__((__stdcall__)) IPersistMoniker_IsDirty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistMoniker_Load_Proxy(
    IPersistMoniker* This,
    WINBOOL fFullyAvailable,
    IMoniker *pimkName,
    LPBC pibc,
    DWORD grfMode);
void __attribute__((__stdcall__)) IPersistMoniker_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistMoniker_Save_Proxy(
    IPersistMoniker* This,
    IMoniker *pimkName,
    LPBC pbc,
    WINBOOL fRemember);
void __attribute__((__stdcall__)) IPersistMoniker_Save_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistMoniker_SaveCompleted_Proxy(
    IPersistMoniker* This,
    IMoniker *pimkName,
    LPBC pibc);
void __attribute__((__stdcall__)) IPersistMoniker_SaveCompleted_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPersistMoniker_GetCurMoniker_Proxy(
    IPersistMoniker* This,
    IMoniker **ppimkName);
void __attribute__((__stdcall__)) IPersistMoniker_GetCurMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IMonikerProp *LPMONIKERPROP;

typedef enum __WIDL_urlmon_generated_name_00000002 {
    MIMETYPEPROP = 0x0,
    USE_SRC_URL = 0x1,
    CLASSIDPROP = 0x2,
    TRUSTEDDOWNLOADPROP = 0x3,
    POPUPLEVELPROP = 0x4
} MONIKERPROPERTY;

extern "C" const GUID IID_IMonikerProp;

struct
IMonikerProp : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) PutProperty(
        MONIKERPROPERTY mkp,
        LPCWSTR val) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IMonikerProp>() { static const IID __uuid_inst = {0xa5ca5f7f,0x1847,0x4d87, {0x9c,0x5b,0x91,0x85,0x09,0xf7,0x51,0x1d}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IMonikerProp*>() { return __mingw_uuidof<IMonikerProp>(); } }
HRESULT __attribute__((__stdcall__)) IMonikerProp_PutProperty_Proxy(
    IMonikerProp* This,
    MONIKERPROPERTY mkp,
    LPCWSTR val);
void __attribute__((__stdcall__)) IMonikerProp_PutProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IBindProtocol *LPBINDPROTOCOL;

extern "C" const GUID IID_IBindProtocol;

struct
IBindProtocol : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) CreateBinding(
        LPCWSTR szUrl,
        IBindCtx *pbc,
        IBinding **ppb) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IBindProtocol>() { static const IID __uuid_inst = {0x79eac9cd,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IBindProtocol*>() { return __mingw_uuidof<IBindProtocol>(); } }
HRESULT __attribute__((__stdcall__)) IBindProtocol_CreateBinding_Proxy(
    IBindProtocol* This,
    LPCWSTR szUrl,
    IBindCtx *pbc,
    IBinding **ppb);
void __attribute__((__stdcall__)) IBindProtocol_CreateBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IBinding *LPBINDING;

extern "C" const GUID IID_IBinding;

struct
IBinding : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Abort(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Suspend(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Resume(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetPriority(
        LONG nPriority) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetPriority(
        LONG *pnPriority) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetBindResult(
        CLSID *pclsidProtocol,
        DWORD *pdwResult,
        LPOLESTR *pszResult,
        DWORD *pdwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IBinding>() { static const IID __uuid_inst = {0x79eac9c0,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IBinding*>() { return __mingw_uuidof<IBinding>(); } }
HRESULT __attribute__((__stdcall__)) IBinding_Abort_Proxy(
    IBinding* This);
void __attribute__((__stdcall__)) IBinding_Abort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_Suspend_Proxy(
    IBinding* This);
void __attribute__((__stdcall__)) IBinding_Suspend_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_Resume_Proxy(
    IBinding* This);
void __attribute__((__stdcall__)) IBinding_Resume_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_SetPriority_Proxy(
    IBinding* This,
    LONG nPriority);
void __attribute__((__stdcall__)) IBinding_SetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_GetPriority_Proxy(
    IBinding* This,
    LONG *pnPriority);
void __attribute__((__stdcall__)) IBinding_GetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_RemoteGetBindResult_Proxy(
    IBinding* This,
    CLSID *pclsidProtocol,
    DWORD *pdwResult,
    LPOLESTR *pszResult,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBinding_GetBindResult_Proxy(
    IBinding* This,
    CLSID *pclsidProtocol,
    DWORD *pdwResult,
    LPOLESTR *pszResult,
    DWORD *pdwReserved);
HRESULT __attribute__((__stdcall__)) IBinding_GetBindResult_Stub(
    IBinding* This,
    CLSID *pclsidProtocol,
    DWORD *pdwResult,
    LPOLESTR *pszResult,
    DWORD dwReserved);
typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef enum __WIDL_urlmon_generated_name_00000003 {
    BINDVERB_GET = 0x0,
    BINDVERB_POST = 0x1,
    BINDVERB_PUT = 0x2,
    BINDVERB_CUSTOM = 0x3,
    BINDVERB_RESERVED1 = 0x4
} BINDVERB;

typedef enum __WIDL_urlmon_generated_name_00000004 {
    BINDINFOF_URLENCODESTGMEDDATA = 0x1,
    BINDINFOF_URLENCODEDEXTRAINFO = 0x2
} BINDINFOF;

typedef enum __WIDL_urlmon_generated_name_00000005 {
    BINDF_ASYNCHRONOUS = 0x1,
    BINDF_ASYNCSTORAGE = 0x2,
    BINDF_NOPROGRESSIVERENDERING = 0x4,
    BINDF_OFFLINEOPERATION = 0x8,
    BINDF_GETNEWESTVERSION = 0x10,
    BINDF_NOWRITECACHE = 0x20,
    BINDF_NEEDFILE = 0x40,
    BINDF_PULLDATA = 0x80,
    BINDF_IGNORESECURITYPROBLEM = 0x100,
    BINDF_RESYNCHRONIZE = 0x200,
    BINDF_HYPERLINK = 0x400,
    BINDF_NO_UI = 0x800,
    BINDF_SILENTOPERATION = 0x1000,
    BINDF_PRAGMA_NO_CACHE = 0x2000,
    BINDF_GETCLASSOBJECT = 0x4000,
    BINDF_RESERVED_1 = 0x8000,
    BINDF_FREE_THREADED = 0x10000,
    BINDF_DIRECT_READ = 0x20000,
    BINDF_FORMS_SUBMIT = 0x40000,
    BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
    BINDF_FROMURLMON = 0x100000,
    BINDF_FWD_BACK = 0x200000,
    BINDF_PREFERDEFAULTHANDLER = 0x400000,
    BINDF_ENFORCERESTRICTED = 0x800000,
    BINDF_RESERVED_2 = 0x80000000,
    BINDF_RESERVED_3 = 0x1000000,
    BINDF_RESERVED_4 = 0x2000000,
    BINDF_RESERVED_5 = 0x4000000,
    BINDF_RESERVED_6 = 0x8000000,
    BINDF_RESERVED_7 = 0x40000000,
    BINDF_RESERVED_8 = 0x20000000
} BINDF;

typedef enum __WIDL_urlmon_generated_name_00000006 {
    URL_ENCODING_NONE = 0x0,
    URL_ENCODING_ENABLE_UTF8 = 0x10000000,
    URL_ENCODING_DISABLE_UTF8 = 0x20000000
} URL_ENCODING;

typedef struct _tagBINDINFO {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
} BINDINFO;

typedef struct _REMSECURITY_ATTRIBUTES {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    WINBOOL bInheritHandle;
} REMSECURITY_ATTRIBUTES;
typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;
typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

typedef struct _tagRemBINDINFO {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
} RemBINDINFO;

typedef struct tagRemFORMATETC {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
} RemFORMATETC;
typedef struct tagRemFORMATETC *LPREMFORMATETC;

typedef enum __WIDL_urlmon_generated_name_00000007 {
    BINDINFO_OPTIONS_WININETFLAG = 0x10000,
    BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
    BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
    BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
    BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
    BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
    BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
    BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
    BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
    BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
    BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
    BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
    BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
    BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
    BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = (int)0x80000000
} BINDINFO_OPTIONS;

typedef enum __WIDL_urlmon_generated_name_00000008 {
    BSCF_FIRSTDATANOTIFICATION = 0x1,
    BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
    BSCF_LASTDATANOTIFICATION = 0x4,
    BSCF_DATAFULLYAVAILABLE = 0x8,
    BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
    BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
    BSCF_64BITLENGTHDOWNLOAD = 0x40
} BSCF;

typedef enum tagBINDSTATUS {
    BINDSTATUS_FINDINGRESOURCE = 1,
    BINDSTATUS_CONNECTING = 2,
    BINDSTATUS_REDIRECTING = 3,
    BINDSTATUS_BEGINDOWNLOADDATA = 4,
    BINDSTATUS_DOWNLOADINGDATA = 5,
    BINDSTATUS_ENDDOWNLOADDATA = 6,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7,
    BINDSTATUS_INSTALLINGCOMPONENTS = 8,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9,
    BINDSTATUS_USINGCACHEDCOPY = 10,
    BINDSTATUS_SENDINGREQUEST = 11,
    BINDSTATUS_CLASSIDAVAILABLE = 12,
    BINDSTATUS_MIMETYPEAVAILABLE = 13,
    BINDSTATUS_CACHEFILENAMEAVAILABLE = 14,
    BINDSTATUS_BEGINSYNCOPERATION = 15,
    BINDSTATUS_ENDSYNCOPERATION = 16,
    BINDSTATUS_BEGINUPLOADDATA = 17,
    BINDSTATUS_UPLOADINGDATA = 18,
    BINDSTATUS_ENDUPLOADDATA = 19,
    BINDSTATUS_PROTOCOLCLASSID = 20,
    BINDSTATUS_ENCODING = 21,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22,
    BINDSTATUS_CLASSINSTALLLOCATION = 23,
    BINDSTATUS_DECODING = 24,
    BINDSTATUS_LOADINGMIMEHANDLER = 25,
    BINDSTATUS_CONTENTDISPOSITIONATTACH = 26,
    BINDSTATUS_FILTERREPORTMIMETYPE = 27,
    BINDSTATUS_CLSIDCANINSTANTIATE = 28,
    BINDSTATUS_IUNKNOWNAVAILABLE = 29,
    BINDSTATUS_DIRECTBIND = 30,
    BINDSTATUS_RAWMIMETYPE = 31,
    BINDSTATUS_PROXYDETECTING = 32,
    BINDSTATUS_ACCEPTRANGES = 33,
    BINDSTATUS_COOKIE_SENT = 34,
    BINDSTATUS_COMPACT_POLICY_RECEIVED = 35,
    BINDSTATUS_COOKIE_SUPPRESSED = 36,
    BINDSTATUS_COOKIE_STATE_UNKNOWN = 37,
    BINDSTATUS_COOKIE_STATE_ACCEPT = 38,
    BINDSTATUS_COOKIE_STATE_REJECT = 39,
    BINDSTATUS_COOKIE_STATE_PROMPT = 40,
    BINDSTATUS_COOKIE_STATE_LEASH = 41,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42,
    BINDSTATUS_POLICY_HREF = 43,
    BINDSTATUS_P3P_HEADER = 44,
    BINDSTATUS_SESSION_COOKIE_RECEIVED = 45,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46,
    BINDSTATUS_SESSION_COOKIES_ALLOWED = 47,
    BINDSTATUS_CACHECONTROL = 48,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49,
    BINDSTATUS_MIMETEXTPLAINMISMATCH = 50,
    BINDSTATUS_PUBLISHERAVAILABLE = 51,
    BINDSTATUS_DISPLAYNAMEAVAILABLE = 52,
    BINDSTATUS_SSLUX_NAVBLOCKED = 53,
    BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54,
    BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55,
    BINDSTATUS_64BIT_PROGRESS = 56,
    BINDSTATUS_LAST = BINDSTATUS_64BIT_PROGRESS,
    BINDSTATUS_RESERVED_0 = 57,
    BINDSTATUS_RESERVED_1 = 58,
    BINDSTATUS_RESERVED_2 = 59,
    BINDSTATUS_RESERVED_3 = 60,
    BINDSTATUS_RESERVED_4 = 61,
    BINDSTATUS_RESERVED_5 = 62,
    BINDSTATUS_RESERVED_6 = 63,
    BINDSTATUS_RESERVED_7 = 64,
    BINDSTATUS_RESERVED_8 = 65,
    BINDSTATUS_RESERVED_9 = 66,
    BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_9
} BINDSTATUS;

extern "C" const GUID IID_IBindStatusCallback;

struct
IBindStatusCallback : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) OnStartBinding(
        DWORD dwReserved,
        IBinding *pib) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetPriority(
        LONG *pnPriority) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnLowResource(
        DWORD reserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnProgress(
        ULONG ulProgress,
        ULONG ulProgressMax,
        ULONG ulStatusCode,
        LPCWSTR szStatusText) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnStopBinding(
        HRESULT hresult,
        LPCWSTR szError) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetBindInfo(
        DWORD *grfBINDF,
        BINDINFO *pbindinfo) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnDataAvailable(
        DWORD grfBSCF,
        DWORD dwSize,
        FORMATETC *pformatetc,
        STGMEDIUM *pstgmed) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnObjectAvailable(
        const IID & riid,
        IUnknown *punk) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IBindStatusCallback>() { static const IID __uuid_inst = {0x79eac9c1,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IBindStatusCallback*>() { return __mingw_uuidof<IBindStatusCallback>(); } }
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnStartBinding_Proxy(
    IBindStatusCallback* This,
    DWORD dwReserved,
    IBinding *pib);
void __attribute__((__stdcall__)) IBindStatusCallback_OnStartBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_GetPriority_Proxy(
    IBindStatusCallback* This,
    LONG *pnPriority);
void __attribute__((__stdcall__)) IBindStatusCallback_GetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnLowResource_Proxy(
    IBindStatusCallback* This,
    DWORD reserved);
void __attribute__((__stdcall__)) IBindStatusCallback_OnLowResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnProgress_Proxy(
    IBindStatusCallback* This,
    ULONG ulProgress,
    ULONG ulProgressMax,
    ULONG ulStatusCode,
    LPCWSTR szStatusText);
void __attribute__((__stdcall__)) IBindStatusCallback_OnProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnStopBinding_Proxy(
    IBindStatusCallback* This,
    HRESULT hresult,
    LPCWSTR szError);
void __attribute__((__stdcall__)) IBindStatusCallback_OnStopBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_RemoteGetBindInfo_Proxy(
    IBindStatusCallback* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed);
void __attribute__((__stdcall__)) IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_RemoteOnDataAvailable_Proxy(
    IBindStatusCallback* This,
    DWORD grfBSCF,
    DWORD dwSize,
    RemFORMATETC *pformatetc,
    RemSTGMEDIUM *pstgmed);
void __attribute__((__stdcall__)) IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnObjectAvailable_Proxy(
    IBindStatusCallback* This,
    const IID & riid,
    IUnknown *punk);
void __attribute__((__stdcall__)) IBindStatusCallback_OnObjectAvailable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_GetBindInfo_Proxy(
    IBindStatusCallback* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_GetBindInfo_Stub(
    IBindStatusCallback* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnDataAvailable_Proxy(
    IBindStatusCallback* This,
    DWORD grfBSCF,
    DWORD dwSize,
    FORMATETC *pformatetc,
    STGMEDIUM *pstgmed);
HRESULT __attribute__((__stdcall__)) IBindStatusCallback_OnDataAvailable_Stub(
    IBindStatusCallback* This,
    DWORD grfBSCF,
    DWORD dwSize,
    RemFORMATETC *pformatetc,
    RemSTGMEDIUM *pstgmed);
typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;

typedef enum __WIDL_urlmon_generated_name_00000009 {
    BINDF2_DISABLEBASICOVERHTTP = 0x1,
    BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
    BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
    BINDF2_SETDOWNLOADMODE = 0x20,
    BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 0x40,
    BINDF2_KEEP_CALLBACK_MODULE_LOADED = 0x80,
    BINDF2_ALLOW_PROXY_CRED_PROMPT = 0x100,
    BINDF2_RESERVED_F = 0x20000,
    BINDF2_RESERVED_E = 0x40000,
    BINDF2_RESERVED_D = 0x80000,
    BINDF2_RESERVED_C = 0x100000,
    BINDF2_RESERVED_B = 0x200000,
    BINDF2_RESERVED_A = 0x400000,
    BINDF2_RESERVED_9 = 0x800000,
    BINDF2_RESERVED_8 = 0x1000000,
    BINDF2_RESERVED_7 = 0x2000000,
    BINDF2_RESERVED_6 = 0x4000000,
    BINDF2_RESERVED_5 = 0x8000000,
    BINDF2_RESERVED_4 = 0x10000000,
    BINDF2_RESERVED_3 = 0x20000000,
    BINDF2_RESERVED_2 = 0x40000000,
    BINDF2_RESERVED_1 = 0x80000000
} BINDF2;

extern "C" const GUID IID_IBindStatusCallbackEx;

struct
IBindStatusCallbackEx : public IBindStatusCallback
{
    virtual HRESULT __attribute__((__stdcall__)) GetBindInfoEx(
        DWORD *grfBINDF,
        BINDINFO *pbindinfo,
        DWORD *grfBINDF2,
        DWORD *pdwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IBindStatusCallbackEx>() { static const IID __uuid_inst = {0xaaa74ef9,0x8ee7,0x4659, {0x88,0xd9,0xf8,0xc5,0x04,0xda,0x73,0xcc}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IBindStatusCallbackEx*>() { return __mingw_uuidof<IBindStatusCallbackEx>(); } }
HRESULT __attribute__((__stdcall__)) IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
    IBindStatusCallbackEx* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);
void __attribute__((__stdcall__)) IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindStatusCallbackEx_GetBindInfoEx_Proxy(
    IBindStatusCallbackEx* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);
HRESULT __attribute__((__stdcall__)) IBindStatusCallbackEx_GetBindInfoEx_Stub(
    IBindStatusCallbackEx* This,
    DWORD *grfBINDF,
    RemBINDINFO *pbindinfo,
    RemSTGMEDIUM *pstgmed,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);
typedef IAuthenticate *LPAUTHENTICATION;

extern "C" const GUID IID_IAuthenticate;

struct
IAuthenticate : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Authenticate(
        HWND *phwnd,
        LPWSTR *pszUsername,
        LPWSTR *pszPassword) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IAuthenticate>() { static const IID __uuid_inst = {0x79eac9d0,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IAuthenticate*>() { return __mingw_uuidof<IAuthenticate>(); } }
HRESULT __attribute__((__stdcall__)) IAuthenticate_Authenticate_Proxy(
    IAuthenticate* This,
    HWND *phwnd,
    LPWSTR *pszUsername,
    LPWSTR *pszPassword);
void __attribute__((__stdcall__)) IAuthenticate_Authenticate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IAuthenticateEx *LPAUTHENTICATIONEX;

typedef enum __WIDL_urlmon_generated_name_0000000A {
    AUTHENTICATEF_PROXY = 0x1,
    AUTHENTICATEF_BASIC = 0x2,
    AUTHENTICATEF_HTTP = 0x4
} AUTHENTICATEF;

typedef struct _tagAUTHENTICATEINFO {
    DWORD dwFlags;
    DWORD dwReserved;
} AUTHENTICATEINFO;

extern "C" const GUID IID_IAuthenticateEx;

struct
IAuthenticateEx : public IAuthenticate
{
    virtual HRESULT __attribute__((__stdcall__)) AuthenticateEx(
        HWND *phwnd,
        LPWSTR *pszUsername,
        LPWSTR *pszPassword,
        AUTHENTICATEINFO *pauthinfo) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IAuthenticateEx>() { static const IID __uuid_inst = {0x2ad1edaf,0xd83d,0x48b5, {0x9a,0xdf,0x03,0xdb,0xe1,0x9f,0x53,0xbd}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IAuthenticateEx*>() { return __mingw_uuidof<IAuthenticateEx>(); } }
HRESULT __attribute__((__stdcall__)) IAuthenticateEx_AuthenticateEx_Proxy(
    IAuthenticateEx* This,
    HWND *phwnd,
    LPWSTR *pszUsername,
    LPWSTR *pszPassword,
    AUTHENTICATEINFO *pauthinfo);
void __attribute__((__stdcall__)) IAuthenticateEx_AuthenticateEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IHttpNegotiate *LPHTTPNEGOTIATE;

extern "C" const GUID IID_IHttpNegotiate;

struct
IHttpNegotiate : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) BeginningTransaction(
        LPCWSTR szURL,
        LPCWSTR szHeaders,
        DWORD dwReserved,
        LPWSTR *pszAdditionalHeaders) = 0;

    virtual HRESULT __attribute__((__stdcall__)) OnResponse(
        DWORD dwResponseCode,
        LPCWSTR szResponseHeaders,
        LPCWSTR szRequestHeaders,
        LPWSTR *pszAdditionalRequestHeaders) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IHttpNegotiate>() { static const IID __uuid_inst = {0x79eac9d2,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IHttpNegotiate*>() { return __mingw_uuidof<IHttpNegotiate>(); } }
HRESULT __attribute__((__stdcall__)) IHttpNegotiate_BeginningTransaction_Proxy(
    IHttpNegotiate* This,
    LPCWSTR szURL,
    LPCWSTR szHeaders,
    DWORD dwReserved,
    LPWSTR *pszAdditionalHeaders);
void __attribute__((__stdcall__)) IHttpNegotiate_BeginningTransaction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IHttpNegotiate_OnResponse_Proxy(
    IHttpNegotiate* This,
    DWORD dwResponseCode,
    LPCWSTR szResponseHeaders,
    LPCWSTR szRequestHeaders,
    LPWSTR *pszAdditionalRequestHeaders);
void __attribute__((__stdcall__)) IHttpNegotiate_OnResponse_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;

extern "C" const GUID IID_IHttpNegotiate2;

struct
IHttpNegotiate2 : public IHttpNegotiate
{
    virtual HRESULT __attribute__((__stdcall__)) GetRootSecurityId(
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IHttpNegotiate2>() { static const IID __uuid_inst = {0x4f9f9fcb,0xe0f4,0x48eb, {0xb7,0xab,0xfa,0x2e,0xa9,0x36,0x5c,0xb4}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IHttpNegotiate2*>() { return __mingw_uuidof<IHttpNegotiate2>(); } }
HRESULT __attribute__((__stdcall__)) IHttpNegotiate2_GetRootSecurityId_Proxy(
    IHttpNegotiate2* This,
    BYTE *pbSecurityId,
    DWORD *pcbSecurityId,
    DWORD_PTR dwReserved);
void __attribute__((__stdcall__)) IHttpNegotiate2_GetRootSecurityId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3;

extern "C" const GUID IID_IHttpNegotiate3;

struct
IHttpNegotiate3 : public IHttpNegotiate2
{
    virtual HRESULT __attribute__((__stdcall__)) GetSerializedClientCertContext(
        BYTE **ppbCert,
        DWORD *pcbCert) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IHttpNegotiate3>() { static const IID __uuid_inst = {0x57b6c80a,0x34c2,0x4602, {0xbc,0x26,0x66,0xa0,0x2f,0xc5,0x71,0x53}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IHttpNegotiate3*>() { return __mingw_uuidof<IHttpNegotiate3>(); } }
HRESULT __attribute__((__stdcall__)) IHttpNegotiate3_GetSerializedClientCertContext_Proxy(
    IHttpNegotiate3* This,
    BYTE **ppbCert,
    DWORD *pcbCert);
void __attribute__((__stdcall__)) IHttpNegotiate3_GetSerializedClientCertContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IWinInetFileStream *LPWININETFILESTREAM;

extern "C" const GUID IID_IWinInetFileStream;

struct
IWinInetFileStream : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SetHandleForUnlock(
        DWORD_PTR hWinInetLockHandle,
        DWORD_PTR dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetDeleteFile(
        DWORD_PTR dwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IWinInetFileStream>() { static const IID __uuid_inst = {0xf134c4b7,0xb1f8,0x4e75, {0xb8,0x86,0x74,0xb9,0x09,0x43,0xbe,0xcb}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IWinInetFileStream*>() { return __mingw_uuidof<IWinInetFileStream>(); } }
HRESULT __attribute__((__stdcall__)) IWinInetFileStream_SetHandleForUnlock_Proxy(
    IWinInetFileStream* This,
    DWORD_PTR hWinInetLockHandle,
    DWORD_PTR dwReserved);
void __attribute__((__stdcall__)) IWinInetFileStream_SetHandleForUnlock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IWinInetFileStream_SetDeleteFile_Proxy(
    IWinInetFileStream* This,
    DWORD_PTR dwReserved);
void __attribute__((__stdcall__)) IWinInetFileStream_SetDeleteFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;

extern "C" const GUID IID_IWindowForBindingUI;

struct
IWindowForBindingUI : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetWindow(
        const GUID & rguidReason,
        HWND *phwnd) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IWindowForBindingUI>() { static const IID __uuid_inst = {0x79eac9d5,0xbafa,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IWindowForBindingUI*>() { return __mingw_uuidof<IWindowForBindingUI>(); } }
HRESULT __attribute__((__stdcall__)) IWindowForBindingUI_GetWindow_Proxy(
    IWindowForBindingUI* This,
    const GUID & rguidReason,
    HWND *phwnd);
void __attribute__((__stdcall__)) IWindowForBindingUI_GetWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef ICodeInstall *LPCODEINSTALL;

typedef enum __WIDL_urlmon_generated_name_0000000B {
    CIP_DISK_FULL = 0,
    CIP_ACCESS_DENIED = 1,
    CIP_NEWER_VERSION_EXISTS = 2,
    CIP_OLDER_VERSION_EXISTS = 3,
    CIP_NAME_CONFLICT = 4,
    CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5,
    CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6,
    CIP_UNSAFE_TO_ABORT = 7,
    CIP_NEED_REBOOT = 8,
    CIP_NEED_REBOOT_UI_PERMISSION = 9
} CIP_STATUS;

extern "C" const GUID IID_ICodeInstall;

struct
ICodeInstall : public IWindowForBindingUI
{
    virtual HRESULT __attribute__((__stdcall__)) OnCodeInstallProblem(
        ULONG ulStatusCode,
        LPCWSTR szDestination,
        LPCWSTR szSource,
        DWORD dwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ICodeInstall>() { static const IID __uuid_inst = {0x79eac9d1,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ICodeInstall*>() { return __mingw_uuidof<ICodeInstall>(); } }
HRESULT __attribute__((__stdcall__)) ICodeInstall_OnCodeInstallProblem_Proxy(
    ICodeInstall* This,
    ULONG ulStatusCode,
    LPCWSTR szDestination,
    LPCWSTR szSource,
    DWORD dwReserved);
void __attribute__((__stdcall__)) ICodeInstall_OnCodeInstallProblem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IWinInetInfo *LPWININETINFO;
extern "C" const GUID IID_IWinInetInfo;

struct
IWinInetInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) QueryOption(
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IWinInetInfo>() { static const IID __uuid_inst = {0x79eac9d6,0xbafa,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IWinInetInfo*>() { return __mingw_uuidof<IWinInetInfo>(); } }
HRESULT __attribute__((__stdcall__)) IWinInetInfo_RemoteQueryOption_Proxy(
    IWinInetInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf);
void __attribute__((__stdcall__)) IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IWinInetInfo_QueryOption_Proxy(
    IWinInetInfo* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD *pcbBuf);
HRESULT __attribute__((__stdcall__)) IWinInetInfo_QueryOption_Stub(
    IWinInetInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf);
typedef IHttpSecurity *LPHTTPSECURITY;

extern "C" const GUID IID_IHttpSecurity;

struct
IHttpSecurity : public IWindowForBindingUI
{
    virtual HRESULT __attribute__((__stdcall__)) OnSecurityProblem(
        DWORD dwProblem) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IHttpSecurity>() { static const IID __uuid_inst = {0x79eac9d7,0xbafa,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IHttpSecurity*>() { return __mingw_uuidof<IHttpSecurity>(); } }
HRESULT __attribute__((__stdcall__)) IHttpSecurity_OnSecurityProblem_Proxy(
    IHttpSecurity* This,
    DWORD dwProblem);
void __attribute__((__stdcall__)) IHttpSecurity_OnSecurityProblem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IWinInetHttpInfo *LPWININETHTTPINFO;

extern "C" const GUID IID_IWinInetHttpInfo;

struct
IWinInetHttpInfo : public IWinInetInfo
{
    virtual HRESULT __attribute__((__stdcall__)) QueryInfo(
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pcbBuf,
        DWORD *pdwFlags,
        DWORD *pdwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IWinInetHttpInfo>() { static const IID __uuid_inst = {0x79eac9d8,0xbafa,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IWinInetHttpInfo*>() { return __mingw_uuidof<IWinInetHttpInfo>(); } }
HRESULT __attribute__((__stdcall__)) IWinInetHttpInfo_RemoteQueryInfo_Proxy(
    IWinInetHttpInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf,
    DWORD *pdwFlags,
    DWORD *pdwReserved);
void __attribute__((__stdcall__)) IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IWinInetHttpInfo_QueryInfo_Proxy(
    IWinInetHttpInfo* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD *pcbBuf,
    DWORD *pdwFlags,
    DWORD *pdwReserved);
HRESULT __attribute__((__stdcall__)) IWinInetHttpInfo_QueryInfo_Stub(
    IWinInetHttpInfo* This,
    DWORD dwOption,
    BYTE *pBuffer,
    DWORD *pcbBuf,
    DWORD *pdwFlags,
    DWORD *pdwReserved);
extern "C" const GUID IID_IWinInetHttpTimeouts;

struct
IWinInetHttpTimeouts : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetRequestTimeouts(
        DWORD *pdwConnectTimeout,
        DWORD *pdwSendTimeout,
        DWORD *pdwReceiveTimeout) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IWinInetHttpTimeouts>() { static const IID __uuid_inst = {0xf286fa56,0xc1fd,0x4270, {0x8e,0x67,0xb3,0xeb,0x79,0x0a,0x81,0xe8}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IWinInetHttpTimeouts*>() { return __mingw_uuidof<IWinInetHttpTimeouts>(); } }
HRESULT __attribute__((__stdcall__)) IWinInetHttpTimeouts_GetRequestTimeouts_Proxy(
    IWinInetHttpTimeouts* This,
    DWORD *pdwConnectTimeout,
    DWORD *pdwSendTimeout,
    DWORD *pdwReceiveTimeout);
void __attribute__((__stdcall__)) IWinInetHttpTimeouts_GetRequestTimeouts_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID SID_BindHost;







typedef IBindHost *LPBINDHOST;

extern "C" const GUID IID_IBindHost;

struct
IBindHost : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) CreateMoniker(
        LPOLESTR szName,
        IBindCtx *pBC,
        IMoniker **ppmk,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) MonikerBindToStorage(
        IMoniker *pMk,
        IBindCtx *pBC,
        IBindStatusCallback *pBSC,
        const IID & riid,
        void **ppvObj) = 0;

    virtual HRESULT __attribute__((__stdcall__)) MonikerBindToObject(
        IMoniker *pMk,
        IBindCtx *pBC,
        IBindStatusCallback *pBSC,
        const IID & riid,
        void **ppvObj) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IBindHost>() { static const IID __uuid_inst = {0xfc4801a1,0x2ba9,0x11cf, {0xa2,0x29,0x00,0xaa,0x00,0x3d,0x73,0x52}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IBindHost*>() { return __mingw_uuidof<IBindHost>(); } }
HRESULT __attribute__((__stdcall__)) IBindHost_CreateMoniker_Proxy(
    IBindHost* This,
    LPOLESTR szName,
    IBindCtx *pBC,
    IMoniker **ppmk,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IBindHost_CreateMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindHost_RemoteMonikerBindToStorage_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID & riid,
    IUnknown **ppvObj);
void __attribute__((__stdcall__)) IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindHost_RemoteMonikerBindToObject_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID & riid,
    IUnknown **ppvObj);
void __attribute__((__stdcall__)) IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IBindHost_MonikerBindToStorage_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID & riid,
    void **ppvObj);
HRESULT __attribute__((__stdcall__)) IBindHost_MonikerBindToStorage_Stub(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID & riid,
    IUnknown **ppvObj);
HRESULT __attribute__((__stdcall__)) IBindHost_MonikerBindToObject_Proxy(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID & riid,
    void **ppvObj);
HRESULT __attribute__((__stdcall__)) IBindHost_MonikerBindToObject_Stub(
    IBindHost* This,
    IMoniker *pMk,
    IBindCtx *pBC,
    IBindStatusCallback *pBSC,
    const IID & riid,
    IUnknown **ppvObj);
struct IBindStatusCallback;
extern "C" HRESULT __attribute__((__stdcall__)) HlinkSimpleNavigateToString(LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) URLOpenStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
extern "C" HRESULT __attribute__((__stdcall__)) URLOpenStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
extern "C" HRESULT __attribute__((__stdcall__)) URLOpenPullStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
extern "C" HRESULT __attribute__((__stdcall__)) URLOpenPullStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
extern "C" HRESULT __attribute__((__stdcall__)) URLDownloadToFileA(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
extern "C" HRESULT __attribute__((__stdcall__)) URLDownloadToFileW(LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
extern "C" HRESULT __attribute__((__stdcall__)) URLDownloadToCacheFileA(LPUNKNOWN, LPCSTR, LPSTR, DWORD, DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __attribute__((__stdcall__)) URLDownloadToCacheFileW(LPUNKNOWN, LPCWSTR, LPWSTR, DWORD, DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __attribute__((__stdcall__)) URLOpenBlockingStreamA(LPUNKNOWN,LPCSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);
extern "C" HRESULT __attribute__((__stdcall__)) URLOpenBlockingStreamW(LPUNKNOWN,LPCWSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);







extern "C" HRESULT __attribute__((__stdcall__)) HlinkGoBack(IUnknown *pUnk);
extern "C" HRESULT __attribute__((__stdcall__)) HlinkGoForward(IUnknown *pUnk);
extern "C" HRESULT __attribute__((__stdcall__)) HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget);
extern "C" HRESULT __attribute__((__stdcall__)) HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget);
typedef IInternet *LPIINTERNET;
extern "C" const GUID IID_IInternet;

struct
IInternet : public IUnknown
{
};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternet>() { static const IID __uuid_inst = {0x79eac9e0,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternet*>() { return __mingw_uuidof<IInternet>(); } }
typedef IInternetBindInfo *LPIINTERNETBINDINFO;

typedef enum tagBINDSTRING {
    BINDSTRING_HEADERS = 1,
    BINDSTRING_ACCEPT_MIMES = 2,
    BINDSTRING_EXTRA_URL = 3,
    BINDSTRING_LANGUAGE = 4,
    BINDSTRING_USERNAME = 5,
    BINDSTRING_PASSWORD = 6,
    BINDSTRING_UA_PIXELS = 7,
    BINDSTRING_UA_COLOR = 8,
    BINDSTRING_OS = 9,
    BINDSTRING_USER_AGENT = 10,
    BINDSTRING_ACCEPT_ENCODINGS = 11,
    BINDSTRING_POST_COOKIE = 12,
    BINDSTRING_POST_DATA_MIME = 13,
    BINDSTRING_URL = 14,
    BINDSTRING_IID = 15,
    BINDSTRING_FLAG_BIND_TO_OBJECT = 16,
    BINDSTRING_PTR_BIND_CONTEXT = 17,
    BINDSTRING_XDR_ORIGIN = 18,
    BINDSTRING_DOWNLOADPATH = 19,
    BINDSTRING_ROOTDOC_URL = 20,
    BINDSTRING_INITIAL_FILENAME = 21,
    BINDSTRING_PROXY_USERNAME = 22,
    BINDSTRING_PROXY_PASSWORD = 23
} BINDSTRING;

extern "C" const GUID IID_IInternetBindInfo;

struct
IInternetBindInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetBindInfo(
        DWORD *grfBINDF,
        BINDINFO *pbindinfo) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetBindString(
        ULONG ulStringType,
        LPOLESTR *ppwzStr,
        ULONG cEl,
        ULONG *pcElFetched) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetBindInfo>() { static const IID __uuid_inst = {0x79eac9e1,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetBindInfo*>() { return __mingw_uuidof<IInternetBindInfo>(); } }
HRESULT __attribute__((__stdcall__)) IInternetBindInfo_GetBindInfo_Proxy(
    IInternetBindInfo* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo);
void __attribute__((__stdcall__)) IInternetBindInfo_GetBindInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetBindInfo_GetBindString_Proxy(
    IInternetBindInfo* This,
    ULONG ulStringType,
    LPOLESTR *ppwzStr,
    ULONG cEl,
    ULONG *pcElFetched);
void __attribute__((__stdcall__)) IInternetBindInfo_GetBindString_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX;

extern "C" const GUID IID_IInternetBindInfoEx;

struct
IInternetBindInfoEx : public IInternetBindInfo
{
    virtual HRESULT __attribute__((__stdcall__)) GetBindInfoEx(
        DWORD *grfBINDF,
        BINDINFO *pbindinfo,
        DWORD *grfBINDF2,
        DWORD *pdwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetBindInfoEx>() { static const IID __uuid_inst = {0xa3e015b7,0xa82c,0x4dcd, {0xa1,0x50,0x56,0x9a,0xee,0xed,0x36,0xab}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetBindInfoEx*>() { return __mingw_uuidof<IInternetBindInfoEx>(); } }
HRESULT __attribute__((__stdcall__)) IInternetBindInfoEx_GetBindInfoEx_Proxy(
    IInternetBindInfoEx* This,
    DWORD *grfBINDF,
    BINDINFO *pbindinfo,
    DWORD *grfBINDF2,
    DWORD *pdwReserved);
void __attribute__((__stdcall__)) IInternetBindInfoEx_GetBindInfoEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef enum _tagPI_FLAGS {
    PI_PARSE_URL = 0x1,
    PI_FILTER_MODE = 0x2,
    PI_FORCE_ASYNC = 0x4,
    PI_USE_WORKERTHREAD = 0x8,
    PI_MIMEVERIFICATION = 0x10,
    PI_CLSIDLOOKUP = 0x20,
    PI_DATAPROGRESS = 0x40,
    PI_SYNCHRONOUS = 0x80,
    PI_APARTMENTTHREADED = 0x100,
    PI_CLASSINSTALL = 0x200,
    PI_PASSONBINDCTX = 0x2000,
    PI_NOMIMEHANDLER = 0x8000,
    PI_LOADAPPDIRECT = 0x4000,
    PD_FORCE_SWITCH = 0x10000,
    PI_PREFERDEFAULTHANDLER = 0x20000
} PI_FLAGS;
typedef struct _tagPROTOCOLDATA {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
} PROTOCOLDATA;

typedef struct _tagStartParam {
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
} StartParam;

extern "C" const GUID IID_IInternetProtocolRoot;

struct
IInternetProtocolRoot : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Start(
        LPCWSTR szUrl,
        IInternetProtocolSink *pOIProtSink,
        IInternetBindInfo *pOIBindInfo,
        DWORD grfPI,
        HANDLE_PTR dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Continue(
        PROTOCOLDATA *pProtocolData) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Abort(
        HRESULT hrReason,
        DWORD dwOptions) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Terminate(
        DWORD dwOptions) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Suspend(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Resume(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetProtocolRoot>() { static const IID __uuid_inst = {0x79eac9e3,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetProtocolRoot*>() { return __mingw_uuidof<IInternetProtocolRoot>(); } }
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Start_Proxy(
    IInternetProtocolRoot* This,
    LPCWSTR szUrl,
    IInternetProtocolSink *pOIProtSink,
    IInternetBindInfo *pOIBindInfo,
    DWORD grfPI,
    HANDLE_PTR dwReserved);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Start_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Continue_Proxy(
    IInternetProtocolRoot* This,
    PROTOCOLDATA *pProtocolData);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Continue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Abort_Proxy(
    IInternetProtocolRoot* This,
    HRESULT hrReason,
    DWORD dwOptions);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Abort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Terminate_Proxy(
    IInternetProtocolRoot* This,
    DWORD dwOptions);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Terminate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Suspend_Proxy(
    IInternetProtocolRoot* This);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Suspend_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolRoot_Resume_Proxy(
    IInternetProtocolRoot* This);
void __attribute__((__stdcall__)) IInternetProtocolRoot_Resume_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetProtocol *LPIINTERNETPROTOCOL;

extern "C" const GUID IID_IInternetProtocol;

struct
IInternetProtocol : public IInternetProtocolRoot
{
    virtual HRESULT __attribute__((__stdcall__)) Read(
        void *pv,
        ULONG cb,
        ULONG *pcbRead) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Seek(
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition) = 0;

    virtual HRESULT __attribute__((__stdcall__)) LockRequest(
        DWORD dwOptions) = 0;

    virtual HRESULT __attribute__((__stdcall__)) UnlockRequest(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetProtocol>() { static const IID __uuid_inst = {0x79eac9e4,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetProtocol*>() { return __mingw_uuidof<IInternetProtocol>(); } }
HRESULT __attribute__((__stdcall__)) IInternetProtocol_Read_Proxy(
    IInternetProtocol* This,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
void __attribute__((__stdcall__)) IInternetProtocol_Read_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocol_Seek_Proxy(
    IInternetProtocol* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
void __attribute__((__stdcall__)) IInternetProtocol_Seek_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocol_LockRequest_Proxy(
    IInternetProtocol* This,
    DWORD dwOptions);
void __attribute__((__stdcall__)) IInternetProtocol_LockRequest_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocol_UnlockRequest_Proxy(
    IInternetProtocol* This);
void __attribute__((__stdcall__)) IInternetProtocol_UnlockRequest_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;

extern "C" const GUID IID_IInternetProtocolSink;

struct
IInternetProtocolSink : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Switch(
        PROTOCOLDATA *pProtocolData) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ReportProgress(
        ULONG ulStatusCode,
        LPCWSTR szStatusText) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ReportData(
        DWORD grfBSCF,
        ULONG ulProgress,
        ULONG ulProgressMax) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ReportResult(
        HRESULT hrResult,
        DWORD dwError,
        LPCWSTR szResult) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetProtocolSink>() { static const IID __uuid_inst = {0x79eac9e5,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetProtocolSink*>() { return __mingw_uuidof<IInternetProtocolSink>(); } }
HRESULT __attribute__((__stdcall__)) IInternetProtocolSink_Switch_Proxy(
    IInternetProtocolSink* This,
    PROTOCOLDATA *pProtocolData);
void __attribute__((__stdcall__)) IInternetProtocolSink_Switch_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolSink_ReportProgress_Proxy(
    IInternetProtocolSink* This,
    ULONG ulStatusCode,
    LPCWSTR szStatusText);
void __attribute__((__stdcall__)) IInternetProtocolSink_ReportProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolSink_ReportData_Proxy(
    IInternetProtocolSink* This,
    DWORD grfBSCF,
    ULONG ulProgress,
    ULONG ulProgressMax);
void __attribute__((__stdcall__)) IInternetProtocolSink_ReportData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolSink_ReportResult_Proxy(
    IInternetProtocolSink* This,
    HRESULT hrResult,
    DWORD dwError,
    LPCWSTR szResult);
void __attribute__((__stdcall__)) IInternetProtocolSink_ReportResult_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;

extern "C" const GUID IID_IInternetProtocolSinkStackable;

struct
IInternetProtocolSinkStackable : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SwitchSink(
        IInternetProtocolSink *pOIProtSink) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CommitSwitch(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RollbackSwitch(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetProtocolSinkStackable>() { static const IID __uuid_inst = {0x79eac9f0,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetProtocolSinkStackable*>() { return __mingw_uuidof<IInternetProtocolSinkStackable>(); } }
HRESULT __attribute__((__stdcall__)) IInternetProtocolSinkStackable_SwitchSink_Proxy(
    IInternetProtocolSinkStackable* This,
    IInternetProtocolSink *pOIProtSink);
void __attribute__((__stdcall__)) IInternetProtocolSinkStackable_SwitchSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolSinkStackable_CommitSwitch_Proxy(
    IInternetProtocolSinkStackable* This);
void __attribute__((__stdcall__)) IInternetProtocolSinkStackable_CommitSwitch_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolSinkStackable_RollbackSwitch_Proxy(
    IInternetProtocolSinkStackable* This);
void __attribute__((__stdcall__)) IInternetProtocolSinkStackable_RollbackSwitch_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetSession *LPIINTERNETSESSION;

typedef enum _tagOIBDG_FLAGS {
    OIBDG_APARTMENTTHREADED = 0x100,
    OIBDG_DATAONLY = 0x1000
} OIBDG_FLAGS;

extern "C" const GUID IID_IInternetSession;

struct
IInternetSession : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) RegisterNameSpace(
        IClassFactory *pCF,
        const IID & rclsid,
        LPCWSTR pwzProtocol,
        ULONG cPatterns,
        const LPCWSTR *ppwzPatterns,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) UnregisterNameSpace(
        IClassFactory *pCF,
        LPCWSTR pszProtocol) = 0;

    virtual HRESULT __attribute__((__stdcall__)) RegisterMimeFilter(
        IClassFactory *pCF,
        const IID & rclsid,
        LPCWSTR pwzType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) UnregisterMimeFilter(
        IClassFactory *pCF,
        LPCWSTR pwzType) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CreateBinding(
        LPBC pBC,
        LPCWSTR szUrl,
        IUnknown *pUnkOuter,
        IUnknown **ppUnk,
        IInternetProtocol **ppOInetProt,
        DWORD dwOption) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetSessionOption(
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD dwBufferLength,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetSessionOption(
        DWORD dwOption,
        LPVOID pBuffer,
        DWORD *pdwBufferLength,
        DWORD dwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetSession>() { static const IID __uuid_inst = {0x79eac9e7,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetSession*>() { return __mingw_uuidof<IInternetSession>(); } }
HRESULT __attribute__((__stdcall__)) IInternetSession_RegisterNameSpace_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    const IID & rclsid,
    LPCWSTR pwzProtocol,
    ULONG cPatterns,
    const LPCWSTR *ppwzPatterns,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetSession_RegisterNameSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_UnregisterNameSpace_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    LPCWSTR pszProtocol);
void __attribute__((__stdcall__)) IInternetSession_UnregisterNameSpace_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_RegisterMimeFilter_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    const IID & rclsid,
    LPCWSTR pwzType);
void __attribute__((__stdcall__)) IInternetSession_RegisterMimeFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_UnregisterMimeFilter_Proxy(
    IInternetSession* This,
    IClassFactory *pCF,
    LPCWSTR pwzType);
void __attribute__((__stdcall__)) IInternetSession_UnregisterMimeFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_CreateBinding_Proxy(
    IInternetSession* This,
    LPBC pBC,
    LPCWSTR szUrl,
    IUnknown *pUnkOuter,
    IUnknown **ppUnk,
    IInternetProtocol **ppOInetProt,
    DWORD dwOption);
void __attribute__((__stdcall__)) IInternetSession_CreateBinding_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_SetSessionOption_Proxy(
    IInternetSession* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD dwBufferLength,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetSession_SetSessionOption_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSession_GetSessionOption_Proxy(
    IInternetSession* This,
    DWORD dwOption,
    LPVOID pBuffer,
    DWORD *pdwBufferLength,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetSession_GetSessionOption_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;

extern "C" const GUID IID_IInternetThreadSwitch;

struct
IInternetThreadSwitch : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Prepare(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Continue(
        ) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetThreadSwitch>() { static const IID __uuid_inst = {0x79eac9e8,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetThreadSwitch*>() { return __mingw_uuidof<IInternetThreadSwitch>(); } }
HRESULT __attribute__((__stdcall__)) IInternetThreadSwitch_Prepare_Proxy(
    IInternetThreadSwitch* This);
void __attribute__((__stdcall__)) IInternetThreadSwitch_Prepare_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetThreadSwitch_Continue_Proxy(
    IInternetThreadSwitch* This);
void __attribute__((__stdcall__)) IInternetThreadSwitch_Continue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetPriority *LPIINTERNETPRIORITY;

extern "C" const GUID IID_IInternetPriority;

struct
IInternetPriority : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SetPriority(
        LONG nPriority) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetPriority(
        LONG *pnPriority) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetPriority>() { static const IID __uuid_inst = {0x79eac9eb,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetPriority*>() { return __mingw_uuidof<IInternetPriority>(); } }
HRESULT __attribute__((__stdcall__)) IInternetPriority_SetPriority_Proxy(
    IInternetPriority* This,
    LONG nPriority);
void __attribute__((__stdcall__)) IInternetPriority_SetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetPriority_GetPriority_Proxy(
    IInternetPriority* This,
    LONG *pnPriority);
void __attribute__((__stdcall__)) IInternetPriority_GetPriority_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef enum _tagPARSEACTION {
    PARSE_CANONICALIZE = 1,
    PARSE_FRIENDLY = 2,
    PARSE_SECURITY_URL = 3,
    PARSE_ROOTDOCUMENT = 4,
    PARSE_DOCUMENT = 5,
    PARSE_ANCHOR = 6,
    PARSE_ENCODE_IS_UNESCAPE = 7,
    PARSE_DECODE_IS_ESCAPE = 8,
    PARSE_PATH_FROM_URL = 9,
    PARSE_URL_FROM_PATH = 10,
    PARSE_MIME = 11,
    PARSE_SERVER = 12,
    PARSE_SCHEMA = 13,
    PARSE_SITE = 14,
    PARSE_DOMAIN = 15,
    PARSE_LOCATION = 16,
    PARSE_SECURITY_DOMAIN = 17,
    PARSE_ESCAPE = 18,
    PARSE_UNESCAPE = 19
} PARSEACTION;

typedef enum _tagPSUACTION {
    PSU_DEFAULT = 1,
    PSU_SECURITY_URL_ONLY = 2
} PSUACTION;

typedef enum _tagQUERYOPTION {
    QUERY_EXPIRATION_DATE = 1,
    QUERY_TIME_OF_LAST_CHANGE = 2,
    QUERY_CONTENT_ENCODING = 3,
    QUERY_CONTENT_TYPE = 4,
    QUERY_REFRESH = 5,
    QUERY_RECOMBINE = 6,
    QUERY_CAN_NAVIGATE = 7,
    QUERY_USES_NETWORK = 8,
    QUERY_IS_CACHED = 9,
    QUERY_IS_INSTALLEDENTRY = 10,
    QUERY_IS_CACHED_OR_MAPPED = 11,
    QUERY_USES_CACHE = 12,
    QUERY_IS_SECURE = 13,
    QUERY_IS_SAFE = 14,
    QUERY_USES_HISTORYFOLDER = 15,
    QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16
} QUERYOPTION;

extern "C" const GUID IID_IInternetProtocolInfo;

struct
IInternetProtocolInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) ParseUrl(
        LPCWSTR pwzUrl,
        PARSEACTION ParseAction,
        DWORD dwParseFlags,
        LPWSTR pwzResult,
        DWORD cchResult,
        DWORD *pcchResult,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CombineUrl(
        LPCWSTR pwzBaseUrl,
        LPCWSTR pwzRelativeUrl,
        DWORD dwCombineFlags,
        LPWSTR pwzResult,
        DWORD cchResult,
        DWORD *pcchResult,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CompareUrl(
        LPCWSTR pwzUrl1,
        LPCWSTR pwzUrl2,
        DWORD dwCompareFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) QueryInfo(
        LPCWSTR pwzUrl,
        QUERYOPTION OueryOption,
        DWORD dwQueryFlags,
        LPVOID pBuffer,
        DWORD cbBuffer,
        DWORD *pcbBuf,
        DWORD dwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetProtocolInfo>() { static const IID __uuid_inst = {0x79eac9ec,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetProtocolInfo*>() { return __mingw_uuidof<IInternetProtocolInfo>(); } }
HRESULT __attribute__((__stdcall__)) IInternetProtocolInfo_ParseUrl_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzUrl,
    PARSEACTION ParseAction,
    DWORD dwParseFlags,
    LPWSTR pwzResult,
    DWORD cchResult,
    DWORD *pcchResult,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetProtocolInfo_ParseUrl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolInfo_CombineUrl_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzBaseUrl,
    LPCWSTR pwzRelativeUrl,
    DWORD dwCombineFlags,
    LPWSTR pwzResult,
    DWORD cchResult,
    DWORD *pcchResult,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetProtocolInfo_CombineUrl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolInfo_CompareUrl_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzUrl1,
    LPCWSTR pwzUrl2,
    DWORD dwCompareFlags);
void __attribute__((__stdcall__)) IInternetProtocolInfo_CompareUrl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetProtocolInfo_QueryInfo_Proxy(
    IInternetProtocolInfo* This,
    LPCWSTR pwzUrl,
    QUERYOPTION OueryOption,
    DWORD dwQueryFlags,
    LPVOID pBuffer,
    DWORD cbBuffer,
    DWORD *pcbBuf,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetProtocolInfo_QueryInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" HRESULT __attribute__((__stdcall__)) CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);



extern "C" HRESULT __attribute__((__stdcall__)) CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);




extern "C" HRESULT __attribute__((__stdcall__)) CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags);
extern "C" HRESULT __attribute__((__stdcall__)) CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL,IBindCtx *pbc, LPVOID pvReserved,DWORD flags);
extern "C" HRESULT __attribute__((__stdcall__)) CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest);
extern "C" HRESULT __attribute__((__stdcall__)) CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest);
extern "C" void __attribute__((__stdcall__)) ReleaseBindInfo(BINDINFO *pbindinfo);
extern "C" HRESULT __attribute__((__stdcall__)) CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);
extern "C" HRESULT __attribute__((__stdcall__)) CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);

extern "C" const IID CLSID_InternetSecurityManager;
extern "C" const IID CLSID_InternetZoneManager;
extern "C" const GUID IID_IInternetSecurityMgrSite;

struct
IInternetSecurityMgrSite : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetWindow(
        HWND *phwnd) = 0;

    virtual HRESULT __attribute__((__stdcall__)) EnableModeless(
        WINBOOL fEnable) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetSecurityMgrSite>() { static const IID __uuid_inst = {0x79eac9ed,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetSecurityMgrSite*>() { return __mingw_uuidof<IInternetSecurityMgrSite>(); } }
HRESULT __attribute__((__stdcall__)) IInternetSecurityMgrSite_GetWindow_Proxy(
    IInternetSecurityMgrSite* This,
    HWND *phwnd);
void __attribute__((__stdcall__)) IInternetSecurityMgrSite_GetWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityMgrSite_EnableModeless_Proxy(
    IInternetSecurityMgrSite* This,
    WINBOOL fEnable);
void __attribute__((__stdcall__)) IInternetSecurityMgrSite_EnableModeless_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef enum __WIDL_urlmon_generated_name_0000000E {
    PUAF_DEFAULT = 0x0,
    PUAF_NOUI = 0x1,
    PUAF_ISFILE = 0x2,
    PUAF_WARN_IF_DENIED = 0x4,
    PUAF_FORCEUI_FOREGROUND = 0x8,
    PUAF_CHECK_TIFS = 0x10,
    PUAF_DONTCHECKBOXINDIALOG = 0x20,
    PUAF_TRUSTED = 0x40,
    PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
    PUAF_ENFORCERESTRICTED = 0x100,
    PUAF_NOSAVEDFILECHECK = 0x200,
    PUAF_REQUIRESAVEDFILECHECK = 0x400,
    PUAF_DONT_USE_CACHE = 0x1000,
    PUAF_RESERVED1 = 0x2000,
    PUAF_RESERVED2 = 0x4000,
    PUAF_LMZ_UNLOCKED = 0x10000,
    PUAF_LMZ_LOCKED = 0x20000,
    PUAF_DEFAULTZONEPOL = 0x40000,
    PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
    PUAF_NOUIIFLOCKED = 0x100000,
    PUAF_DRAGPROTOCOLCHECK = 0x200000
} PUAF;
typedef enum __WIDL_urlmon_generated_name_0000000F {
    PUAFOUT_DEFAULT = 0x0,
    PUAFOUT_ISLOCKZONEPOLICY = 0x1
} PUAFOUT;


typedef enum __WIDL_urlmon_generated_name_00000010 {
    SZM_CREATE = 0x0,
    SZM_DELETE = 0x1
} SZM_FLAGS;

extern "C" const GUID IID_IInternetSecurityManager;

struct
IInternetSecurityManager : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) SetSecuritySite(
        IInternetSecurityMgrSite *pSite) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetSecuritySite(
        IInternetSecurityMgrSite **ppSite) = 0;

    virtual HRESULT __attribute__((__stdcall__)) MapUrlToZone(
        LPCWSTR pwszUrl,
        DWORD *pdwZone,
        DWORD dwFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetSecurityId(
        LPCWSTR pwszUrl,
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ProcessUrlAction(
        LPCWSTR pwszUrl,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) QueryCustomPolicy(
        LPCWSTR pwszUrl,
        const GUID & guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetZoneMapping(
        DWORD dwZone,
        LPCWSTR lpszPattern,
        DWORD dwFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetZoneMappings(
        DWORD dwZone,
        IEnumString **ppenumString,
        DWORD dwFlags) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetSecurityManager>() { static const IID __uuid_inst = {0x79eac9ee,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetSecurityManager*>() { return __mingw_uuidof<IInternetSecurityManager>(); } }
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_SetSecuritySite_Proxy(
    IInternetSecurityManager* This,
    IInternetSecurityMgrSite *pSite);
void __attribute__((__stdcall__)) IInternetSecurityManager_SetSecuritySite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_GetSecuritySite_Proxy(
    IInternetSecurityManager* This,
    IInternetSecurityMgrSite **ppSite);
void __attribute__((__stdcall__)) IInternetSecurityManager_GetSecuritySite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_MapUrlToZone_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    DWORD *pdwZone,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetSecurityManager_MapUrlToZone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_GetSecurityId_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    BYTE *pbSecurityId,
    DWORD *pcbSecurityId,
    DWORD_PTR dwReserved);
void __attribute__((__stdcall__)) IInternetSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_ProcessUrlAction_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwFlags,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_QueryCustomPolicy_Proxy(
    IInternetSecurityManager* This,
    LPCWSTR pwszUrl,
    const GUID & guidKey,
    BYTE **ppPolicy,
    DWORD *pcbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_SetZoneMapping_Proxy(
    IInternetSecurityManager* This,
    DWORD dwZone,
    LPCWSTR lpszPattern,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetSecurityManager_SetZoneMapping_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetSecurityManager_GetZoneMappings_Proxy(
    IInternetSecurityManager* This,
    DWORD dwZone,
    IEnumString **ppenumString,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetSecurityManager_GetZoneMappings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const GUID IID_IInternetHostSecurityManager;

struct
IInternetHostSecurityManager : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetSecurityId(
        BYTE *pbSecurityId,
        DWORD *pcbSecurityId,
        DWORD_PTR dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ProcessUrlAction(
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwFlags,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) QueryCustomPolicy(
        const GUID & guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        BYTE *pContext,
        DWORD cbContext,
        DWORD dwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetHostSecurityManager>() { static const IID __uuid_inst = {0x3af280b6,0xcb3f,0x11d0, {0x89,0x1e,0x00,0xc0,0x4f,0xb6,0xbf,0xc4}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetHostSecurityManager*>() { return __mingw_uuidof<IInternetHostSecurityManager>(); } }
HRESULT __attribute__((__stdcall__)) IInternetHostSecurityManager_GetSecurityId_Proxy(
    IInternetHostSecurityManager* This,
    BYTE *pbSecurityId,
    DWORD *pcbSecurityId,
    DWORD_PTR dwReserved);
void __attribute__((__stdcall__)) IInternetHostSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetHostSecurityManager_ProcessUrlAction_Proxy(
    IInternetHostSecurityManager* This,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwFlags,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetHostSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetHostSecurityManager_QueryCustomPolicy_Proxy(
    IInternetHostSecurityManager* This,
    const GUID & guidKey,
    BYTE **ppPolicy,
    DWORD *pcbPolicy,
    BYTE *pContext,
    DWORD cbContext,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetHostSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IInternetZoneManager *LPURLZONEMANAGER;

typedef enum tagURLZONE {
    URLZONE_INVALID = -1,
    URLZONE_PREDEFINED_MIN = 0,
    URLZONE_LOCAL_MACHINE = 0,
    URLZONE_INTRANET = 1,
    URLZONE_TRUSTED = 2,
    URLZONE_INTERNET = 3,
    URLZONE_UNTRUSTED = 4,
    URLZONE_PREDEFINED_MAX = 999,
    URLZONE_USER_MIN = 1000,
    URLZONE_USER_MAX = 10000
} URLZONE;



typedef enum tagURLTEMPLATE {
    URLTEMPLATE_CUSTOM = 0x0,
    URLTEMPLATE_PREDEFINED_MIN = 0x10000,
    URLTEMPLATE_LOW = 0x10000,
    URLTEMPLATE_MEDLOW = 0x10500,
    URLTEMPLATE_MEDIUM = 0x11000,
    URLTEMPLATE_MEDHIGH = 0x11500,
    URLTEMPLATE_HIGH = 0x12000,
    URLTEMPLATE_PREDEFINED_MAX = 0x20000
} URLTEMPLATE;

enum {
    MAX_ZONE_PATH = 260,
    MAX_ZONE_DESCRIPTION = 200
};


typedef enum __WIDL_urlmon_generated_name_00000011 {
    ZAFLAGS_CUSTOM_EDIT = 0x1,
    ZAFLAGS_ADD_SITES = 0x2,
    ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
    ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
    ZAFLAGS_NO_UI = 0x20,
    ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
    ZAFLAGS_UNC_AS_INTRANET = 0x80,
    ZAFLAGS_DETECT_INTRANET = 0x100,
    ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
    ZAFLAGS_NO_CACHE = 0x40000
} ZAFLAGS;

typedef struct _ZONEATTRIBUTES {
    ULONG cbSize;
    WCHAR szDisplayName[260];
    WCHAR szDescription[200];
    WCHAR szIconPath[260];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
} ZONEATTRIBUTES;
typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;


typedef enum _URLZONEREG {
    URLZONEREG_DEFAULT = 0,
    URLZONEREG_HKLM = 1,
    URLZONEREG_HKCU = 2
} URLZONEREG;

extern "C" const GUID IID_IInternetZoneManager;

struct
IInternetZoneManager : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetZoneAttributes(
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetZoneAttributes(
        DWORD dwZone,
        ZONEATTRIBUTES *pZoneAttributes) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetZoneCustomPolicy(
        DWORD dwZone,
        const GUID & guidKey,
        BYTE **ppPolicy,
        DWORD *pcbPolicy,
        URLZONEREG urlZoneReg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetZoneCustomPolicy(
        DWORD dwZone,
        const GUID & guidKey,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetZoneActionPolicy(
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetZoneActionPolicy(
        DWORD dwZone,
        DWORD dwAction,
        BYTE *pPolicy,
        DWORD cbPolicy,
        URLZONEREG urlZoneReg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) PromptAction(
        DWORD dwAction,
        HWND hwndParent,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwPromptFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) LogAction(
        DWORD dwAction,
        LPCWSTR pwszUrl,
        LPCWSTR pwszText,
        DWORD dwLogFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CreateZoneEnumerator(
        DWORD *pdwEnum,
        DWORD *pdwCount,
        DWORD dwFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetZoneAt(
        DWORD dwEnum,
        DWORD dwIndex,
        DWORD *pdwZone) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DestroyZoneEnumerator(
        DWORD dwEnum) = 0;

    virtual HRESULT __attribute__((__stdcall__)) CopyTemplatePoliciesToZone(
        DWORD dwTemplate,
        DWORD dwZone,
        DWORD dwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IInternetZoneManager>() { static const IID __uuid_inst = {0x79eac9ef,0xbaf9,0x11ce, {0x8c,0x82,0x00,0xaa,0x00,0x4b,0xa9,0x0b}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IInternetZoneManager*>() { return __mingw_uuidof<IInternetZoneManager>(); } }
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_GetZoneAttributes_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    ZONEATTRIBUTES *pZoneAttributes);
void __attribute__((__stdcall__)) IInternetZoneManager_GetZoneAttributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_SetZoneAttributes_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    ZONEATTRIBUTES *pZoneAttributes);
void __attribute__((__stdcall__)) IInternetZoneManager_SetZoneAttributes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_GetZoneCustomPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    const GUID & guidKey,
    BYTE **ppPolicy,
    DWORD *pcbPolicy,
    URLZONEREG urlZoneReg);
void __attribute__((__stdcall__)) IInternetZoneManager_GetZoneCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_SetZoneCustomPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    const GUID & guidKey,
    BYTE *pPolicy,
    DWORD cbPolicy,
    URLZONEREG urlZoneReg);
void __attribute__((__stdcall__)) IInternetZoneManager_SetZoneCustomPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_GetZoneActionPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    URLZONEREG urlZoneReg);
void __attribute__((__stdcall__)) IInternetZoneManager_GetZoneActionPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_SetZoneActionPolicy_Proxy(
    IInternetZoneManager* This,
    DWORD dwZone,
    DWORD dwAction,
    BYTE *pPolicy,
    DWORD cbPolicy,
    URLZONEREG urlZoneReg);
void __attribute__((__stdcall__)) IInternetZoneManager_SetZoneActionPolicy_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_PromptAction_Proxy(
    IInternetZoneManager* This,
    DWORD dwAction,
    HWND hwndParent,
    LPCWSTR pwszUrl,
    LPCWSTR pwszText,
    DWORD dwPromptFlags);
void __attribute__((__stdcall__)) IInternetZoneManager_PromptAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_LogAction_Proxy(
    IInternetZoneManager* This,
    DWORD dwAction,
    LPCWSTR pwszUrl,
    LPCWSTR pwszText,
    DWORD dwLogFlags);
void __attribute__((__stdcall__)) IInternetZoneManager_LogAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_CreateZoneEnumerator_Proxy(
    IInternetZoneManager* This,
    DWORD *pdwEnum,
    DWORD *pdwCount,
    DWORD dwFlags);
void __attribute__((__stdcall__)) IInternetZoneManager_CreateZoneEnumerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_GetZoneAt_Proxy(
    IInternetZoneManager* This,
    DWORD dwEnum,
    DWORD dwIndex,
    DWORD *pdwZone);
void __attribute__((__stdcall__)) IInternetZoneManager_GetZoneAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_DestroyZoneEnumerator_Proxy(
    IInternetZoneManager* This,
    DWORD dwEnum);
void __attribute__((__stdcall__)) IInternetZoneManager_DestroyZoneEnumerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy(
    IInternetZoneManager* This,
    DWORD dwTemplate,
    DWORD dwZone,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IInternetZoneManager_CopyTemplatePoliciesToZone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
extern "C" const IID CLSID_SoftDistExt;
typedef struct _tagCODEBASEHOLD {
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
} CODEBASEHOLD;
typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;

typedef struct _tagSOFTDISTINFO {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
} SOFTDISTINFO;
typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;







extern "C" const GUID IID_ISoftDistExt;

struct
ISoftDistExt : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) ProcessSoftDist(
        LPCWSTR szCDFURL,
        IXMLElement *pSoftDistElement,
        LPSOFTDISTINFO lpsdi) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetFirstCodeBase(
        LPWSTR *szCodeBase,
        LPDWORD dwMaxSize) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetNextCodeBase(
        LPWSTR *szCodeBase,
        LPDWORD dwMaxSize) = 0;

    virtual HRESULT __attribute__((__stdcall__)) AsyncInstallDistributionUnit(
        IBindCtx *pbc,
        LPVOID pvReserved,
        DWORD flags,
        LPCODEBASEHOLD lpcbh) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ISoftDistExt>() { static const IID __uuid_inst = {0xb15b8dc1,0xc7e1,0x11d0, {0x86,0x80,0x00,0xaa,0x00,0xbd,0xcb,0x71}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ISoftDistExt*>() { return __mingw_uuidof<ISoftDistExt>(); } }
HRESULT __attribute__((__stdcall__)) ISoftDistExt_ProcessSoftDist_Proxy(
    ISoftDistExt* This,
    LPCWSTR szCDFURL,
    IXMLElement *pSoftDistElement,
    LPSOFTDISTINFO lpsdi);
void __attribute__((__stdcall__)) ISoftDistExt_ProcessSoftDist_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISoftDistExt_GetFirstCodeBase_Proxy(
    ISoftDistExt* This,
    LPWSTR *szCodeBase,
    LPDWORD dwMaxSize);
void __attribute__((__stdcall__)) ISoftDistExt_GetFirstCodeBase_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISoftDistExt_GetNextCodeBase_Proxy(
    ISoftDistExt* This,
    LPWSTR *szCodeBase,
    LPDWORD dwMaxSize);
void __attribute__((__stdcall__)) ISoftDistExt_GetNextCodeBase_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ISoftDistExt_AsyncInstallDistributionUnit_Proxy(
    ISoftDistExt* This,
    IBindCtx *pbc,
    LPVOID pvReserved,
    DWORD flags,
    LPCODEBASEHOLD lpcbh);
void __attribute__((__stdcall__)) ISoftDistExt_AsyncInstallDistributionUnit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);




extern "C" HRESULT __attribute__((__stdcall__)) GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi);
extern "C" HRESULT __attribute__((__stdcall__)) SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS);
typedef ICatalogFileInfo *LPCATALOGFILEINFO;

extern "C" const GUID IID_ICatalogFileInfo;

struct
ICatalogFileInfo : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetCatalogFile(
        LPSTR *ppszCatalogFile) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetJavaTrust(
        void **ppJavaTrust) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<ICatalogFileInfo>() { static const IID __uuid_inst = {0x711c7600,0x6b48,0x11d1, {0xb4,0x03,0x00,0xaa,0x00,0xb9,0x2a,0xf1}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<ICatalogFileInfo*>() { return __mingw_uuidof<ICatalogFileInfo>(); } }
HRESULT __attribute__((__stdcall__)) ICatalogFileInfo_GetCatalogFile_Proxy(
    ICatalogFileInfo* This,
    LPSTR *ppszCatalogFile);
void __attribute__((__stdcall__)) ICatalogFileInfo_GetCatalogFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) ICatalogFileInfo_GetJavaTrust_Proxy(
    ICatalogFileInfo* This,
    void **ppJavaTrust);
void __attribute__((__stdcall__)) ICatalogFileInfo_GetJavaTrust_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IDataFilter *LPDATAFILTER;

extern "C" const GUID IID_IDataFilter;

struct
IDataFilter : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) DoEncode(
        DWORD dwFlags,
        LONG lInBufferSize,
        BYTE *pbInBuffer,
        LONG lOutBufferSize,
        BYTE *pbOutBuffer,
        LONG lInBytesAvailable,
        LONG *plInBytesRead,
        LONG *plOutBytesWritten,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DoDecode(
        DWORD dwFlags,
        LONG lInBufferSize,
        BYTE *pbInBuffer,
        LONG lOutBufferSize,
        BYTE *pbOutBuffer,
        LONG lInBytesAvailable,
        LONG *plInBytesRead,
        LONG *plOutBytesWritten,
        DWORD dwReserved) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetEncodingLevel(
        DWORD dwEncLevel) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IDataFilter>() { static const IID __uuid_inst = {0x69d14c80,0xc18e,0x11d0, {0xa9,0xce,0x00,0x60,0x97,0x94,0x23,0x11}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IDataFilter*>() { return __mingw_uuidof<IDataFilter>(); } }
HRESULT __attribute__((__stdcall__)) IDataFilter_DoEncode_Proxy(
    IDataFilter* This,
    DWORD dwFlags,
    LONG lInBufferSize,
    BYTE *pbInBuffer,
    LONG lOutBufferSize,
    BYTE *pbOutBuffer,
    LONG lInBytesAvailable,
    LONG *plInBytesRead,
    LONG *plOutBytesWritten,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IDataFilter_DoEncode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataFilter_DoDecode_Proxy(
    IDataFilter* This,
    DWORD dwFlags,
    LONG lInBufferSize,
    BYTE *pbInBuffer,
    LONG lOutBufferSize,
    BYTE *pbOutBuffer,
    LONG lInBytesAvailable,
    LONG *plInBytesRead,
    LONG *plOutBytesWritten,
    DWORD dwReserved);
void __attribute__((__stdcall__)) IDataFilter_DoDecode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IDataFilter_SetEncodingLevel_Proxy(
    IDataFilter* This,
    DWORD dwEncLevel);
void __attribute__((__stdcall__)) IDataFilter_SetEncodingLevel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef struct _tagPROTOCOLFILTERDATA {
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
} PROTOCOLFILTERDATA;







typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

typedef struct _tagDATAINFO {
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
} DATAINFO;

extern "C" const GUID IID_IEncodingFilterFactory;

struct
IEncodingFilterFactory : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) FindBestFilter(
        LPCWSTR pwzCodeIn,
        LPCWSTR pwzCodeOut,
        DATAINFO info,
        IDataFilter **ppDF) = 0;

    virtual HRESULT __attribute__((__stdcall__)) GetDefaultFilter(
        LPCWSTR pwzCodeIn,
        LPCWSTR pwzCodeOut,
        IDataFilter **ppDF) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEncodingFilterFactory>() { static const IID __uuid_inst = {0x70bdde00,0xc18e,0x11d0, {0xa9,0xce,0x00,0x60,0x97,0x94,0x23,0x11}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEncodingFilterFactory*>() { return __mingw_uuidof<IEncodingFilterFactory>(); } }
HRESULT __attribute__((__stdcall__)) IEncodingFilterFactory_FindBestFilter_Proxy(
    IEncodingFilterFactory* This,
    LPCWSTR pwzCodeIn,
    LPCWSTR pwzCodeOut,
    DATAINFO info,
    IDataFilter **ppDF);
void __attribute__((__stdcall__)) IEncodingFilterFactory_FindBestFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEncodingFilterFactory_GetDefaultFilter_Proxy(
    IEncodingFilterFactory* This,
    LPCWSTR pwzCodeIn,
    LPCWSTR pwzCodeOut,
    IDataFilter **ppDF);
void __attribute__((__stdcall__)) IEncodingFilterFactory_GetDefaultFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
WINBOOL __attribute__((__stdcall__)) IsLoggingEnabledA(LPCSTR pszUrl);
WINBOOL __attribute__((__stdcall__)) IsLoggingEnabledW(LPCWSTR pwszUrl);


typedef struct _tagHIT_LOGGING_INFO {
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
} HIT_LOGGING_INFO;
typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

WINBOOL __attribute__((__stdcall__)) WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo);



struct CONFIRMSAFETY {
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
};


extern "C" const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;
typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;

extern "C" const GUID IID_IWrappedProtocol;

struct
IWrappedProtocol : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetWrapperCode(
        LONG *pnCode,
        DWORD_PTR dwReserved) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IWrappedProtocol>() { static const IID __uuid_inst = {0x53c84785,0x8425,0x4dc5, {0x97,0x1b,0xe5,0x8d,0x9c,0x19,0xf9,0xb6}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IWrappedProtocol*>() { return __mingw_uuidof<IWrappedProtocol>(); } }
HRESULT __attribute__((__stdcall__)) IWrappedProtocol_GetWrapperCode_Proxy(
    IWrappedProtocol* This,
    LONG *pnCode,
    DWORD_PTR dwReserved);
void __attribute__((__stdcall__)) IWrappedProtocol_GetWrapperCode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IGetBindHandle *LPGETBINDHANDLE;

typedef enum __WIDL_urlmon_generated_name_00000012 {
    BINDHANDLETYPES_APPCACHE = 0x0,
    BINDHANDLETYPES_DEPENDENCY = 0x1,
    BINDHANDLETYPES_COUNT = 0x2
} BINDHANDLETYPES;

extern "C" const GUID IID_IGetBindHandle;

struct
IGetBindHandle : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) GetBindHandle(
        BINDHANDLETYPES enumRequestedHandle,
        HANDLE *pRetHandle) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IGetBindHandle>() { static const IID __uuid_inst = {0xaf0ff408,0x129d,0x4b20, {0x91,0xf0,0x02,0xbd,0x23,0xd8,0x83,0x52}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IGetBindHandle*>() { return __mingw_uuidof<IGetBindHandle>(); } }
HRESULT __attribute__((__stdcall__)) IGetBindHandle_GetBindHandle_Proxy(
    IGetBindHandle* This,
    BINDHANDLETYPES enumRequestedHandle,
    HANDLE *pRetHandle);
void __attribute__((__stdcall__)) IGetBindHandle_GetBindHandle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef struct _tagPROTOCOL_ARGUMENT {
    LPCWSTR szMethod;
    LPCWSTR szTargetUrl;
} PROTOCOL_ARGUMENT;
typedef struct _tagPROTOCOL_ARGUMENT *LPPROTOCOL_ARGUMENT;
typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT;

extern "C" const GUID IID_IBindCallbackRedirect;

struct
IBindCallbackRedirect : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Redirect(
        LPCWSTR lpcUrl,
        VARIANT_BOOL *vbCancel) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IBindCallbackRedirect>() { static const IID __uuid_inst = {0x11c81bc2,0x121e,0x4ed5, {0xb9,0xc4,0xb4,0x30,0xbd,0x54,0xf2,0xc0}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IBindCallbackRedirect*>() { return __mingw_uuidof<IBindCallbackRedirect>(); } }
HRESULT __attribute__((__stdcall__)) IBindCallbackRedirect_Redirect_Proxy(
    IBindCallbackRedirect* This,
    LPCWSTR lpcUrl,
    VARIANT_BOOL *vbCancel);
void __attribute__((__stdcall__)) IBindCallbackRedirect_Redirect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
ULONG __attribute__((__stdcall__)) STGMEDIUM_UserSize (ULONG *, ULONG, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserMarshal (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char * __attribute__((__stdcall__)) STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void __attribute__((__stdcall__)) STGMEDIUM_UserFree (ULONG *, STGMEDIUM *);
ULONG __attribute__((__stdcall__)) CLIPFORMAT_UserSize (ULONG *, ULONG, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserMarshal (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char * __attribute__((__stdcall__)) CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void __attribute__((__stdcall__)) CLIPFORMAT_UserFree (ULONG *, CLIPFORMAT *);
ULONG __attribute__((__stdcall__)) HWND_UserSize (ULONG *, ULONG, HWND *);
unsigned char * __attribute__((__stdcall__)) HWND_UserMarshal (ULONG *, unsigned char *, HWND *);
unsigned char * __attribute__((__stdcall__)) HWND_UserUnmarshal(ULONG *, unsigned char *, HWND *);
void __attribute__((__stdcall__)) HWND_UserFree (ULONG *, HWND *);
ULONG __attribute__((__stdcall__)) BSTR_UserSize (ULONG *, ULONG, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserMarshal (ULONG *, unsigned char *, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void __attribute__((__stdcall__)) BSTR_UserFree (ULONG *, BSTR *);




}
typedef struct IPropertyStorage IPropertyStorage;




typedef struct IPropertySetStorage IPropertySetStorage;




typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;




typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
extern "C" {
typedef struct tagVersionedStream {
    GUID guidVersion;
    IStream *pStream;
} VERSIONEDSTREAM;
typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
typedef struct tagPROPVARIANT PROPVARIANT;


typedef struct tagCAC {
    ULONG cElems;
    CHAR *pElems;
} CAC;
typedef struct tagCAUB {
    ULONG cElems;
    UCHAR *pElems;
} CAUB;
typedef struct tagCAI {
    ULONG cElems;
    SHORT *pElems;
} CAI;
typedef struct tagCAUI {
    ULONG cElems;
    USHORT *pElems;
} CAUI;
typedef struct tagCAL {
    ULONG cElems;
    LONG *pElems;
} CAL;
typedef struct tagCAUL {
    ULONG cElems;
    ULONG *pElems;
} CAUL;
typedef struct tagCAFLT {
    ULONG cElems;
    FLOAT *pElems;
} CAFLT;
typedef struct tagCADBL {
    ULONG cElems;
    DOUBLE *pElems;
} CADBL;
typedef struct tagCACY {
    ULONG cElems;
    CY *pElems;
} CACY;
typedef struct tagCADATE {
    ULONG cElems;
    DATE *pElems;
} CADATE;
typedef struct tagCABSTR {
    ULONG cElems;
    BSTR *pElems;
} CABSTR;
typedef struct tagCABSTRBLOB {
    ULONG cElems;
    BSTRBLOB *pElems;
} CABSTRBLOB;
typedef struct tagCABOOL {
    ULONG cElems;
    VARIANT_BOOL *pElems;
} CABOOL;
typedef struct tagCASCODE {
    ULONG cElems;
    SCODE *pElems;
} CASCODE;
typedef struct tagCAPROPVARIANT {
    ULONG cElems;
    PROPVARIANT *pElems;
} CAPROPVARIANT;
typedef struct tagCAH {
    ULONG cElems;
    LARGE_INTEGER *pElems;
} CAH;
typedef struct tagCAUH {
    ULONG cElems;
    ULARGE_INTEGER *pElems;
} CAUH;
typedef struct tagCALPSTR {
    ULONG cElems;
    LPSTR *pElems;
} CALPSTR;
typedef struct tagCALPWSTR {
    ULONG cElems;
    LPWSTR *pElems;
} CALPWSTR;
typedef struct tagCAFILETIME {
    ULONG cElems;
    FILETIME *pElems;
} CAFILETIME;
typedef struct tagCACLIPDATA {
    ULONG cElems;
    CLIPDATA *pElems;
} CACLIPDATA;
typedef struct tagCACLSID {
    ULONG cElems;
    CLSID *pElems;
} CACLSID;






typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;




  struct tagPROPVARIANT {
    __extension__ union {
      __extension__
struct {
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
    __extension__ union {
        CHAR cVal;
        UCHAR bVal;
        SHORT iVal;
        USHORT uiVal;
        LONG lVal;
        ULONG ulVal;
        INT intVal;
        UINT uintVal;
        LARGE_INTEGER hVal;
        ULARGE_INTEGER uhVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        FILETIME filetime;
        CLSID *puuid;
        CLIPDATA *pclipdata;
        BSTR bstrVal;
        BSTRBLOB bstrblobVal;
        BLOB blob;
        LPSTR pszVal;
        LPWSTR pwszVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        IStream *pStream;
        IStorage *pStorage;
        LPVERSIONEDSTREAM pVersionedStream;
        LPSAFEARRAY parray;
        CAC cac;
        CAUB caub;
        CAI cai;
        CAUI caui;
        CAL cal;
        CAUL caul;
        CAH cah;
        CAUH cauh;
        CAFLT caflt;
        CADBL cadbl;
        CABOOL cabool;
        CASCODE cascode;
        CACY cacy;
        CADATE cadate;
        CAFILETIME cafiletime;
        CACLSID cauuid;
        CACLIPDATA caclipdata;
        CABSTR cabstr;
        CABSTRBLOB cabstrblob;
        CALPSTR calpstr;
        CALPWSTR calpwstr;
        CAPROPVARIANT capropvar;
        CHAR *pcVal;
        UCHAR *pbVal;
        SHORT *piVal;
        USHORT *puiVal;
        LONG *plVal;
        ULONG *pulVal;
        INT *pintVal;
        UINT *puintVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        DECIMAL *pdecVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        BSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        LPSAFEARRAY *pparray;
        PROPVARIANT *pvarVal;
    } ;
};

    DECIMAL decVal;
  };
};





typedef struct tagPROPVARIANT * LPPROPVARIANT;
enum PIDMSI_STATUS_VALUE {
    PIDMSI_STATUS_NORMAL = 0,
    PIDMSI_STATUS_NEW = 1,
    PIDMSI_STATUS_PRELIM = 2,
    PIDMSI_STATUS_DRAFT = 3,
    PIDMSI_STATUS_INPROGRESS = 4,
    PIDMSI_STATUS_EDIT = 5,
    PIDMSI_STATUS_REVIEW = 6,
    PIDMSI_STATUS_PROOF = 7,
    PIDMSI_STATUS_FINAL = 8,
    PIDMSI_STATUS_OTHER = 0x7fff
};
typedef struct tagPROPSPEC {
    ULONG ulKind;
    __extension__ union {
        PROPID propid;
        LPOLESTR lpwstr;
    } ;
} PROPSPEC;

typedef struct tagSTATPROPSTG {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
} STATPROPSTG;






typedef struct tagSTATPROPSETSTG {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
} STATPROPSETSTG;







extern "C" const GUID IID_IPropertyStorage;

struct
IPropertyStorage : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) ReadMultiple(
        ULONG cpspec,
        const PROPSPEC rgpspec[],
        PROPVARIANT rgpropvar[]) = 0;

    virtual HRESULT __attribute__((__stdcall__)) WriteMultiple(
        ULONG cpspec,
        const PROPSPEC rgpspec[],
        const PROPVARIANT rgpropvar[],
        PROPID propidNameFirst) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DeleteMultiple(
        ULONG cpspec,
        const PROPSPEC rgpspec[]) = 0;

    virtual HRESULT __attribute__((__stdcall__)) ReadPropertyNames(
        ULONG cpropid,
        const PROPID rgpropid[],
        LPOLESTR rglpwstrName[]) = 0;

    virtual HRESULT __attribute__((__stdcall__)) WritePropertyNames(
        ULONG cpropid,
        const PROPID rgpropid[],
        const LPOLESTR rglpwstrName[]) = 0;

    virtual HRESULT __attribute__((__stdcall__)) DeletePropertyNames(
        ULONG cpropid,
        const PROPID rgpropid[]) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Commit(
        DWORD grfCommitFlags) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Revert(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Enum(
        IEnumSTATPROPSTG **ppenum) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetTimes(
        const FILETIME *pctime,
        const FILETIME *patime,
        const FILETIME *pmtime) = 0;

    virtual HRESULT __attribute__((__stdcall__)) SetClass(
        const IID & clsid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Stat(
        STATPROPSETSTG *pstatpsstg) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPropertyStorage>() { static const IID __uuid_inst = {0x00000138,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPropertyStorage*>() { return __mingw_uuidof<IPropertyStorage>(); } }
HRESULT __attribute__((__stdcall__)) IPropertyStorage_ReadMultiple_Proxy(
    IPropertyStorage* This,
    ULONG cpspec,
    const PROPSPEC rgpspec[],
    PROPVARIANT rgpropvar[]);
void __attribute__((__stdcall__)) IPropertyStorage_ReadMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_WriteMultiple_Proxy(
    IPropertyStorage* This,
    ULONG cpspec,
    const PROPSPEC rgpspec[],
    const PROPVARIANT rgpropvar[],
    PROPID propidNameFirst);
void __attribute__((__stdcall__)) IPropertyStorage_WriteMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_DeleteMultiple_Proxy(
    IPropertyStorage* This,
    ULONG cpspec,
    const PROPSPEC rgpspec[]);
void __attribute__((__stdcall__)) IPropertyStorage_DeleteMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_ReadPropertyNames_Proxy(
    IPropertyStorage* This,
    ULONG cpropid,
    const PROPID rgpropid[],
    LPOLESTR rglpwstrName[]);
void __attribute__((__stdcall__)) IPropertyStorage_ReadPropertyNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_WritePropertyNames_Proxy(
    IPropertyStorage* This,
    ULONG cpropid,
    const PROPID rgpropid[],
    const LPOLESTR rglpwstrName[]);
void __attribute__((__stdcall__)) IPropertyStorage_WritePropertyNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_DeletePropertyNames_Proxy(
    IPropertyStorage* This,
    ULONG cpropid,
    const PROPID rgpropid[]);
void __attribute__((__stdcall__)) IPropertyStorage_DeletePropertyNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_Commit_Proxy(
    IPropertyStorage* This,
    DWORD grfCommitFlags);
void __attribute__((__stdcall__)) IPropertyStorage_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_Revert_Proxy(
    IPropertyStorage* This);
void __attribute__((__stdcall__)) IPropertyStorage_Revert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_Enum_Proxy(
    IPropertyStorage* This,
    IEnumSTATPROPSTG **ppenum);
void __attribute__((__stdcall__)) IPropertyStorage_Enum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_SetTimes_Proxy(
    IPropertyStorage* This,
    const FILETIME *pctime,
    const FILETIME *patime,
    const FILETIME *pmtime);
void __attribute__((__stdcall__)) IPropertyStorage_SetTimes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_SetClass_Proxy(
    IPropertyStorage* This,
    const IID & clsid);
void __attribute__((__stdcall__)) IPropertyStorage_SetClass_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertyStorage_Stat_Proxy(
    IPropertyStorage* This,
    STATPROPSETSTG *pstatpsstg);
void __attribute__((__stdcall__)) IPropertyStorage_Stat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;

extern "C" const GUID IID_IPropertySetStorage;

struct
IPropertySetStorage : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Create(
        const IID & rfmtid,
        const CLSID *pclsid,
        DWORD grfFlags,
        DWORD grfMode,
        IPropertyStorage **ppprstg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Open(
        const IID & rfmtid,
        DWORD grfMode,
        IPropertyStorage **ppprstg) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Delete(
        const IID & rfmtid) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Enum(
        IEnumSTATPROPSETSTG **ppenum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IPropertySetStorage>() { static const IID __uuid_inst = {0x0000013a,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IPropertySetStorage*>() { return __mingw_uuidof<IPropertySetStorage>(); } }
HRESULT __attribute__((__stdcall__)) IPropertySetStorage_Create_Proxy(
    IPropertySetStorage* This,
    const IID & rfmtid,
    const CLSID *pclsid,
    DWORD grfFlags,
    DWORD grfMode,
    IPropertyStorage **ppprstg);
void __attribute__((__stdcall__)) IPropertySetStorage_Create_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertySetStorage_Open_Proxy(
    IPropertySetStorage* This,
    const IID & rfmtid,
    DWORD grfMode,
    IPropertyStorage **ppprstg);
void __attribute__((__stdcall__)) IPropertySetStorage_Open_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertySetStorage_Delete_Proxy(
    IPropertySetStorage* This,
    const IID & rfmtid);
void __attribute__((__stdcall__)) IPropertySetStorage_Delete_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IPropertySetStorage_Enum_Proxy(
    IPropertySetStorage* This,
    IEnumSTATPROPSETSTG **ppenum);
void __attribute__((__stdcall__)) IPropertySetStorage_Enum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;

extern "C" const GUID IID_IEnumSTATPROPSTG;

struct
IEnumSTATPROPSTG : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Next(
        ULONG celt,
        STATPROPSTG *rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Skip(
        ULONG celt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IEnumSTATPROPSTG **ppenum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEnumSTATPROPSTG>() { static const IID __uuid_inst = {0x00000139,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEnumSTATPROPSTG*>() { return __mingw_uuidof<IEnumSTATPROPSTG>(); } }
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_RemoteNext_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_Skip_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumSTATPROPSTG_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_Reset_Proxy(
    IEnumSTATPROPSTG* This);
void __attribute__((__stdcall__)) IEnumSTATPROPSTG_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_Clone_Proxy(
    IEnumSTATPROPSTG* This,
    IEnumSTATPROPSTG **ppenum);
void __attribute__((__stdcall__)) IEnumSTATPROPSTG_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSTG_Next_Stub(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;

extern "C" const GUID IID_IEnumSTATPROPSETSTG;

struct
IEnumSTATPROPSETSTG : public IUnknown
{
    virtual HRESULT __attribute__((__stdcall__)) Next(
        ULONG celt,
        STATPROPSETSTG *rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Skip(
        ULONG celt) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Reset(
        ) = 0;

    virtual HRESULT __attribute__((__stdcall__)) Clone(
        IEnumSTATPROPSETSTG **ppenum) = 0;

};

extern "C++" { template<> inline const GUID &__mingw_uuidof<IEnumSTATPROPSETSTG>() { static const IID __uuid_inst = {0x0000013b,0x0000,0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}}; return __uuid_inst; } template<> inline const GUID &__mingw_uuidof<IEnumSTATPROPSETSTG*>() { return __mingw_uuidof<IEnumSTATPROPSETSTG>(); } }
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_RemoteNext_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);
void __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Skip_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt);
void __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Reset_Proxy(
    IEnumSTATPROPSETSTG* This);
void __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Clone_Proxy(
    IEnumSTATPROPSETSTG* This,
    IEnumSTATPROPSETSTG **ppenum);
void __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);
HRESULT __attribute__((__stdcall__)) IEnumSTATPROPSETSTG_Next_Stub(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);




typedef IPropertyStorage *LPPROPERTYSTORAGE;

  extern "C" HRESULT __attribute__((__stdcall__)) PropVariantCopy(PROPVARIANT *pvarDest,const PROPVARIANT *pvarSrc);
  extern "C" HRESULT __attribute__((__stdcall__)) PropVariantClear(PROPVARIANT *pvar);
  extern "C" HRESULT __attribute__((__stdcall__)) FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars);



inline void PropVariantInit (PROPVARIANT *pvar) { memset (pvar, 0, sizeof (PROPVARIANT)); }





  extern "C" HRESULT __attribute__((__stdcall__)) StgCreatePropStg(IUnknown *pUnk, const IID & fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg);
  extern "C" HRESULT __attribute__((__stdcall__)) StgOpenPropStg(IUnknown *pUnk, const IID & fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg);
  extern "C" HRESULT __attribute__((__stdcall__)) StgCreatePropSetStg(IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg);



  extern "C" HRESULT __attribute__((__stdcall__)) FmtIdToPropStgName(const FMTID *pfmtid, LPOLESTR oszName);
  extern "C" HRESULT __attribute__((__stdcall__)) PropStgNameToFmtId(const LPOLESTR oszName, FMTID *pfmtid);




typedef struct tagSERIALIZEDPROPERTYVALUE {
  DWORD dwType;
  BYTE rgb[1];
} SERIALIZEDPROPERTYVALUE;




extern "C" SERIALIZEDPROPERTYVALUE * __attribute__((__stdcall__)) StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect);


class PMemoryAllocator;

extern "C" BOOLEAN __attribute__((__stdcall__)) StgConvertPropertyToVariant(const SERIALIZEDPROPERTYVALUE *pprop, USHORT CodePage, PROPVARIANT *pvar, PMemoryAllocator *pma);





ULONG __attribute__((__stdcall__)) BSTR_UserSize (ULONG *, ULONG, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserMarshal (ULONG *, unsigned char *, BSTR *);
unsigned char * __attribute__((__stdcall__)) BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void __attribute__((__stdcall__)) BSTR_UserFree (ULONG *, BSTR *);
ULONG __attribute__((__stdcall__)) LPSAFEARRAY_UserSize (ULONG *, ULONG, LPSAFEARRAY *);
unsigned char * __attribute__((__stdcall__)) LPSAFEARRAY_UserMarshal (ULONG *, unsigned char *, LPSAFEARRAY *);
unsigned char * __attribute__((__stdcall__)) LPSAFEARRAY_UserUnmarshal(ULONG *, unsigned char *, LPSAFEARRAY *);
void __attribute__((__stdcall__)) LPSAFEARRAY_UserFree (ULONG *, LPSAFEARRAY *);




}





extern "C" HRESULT __attribute__((__stdcall__)) CreateStdProgressIndicator (HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc);
#pragma pack(pop)
#pragma pack(push,8)
extern "C" const IID IID_StdOle;
extern "C" BSTR __attribute__((__stdcall__)) SysAllocString(const OLECHAR *);
extern "C" INT __attribute__((__stdcall__)) SysReAllocString(BSTR *,const OLECHAR *);
extern "C" BSTR __attribute__((__stdcall__)) SysAllocStringLen(const OLECHAR *,UINT);
extern "C" INT __attribute__((__stdcall__)) SysReAllocStringLen(BSTR *,const OLECHAR *,UINT);
extern "C" void __attribute__((__stdcall__)) SysFreeString(BSTR);
extern "C" UINT __attribute__((__stdcall__)) SysStringLen(BSTR);
extern "C" UINT __attribute__((__stdcall__)) SysStringByteLen(BSTR bstr);
extern "C" BSTR __attribute__((__stdcall__)) SysAllocStringByteLen(LPCSTR psz,UINT len);
extern "C" INT __attribute__((__stdcall__)) DosDateTimeToVariantTime(USHORT wDosDate,USHORT wDosTime,DOUBLE *pvtime);
extern "C" INT __attribute__((__stdcall__)) VariantTimeToDosDateTime(DOUBLE vtime,USHORT *pwDosDate,USHORT *pwDosTime);
extern "C" INT __attribute__((__stdcall__)) SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime,DOUBLE *pvtime);
extern "C" INT __attribute__((__stdcall__)) VariantTimeToSystemTime(DOUBLE vtime,LPSYSTEMTIME lpSystemTime);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayAllocDescriptor(UINT cDims,SAFEARRAY **ppsaOut);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayAllocDescriptorEx(VARTYPE vt,UINT cDims,SAFEARRAY **ppsaOut);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayAllocData(SAFEARRAY *psa);
extern "C" SAFEARRAY * __attribute__((__stdcall__)) SafeArrayCreate(VARTYPE vt,UINT cDims,SAFEARRAYBOUND *rgsabound);
extern "C" SAFEARRAY * __attribute__((__stdcall__)) SafeArrayCreateEx(VARTYPE vt,UINT cDims,SAFEARRAYBOUND *rgsabound,PVOID pvExtra);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayCopyData(SAFEARRAY *psaSource,SAFEARRAY *psaTarget);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayDestroyDescriptor(SAFEARRAY *psa);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayDestroyData(SAFEARRAY *psa);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayDestroy(SAFEARRAY *psa);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayRedim(SAFEARRAY *psa,SAFEARRAYBOUND *psaboundNew);
extern "C" UINT __attribute__((__stdcall__)) SafeArrayGetDim(SAFEARRAY *psa);
extern "C" UINT __attribute__((__stdcall__)) SafeArrayGetElemsize(SAFEARRAY *psa);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayGetUBound(SAFEARRAY *psa,UINT nDim,LONG *plUbound);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayGetLBound(SAFEARRAY *psa,UINT nDim,LONG *plLbound);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayLock(SAFEARRAY *psa);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayUnlock(SAFEARRAY *psa);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayAccessData(SAFEARRAY *psa,void **ppvData);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayUnaccessData(SAFEARRAY *psa);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayGetElement(SAFEARRAY *psa,LONG *rgIndices,void *pv);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayPutElement(SAFEARRAY *psa,LONG *rgIndices,void *pv);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayCopy(SAFEARRAY *psa,SAFEARRAY **ppsaOut);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayPtrOfIndex(SAFEARRAY *psa,LONG *rgIndices,void **ppvData);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArraySetRecordInfo(SAFEARRAY *psa,IRecordInfo *prinfo);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayGetRecordInfo(SAFEARRAY *psa,IRecordInfo **prinfo);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArraySetIID(SAFEARRAY *psa,const GUID & guid);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayGetIID(SAFEARRAY *psa,GUID *pguid);
extern "C" HRESULT __attribute__((__stdcall__)) SafeArrayGetVartype(SAFEARRAY *psa,VARTYPE *pvt);
extern "C" SAFEARRAY * __attribute__((__stdcall__)) SafeArrayCreateVector(VARTYPE vt,LONG lLbound,ULONG cElements);
extern "C" SAFEARRAY * __attribute__((__stdcall__)) SafeArrayCreateVectorEx(VARTYPE vt,LONG lLbound,ULONG cElements,PVOID pvExtra);
extern "C" void __attribute__((__stdcall__)) VariantInit(VARIANTARG *pvarg);
extern "C" HRESULT __attribute__((__stdcall__)) VariantClear(VARIANTARG *pvarg);
extern "C" HRESULT __attribute__((__stdcall__)) VariantCopy(VARIANTARG *pvargDest,VARIANTARG *pvargSrc);
extern "C" HRESULT __attribute__((__stdcall__)) VariantCopyInd(VARIANT *pvarDest,VARIANTARG *pvargSrc);
extern "C" HRESULT __attribute__((__stdcall__)) VariantChangeType(VARIANTARG *pvargDest,VARIANTARG *pvarSrc,USHORT wFlags,VARTYPE vt);
extern "C" HRESULT __attribute__((__stdcall__)) VariantChangeTypeEx(VARIANTARG *pvargDest,VARIANTARG *pvarSrc,LCID lcid,USHORT wFlags,VARTYPE vt);
extern "C" HRESULT __attribute__((__stdcall__)) VectorFromBstr (BSTR bstr,SAFEARRAY **ppsa);
extern "C" HRESULT __attribute__((__stdcall__)) BstrFromVector (SAFEARRAY *psa,BSTR *pbstr);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromI2(SHORT sIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromI4(LONG lIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromI8(LONG64 i64In,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromR4(FLOAT fltIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromR8(DOUBLE dblIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromCy(CY cyIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromDate(DATE dateIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromDisp(IDispatch *pdispIn,LCID lcid,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromBool(VARIANT_BOOL boolIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromI1(CHAR cIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromUI2(USHORT uiIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromUI4(ULONG ulIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromUI8(ULONG64 ui64In,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI1FromDec(DECIMAL *pdecIn,BYTE *pbOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromUI1(BYTE bIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromI4(LONG lIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromI8(LONG64 i64In,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromR4(FLOAT fltIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromR8(DOUBLE dblIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromCy(CY cyIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromDate(DATE dateIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromDisp(IDispatch *pdispIn,LCID lcid,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromBool(VARIANT_BOOL boolIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromI1(CHAR cIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromUI2(USHORT uiIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromUI4(ULONG ulIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromUI8(ULONG64 ui64In,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI2FromDec(DECIMAL *pdecIn,SHORT *psOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromUI1(BYTE bIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromI2(SHORT sIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromI8(LONG64 i64In,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromR4(FLOAT fltIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromR8(DOUBLE dblIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromCy(CY cyIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromDate(DATE dateIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromDisp(IDispatch *pdispIn,LCID lcid,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromBool(VARIANT_BOOL boolIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromI1(CHAR cIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromUI2(USHORT uiIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromUI4(ULONG ulIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromUI8(ULONG64 ui64In,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromDec(DECIMAL *pdecIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromInt(INT intIn,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromUI1(BYTE bIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromI2(SHORT sIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromI4(LONG lIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromR4(FLOAT fltIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromR8(DOUBLE dblIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromCy(CY cyIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromDate(DATE dateIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromStr(OLECHAR *strIn,LCID lcid,unsigned long dwFlags,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromDisp(IDispatch *pdispIn,LCID lcid,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromBool(VARIANT_BOOL boolIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromI1(CHAR cIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromUI2(USHORT uiIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromUI4(ULONG ulIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromUI8(ULONG64 ui64In,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromDec(DECIMAL *pdecIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarI8FromInt(INT intIn,LONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromUI1(BYTE bIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromI2(SHORT sIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromI4(LONG lIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromI8(LONG64 i64In,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromR8(DOUBLE dblIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromCy(CY cyIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromDate(DATE dateIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromDisp(IDispatch *pdispIn,LCID lcid,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromBool(VARIANT_BOOL boolIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromI1(CHAR cIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromUI2(USHORT uiIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromUI4(ULONG ulIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromUI8(ULONG64 ui64In,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4FromDec(DECIMAL *pdecIn,FLOAT *pfltOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromUI1(BYTE bIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromI2(SHORT sIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromI4(LONG lIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromI8(LONG64 i64In,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromR4(FLOAT fltIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromCy(CY cyIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromDate(DATE dateIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromDisp(IDispatch *pdispIn,LCID lcid,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromBool(VARIANT_BOOL boolIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromI1(CHAR cIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromUI2(USHORT uiIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromUI4(ULONG ulIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromUI8(ULONG64 ui64In,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8FromDec(DECIMAL *pdecIn,DOUBLE *pdblOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromUI1(BYTE bIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromI2(SHORT sIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromI4(LONG lIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromI8(LONG64 i64In,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromR4(FLOAT fltIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromR8(DOUBLE dblIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromCy(CY cyIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromDisp(IDispatch *pdispIn,LCID lcid,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromBool(VARIANT_BOOL boolIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromI1(CHAR cIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromUI2(USHORT uiIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromUI4(ULONG ulIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromUI8(ULONG64 ui64In,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromDec(DECIMAL *pdecIn,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromUI1(BYTE bIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromI2(SHORT sIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromI4(LONG lIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromI8(LONG64 i64In,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromR4(FLOAT fltIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromR8(DOUBLE dblIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromDate(DATE dateIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromDisp(IDispatch *pdispIn,LCID lcid,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromBool(VARIANT_BOOL boolIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromI1(CHAR cIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromUI2(USHORT uiIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromUI4(ULONG ulIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromUI8(ULONG64 ui64In,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFromDec(DECIMAL *pdecIn,CY *pcyOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromUI1(BYTE bVal,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromI2(SHORT iVal,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromI4(LONG lIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromI8(LONG64 i64In,LCID lcid,unsigned long dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromR4(FLOAT fltIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromR8(DOUBLE dblIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromCy(CY cyIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromDate(DATE dateIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromDisp(IDispatch *pdispIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromBool(VARIANT_BOOL boolIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromI1(CHAR cIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromUI2(USHORT uiIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromUI4(ULONG ulIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromUI8(ULONG64 ui64In,LCID lcid,unsigned long dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrFromDec(DECIMAL *pdecIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromUI1(BYTE bIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromI2(SHORT sIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromI4(LONG lIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromI8(LONG64 i64In,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromR4(FLOAT fltIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromR8(DOUBLE dblIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromDate(DATE dateIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromCy(CY cyIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromDisp(IDispatch *pdispIn,LCID lcid,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromI1(CHAR cIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromUI2(USHORT uiIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromUI4(ULONG ulIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromUI8(ULONG64 i64In,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarBoolFromDec(DECIMAL *pdecIn,VARIANT_BOOL *pboolOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromUI1(BYTE bIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromI2(SHORT uiIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromI4(LONG lIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromI8(LONG64 i64In,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromR4(FLOAT fltIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromR8(DOUBLE dblIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromDate(DATE dateIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromCy(CY cyIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromDisp(IDispatch *pdispIn,LCID lcid,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromBool(VARIANT_BOOL boolIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromUI2(USHORT uiIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromUI4(ULONG ulIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromUI8(ULONG64 i64In,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI1FromDec(DECIMAL *pdecIn,CHAR *pcOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromUI1(BYTE bIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromI2(SHORT uiIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromI4(LONG lIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromI8(LONG64 i64In,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromR4(FLOAT fltIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromR8(DOUBLE dblIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromDate(DATE dateIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromCy(CY cyIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromDisp(IDispatch *pdispIn,LCID lcid,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromBool(VARIANT_BOOL boolIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromI1(CHAR cIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromUI4(ULONG ulIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromUI8(ULONG64 i64In,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI2FromDec(DECIMAL *pdecIn,USHORT *puiOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromUI1(BYTE bIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromI2(SHORT uiIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromI4(LONG lIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromI8(LONG64 i64In,ULONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromR4(FLOAT fltIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromR8(DOUBLE dblIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromDate(DATE dateIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromCy(CY cyIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromDisp(IDispatch *pdispIn,LCID lcid,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromBool(VARIANT_BOOL boolIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromI1(CHAR cIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromUI2(USHORT uiIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromUI8(ULONG64 ui64In,ULONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI4FromDec(DECIMAL *pdecIn,ULONG *pulOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromUI1(BYTE bIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromI2(SHORT sIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromI4(LONG lIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromI8(LONG64 ui64In,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromR4(FLOAT fltIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromR8(DOUBLE dblIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromCy(CY cyIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromDate(DATE dateIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromStr(OLECHAR *strIn,LCID lcid,unsigned long dwFlags,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromDisp(IDispatch *pdispIn,LCID lcid,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromBool(VARIANT_BOOL boolIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromI1(CHAR cIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromUI2(USHORT uiIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromUI4(ULONG ulIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromDec(DECIMAL *pdecIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarUI8FromInt(INT intIn,ULONG64 *pi64Out);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromUI1(BYTE bIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromI2(SHORT uiIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromI4(LONG lIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromI8(LONG64 i64In,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromR4(FLOAT fltIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromR8(DOUBLE dblIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromDate(DATE dateIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromCy(CY cyIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromDisp(IDispatch *pdispIn,LCID lcid,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromBool(VARIANT_BOOL boolIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromI1(CHAR cIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromUI2(USHORT uiIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromUI4(ULONG ulIn,DECIMAL *pdecOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFromUI8(ULONG64 ui64In,DECIMAL *pdecOut);




extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromI8(LONG64 i64In,LONG *plOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarI4FromUI8(ULONG64 ui64In,LONG *plOut);
typedef struct {
  INT cDig;
  ULONG dwInFlags;
  ULONG dwOutFlags;
  INT cchUsed;
  INT nBaseShift;
  INT nPwr10;
} NUMPARSE;
extern "C" HRESULT __attribute__((__stdcall__)) VarParseNumFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,NUMPARSE *pnumprs,BYTE *rgbDig);
extern "C" HRESULT __attribute__((__stdcall__)) VarNumFromParseNum(NUMPARSE *pnumprs,BYTE *rgbDig,ULONG dwVtBits,VARIANT *pvar);
extern "C" HRESULT __attribute__((__stdcall__)) VarAdd(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarAnd(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCat(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarDiv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarEqv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarIdiv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarImp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarMod(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarMul(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarOr(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarPow(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarSub(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarXor(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarAbs(LPVARIANT pvarIn,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarFix(LPVARIANT pvarIn,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarInt(LPVARIANT pvarIn,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarNeg(LPVARIANT pvarIn,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarNot(LPVARIANT pvarIn,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarRound(LPVARIANT pvarIn,int cDecimals,LPVARIANT pvarResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCmp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LCID lcid,ULONG dwFlags);


extern "C++" {
  static __inline HRESULT __attribute__((__stdcall__)) VarCmp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LCID lcid) { return VarCmp(pvarLeft,pvarRight,lcid,0); }
}


extern "C" HRESULT __attribute__((__stdcall__)) VarDecAdd(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecDiv(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecMul(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecSub(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecAbs(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecFix(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecInt(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecNeg(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecRound(LPDECIMAL pdecIn,int cDecimals,LPDECIMAL pdecResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecCmp(LPDECIMAL pdecLeft,LPDECIMAL pdecRight);
extern "C" HRESULT __attribute__((__stdcall__)) VarDecCmpR8(LPDECIMAL pdecLeft,double dblRight);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyAdd(CY cyLeft,CY cyRight,LPCY pcyResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyMul(CY cyLeft,CY cyRight,LPCY pcyResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyMulI4(CY cyLeft,long lRight,LPCY pcyResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyMulI8(CY cyLeft,LONG64 lRight,LPCY pcyResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCySub(CY cyLeft,CY cyRight,LPCY pcyResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyAbs(CY cyIn,LPCY pcyResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyFix(CY cyIn,LPCY pcyResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyInt(CY cyIn,LPCY pcyResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyNeg(CY cyIn,LPCY pcyResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyRound(CY cyIn,int cDecimals,LPCY pcyResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyCmp(CY cyLeft,CY cyRight);
extern "C" HRESULT __attribute__((__stdcall__)) VarCyCmpR8(CY cyLeft,double dblRight);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrCat(BSTR bstrLeft,BSTR bstrRight,LPBSTR pbstrResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarBstrCmp(BSTR bstrLeft,BSTR bstrRight,LCID lcid,ULONG dwFlags);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8Pow(double dblLeft,double dblRight,double *pdblResult);
extern "C" HRESULT __attribute__((__stdcall__)) VarR4CmpR8(float fltLeft,double dblRight);
extern "C" HRESULT __attribute__((__stdcall__)) VarR8Round(double dblIn,int cDecimals,double *pdblResult);
typedef struct {
  SYSTEMTIME st;
  USHORT wDayOfYear;
} UDATE;

extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromUdate(UDATE *pudateIn,ULONG dwFlags,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarDateFromUdateEx(UDATE *pudateIn,LCID lcid,ULONG dwFlags,DATE *pdateOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarUdateFromDate(DATE dateIn,ULONG dwFlags,UDATE *pudateOut);
extern "C" HRESULT __attribute__((__stdcall__)) GetAltMonthNames(LCID lcid,LPOLESTR **prgp);
extern "C" HRESULT __attribute__((__stdcall__)) VarFormat(LPVARIANT pvarIn,LPOLESTR pstrFormat,int iFirstDay,int iFirstWeek,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarFormatDateTime(LPVARIANT pvarIn,int iNamedFormat,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarFormatNumber(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarFormatPercent(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarFormatCurrency(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarWeekdayName(int iWeekday,int fAbbrev,int iFirstDay,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarMonthName(int iMonth,int fAbbrev,ULONG dwFlags,BSTR *pbstrOut);
extern "C" HRESULT __attribute__((__stdcall__)) VarFormatFromTokens(LPVARIANT pvarIn,LPOLESTR pstrFormat,LPBYTE pbTokCur,ULONG dwFlags,BSTR *pbstrOut,LCID lcid);
extern "C" HRESULT __attribute__((__stdcall__)) VarTokenizeFormatString(LPOLESTR pstrFormat,LPBYTE rgbTok,int cbTok,int iFirstDay,int iFirstWeek,LCID lcid,int *pcbActual);



typedef ITypeLib *LPTYPELIB;



typedef LONG DISPID;
typedef DISPID MEMBERID;
typedef ITypeInfo *LPTYPEINFO;



typedef ITypeComp *LPTYPECOMP;



typedef ICreateTypeLib *LPCREATETYPELIB;



typedef ICreateTypeInfo *LPCREATETYPEINFO;


extern "C" ULONG __attribute__((__stdcall__)) LHashValOfNameSysA(SYSKIND syskind,LCID lcid,LPCSTR szName);
extern "C" ULONG __attribute__((__stdcall__)) LHashValOfNameSys(SYSKIND syskind,LCID lcid,const OLECHAR *szName);





extern "C" HRESULT __attribute__((__stdcall__)) LoadTypeLib(const OLECHAR *szFile,ITypeLib **pptlib);

typedef enum tagREGKIND {
  REGKIND_DEFAULT,REGKIND_REGISTER,REGKIND_NONE
} REGKIND;





extern "C" HRESULT __attribute__((__stdcall__)) LoadTypeLibEx(LPCOLESTR szFile,REGKIND regkind,ITypeLib **pptlib);
extern "C" HRESULT __attribute__((__stdcall__)) LoadRegTypeLib(const GUID & rguid,WORD wVerMajor,WORD wVerMinor,LCID lcid,ITypeLib **pptlib);
extern "C" HRESULT __attribute__((__stdcall__)) QueryPathOfRegTypeLib(const GUID & guid,USHORT wMaj,USHORT wMin,LCID lcid,LPBSTR lpbstrPathName);
extern "C" HRESULT __attribute__((__stdcall__)) RegisterTypeLib(ITypeLib *ptlib,OLECHAR *szFullPath,OLECHAR *szHelpDir);
extern "C" HRESULT __attribute__((__stdcall__)) UnRegisterTypeLib(const GUID & libID,WORD wVerMajor,WORD wVerMinor,LCID lcid,SYSKIND syskind);
extern "C" HRESULT __attribute__((__stdcall__)) CreateTypeLib(SYSKIND syskind,const OLECHAR *szFile,ICreateTypeLib **ppctlib);
extern "C" HRESULT __attribute__((__stdcall__)) CreateTypeLib2(SYSKIND syskind,LPCOLESTR szFile,ICreateTypeLib2 **ppctlib);



typedef IDispatch *LPDISPATCH;


typedef struct tagPARAMDATA {
  OLECHAR *szName;
  VARTYPE vt;
} PARAMDATA,*LPPARAMDATA;

typedef struct tagMETHODDATA {
  OLECHAR *szName;
  PARAMDATA *ppdata;
  DISPID dispid;
  UINT iMeth;
  CALLCONV cc;
  UINT cArgs;
  WORD wFlags;
  VARTYPE vtReturn;
} METHODDATA,*LPMETHODDATA;

typedef struct tagINTERFACEDATA {
  METHODDATA *pmethdata;
  UINT cMembers;
} INTERFACEDATA,*LPINTERFACEDATA;

extern "C" HRESULT __attribute__((__stdcall__)) DispGetParam(DISPPARAMS *pdispparams,UINT position,VARTYPE vtTarg,VARIANT *pvarResult,UINT *puArgErr);
extern "C" HRESULT __attribute__((__stdcall__)) DispGetIDsOfNames(ITypeInfo *ptinfo,OLECHAR **rgszNames,UINT cNames,DISPID *rgdispid);
extern "C" HRESULT __attribute__((__stdcall__)) DispInvoke(void *_this,ITypeInfo *ptinfo,DISPID dispidMember,WORD wFlags,DISPPARAMS *pparams,VARIANT *pvarResult,EXCEPINFO *pexcepinfo,UINT *puArgErr);
extern "C" HRESULT __attribute__((__stdcall__)) CreateDispTypeInfo(INTERFACEDATA *pidata,LCID lcid,ITypeInfo **pptinfo);
extern "C" HRESULT __attribute__((__stdcall__)) CreateStdDispatch(IUnknown *punkOuter,void *pvThis,ITypeInfo *ptinfo,IUnknown **ppunkStdDisp);
extern "C" HRESULT __attribute__((__stdcall__)) DispCallFunc(void *pvInstance,ULONG_PTR oVft,CALLCONV cc,VARTYPE vtReturn,UINT cActuals,VARTYPE *prgvt,VARIANTARG **prgpvarg,VARIANT *pvargResult);




extern "C" HRESULT __attribute__((__stdcall__)) RegisterActiveObject(IUnknown *punk,const IID & rclsid,DWORD dwFlags,DWORD *pdwRegister);
extern "C" HRESULT __attribute__((__stdcall__)) RevokeActiveObject(DWORD dwRegister,void *pvReserved);
extern "C" HRESULT __attribute__((__stdcall__)) GetActiveObject(const IID & rclsid,void *pvReserved,IUnknown **ppunk);
extern "C" HRESULT __attribute__((__stdcall__)) SetErrorInfo(ULONG dwReserved,IErrorInfo *perrinfo);
extern "C" HRESULT __attribute__((__stdcall__)) GetErrorInfo(ULONG dwReserved,IErrorInfo **pperrinfo);
extern "C" HRESULT __attribute__((__stdcall__)) CreateErrorInfo(ICreateErrorInfo **pperrinfo);
extern "C" HRESULT __attribute__((__stdcall__)) GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo,IRecordInfo **ppRecInfo);
extern "C" HRESULT __attribute__((__stdcall__)) GetRecordInfoFromGuids(const GUID & rGuidTypeLib,ULONG uVerMajor,ULONG uVerMinor,LCID lcid,const GUID & rGuidTypeInfo,IRecordInfo **ppRecInfo);
extern "C" ULONG __attribute__((__stdcall__)) OaBuildVersion(void);
extern "C" void __attribute__((__stdcall__)) ClearCustData(LPCUSTDATA pCustData);
#pragma pack(pop)
extern "C" DWORD __attribute__((__stdcall__)) OleBuildVersion (void);

extern "C" HRESULT __attribute__((__stdcall__)) CreateDataAdviseHolder (LPDATAADVISEHOLDER *ppDAHolder);




extern "C" HRESULT __attribute__((__stdcall__)) ReadClassStg (LPSTORAGE pStg, CLSID *pclsid);
extern "C" HRESULT __attribute__((__stdcall__)) WriteClassStg (LPSTORAGE pStg, const IID & rclsid);
extern "C" HRESULT __attribute__((__stdcall__)) ReadClassStm (LPSTREAM pStm, CLSID *pclsid);
extern "C" HRESULT __attribute__((__stdcall__)) WriteClassStm (LPSTREAM pStm, const IID & rclsid);



extern "C" HRESULT __attribute__((__stdcall__)) WriteFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
extern "C" HRESULT __attribute__((__stdcall__)) ReadFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType);
extern "C" HRESULT __attribute__((__stdcall__)) OleInitialize (LPVOID pvReserved);
extern "C" void __attribute__((__stdcall__)) OleUninitialize (void);
extern "C" HRESULT __attribute__((__stdcall__)) OleQueryLinkFromData (LPDATAOBJECT pSrcDataObject);
extern "C" HRESULT __attribute__((__stdcall__)) OleQueryCreateFromData (LPDATAOBJECT pSrcDataObject);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreate (const IID & rclsid, const IID & riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateEx (const IID & rclsid, const IID & riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateFromData (LPDATAOBJECT pSrcDataObj, const IID & riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateFromDataEx (LPDATAOBJECT pSrcDataObj, const IID & riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateLinkFromData (LPDATAOBJECT pSrcDataObj, const IID & riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateLinkFromDataEx (LPDATAOBJECT pSrcDataObj, const IID & riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateStaticFromData (LPDATAOBJECT pSrcDataObj, const IID & iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateLink (LPMONIKER pmkLinkSrc, const IID & riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateLinkEx (LPMONIKER pmkLinkSrc, const IID & riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateLinkToFile (LPCOLESTR lpszFileName, const IID & riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateLinkToFileEx (LPCOLESTR lpszFileName, const IID & riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateFromFile (const IID & rclsid, LPCOLESTR lpszFileName, const IID & riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateFromFileEx (const IID & rclsid, LPCOLESTR lpszFileName, const IID & riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleLoad (LPSTORAGE pStg, const IID & riid, LPOLECLIENTSITE pClientSite, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleSave (LPPERSISTSTORAGE pPS, LPSTORAGE pStg, WINBOOL fSameAsLoad);
extern "C" HRESULT __attribute__((__stdcall__)) OleLoadFromStream (LPSTREAM pStm, const IID & iidInterface, LPVOID *ppvObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleSaveToStream (LPPERSISTSTREAM pPStm, LPSTREAM pStm);
extern "C" HRESULT __attribute__((__stdcall__)) OleSetContainedObject (LPUNKNOWN pUnknown, WINBOOL fContained);
extern "C" HRESULT __attribute__((__stdcall__)) OleNoteObjectVisible (LPUNKNOWN pUnknown, WINBOOL fVisible);
extern "C" HRESULT __attribute__((__stdcall__)) RegisterDragDrop (HWND hwnd, LPDROPTARGET pDropTarget);
extern "C" HRESULT __attribute__((__stdcall__)) RevokeDragDrop (HWND hwnd);
extern "C" HRESULT __attribute__((__stdcall__)) DoDragDrop (LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect);
extern "C" HRESULT __attribute__((__stdcall__)) OleSetClipboard (LPDATAOBJECT pDataObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleGetClipboard (LPDATAOBJECT *ppDataObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleFlushClipboard (void);
extern "C" HRESULT __attribute__((__stdcall__)) OleIsCurrentClipboard (LPDATAOBJECT pDataObj);
extern "C" HOLEMENU __attribute__((__stdcall__)) OleCreateMenuDescriptor (HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern "C" HRESULT __attribute__((__stdcall__)) OleSetMenuDescriptor (HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleDestroyMenuDescriptor (HOLEMENU holemenu);
extern "C" HRESULT __attribute__((__stdcall__)) OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);
extern "C" HANDLE __attribute__((__stdcall__)) OleDuplicateData (HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags);
extern "C" HRESULT __attribute__((__stdcall__)) OleDraw (LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds);
extern "C" HRESULT __attribute__((__stdcall__)) OleRun (LPUNKNOWN pUnknown);
extern "C" WINBOOL __attribute__((__stdcall__)) OleIsRunning (LPOLEOBJECT pObject);
extern "C" HRESULT __attribute__((__stdcall__)) OleLockRunning (LPUNKNOWN pUnknown, WINBOOL fLock, WINBOOL fLastUnlockCloses);
extern "C" void __attribute__((__stdcall__)) ReleaseStgMedium (LPSTGMEDIUM);
extern "C" HRESULT __attribute__((__stdcall__)) CreateOleAdviseHolder (LPOLEADVISEHOLDER *ppOAHolder);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateDefaultHandler (const IID & clsid, LPUNKNOWN pUnkOuter, const IID & riid, LPVOID *lplpObj);
extern "C" HRESULT __attribute__((__stdcall__)) OleCreateEmbeddingHelper (const IID & clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID & riid, LPVOID *lplpObj);
extern "C" WINBOOL __attribute__((__stdcall__)) IsAccelerator (HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD *lpwCmd);
extern "C" HGLOBAL __attribute__((__stdcall__)) OleGetIconOfFile (LPOLESTR lpszPath, WINBOOL fUseFileAsLabel);
extern "C" HGLOBAL __attribute__((__stdcall__)) OleGetIconOfClass (const IID & rclsid, LPOLESTR lpszLabel, WINBOOL fUseTypeAsLabel);
extern "C" HGLOBAL __attribute__((__stdcall__)) OleMetafilePictFromIconAndLabel (HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex);
extern "C" HRESULT __attribute__((__stdcall__)) OleRegGetUserType (const IID & clsid, DWORD dwFormOfType, LPOLESTR *pszUserType);
extern "C" HRESULT __attribute__((__stdcall__)) OleRegGetMiscStatus (const IID & clsid, DWORD dwAspect, DWORD *pdwStatus);
extern "C" HRESULT __attribute__((__stdcall__)) OleRegEnumFormatEtc (const IID & clsid, DWORD dwDirection, LPENUMFORMATETC *ppenum);
extern "C" HRESULT __attribute__((__stdcall__)) OleRegEnumVerbs (const IID & clsid, LPENUMOLEVERB *ppenum);

typedef struct _OLESTREAM *LPOLESTREAM;

typedef struct _OLESTREAMVTBL {
  DWORD (__attribute__((__stdcall__)) *Get) (LPOLESTREAM, void *, DWORD);
  DWORD (__attribute__((__stdcall__)) *Put) (LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef OLESTREAMVTBL *LPOLESTREAMVTBL;

typedef struct _OLESTREAM {
  LPOLESTREAMVTBL lpstbl;
} OLESTREAM;

extern "C" HRESULT __attribute__((__stdcall__)) OleConvertOLESTREAMToIStorage (LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd);
extern "C" HRESULT __attribute__((__stdcall__)) OleConvertIStorageToOLESTREAM (LPSTORAGE pstg, LPOLESTREAM lpolestream);



extern "C" HRESULT __attribute__((__stdcall__)) GetHGlobalFromILockBytes (LPLOCKBYTES plkbyt, HGLOBAL *phglobal);
extern "C" HRESULT __attribute__((__stdcall__)) CreateILockBytesOnHGlobal (HGLOBAL hGlobal, WINBOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt);



extern "C" HRESULT __attribute__((__stdcall__)) OleDoAutoConvert (LPSTORAGE pStg, LPCLSID pClsidNew);
extern "C" HRESULT __attribute__((__stdcall__)) OleGetAutoConvert (const IID & clsidOld, LPCLSID pClsidNew);
extern "C" HRESULT __attribute__((__stdcall__)) OleSetAutoConvert (const IID & clsidOld, const IID & clsidNew);



extern "C" HRESULT __attribute__((__stdcall__)) GetConvertStg (LPSTORAGE pStg);



extern "C" HRESULT __attribute__((__stdcall__)) SetConvertStg (LPSTORAGE pStg, WINBOOL fConvert);
extern "C" HRESULT __attribute__((__stdcall__)) OleConvertIStorageToOLESTREAMEx (LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm);
extern "C" HRESULT __attribute__((__stdcall__)) OleConvertOLESTREAMToIStorageEx (LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium);
#pragma pack(pop)
extern "C" const GUID GUID_DEVINTERFACE_DISK;
extern "C" const GUID GUID_DEVINTERFACE_CDROM;
extern "C" const GUID GUID_DEVINTERFACE_PARTITION;
extern "C" const GUID GUID_DEVINTERFACE_TAPE;
extern "C" const GUID GUID_DEVINTERFACE_WRITEONCEDISK;
extern "C" const GUID GUID_DEVINTERFACE_VOLUME;
extern "C" const GUID GUID_DEVINTERFACE_MEDIUMCHANGER;
extern "C" const GUID GUID_DEVINTERFACE_FLOPPY;
extern "C" const GUID GUID_DEVINTERFACE_CDCHANGER;
extern "C" const GUID GUID_DEVINTERFACE_STORAGEPORT;
extern "C" const GUID GUID_DEVINTERFACE_COMPORT;
extern "C" const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;
extern "C" {
typedef struct _STORAGE_READ_CAPACITY {
  ULONG Version;
  ULONG Size;
  ULONG BlockLength;
  LARGE_INTEGER NumberOfBlocks;
  LARGE_INTEGER DiskLength;
} STORAGE_READ_CAPACITY, *PSTORAGE_READ_CAPACITY;
  typedef struct _STORAGE_HOTPLUG_INFO {
    DWORD Size;
    BOOLEAN MediaRemovable;
    BOOLEAN MediaHotplug;
    BOOLEAN DeviceHotplug;
    BOOLEAN WriteCacheEnableOverride;
  } STORAGE_HOTPLUG_INFO,*PSTORAGE_HOTPLUG_INFO;

  typedef struct _STORAGE_DEVICE_NUMBER {
    DWORD DeviceType;
    DWORD DeviceNumber;
    DWORD PartitionNumber;
  } STORAGE_DEVICE_NUMBER,*PSTORAGE_DEVICE_NUMBER;

  typedef struct _STORAGE_BUS_RESET_REQUEST {
    BYTE PathId;
  } STORAGE_BUS_RESET_REQUEST,*PSTORAGE_BUS_RESET_REQUEST;

  typedef struct STORAGE_BREAK_RESERVATION_REQUEST {
    DWORD Length;
    BYTE _unused;
    BYTE PathId;
    BYTE TargetId;
    BYTE Lun;
  } STORAGE_BREAK_RESERVATION_REQUEST,*PSTORAGE_BREAK_RESERVATION_REQUEST;

  typedef struct _PREVENT_MEDIA_REMOVAL {
    BOOLEAN PreventMediaRemoval;
  } PREVENT_MEDIA_REMOVAL,*PPREVENT_MEDIA_REMOVAL;

  typedef struct _CLASS_MEDIA_CHANGE_CONTEXT {
    DWORD MediaChangeCount;
    DWORD NewState;
  } CLASS_MEDIA_CHANGE_CONTEXT,*PCLASS_MEDIA_CHANGE_CONTEXT;

  typedef struct _TAPE_STATISTICS {
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER RecoveredWrites;
    LARGE_INTEGER UnrecoveredWrites;
    LARGE_INTEGER RecoveredReads;
    LARGE_INTEGER UnrecoveredReads;
    BYTE CompressionRatioReads;
    BYTE CompressionRatioWrites;
  } TAPE_STATISTICS,*PTAPE_STATISTICS;
  typedef struct _TAPE_GET_STATISTICS {
    DWORD Operation;
  } TAPE_GET_STATISTICS,*PTAPE_GET_STATISTICS;





  typedef enum _STORAGE_MEDIA_TYPE {
    DDS_4mm = 0x20,
    MiniQic,
    Travan,
    QIC,
    MP_8mm,
    AME_8mm,
    AIT1_8mm,
    DLT,
    NCTP,
    IBM_3480,
    IBM_3490E,
    IBM_Magstar_3590,
    IBM_Magstar_MP,
    STK_DATA_D3,
    SONY_DTF,
    DV_6mm,
    DMI,
    SONY_D2,
    CLEANER_CARTRIDGE,
    CD_ROM,
    CD_R,
    CD_RW,
    DVD_ROM,
    DVD_R,
    DVD_RW,
    MO_3_RW,
    MO_5_WO,
    MO_5_RW,
    MO_5_LIMDOW,
    PC_5_WO,
    PC_5_RW,
    PD_5_RW,
    ABL_5_WO,
    PINNACLE_APEX_5_RW,
    SONY_12_WO,
    PHILIPS_12_WO,
    HITACHI_12_WO,
    CYGNET_12_WO,
    KODAK_14_WO,
    MO_NFR_525,
    NIKON_12_RW,
    IOMEGA_ZIP,
    IOMEGA_JAZ,
    SYQUEST_EZ135,
    SYQUEST_EZFLYER,
    SYQUEST_SYJET,
    AVATAR_F2,
    MP2_8mm,
    DST_S,
    DST_M,
    DST_L,
    VXATape_1,
    VXATape_2,
    STK_9840,
    LTO_Ultrium,
    LTO_Accelis,
    DVD_RAM,
    AIT_8mm,
    ADR_1,
    ADR_2,
    STK_9940,
    SAIT,
    VXATape
  } STORAGE_MEDIA_TYPE, *PSTORAGE_MEDIA_TYPE;
  typedef enum _STORAGE_BUS_TYPE {
    BusTypeUnknown = 0x00,
    BusTypeScsi = 0x1,
    BusTypeAtapi = 0x2,
    BusTypeAta = 0x3,
    BusType1394 = 0x4,
    BusTypeSsa = 0x5,
    BusTypeFibre = 0x6,
    BusTypeUsb = 0x7,
    BusTypeRAID = 0x8,
    BusTypeMax,
    BusTypeMaxReserved = 0x7F
  } STORAGE_BUS_TYPE, *PSTORAGE_BUS_TYPE;

  typedef struct _DEVICE_MEDIA_INFO {
    union {
      struct {
 LARGE_INTEGER Cylinders;
 STORAGE_MEDIA_TYPE MediaType;
 DWORD TracksPerCylinder;
 DWORD SectorsPerTrack;
 DWORD BytesPerSector;
 DWORD NumberMediaSides;
 DWORD MediaCharacteristics;
      } DiskInfo;
      struct {
 LARGE_INTEGER Cylinders;
 STORAGE_MEDIA_TYPE MediaType;
 DWORD TracksPerCylinder;
 DWORD SectorsPerTrack;
 DWORD BytesPerSector;
 DWORD NumberMediaSides;
 DWORD MediaCharacteristics;
      } RemovableDiskInfo;
      struct {
 STORAGE_MEDIA_TYPE MediaType;
 DWORD MediaCharacteristics;
 DWORD CurrentBlockSize;
 STORAGE_BUS_TYPE BusType;
 union {
   struct {
     BYTE MediumType;
     BYTE DensityCode;
   } ScsiInformation;
 } BusSpecificData;
      } TapeInfo;
    } DeviceSpecific;
  } DEVICE_MEDIA_INFO,*PDEVICE_MEDIA_INFO;

  typedef struct _GET_MEDIA_TYPES {
    DWORD DeviceType;
    DWORD MediaInfoCount;
    DEVICE_MEDIA_INFO MediaInfo[1];
  } GET_MEDIA_TYPES,*PGET_MEDIA_TYPES;

  typedef struct _STORAGE_PREDICT_FAILURE {
    DWORD PredictFailure;
    BYTE VendorSpecific[512];
  } STORAGE_PREDICT_FAILURE,*PSTORAGE_PREDICT_FAILURE;


}
typedef enum _MEDIA_TYPE {
  Unknown,F5_1Pt2_512,F3_1Pt44_512,F3_2Pt88_512,F3_20Pt8_512,F3_720_512,F5_360_512,F5_320_512,F5_320_1024,F5_180_512,F5_160_512,
  RemovableMedia,FixedMedia,F3_120M_512,F3_640_512,F5_640_512,F5_720_512,F3_1Pt2_512,F3_1Pt23_1024,F5_1Pt23_1024,F3_128Mb_512,
  F3_230Mb_512,F8_256_128,F3_200Mb_512,F3_240M_512,F3_32M_512
} MEDIA_TYPE,*PMEDIA_TYPE;

typedef struct _FORMAT_PARAMETERS {
  MEDIA_TYPE MediaType;
  DWORD StartCylinderNumber;
  DWORD EndCylinderNumber;
  DWORD StartHeadNumber;
  DWORD EndHeadNumber;
} FORMAT_PARAMETERS,*PFORMAT_PARAMETERS;

typedef WORD BAD_TRACK_NUMBER;
typedef WORD *PBAD_TRACK_NUMBER;

typedef struct _FORMAT_EX_PARAMETERS {
  MEDIA_TYPE MediaType;
  DWORD StartCylinderNumber;
  DWORD EndCylinderNumber;
  DWORD StartHeadNumber;
  DWORD EndHeadNumber;
  WORD FormatGapLength;
  WORD SectorsPerTrack;
  WORD SectorNumber[1];
} FORMAT_EX_PARAMETERS,*PFORMAT_EX_PARAMETERS;

typedef struct _DISK_GEOMETRY {
  LARGE_INTEGER Cylinders;
  MEDIA_TYPE MediaType;
  DWORD TracksPerCylinder;
  DWORD SectorsPerTrack;
  DWORD BytesPerSector;
} DISK_GEOMETRY,*PDISK_GEOMETRY;



typedef struct _PARTITION_INFORMATION {
  LARGE_INTEGER StartingOffset;
  LARGE_INTEGER PartitionLength;
  DWORD HiddenSectors;
  DWORD PartitionNumber;
  BYTE PartitionType;
  BOOLEAN BootIndicator;
  BOOLEAN RecognizedPartition;
  BOOLEAN RewritePartition;
} PARTITION_INFORMATION,*PPARTITION_INFORMATION;

typedef struct _SET_PARTITION_INFORMATION {
  BYTE PartitionType;
} SET_PARTITION_INFORMATION,*PSET_PARTITION_INFORMATION;

typedef struct _DRIVE_LAYOUT_INFORMATION {
  DWORD PartitionCount;
  DWORD Signature;
  PARTITION_INFORMATION PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION,*PDRIVE_LAYOUT_INFORMATION;

typedef struct _VERIFY_INFORMATION {
  LARGE_INTEGER StartingOffset;
  DWORD Length;
} VERIFY_INFORMATION,*PVERIFY_INFORMATION;

typedef struct _REASSIGN_BLOCKS {
  WORD Reserved;
  WORD Count;
  DWORD BlockNumber[1];
} REASSIGN_BLOCKS,*PREASSIGN_BLOCKS;
#pragma pack(push,1)

typedef struct _REASSIGN_BLOCKS_EX {
  WORD Reserved;
  WORD Count;
  LARGE_INTEGER BlockNumber[1];
} REASSIGN_BLOCKS_EX,*PREASSIGN_BLOCKS_EX;
#pragma pack(pop)


typedef enum _PARTITION_STYLE {
  PARTITION_STYLE_MBR,PARTITION_STYLE_GPT,PARTITION_STYLE_RAW
} PARTITION_STYLE;

typedef struct _PARTITION_INFORMATION_GPT {
  GUID PartitionType;
  GUID PartitionId;
  DWORD64 Attributes;
  WCHAR Name [36];
} PARTITION_INFORMATION_GPT,*PPARTITION_INFORMATION_GPT;
typedef struct _PARTITION_INFORMATION_MBR {
  BYTE PartitionType;
  BOOLEAN BootIndicator;
  BOOLEAN RecognizedPartition;
  DWORD HiddenSectors;
} PARTITION_INFORMATION_MBR,*PPARTITION_INFORMATION_MBR;

typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;

typedef struct _SET_PARTITION_INFORMATION_EX {
  PARTITION_STYLE PartitionStyle;
  __extension__ union {
    SET_PARTITION_INFORMATION_MBR Mbr;
    SET_PARTITION_INFORMATION_GPT Gpt;
  } ;
} SET_PARTITION_INFORMATION_EX,*PSET_PARTITION_INFORMATION_EX;

typedef struct _CREATE_DISK_GPT {
  GUID DiskId;
  DWORD MaxPartitionCount;
} CREATE_DISK_GPT,*PCREATE_DISK_GPT;

typedef struct _CREATE_DISK_MBR {
  DWORD Signature;
} CREATE_DISK_MBR,*PCREATE_DISK_MBR;

typedef struct _CREATE_DISK {
  PARTITION_STYLE PartitionStyle;
  __extension__ union {
    CREATE_DISK_MBR Mbr;
    CREATE_DISK_GPT Gpt;
  } ;
} CREATE_DISK,*PCREATE_DISK;

typedef struct _GET_LENGTH_INFORMATION {
  LARGE_INTEGER Length;
} GET_LENGTH_INFORMATION,*PGET_LENGTH_INFORMATION;

typedef struct _PARTITION_INFORMATION_EX {
  PARTITION_STYLE PartitionStyle;
  LARGE_INTEGER StartingOffset;
  LARGE_INTEGER PartitionLength;
  DWORD PartitionNumber;
  BOOLEAN RewritePartition;
  __extension__ union {
    PARTITION_INFORMATION_MBR Mbr;
    PARTITION_INFORMATION_GPT Gpt;
  } ;
} PARTITION_INFORMATION_EX,*PPARTITION_INFORMATION_EX;

typedef struct _DRIVE_LAYOUT_INFORMATION_GPT {
  GUID DiskId;
  LARGE_INTEGER StartingUsableOffset;
  LARGE_INTEGER UsableLength;
  DWORD MaxPartitionCount;
} DRIVE_LAYOUT_INFORMATION_GPT,*PDRIVE_LAYOUT_INFORMATION_GPT;

typedef struct _DRIVE_LAYOUT_INFORMATION_MBR {
  DWORD Signature;
} DRIVE_LAYOUT_INFORMATION_MBR,*PDRIVE_LAYOUT_INFORMATION_MBR;

typedef struct _DRIVE_LAYOUT_INFORMATION_EX {
  DWORD PartitionStyle;
  DWORD PartitionCount;
  __extension__ union {
    DRIVE_LAYOUT_INFORMATION_MBR Mbr;
    DRIVE_LAYOUT_INFORMATION_GPT Gpt;
  } ;
  PARTITION_INFORMATION_EX PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION_EX,*PDRIVE_LAYOUT_INFORMATION_EX;

typedef enum _DETECTION_TYPE {
  DetectNone,DetectInt13,DetectExInt13
} DETECTION_TYPE;

typedef struct _DISK_INT13_INFO {
  WORD DriveSelect;
  DWORD MaxCylinders;
  WORD SectorsPerTrack;
  WORD MaxHeads;
  WORD NumberDrives;
} DISK_INT13_INFO,*PDISK_INT13_INFO;

typedef struct _DISK_EX_INT13_INFO {
  WORD ExBufferSize;
  WORD ExFlags;
  DWORD ExCylinders;
  DWORD ExHeads;
  DWORD ExSectorsPerTrack;
  DWORD64 ExSectorsPerDrive;
  WORD ExSectorSize;
  WORD ExReserved;
} DISK_EX_INT13_INFO,*PDISK_EX_INT13_INFO;

typedef struct _DISK_DETECTION_INFO {
  DWORD SizeOfDetectInfo;
  DETECTION_TYPE DetectionType;
  __extension__ union {
    __extension__ struct {
      DISK_INT13_INFO Int13;
      DISK_EX_INT13_INFO ExInt13;
    } ;
  } ;
} DISK_DETECTION_INFO,*PDISK_DETECTION_INFO;

typedef struct _DISK_PARTITION_INFO {
  DWORD SizeOfPartitionInfo;
  PARTITION_STYLE PartitionStyle;
  __extension__ union {
    struct {
      DWORD Signature;
      DWORD CheckSum;
    } Mbr;
    struct {
      GUID DiskId;
    } Gpt;
  } ;
} DISK_PARTITION_INFO,*PDISK_PARTITION_INFO;




typedef struct _DISK_GEOMETRY_EX {
  DISK_GEOMETRY Geometry;
  LARGE_INTEGER DiskSize;
  BYTE Data[1];
} DISK_GEOMETRY_EX,*PDISK_GEOMETRY_EX;

typedef struct _DISK_CONTROLLER_NUMBER {
  DWORD ControllerNumber;
  DWORD DiskNumber;
} DISK_CONTROLLER_NUMBER,*PDISK_CONTROLLER_NUMBER;

typedef enum {
  EqualPriority,KeepPrefetchedData,KeepReadData
} DISK_CACHE_RETENTION_PRIORITY;

typedef struct _DISK_CACHE_INFORMATION {
  BOOLEAN ParametersSavable;
  BOOLEAN ReadCacheEnabled;
  BOOLEAN WriteCacheEnabled;
  DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
  DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
  WORD DisablePrefetchTransferLength;
  BOOLEAN PrefetchScalar;
  __extension__ union {
    struct {
      WORD Minimum;
      WORD Maximum;
      WORD MaximumBlocks;
    } ScalarPrefetch;
    struct {
      WORD Minimum;
      WORD Maximum;
    } BlockPrefetch;
  } ;
} DISK_CACHE_INFORMATION,*PDISK_CACHE_INFORMATION;

typedef struct _DISK_GROW_PARTITION {
  DWORD PartitionNumber;
  LARGE_INTEGER BytesToGrow;
} DISK_GROW_PARTITION,*PDISK_GROW_PARTITION;



typedef struct _HISTOGRAM_BUCKET {
  DWORD Reads;
  DWORD Writes;
} HISTOGRAM_BUCKET,*PHISTOGRAM_BUCKET;



typedef struct _DISK_HISTOGRAM {
  LARGE_INTEGER DiskSize;
  LARGE_INTEGER Start;
  LARGE_INTEGER End;
  LARGE_INTEGER Average;
  LARGE_INTEGER AverageRead;
  LARGE_INTEGER AverageWrite;
  DWORD Granularity;
  DWORD Size;
  DWORD ReadCount;
  DWORD WriteCount;
  PHISTOGRAM_BUCKET Histogram;
} DISK_HISTOGRAM,*PDISK_HISTOGRAM;



typedef struct _DISK_PERFORMANCE {
  LARGE_INTEGER BytesRead;
  LARGE_INTEGER BytesWritten;
  LARGE_INTEGER ReadTime;
  LARGE_INTEGER WriteTime;
  LARGE_INTEGER IdleTime;
  DWORD ReadCount;
  DWORD WriteCount;
  DWORD QueueDepth;
  DWORD SplitCount;
  LARGE_INTEGER QueryTime;
  DWORD StorageDeviceNumber;
  WCHAR StorageManagerName[8];
} DISK_PERFORMANCE,*PDISK_PERFORMANCE;

typedef struct _DISK_RECORD {
  LARGE_INTEGER ByteOffset;
  LARGE_INTEGER StartTime;
  LARGE_INTEGER EndTime;
  PVOID VirtualAddress;
  DWORD NumberOfBytes;
  BYTE DeviceNumber;
  BOOLEAN ReadRequest;
} DISK_RECORD,*PDISK_RECORD;

typedef struct _DISK_LOGGING {
  BYTE Function;
  PVOID BufferAddress;
  DWORD BufferSize;
} DISK_LOGGING,*PDISK_LOGGING;






typedef enum _BIN_TYPES {
  RequestSize,RequestLocation
} BIN_TYPES;

typedef struct _BIN_RANGE {
  LARGE_INTEGER StartValue;
  LARGE_INTEGER Length;
} BIN_RANGE,*PBIN_RANGE;

typedef struct _PERF_BIN {
  DWORD NumberOfBins;
  DWORD TypeOfBin;
  BIN_RANGE BinsRanges[1];
} PERF_BIN,*PPERF_BIN;

typedef struct _BIN_COUNT {
  BIN_RANGE BinRange;
  DWORD BinCount;
} BIN_COUNT,*PBIN_COUNT;

typedef struct _BIN_RESULTS {
  DWORD NumberOfBins;
  BIN_COUNT BinCounts[1];
} BIN_RESULTS,*PBIN_RESULTS;
#pragma pack(push,1)

typedef struct _GETVERSIONINPARAMS {
  BYTE bVersion;
  BYTE bRevision;
  BYTE bReserved;
  BYTE bIDEDeviceMap;
  DWORD fCapabilities;
  DWORD dwReserved[4];
} GETVERSIONINPARAMS,*PGETVERSIONINPARAMS,*LPGETVERSIONINPARAMS;
#pragma pack(pop)
#pragma pack(push,1)

typedef struct _IDEREGS {
  BYTE bFeaturesReg;
  BYTE bSectorCountReg;
  BYTE bSectorNumberReg;
  BYTE bCylLowReg;
  BYTE bCylHighReg;
  BYTE bDriveHeadReg;
  BYTE bCommandReg;
  BYTE bReserved;
} IDEREGS,*PIDEREGS,*LPIDEREGS;
#pragma pack(pop)
#pragma pack(push,1)

typedef struct _SENDCMDINPARAMS {
  DWORD cBufferSize;
  IDEREGS irDriveRegs;
  BYTE bDriveNumber;
  BYTE bReserved[3];
  DWORD dwReserved[4];
  BYTE bBuffer[1];
} SENDCMDINPARAMS,*PSENDCMDINPARAMS,*LPSENDCMDINPARAMS;
#pragma pack(pop)
#pragma pack(push,1)

typedef struct _DRIVERSTATUS {
  BYTE bDriverError;
  BYTE bIDEError;
  BYTE bReserved[2];
  DWORD dwReserved[2];
} DRIVERSTATUS,*PDRIVERSTATUS,*LPDRIVERSTATUS;
#pragma pack(pop)
#pragma pack(push,1)

typedef struct _SENDCMDOUTPARAMS {
  DWORD cBufferSize;
  DRIVERSTATUS DriverStatus;
  BYTE bBuffer[1];
} SENDCMDOUTPARAMS,*PSENDCMDOUTPARAMS,*LPSENDCMDOUTPARAMS;
#pragma pack(pop)
typedef enum _ELEMENT_TYPE {
  AllElements,ChangerTransport,ChangerSlot,ChangerIEPort,ChangerDrive,ChangerDoor,ChangerKeypad,ChangerMaxElement
} ELEMENT_TYPE,*PELEMENT_TYPE;

typedef struct _CHANGER_ELEMENT {
  ELEMENT_TYPE ElementType;
  DWORD ElementAddress;
} CHANGER_ELEMENT,*PCHANGER_ELEMENT;

typedef struct _CHANGER_ELEMENT_LIST {
  CHANGER_ELEMENT Element;
  DWORD NumberOfElements;
} CHANGER_ELEMENT_LIST ,*PCHANGER_ELEMENT_LIST;
typedef struct _GET_CHANGER_PARAMETERS {
  DWORD Size;
  WORD NumberTransportElements;
  WORD NumberStorageElements;
  WORD NumberCleanerSlots;
  WORD NumberIEElements;
  WORD NumberDataTransferElements;
  WORD NumberOfDoors;
  WORD FirstSlotNumber;
  WORD FirstDriveNumber;
  WORD FirstTransportNumber;
  WORD FirstIEPortNumber;
  WORD FirstCleanerSlotAddress;
  WORD MagazineSize;
  DWORD DriveCleanTimeout;
  DWORD Features0;
  DWORD Features1;
  BYTE MoveFromTransport;
  BYTE MoveFromSlot;
  BYTE MoveFromIePort;
  BYTE MoveFromDrive;
  BYTE ExchangeFromTransport;
  BYTE ExchangeFromSlot;
  BYTE ExchangeFromIePort;
  BYTE ExchangeFromDrive;
  BYTE LockUnlockCapabilities;
  BYTE PositionCapabilities;
  BYTE Reserved1[2];
  DWORD Reserved2[2];
} GET_CHANGER_PARAMETERS,*PGET_CHANGER_PARAMETERS;

typedef struct _CHANGER_PRODUCT_DATA {
  BYTE VendorId[8];
  BYTE ProductId[16];
  BYTE Revision[4];
  BYTE SerialNumber[32];
  BYTE DeviceType;
} CHANGER_PRODUCT_DATA,*PCHANGER_PRODUCT_DATA;






typedef struct _CHANGER_SET_ACCESS {
  CHANGER_ELEMENT Element;
  DWORD Control;
} CHANGER_SET_ACCESS,*PCHANGER_SET_ACCESS;

typedef struct _CHANGER_READ_ELEMENT_STATUS {
  CHANGER_ELEMENT_LIST ElementList;
  BOOLEAN VolumeTagInfo;
} CHANGER_READ_ELEMENT_STATUS,*PCHANGER_READ_ELEMENT_STATUS;

typedef struct _CHANGER_ELEMENT_STATUS {
  CHANGER_ELEMENT Element;
  CHANGER_ELEMENT SrcElementAddress;
  DWORD Flags;
  DWORD ExceptionCode;
  BYTE TargetId;
  BYTE Lun;
  WORD Reserved;
  BYTE PrimaryVolumeID[36];
  BYTE AlternateVolumeID[36];
} CHANGER_ELEMENT_STATUS,*PCHANGER_ELEMENT_STATUS;

typedef struct _CHANGER_ELEMENT_STATUS_EX {
  CHANGER_ELEMENT Element;
  CHANGER_ELEMENT SrcElementAddress;
  DWORD Flags;
  DWORD ExceptionCode;
  BYTE TargetId;
  BYTE Lun;
  WORD Reserved;
  BYTE PrimaryVolumeID[36];
  BYTE AlternateVolumeID[36];
  BYTE VendorIdentification[8];
  BYTE ProductIdentification[16];
  BYTE SerialNumber[32];
} CHANGER_ELEMENT_STATUS_EX,*PCHANGER_ELEMENT_STATUS_EX;
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {
  CHANGER_ELEMENT_LIST ElementList;
  BOOLEAN BarCodeScan;
} CHANGER_INITIALIZE_ELEMENT_STATUS,*PCHANGER_INITIALIZE_ELEMENT_STATUS;

typedef struct _CHANGER_SET_POSITION {
  CHANGER_ELEMENT Transport;
  CHANGER_ELEMENT Destination;
  BOOLEAN Flip;
} CHANGER_SET_POSITION,*PCHANGER_SET_POSITION;

typedef struct _CHANGER_EXCHANGE_MEDIUM {
  CHANGER_ELEMENT Transport;
  CHANGER_ELEMENT Source;
  CHANGER_ELEMENT Destination1;
  CHANGER_ELEMENT Destination2;
  BOOLEAN Flip1;
  BOOLEAN Flip2;
} CHANGER_EXCHANGE_MEDIUM,*PCHANGER_EXCHANGE_MEDIUM;

typedef struct _CHANGER_MOVE_MEDIUM {
  CHANGER_ELEMENT Transport;
  CHANGER_ELEMENT Source;
  CHANGER_ELEMENT Destination;
  BOOLEAN Flip;
} CHANGER_MOVE_MEDIUM,*PCHANGER_MOVE_MEDIUM;

typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {
  CHANGER_ELEMENT StartingElement;
  DWORD ActionCode;
  BYTE VolumeIDTemplate[40];
} CHANGER_SEND_VOLUME_TAG_INFORMATION,*PCHANGER_SEND_VOLUME_TAG_INFORMATION;

typedef struct _READ_ELEMENT_ADDRESS_INFO {
  DWORD NumberOfElements;
  CHANGER_ELEMENT_STATUS ElementStatus[1];
} READ_ELEMENT_ADDRESS_INFO,*PREAD_ELEMENT_ADDRESS_INFO;
typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
  DeviceProblemNone,DeviceProblemHardware,DeviceProblemCHMError,DeviceProblemDoorOpen,DeviceProblemCalibrationError,DeviceProblemTargetFailure,
  DeviceProblemCHMMoveError,DeviceProblemCHMZeroError,DeviceProblemCartridgeInsertError,DeviceProblemPositionError,DeviceProblemSensorError,
  DeviceProblemCartridgeEjectError,DeviceProblemGripperError,DeviceProblemDriveError
} CHANGER_DEVICE_PROBLEM_TYPE,*PCHANGER_DEVICE_PROBLEM_TYPE;
typedef struct _PATHNAME_BUFFER {
  DWORD PathNameLength;
  WCHAR Name[1];
} PATHNAME_BUFFER,*PPATHNAME_BUFFER;

typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {
  BYTE First0x24BytesOfBootSector[0x24];
} FSCTL_QUERY_FAT_BPB_BUFFER,*PFSCTL_QUERY_FAT_BPB_BUFFER;

typedef struct {
  LARGE_INTEGER VolumeSerialNumber;
  LARGE_INTEGER NumberSectors;
  LARGE_INTEGER TotalClusters;
  LARGE_INTEGER FreeClusters;
  LARGE_INTEGER TotalReserved;
  DWORD BytesPerSector;
  DWORD BytesPerCluster;
  DWORD BytesPerFileRecordSegment;
  DWORD ClustersPerFileRecordSegment;
  LARGE_INTEGER MftValidDataLength;
  LARGE_INTEGER MftStartLcn;
  LARGE_INTEGER Mft2StartLcn;
  LARGE_INTEGER MftZoneStart;
  LARGE_INTEGER MftZoneEnd;
} NTFS_VOLUME_DATA_BUFFER,*PNTFS_VOLUME_DATA_BUFFER;

typedef struct {
  DWORD ByteCount;
  WORD MajorVersion;
  WORD MinorVersion;
} NTFS_EXTENDED_VOLUME_DATA,*PNTFS_EXTENDED_VOLUME_DATA;

typedef struct {
  LARGE_INTEGER StartingLcn;
} STARTING_LCN_INPUT_BUFFER,*PSTARTING_LCN_INPUT_BUFFER;

typedef struct {
  LARGE_INTEGER StartingLcn;
  LARGE_INTEGER BitmapSize;
  BYTE Buffer[1];
} VOLUME_BITMAP_BUFFER,*PVOLUME_BITMAP_BUFFER;

typedef struct {
  LARGE_INTEGER StartingVcn;
} STARTING_VCN_INPUT_BUFFER,*PSTARTING_VCN_INPUT_BUFFER;

typedef struct RETRIEVAL_POINTERS_BUFFER {
  DWORD ExtentCount;
  LARGE_INTEGER StartingVcn;
  struct {
    LARGE_INTEGER NextVcn;
    LARGE_INTEGER Lcn;
  } Extents[1];
} RETRIEVAL_POINTERS_BUFFER,*PRETRIEVAL_POINTERS_BUFFER;

typedef struct {
  LARGE_INTEGER FileReferenceNumber;
} NTFS_FILE_RECORD_INPUT_BUFFER,*PNTFS_FILE_RECORD_INPUT_BUFFER;

typedef struct {
  LARGE_INTEGER FileReferenceNumber;
  DWORD FileRecordLength;
  BYTE FileRecordBuffer[1];
} NTFS_FILE_RECORD_OUTPUT_BUFFER,*PNTFS_FILE_RECORD_OUTPUT_BUFFER;

typedef struct {
  HANDLE FileHandle;
  LARGE_INTEGER StartingVcn;
  LARGE_INTEGER StartingLcn;
  DWORD ClusterCount;
} MOVE_FILE_DATA,*PMOVE_FILE_DATA;
typedef struct {
  DWORD Restart;
  SID Sid;
} FIND_BY_SID_DATA,*PFIND_BY_SID_DATA;

typedef struct {
  DWORD NextEntryOffset;
  DWORD FileIndex;
  DWORD FileNameLength;
  WCHAR FileName[1];
} FIND_BY_SID_OUTPUT,*PFIND_BY_SID_OUTPUT;

typedef struct {
  DWORDLONG StartFileReferenceNumber;
  USN LowUsn;
  USN HighUsn;
} MFT_ENUM_DATA,*PMFT_ENUM_DATA;

typedef struct {
  DWORDLONG MaximumSize;
  DWORDLONG AllocationDelta;
} CREATE_USN_JOURNAL_DATA,*PCREATE_USN_JOURNAL_DATA;

typedef struct {
  USN StartUsn;
  DWORD ReasonMask;
  DWORD ReturnOnlyOnClose;
  DWORDLONG Timeout;
  DWORDLONG BytesToWaitFor;
  DWORDLONG UsnJournalID;
} READ_USN_JOURNAL_DATA,*PREAD_USN_JOURNAL_DATA;

typedef struct {
  DWORD RecordLength;
  WORD MajorVersion;
  WORD MinorVersion;
  DWORDLONG FileReferenceNumber;
  DWORDLONG ParentFileReferenceNumber;
  USN Usn;
  LARGE_INTEGER TimeStamp;
  DWORD Reason;
  DWORD SourceInfo;
  DWORD SecurityId;
  DWORD FileAttributes;
  WORD FileNameLength;
  WORD FileNameOffset;
  WCHAR FileName[1];
} USN_RECORD,*PUSN_RECORD;
typedef struct {
  DWORDLONG UsnJournalID;
  USN FirstUsn;
  USN NextUsn;
  USN LowestValidUsn;
  USN MaxUsn;
  DWORDLONG MaximumSize;
  DWORDLONG AllocationDelta;
} USN_JOURNAL_DATA,*PUSN_JOURNAL_DATA;

typedef struct {
  DWORDLONG UsnJournalID;
  DWORD DeleteFlags;
} DELETE_USN_JOURNAL_DATA,*PDELETE_USN_JOURNAL_DATA;






typedef struct {
  DWORD UsnSourceInfo;
  HANDLE VolumeHandle;
  DWORD HandleInfo;
} MARK_HANDLE_INFO,*PMARK_HANDLE_INFO;
typedef struct {
  ACCESS_MASK DesiredAccess;
  DWORD SecurityIds[1];
} BULK_SECURITY_TEST_DATA,*PBULK_SECURITY_TEST_DATA;




typedef struct _FILE_PREFETCH {
  DWORD Type;
  DWORD Count;
  DWORDLONG Prefetch[1];
} FILE_PREFETCH,*PFILE_PREFETCH;



typedef struct _FILESYSTEM_STATISTICS {
  WORD FileSystemType;
  WORD Version;
  DWORD SizeOfCompleteStructure;
  DWORD UserFileReads;
  DWORD UserFileReadBytes;
  DWORD UserDiskReads;
  DWORD UserFileWrites;
  DWORD UserFileWriteBytes;
  DWORD UserDiskWrites;
  DWORD MetaDataReads;
  DWORD MetaDataReadBytes;
  DWORD MetaDataDiskReads;
  DWORD MetaDataWrites;
  DWORD MetaDataWriteBytes;
  DWORD MetaDataDiskWrites;
} FILESYSTEM_STATISTICS,*PFILESYSTEM_STATISTICS;




typedef struct _FAT_STATISTICS {
  DWORD CreateHits;
  DWORD SuccessfulCreates;
  DWORD FailedCreates;
  DWORD NonCachedReads;
  DWORD NonCachedReadBytes;
  DWORD NonCachedWrites;
  DWORD NonCachedWriteBytes;
  DWORD NonCachedDiskReads;
  DWORD NonCachedDiskWrites;
} FAT_STATISTICS,*PFAT_STATISTICS;

typedef struct _EXFAT_STATISTICS {
  DWORD CreateHits;
  DWORD SuccessfulCreates;
  DWORD FailedCreates;
  DWORD NonCachedReads;
  DWORD NonCachedReadBytes;
  DWORD NonCachedWrites;
  DWORD NonCachedWriteBytes;
  DWORD NonCachedDiskReads;
  DWORD NonCachedDiskWrites;
} EXFAT_STATISTICS, *PEXFAT_STATISTICS;

typedef struct _NTFS_STATISTICS {
  DWORD LogFileFullExceptions;
  DWORD OtherExceptions;
  DWORD MftReads;
  DWORD MftReadBytes;
  DWORD MftWrites;
  DWORD MftWriteBytes;
  struct {
    WORD Write;
    WORD Create;
    WORD SetInfo;
    WORD Flush;
  } MftWritesUserLevel;
  WORD MftWritesFlushForLogFileFull;
  WORD MftWritesLazyWriter;
  WORD MftWritesUserRequest;
  DWORD Mft2Writes;
  DWORD Mft2WriteBytes;
  struct {
    WORD Write;
    WORD Create;
    WORD SetInfo;
    WORD Flush;
  } Mft2WritesUserLevel;
  WORD Mft2WritesFlushForLogFileFull;
  WORD Mft2WritesLazyWriter;
  WORD Mft2WritesUserRequest;
  DWORD RootIndexReads;
  DWORD RootIndexReadBytes;
  DWORD RootIndexWrites;
  DWORD RootIndexWriteBytes;
  DWORD BitmapReads;
  DWORD BitmapReadBytes;
  DWORD BitmapWrites;
  DWORD BitmapWriteBytes;
  WORD BitmapWritesFlushForLogFileFull;
  WORD BitmapWritesLazyWriter;
  WORD BitmapWritesUserRequest;
  struct {
    WORD Write;
    WORD Create;
    WORD SetInfo;
  } BitmapWritesUserLevel;
  DWORD MftBitmapReads;
  DWORD MftBitmapReadBytes;
  DWORD MftBitmapWrites;
  DWORD MftBitmapWriteBytes;
  WORD MftBitmapWritesFlushForLogFileFull;
  WORD MftBitmapWritesLazyWriter;
  WORD MftBitmapWritesUserRequest;
  struct {
    WORD Write;
    WORD Create;
    WORD SetInfo;
    WORD Flush;
  } MftBitmapWritesUserLevel;
  DWORD UserIndexReads;
  DWORD UserIndexReadBytes;
  DWORD UserIndexWrites;
  DWORD UserIndexWriteBytes;
  DWORD LogFileReads;
  DWORD LogFileReadBytes;
  DWORD LogFileWrites;
  DWORD LogFileWriteBytes;
  struct {
    DWORD Calls;
    DWORD Clusters;
    DWORD Hints;
    DWORD RunsReturned;
    DWORD HintsHonored;
    DWORD HintsClusters;
    DWORD Cache;
    DWORD CacheClusters;
    DWORD CacheMiss;
    DWORD CacheMissClusters;
  } Allocate;
} NTFS_STATISTICS,*PNTFS_STATISTICS;

typedef struct _FILE_OBJECTID_BUFFER {
  BYTE ObjectId[16];
  __extension__ union {
    __extension__ struct {
      BYTE BirthVolumeId[16];
      BYTE BirthObjectId[16];
      BYTE DomainId[16];
    } ;
    BYTE ExtendedInfo[48];
  } ;
} FILE_OBJECTID_BUFFER,*PFILE_OBJECTID_BUFFER;

typedef struct _FILE_SET_SPARSE_BUFFER {
  BOOLEAN SetSparse;
} FILE_SET_SPARSE_BUFFER,*PFILE_SET_SPARSE_BUFFER;

typedef struct _FILE_ZERO_DATA_INFORMATION {
  LARGE_INTEGER FileOffset;
  LARGE_INTEGER BeyondFinalZero;
} FILE_ZERO_DATA_INFORMATION,*PFILE_ZERO_DATA_INFORMATION;

typedef struct _FILE_ALLOCATED_RANGE_BUFFER {
  LARGE_INTEGER FileOffset;
  LARGE_INTEGER Length;
} FILE_ALLOCATED_RANGE_BUFFER,*PFILE_ALLOCATED_RANGE_BUFFER;

typedef struct _ENCRYPTION_BUFFER {
  DWORD EncryptionOperation;
  BYTE Private[1];
} ENCRYPTION_BUFFER,*PENCRYPTION_BUFFER;
typedef struct _DECRYPTION_STATUS_BUFFER {
  BOOLEAN NoEncryptedStreams;
} DECRYPTION_STATUS_BUFFER,*PDECRYPTION_STATUS_BUFFER;




typedef struct _REQUEST_RAW_ENCRYPTED_DATA {
  LONGLONG FileOffset;
  DWORD Length;
} REQUEST_RAW_ENCRYPTED_DATA,*PREQUEST_RAW_ENCRYPTED_DATA;

typedef struct _ENCRYPTED_DATA_INFO {
  DWORDLONG StartingFileOffset;
  DWORD OutputBufferOffset;
  DWORD BytesWithinFileSize;
  DWORD BytesWithinValidDataLength;
  WORD CompressionFormat;
  BYTE DataUnitShift;
  BYTE ChunkShift;
  BYTE ClusterShift;
  BYTE EncryptionFormat;
  WORD NumberOfDataBlocks;
  DWORD DataBlockSize[1];
} ENCRYPTED_DATA_INFO;
typedef ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO;

typedef struct _PLEX_READ_DATA_REQUEST {
  LARGE_INTEGER ByteOffset;
  DWORD ByteLength;
  DWORD PlexNumber;
} PLEX_READ_DATA_REQUEST,*PPLEX_READ_DATA_REQUEST;

typedef struct _SI_COPYFILE {
  DWORD SourceFileNameLength;
  DWORD DestinationFileNameLength;
  DWORD Flags;
  WCHAR FileNameBuffer[1];
} SI_COPYFILE,*PSI_COPYFILE;





typedef struct _STORAGE_DESCRIPTOR_HEADER {
  DWORD Version;
  DWORD Size;
} STORAGE_DESCRIPTOR_HEADER, *PSTORAGE_DESCRIPTOR_HEADER;

typedef enum _STORAGE_PROPERTY_ID {
  StorageDeviceProperty = 0,
  StorageAdapterProperty = 1,
  StorageDeviceIdProperty = 2,
  StorageDeviceUniqueIdProperty = 3,
  StorageDeviceWriteCacheProperty = 4,
  StorageMiniportProperty = 5,
  StorageAccessAlignmentProperty = 6,
  StorageDeviceSeekPenaltyProperty = 7,
  StorageDeviceTrimProperty = 8
} STORAGE_PROPERTY_ID, *PSTORAGE_PROPERTY_ID;

typedef enum _STORAGE_QUERY_TYPE {
  PropertyStandardQuery = 0,
  PropertyExistsQuery = 1,
  PropertyMaskQuery = 2,
  PropertyQueryMaxDefined = 3
} STORAGE_QUERY_TYPE, *PSTORAGE_QUERY_TYPE;

typedef struct _STORAGE_PROPERTY_QUERY {
  STORAGE_PROPERTY_ID PropertyId;
  STORAGE_QUERY_TYPE QueryType;
  BYTE AdditionalParameters[1];
} STORAGE_PROPERTY_QUERY, *PSTORAGE_PROPERTY_QUERY;

typedef struct _STORAGE_DEVICE_DESCRIPTOR {
  DWORD Version;
  DWORD Size;
  BYTE DeviceType;
  BYTE DeviceTypeModifier;
  BOOLEAN RemovableMedia;
  BOOLEAN CommandQueueing;
  DWORD VendorIdOffset;
  DWORD ProductIdOffset;
  DWORD ProductRevisionOffset;
  DWORD SerialNumberOffset;
  STORAGE_BUS_TYPE BusType;
  DWORD RawPropertiesLength;
  BYTE RawDeviceProperties[1];
} STORAGE_DEVICE_DESCRIPTOR, *PSTORAGE_DEVICE_DESCRIPTOR;

typedef struct _STORAGE_ADAPTER_DESCRIPTOR {
  DWORD Version;
  DWORD Size;
  DWORD MaximumTransferLength;
  DWORD MaximumPhysicalPages;
  DWORD AlignmentMask;
  BOOLEAN AdapterUsesPio;
  BOOLEAN AdapterScansDown;
  BOOLEAN CommandQueueing;
  BOOLEAN AcceleratedTransfer;
  BYTE BusType;
  WORD BusMajorVersion;
  WORD BusMinorVersion;
} STORAGE_ADAPTER_DESCRIPTOR, *PSTORAGE_ADAPTER_DESCRIPTOR;

typedef struct _STORAGE_DEVICE_ID_DESCRIPTOR {
  DWORD Version;
  DWORD Size;
  DWORD NumberOfIdentifiers;
  BYTE Identifiers[1];
} STORAGE_DEVICE_ID_DESCRIPTOR, *PSTORAGE_DEVICE_ID_DESCRIPTOR;

typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {
  ULONGLONG GptAttributes;
} VOLUME_GET_GPT_ATTRIBUTES_INFORMATION, *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
typedef struct _DISK_EXTENT {
  DWORD DiskNumber;
  LARGE_INTEGER StartingOffset;
  LARGE_INTEGER ExtentLength;
} DISK_EXTENT,*PDISK_EXTENT;

typedef struct _VOLUME_DISK_EXTENTS {
  DWORD NumberOfDiskExtents;
  DISK_EXTENT Extents[1];
} VOLUME_DISK_EXTENTS,*PVOLUME_DISK_EXTENTS;
extern "C" {
  typedef WORD UWORD;
  typedef struct _SCARD_IO_REQUEST {
    DWORD dwProtocol;
    DWORD cbPciLength;
  } SCARD_IO_REQUEST,*PSCARD_IO_REQUEST,*LPSCARD_IO_REQUEST;
  typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;

  typedef struct {
    BYTE
      bCla,bIns,bP1,bP2,bP3;
  } SCARD_T0_COMMAND,*LPSCARD_T0_COMMAND;

  typedef struct {
    SCARD_IO_REQUEST ioRequest;
    BYTE bSw1,bSw2;
    __extension__ union {
      SCARD_T0_COMMAND CmdBytes;
      BYTE rgbHeader[5];
    };
  } SCARD_T0_REQUEST;

  typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST,*LPSCARD_T0_REQUEST;

  typedef struct {
    SCARD_IO_REQUEST ioRequest;
  } SCARD_T1_REQUEST;
  typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST,*LPSCARD_T1_REQUEST;
}
extern "C" {




  typedef const BYTE *LPCBYTE;
  __attribute__((dllimport)) extern const SCARD_IO_REQUEST g_rgSCardT0Pci,g_rgSCardT1Pci,g_rgSCardRawPci;




  typedef ULONG_PTR SCARDCONTEXT;
  typedef SCARDCONTEXT *PSCARDCONTEXT,*LPSCARDCONTEXT;

  typedef ULONG_PTR SCARDHANDLE;
  typedef SCARDHANDLE *PSCARDHANDLE,*LPSCARDHANDLE;






  extern LONG __attribute__((__stdcall__)) SCardEstablishContext(DWORD dwScope,LPCVOID pvReserved1,LPCVOID pvReserved2,LPSCARDCONTEXT phContext);
  extern LONG __attribute__((__stdcall__)) SCardReleaseContext(SCARDCONTEXT hContext);
  extern LONG __attribute__((__stdcall__)) SCardIsValidContext(SCARDCONTEXT hContext);
  extern LONG __attribute__((__stdcall__)) SCardListReaderGroupsA(SCARDCONTEXT hContext,LPSTR mszGroups,LPDWORD pcchGroups);
  extern LONG __attribute__((__stdcall__)) SCardListReaderGroupsW(SCARDCONTEXT hContext,LPWSTR mszGroups,LPDWORD pcchGroups);
  extern LONG __attribute__((__stdcall__)) SCardListReadersA(SCARDCONTEXT hContext,LPCSTR mszGroups,LPSTR mszReaders,LPDWORD pcchReaders);
  extern LONG __attribute__((__stdcall__)) SCardListReadersW(SCARDCONTEXT hContext,LPCWSTR mszGroups,LPWSTR mszReaders,LPDWORD pcchReaders);
  extern LONG __attribute__((__stdcall__)) SCardListCardsA(SCARDCONTEXT hContext,LPCBYTE pbAtr,LPCGUID rgquidInterfaces,DWORD cguidInterfaceCount,LPSTR mszCards,LPDWORD pcchCards);
  extern LONG __attribute__((__stdcall__)) SCardListCardsW(SCARDCONTEXT hContext,LPCBYTE pbAtr,LPCGUID rgquidInterfaces,DWORD cguidInterfaceCount,LPWSTR mszCards,LPDWORD pcchCards);

  extern LONG __attribute__((__stdcall__)) SCardListInterfacesA(SCARDCONTEXT hContext,LPCSTR szCard,LPGUID pguidInterfaces,LPDWORD pcguidInterfaces);
  extern LONG __attribute__((__stdcall__)) SCardListInterfacesW(SCARDCONTEXT hContext,LPCWSTR szCard,LPGUID pguidInterfaces,LPDWORD pcguidInterfaces);
  extern LONG __attribute__((__stdcall__)) SCardGetProviderIdA(SCARDCONTEXT hContext,LPCSTR szCard,LPGUID pguidProviderId);
  extern LONG __attribute__((__stdcall__)) SCardGetProviderIdW(SCARDCONTEXT hContext,LPCWSTR szCard,LPGUID pguidProviderId);
  extern LONG __attribute__((__stdcall__)) SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext,LPCSTR szCardName,DWORD dwProviderId,LPSTR szProvider,LPDWORD pcchProvider);
  extern LONG __attribute__((__stdcall__)) SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext,LPCWSTR szCardName,DWORD dwProviderId,LPWSTR szProvider,LPDWORD pcchProvider);
  extern LONG __attribute__((__stdcall__)) SCardIntroduceReaderGroupA(SCARDCONTEXT hContext,LPCSTR szGroupName);
  extern LONG __attribute__((__stdcall__)) SCardIntroduceReaderGroupW(SCARDCONTEXT hContext,LPCWSTR szGroupName);
  extern LONG __attribute__((__stdcall__)) SCardForgetReaderGroupA(SCARDCONTEXT hContext,LPCSTR szGroupName);
  extern LONG __attribute__((__stdcall__)) SCardForgetReaderGroupW(SCARDCONTEXT hContext,LPCWSTR szGroupName);
  extern LONG __attribute__((__stdcall__)) SCardIntroduceReaderA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szDeviceName);
  extern LONG __attribute__((__stdcall__)) SCardIntroduceReaderW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szDeviceName);
  extern LONG __attribute__((__stdcall__)) SCardForgetReaderA(SCARDCONTEXT hContext,LPCSTR szReaderName);
  extern LONG __attribute__((__stdcall__)) SCardForgetReaderW(SCARDCONTEXT hContext,LPCWSTR szReaderName);
  extern LONG __attribute__((__stdcall__)) SCardAddReaderToGroupA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szGroupName);
  extern LONG __attribute__((__stdcall__)) SCardAddReaderToGroupW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szGroupName);
  extern LONG __attribute__((__stdcall__)) SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szGroupName);
  extern LONG __attribute__((__stdcall__)) SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szGroupName);
  extern LONG __attribute__((__stdcall__)) SCardIntroduceCardTypeA(SCARDCONTEXT hContext,LPCSTR szCardName,LPCGUID pguidPrimaryProvider,LPCGUID rgguidInterfaces,DWORD dwInterfaceCount,LPCBYTE pbAtr,LPCBYTE pbAtrMask,DWORD cbAtrLen);
  extern LONG __attribute__((__stdcall__)) SCardIntroduceCardTypeW(SCARDCONTEXT hContext,LPCWSTR szCardName,LPCGUID pguidPrimaryProvider,LPCGUID rgguidInterfaces,DWORD dwInterfaceCount,LPCBYTE pbAtr,LPCBYTE pbAtrMask,DWORD cbAtrLen);



  extern LONG __attribute__((__stdcall__)) SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext,LPCSTR szCardName,DWORD dwProviderId,LPCSTR szProvider);
  extern LONG __attribute__((__stdcall__)) SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext,LPCWSTR szCardName,DWORD dwProviderId,LPCWSTR szProvider);
  extern LONG __attribute__((__stdcall__)) SCardForgetCardTypeA(SCARDCONTEXT hContext,LPCSTR szCardName);
  extern LONG __attribute__((__stdcall__)) SCardForgetCardTypeW(SCARDCONTEXT hContext,LPCWSTR szCardName);
  extern LONG __attribute__((__stdcall__)) SCardFreeMemory(SCARDCONTEXT hContext,LPCVOID pvMem);
  extern HANDLE __attribute__((__stdcall__)) SCardAccessStartedEvent(void);
  extern void __attribute__((__stdcall__)) SCardReleaseStartedEvent(void);

  typedef struct {
    LPCSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE rgbAtr[36];
  } SCARD_READERSTATEA,*PSCARD_READERSTATEA,*LPSCARD_READERSTATEA;

  typedef struct {
    LPCWSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE rgbAtr[36];
  } SCARD_READERSTATEW,*PSCARD_READERSTATEW,*LPSCARD_READERSTATEW;

  typedef SCARD_READERSTATEW SCARD_READERSTATE;
  typedef PSCARD_READERSTATEW PSCARD_READERSTATE;
  typedef LPSCARD_READERSTATEW LPSCARD_READERSTATE;
  extern LONG __attribute__((__stdcall__)) SCardLocateCardsA(SCARDCONTEXT hContext,LPCSTR mszCards,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders);
  extern LONG __attribute__((__stdcall__)) SCardLocateCardsW(SCARDCONTEXT hContext,LPCWSTR mszCards,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders);

  typedef struct _SCARD_ATRMASK {
    DWORD cbAtr;
    BYTE rgbAtr[36];
    BYTE rgbMask[36];
  } SCARD_ATRMASK,*PSCARD_ATRMASK,*LPSCARD_ATRMASK;

  extern LONG __attribute__((__stdcall__)) SCardLocateCardsByATRA(SCARDCONTEXT hContext,LPSCARD_ATRMASK rgAtrMasks,DWORD cAtrs,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders);
  extern LONG __attribute__((__stdcall__)) SCardLocateCardsByATRW(SCARDCONTEXT hContext,LPSCARD_ATRMASK rgAtrMasks,DWORD cAtrs,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders);
  extern LONG __attribute__((__stdcall__)) SCardGetStatusChangeA(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders);
  extern LONG __attribute__((__stdcall__)) SCardGetStatusChangeW(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders);
  extern LONG __attribute__((__stdcall__)) SCardCancel(SCARDCONTEXT hContext);
  extern LONG __attribute__((__stdcall__)) SCardConnectA(SCARDCONTEXT hContext,LPCSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol);
  extern LONG __attribute__((__stdcall__)) SCardConnectW(SCARDCONTEXT hContext,LPCWSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol);
  extern LONG __attribute__((__stdcall__)) SCardReconnect(SCARDHANDLE hCard,DWORD dwShareMode,DWORD dwPreferredProtocols,DWORD dwInitialization,LPDWORD pdwActiveProtocol);
  extern LONG __attribute__((__stdcall__)) SCardDisconnect(SCARDHANDLE hCard,DWORD dwDisposition);
  extern LONG __attribute__((__stdcall__)) SCardBeginTransaction(SCARDHANDLE hCard);
  extern LONG __attribute__((__stdcall__)) SCardEndTransaction(SCARDHANDLE hCard,DWORD dwDisposition);
  extern LONG __attribute__((__stdcall__)) SCardCancelTransaction(SCARDHANDLE hCard);
  extern LONG __attribute__((__stdcall__)) SCardState(SCARDHANDLE hCard,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen);
  extern LONG __attribute__((__stdcall__)) SCardStatusA(SCARDHANDLE hCard,LPSTR szReaderName,LPDWORD pcchReaderLen,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen);
  extern LONG __attribute__((__stdcall__)) SCardStatusW(SCARDHANDLE hCard,LPWSTR szReaderName,LPDWORD pcchReaderLen,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen);
  extern LONG __attribute__((__stdcall__)) SCardTransmit(SCARDHANDLE hCard,LPCSCARD_IO_REQUEST pioSendPci,LPCBYTE pbSendBuffer,DWORD cbSendLength,LPSCARD_IO_REQUEST pioRecvPci,LPBYTE pbRecvBuffer,LPDWORD pcbRecvLength);
  extern LONG __attribute__((__stdcall__)) SCardControl(SCARDHANDLE hCard,DWORD dwControlCode,LPCVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned);
  extern LONG __attribute__((__stdcall__)) SCardGetAttrib(SCARDHANDLE hCard,DWORD dwAttrId,LPBYTE pbAttr,LPDWORD pcbAttrLen);



  extern LONG __attribute__((__stdcall__)) SCardSetAttrib(SCARDHANDLE hCard,DWORD dwAttrId,LPCBYTE pbAttr,DWORD cbAttrLen);
  typedef SCARDHANDLE (__attribute__((__stdcall__)) *LPOCNCONNPROCA) (SCARDCONTEXT,LPSTR,LPSTR,PVOID);
  typedef SCARDHANDLE (__attribute__((__stdcall__)) *LPOCNCONNPROCW) (SCARDCONTEXT,LPWSTR,LPWSTR,PVOID);
  typedef WINBOOL (__attribute__((__stdcall__)) *LPOCNCHKPROC) (SCARDCONTEXT,SCARDHANDLE,PVOID);
  typedef void (__attribute__((__stdcall__)) *LPOCNDSCPROC) (SCARDCONTEXT,SCARDHANDLE,PVOID);

  typedef struct {
    DWORD dwStructSize;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
  } OPENCARD_SEARCH_CRITERIAA,*POPENCARD_SEARCH_CRITERIAA,*LPOPENCARD_SEARCH_CRITERIAA;

  typedef struct {
    DWORD dwStructSize;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
  } OPENCARD_SEARCH_CRITERIAW,*POPENCARD_SEARCH_CRITERIAW,*LPOPENCARD_SEARCH_CRITERIAW;

  typedef OPENCARD_SEARCH_CRITERIAW OPENCARD_SEARCH_CRITERIA;
  typedef POPENCARD_SEARCH_CRITERIAW POPENCARD_SEARCH_CRITERIA;
  typedef LPOPENCARD_SEARCH_CRITERIAW LPOPENCARD_SEARCH_CRITERIA;

  typedef struct {
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCSTR lpstrTitle;
    LPCSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
    LPOCNCONNPROCA lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
  } OPENCARDNAME_EXA,*POPENCARDNAME_EXA,*LPOPENCARDNAME_EXA;

  typedef struct {
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCWSTR lpstrTitle;
    LPCWSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
    LPOCNCONNPROCW lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
  } OPENCARDNAME_EXW,*POPENCARDNAME_EXW,*LPOPENCARDNAME_EXW;

  typedef OPENCARDNAME_EXW OPENCARDNAME_EX;
  typedef POPENCARDNAME_EXW POPENCARDNAME_EX;
  typedef LPOPENCARDNAME_EXW LPOPENCARDNAME_EX;
  extern LONG __attribute__((__stdcall__)) SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA);
  extern LONG __attribute__((__stdcall__)) SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW);

  typedef struct {
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    LPCSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
  } OPENCARDNAMEA,*POPENCARDNAMEA,*LPOPENCARDNAMEA;

  typedef struct {
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    LPCWSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
  } OPENCARDNAMEW,*POPENCARDNAMEW,*LPOPENCARDNAMEW;

  typedef OPENCARDNAMEW OPENCARDNAME;
  typedef POPENCARDNAMEW POPENCARDNAME;
  typedef LPOPENCARDNAMEW LPOPENCARDNAME;
  extern LONG __attribute__((__stdcall__)) GetOpenCardNameA(LPOPENCARDNAMEA);
  extern LONG __attribute__((__stdcall__)) GetOpenCardNameW(LPOPENCARDNAMEW);
  extern LONG __attribute__((__stdcall__)) SCardDlgExtendedError(void);
}
extern "C" {
  struct _PSP;
  struct _PROPSHEETPAGEA;
  struct _PROPSHEETPAGEW;

  typedef struct _PSP *HPROPSHEETPAGE;
  typedef UINT (__attribute__((__stdcall__)) *LPFNPSPCALLBACKA)(HWND hwnd,UINT uMsg,struct _PROPSHEETPAGEA *ppsp);
  typedef UINT (__attribute__((__stdcall__)) *LPFNPSPCALLBACKW)(HWND hwnd,UINT uMsg,struct _PROPSHEETPAGEW *ppsp);
  typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;
  typedef struct _PROPSHEETPAGEA_V1 {
    DWORD dwSize,dwFlags; HINSTANCE hInstance; __extension__ union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
  } PROPSHEETPAGEA_V1,*LPPROPSHEETPAGEA_V1;

  typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

  typedef struct _PROPSHEETPAGEA_V2 {
    DWORD dwSize,dwFlags; HINSTANCE hInstance; __extension__ union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

      LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
  } PROPSHEETPAGEA_V2,*LPPROPSHEETPAGEA_V2;

  typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

  typedef struct _PROPSHEETPAGEA {
    DWORD dwSize,dwFlags; HINSTANCE hInstance; __extension__ union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
      LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
    HANDLE hActCtx;
  } PROPSHEETPAGEA_V3,*LPPROPSHEETPAGEA_V3;

  typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;

  typedef struct _PROPSHEETPAGEW_V1 {
    DWORD dwSize, dwFlags; HINSTANCE hInstance; __extension__ union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
  } PROPSHEETPAGEW_V1,*LPPROPSHEETPAGEW_V1;

  typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

  typedef struct _PROPSHEETPAGEW_V2 {
    DWORD dwSize, dwFlags; HINSTANCE hInstance; __extension__ union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
      LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
  } PROPSHEETPAGEW_V2,*LPPROPSHEETPAGEW_V2;

  typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

  typedef struct _PROPSHEETPAGEW {
    DWORD dwSize, dwFlags; HINSTANCE hInstance; __extension__ union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; __extension__ union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
      LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
    HANDLE hActCtx;
  } PROPSHEETPAGEW_V3,*LPPROPSHEETPAGEW_V3;

  typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;
  typedef PROPSHEETPAGEA_V3 PROPSHEETPAGEA_LATEST;
  typedef PROPSHEETPAGEW_V3 PROPSHEETPAGEW_LATEST;
  typedef LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA_LATEST;
  typedef LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW_LATEST;
  typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA_LATEST;
  typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW_LATEST;

  typedef PROPSHEETPAGEA_V3 PROPSHEETPAGEA;
  typedef PROPSHEETPAGEW_V3 PROPSHEETPAGEW;
  typedef LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA;
  typedef LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW;
  typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA;
  typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW;
  typedef int (__attribute__((__stdcall__)) *PFNPROPSHEETCALLBACK)(HWND,UINT,LPARAM);







  typedef struct _PROPSHEETHEADERA {
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    __extension__ union {
      HICON hIcon;
      LPCSTR pszIcon;
    } ;
    LPCSTR pszCaption;
    UINT nPages;
    __extension__ union {
      UINT nStartPage;
      LPCSTR pStartPage;
    } ;
    __extension__ union {
      LPCPROPSHEETPAGEA ppsp;
      HPROPSHEETPAGE *phpage;
    } ;
    PFNPROPSHEETCALLBACK pfnCallback;
    __extension__ union {
      HBITMAP hbmWatermark;
      LPCSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    __extension__ union {
      HBITMAP hbmHeader;
      LPCSTR pszbmHeader;
    } ;
  } PROPSHEETHEADERA,*LPPROPSHEETHEADERA;

  typedef const PROPSHEETHEADERA *LPCPROPSHEETHEADERA;

  typedef struct _PROPSHEETHEADERW {
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    __extension__ union {
      HICON hIcon;
      LPCWSTR pszIcon;
    } ;
    LPCWSTR pszCaption;
    UINT nPages;
    __extension__ union {
      UINT nStartPage;
      LPCWSTR pStartPage;
    } ;
    __extension__ union {
      LPCPROPSHEETPAGEW ppsp;
      HPROPSHEETPAGE *phpage;
    } ;
    PFNPROPSHEETCALLBACK pfnCallback;
    __extension__ union {
      HBITMAP hbmWatermark;
      LPCWSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    __extension__ union {
      HBITMAP hbmHeader;
      LPCWSTR pszbmHeader;
    } ;
  } PROPSHEETHEADERW,*LPPROPSHEETHEADERW;

  typedef const PROPSHEETHEADERW *LPCPROPSHEETHEADERW;
                 HPROPSHEETPAGE __attribute__((__stdcall__)) CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
                 HPROPSHEETPAGE __attribute__((__stdcall__)) CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
                 WINBOOL __attribute__((__stdcall__)) DestroyPropertySheetPage(HPROPSHEETPAGE);
                 INT_PTR __attribute__((__stdcall__)) PropertySheetA(LPCPROPSHEETHEADERA);
                 INT_PTR __attribute__((__stdcall__)) PropertySheetW(LPCPROPSHEETHEADERW);




  typedef WINBOOL (__attribute__((__stdcall__)) *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE,LPARAM);
  typedef WINBOOL (__attribute__((__stdcall__)) *LPFNADDPROPSHEETPAGES)(LPVOID,LPFNADDPROPSHEETPAGE,LPARAM);

  typedef struct _PSHNOTIFY {
    NMHDR hdr;
    LPARAM lParam;
  } PSHNOTIFY,*LPPSHNOTIFY;
}
#pragma pack(pop)





extern "C" {


  typedef struct _PRINTER_INFO_1A {
    DWORD Flags;
    LPSTR pDescription;
    LPSTR pName;
    LPSTR pComment;
  } PRINTER_INFO_1A,*PPRINTER_INFO_1A,*LPPRINTER_INFO_1A;

  typedef struct _PRINTER_INFO_1W {
    DWORD Flags;
    LPWSTR pDescription;
    LPWSTR pName;
    LPWSTR pComment;
  } PRINTER_INFO_1W,*PPRINTER_INFO_1W,*LPPRINTER_INFO_1W;

  typedef PRINTER_INFO_1W PRINTER_INFO_1;
  typedef PPRINTER_INFO_1W PPRINTER_INFO_1;
  typedef LPPRINTER_INFO_1W LPPRINTER_INFO_1;

  typedef struct _PRINTER_INFO_2A {
    LPSTR pServerName;
    LPSTR pPrinterName;
    LPSTR pShareName;
    LPSTR pPortName;
    LPSTR pDriverName;
    LPSTR pComment;
    LPSTR pLocation;
    LPDEVMODEA pDevMode;
    LPSTR pSepFile;
    LPSTR pPrintProcessor;
    LPSTR pDatatype;
    LPSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
  } PRINTER_INFO_2A,*PPRINTER_INFO_2A,*LPPRINTER_INFO_2A;

  typedef struct _PRINTER_INFO_2W {
    LPWSTR pServerName;
    LPWSTR pPrinterName;
    LPWSTR pShareName;
    LPWSTR pPortName;
    LPWSTR pDriverName;
    LPWSTR pComment;
    LPWSTR pLocation;
    LPDEVMODEW pDevMode;
    LPWSTR pSepFile;
    LPWSTR pPrintProcessor;
    LPWSTR pDatatype;
    LPWSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
  } PRINTER_INFO_2W,*PPRINTER_INFO_2W,*LPPRINTER_INFO_2W;

  typedef PRINTER_INFO_2W PRINTER_INFO_2;
  typedef PPRINTER_INFO_2W PPRINTER_INFO_2;
  typedef LPPRINTER_INFO_2W LPPRINTER_INFO_2;

  typedef struct _PRINTER_INFO_3 {
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
  } PRINTER_INFO_3,*PPRINTER_INFO_3,*LPPRINTER_INFO_3;

  typedef struct _PRINTER_INFO_4A {
    LPSTR pPrinterName;
    LPSTR pServerName;
    DWORD Attributes;
  } PRINTER_INFO_4A,*PPRINTER_INFO_4A,*LPPRINTER_INFO_4A;

  typedef struct _PRINTER_INFO_4W {
    LPWSTR pPrinterName;
    LPWSTR pServerName;
    DWORD Attributes;
  } PRINTER_INFO_4W,*PPRINTER_INFO_4W,*LPPRINTER_INFO_4W;

  typedef PRINTER_INFO_4W PRINTER_INFO_4;
  typedef PPRINTER_INFO_4W PPRINTER_INFO_4;
  typedef LPPRINTER_INFO_4W LPPRINTER_INFO_4;

  typedef struct _PRINTER_INFO_5A {
    LPSTR pPrinterName;
    LPSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
  } PRINTER_INFO_5A,*PPRINTER_INFO_5A,*LPPRINTER_INFO_5A;

  typedef struct _PRINTER_INFO_5W {
    LPWSTR pPrinterName;
    LPWSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
  } PRINTER_INFO_5W,*PPRINTER_INFO_5W,*LPPRINTER_INFO_5W;

  typedef PRINTER_INFO_5W PRINTER_INFO_5;
  typedef PPRINTER_INFO_5W PPRINTER_INFO_5;
  typedef LPPRINTER_INFO_5W LPPRINTER_INFO_5;

  typedef struct _PRINTER_INFO_6 {
    DWORD dwStatus;
  } PRINTER_INFO_6,*PPRINTER_INFO_6,*LPPRINTER_INFO_6;

  typedef struct _PRINTER_INFO_7A {
    LPSTR pszObjectGUID;
    DWORD dwAction;
  } PRINTER_INFO_7A,*PPRINTER_INFO_7A,*LPPRINTER_INFO_7A;

  typedef struct _PRINTER_INFO_7W {
    LPWSTR pszObjectGUID;
    DWORD dwAction;
  } PRINTER_INFO_7W,*PPRINTER_INFO_7W,*LPPRINTER_INFO_7W;

  typedef PRINTER_INFO_7W PRINTER_INFO_7;
  typedef PPRINTER_INFO_7W PPRINTER_INFO_7;
  typedef LPPRINTER_INFO_7W LPPRINTER_INFO_7;







  typedef struct _PRINTER_INFO_8A {
    LPDEVMODEA pDevMode;
  } PRINTER_INFO_8A,*PPRINTER_INFO_8A,*LPPRINTER_INFO_8A;

  typedef struct _PRINTER_INFO_8W {
    LPDEVMODEW pDevMode;
  } PRINTER_INFO_8W,*PPRINTER_INFO_8W,*LPPRINTER_INFO_8W;

  typedef PRINTER_INFO_8W PRINTER_INFO_8;
  typedef PPRINTER_INFO_8W PPRINTER_INFO_8;
  typedef LPPRINTER_INFO_8W LPPRINTER_INFO_8;

  typedef struct _PRINTER_INFO_9A {
    LPDEVMODEA pDevMode;
  } PRINTER_INFO_9A,*PPRINTER_INFO_9A,*LPPRINTER_INFO_9A;

  typedef struct _PRINTER_INFO_9W {
    LPDEVMODEW pDevMode;
  } PRINTER_INFO_9W,*PPRINTER_INFO_9W,*LPPRINTER_INFO_9W;

  typedef PRINTER_INFO_9W PRINTER_INFO_9;
  typedef PPRINTER_INFO_9W PPRINTER_INFO_9;
  typedef LPPRINTER_INFO_9W LPPRINTER_INFO_9;
  typedef struct _JOB_INFO_1A {
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pDatatype;
    LPSTR pStatus;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD TotalPages;
    DWORD PagesPrinted;
    SYSTEMTIME Submitted;
  } JOB_INFO_1A,*PJOB_INFO_1A,*LPJOB_INFO_1A;

  typedef struct _JOB_INFO_1W {
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pDatatype;
    LPWSTR pStatus;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD TotalPages;
    DWORD PagesPrinted;
    SYSTEMTIME Submitted;
  } JOB_INFO_1W,*PJOB_INFO_1W,*LPJOB_INFO_1W;

  typedef JOB_INFO_1W JOB_INFO_1;
  typedef PJOB_INFO_1W PJOB_INFO_1;
  typedef LPJOB_INFO_1W LPJOB_INFO_1;

  typedef struct _JOB_INFO_2A {
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pNotifyName;
    LPSTR pDatatype;
    LPSTR pPrintProcessor;
    LPSTR pParameters;
    LPSTR pDriverName;
    LPDEVMODEA pDevMode;
    LPSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
  } JOB_INFO_2A,*PJOB_INFO_2A,*LPJOB_INFO_2A;

  typedef struct _JOB_INFO_2W {
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pNotifyName;
    LPWSTR pDatatype;
    LPWSTR pPrintProcessor;
    LPWSTR pParameters;
    LPWSTR pDriverName;
    LPDEVMODEW pDevMode;
    LPWSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
  } JOB_INFO_2W,*PJOB_INFO_2W,*LPJOB_INFO_2W;

  typedef JOB_INFO_2W JOB_INFO_2;
  typedef PJOB_INFO_2W PJOB_INFO_2;
  typedef LPJOB_INFO_2W LPJOB_INFO_2;

  typedef struct _JOB_INFO_3 {
    DWORD JobId;
    DWORD NextJobId;
    DWORD Reserved;
  } JOB_INFO_3,*PJOB_INFO_3,*LPJOB_INFO_3;
  typedef struct _ADDJOB_INFO_1A {
    LPSTR Path;
    DWORD JobId;
  } ADDJOB_INFO_1A,*PADDJOB_INFO_1A,*LPADDJOB_INFO_1A;

  typedef struct _ADDJOB_INFO_1W {
    LPWSTR Path;
    DWORD JobId;
  } ADDJOB_INFO_1W,*PADDJOB_INFO_1W,*LPADDJOB_INFO_1W;

  typedef ADDJOB_INFO_1W ADDJOB_INFO_1;
  typedef PADDJOB_INFO_1W PADDJOB_INFO_1;
  typedef LPADDJOB_INFO_1W LPADDJOB_INFO_1;

  typedef struct _DRIVER_INFO_1A {
    LPSTR pName;
  } DRIVER_INFO_1A,*PDRIVER_INFO_1A,*LPDRIVER_INFO_1A;

  typedef struct _DRIVER_INFO_1W {
    LPWSTR pName;
  } DRIVER_INFO_1W,*PDRIVER_INFO_1W,*LPDRIVER_INFO_1W;

  typedef DRIVER_INFO_1W DRIVER_INFO_1;
  typedef PDRIVER_INFO_1W PDRIVER_INFO_1;
  typedef LPDRIVER_INFO_1W LPDRIVER_INFO_1;

  typedef struct _DRIVER_INFO_2A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
  } DRIVER_INFO_2A,*PDRIVER_INFO_2A,*LPDRIVER_INFO_2A;

  typedef struct _DRIVER_INFO_2W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
  } DRIVER_INFO_2W,*PDRIVER_INFO_2W,*LPDRIVER_INFO_2W;

  typedef DRIVER_INFO_2W DRIVER_INFO_2;
  typedef PDRIVER_INFO_2W PDRIVER_INFO_2;
  typedef LPDRIVER_INFO_2W LPDRIVER_INFO_2;

  typedef struct _DRIVER_INFO_3A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
  } DRIVER_INFO_3A,*PDRIVER_INFO_3A,*LPDRIVER_INFO_3A;

  typedef struct _DRIVER_INFO_3W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
  } DRIVER_INFO_3W,*PDRIVER_INFO_3W,*LPDRIVER_INFO_3W;

  typedef DRIVER_INFO_3W DRIVER_INFO_3;
  typedef PDRIVER_INFO_3W PDRIVER_INFO_3;
  typedef LPDRIVER_INFO_3W LPDRIVER_INFO_3;

  typedef struct _DRIVER_INFO_4A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
  } DRIVER_INFO_4A,*PDRIVER_INFO_4A,*LPDRIVER_INFO_4A;

  typedef struct _DRIVER_INFO_4W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
  } DRIVER_INFO_4W,*PDRIVER_INFO_4W,*LPDRIVER_INFO_4W;

  typedef DRIVER_INFO_4W DRIVER_INFO_4;
  typedef PDRIVER_INFO_4W PDRIVER_INFO_4;
  typedef LPDRIVER_INFO_4W LPDRIVER_INFO_4;

  typedef struct _DRIVER_INFO_5A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
  } DRIVER_INFO_5A,*PDRIVER_INFO_5A,*LPDRIVER_INFO_5A;

  typedef struct _DRIVER_INFO_5W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
  } DRIVER_INFO_5W,*PDRIVER_INFO_5W,*LPDRIVER_INFO_5W;

  typedef DRIVER_INFO_5W DRIVER_INFO_5;
  typedef PDRIVER_INFO_5W PDRIVER_INFO_5;
  typedef LPDRIVER_INFO_5W LPDRIVER_INFO_5;

  typedef struct _DRIVER_INFO_6A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR pszMfgName;
    LPSTR pszOEMUrl;
    LPSTR pszHardwareID;
    LPSTR pszProvider;
  } DRIVER_INFO_6A,*PDRIVER_INFO_6A,*LPDRIVER_INFO_6A;

  typedef struct _DRIVER_INFO_6W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR pszMfgName;
    LPWSTR pszOEMUrl;
    LPWSTR pszHardwareID;
    LPWSTR pszProvider;
  } DRIVER_INFO_6W,*PDRIVER_INFO_6W,*LPDRIVER_INFO_6W;

  typedef DRIVER_INFO_6W DRIVER_INFO_6;
  typedef PDRIVER_INFO_6W PDRIVER_INFO_6;
  typedef LPDRIVER_INFO_6W LPDRIVER_INFO_6;
  typedef struct _DOC_INFO_1A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
  } DOC_INFO_1A,*PDOC_INFO_1A,*LPDOC_INFO_1A;

  typedef struct _DOC_INFO_1W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
  } DOC_INFO_1W,*PDOC_INFO_1W,*LPDOC_INFO_1W;

  typedef DOC_INFO_1W DOC_INFO_1;
  typedef PDOC_INFO_1W PDOC_INFO_1;
  typedef LPDOC_INFO_1W LPDOC_INFO_1;

  typedef struct _FORM_INFO_1A {
    DWORD Flags;
    LPSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
  } FORM_INFO_1A,*PFORM_INFO_1A,*LPFORM_INFO_1A;

  typedef struct _FORM_INFO_1W {
    DWORD Flags;
    LPWSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
  } FORM_INFO_1W,*PFORM_INFO_1W,*LPFORM_INFO_1W;

  typedef FORM_INFO_1W FORM_INFO_1;
  typedef PFORM_INFO_1W PFORM_INFO_1;
  typedef LPFORM_INFO_1W LPFORM_INFO_1;

  typedef struct _DOC_INFO_2A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
  } DOC_INFO_2A,*PDOC_INFO_2A,*LPDOC_INFO_2A;

  typedef struct _DOC_INFO_2W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
  } DOC_INFO_2W,*PDOC_INFO_2W,*LPDOC_INFO_2W;

  typedef DOC_INFO_2W DOC_INFO_2;
  typedef PDOC_INFO_2W PDOC_INFO_2;
  typedef LPDOC_INFO_2W LPDOC_INFO_2;




  typedef struct _DOC_INFO_3A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwFlags;
  } DOC_INFO_3A,*PDOC_INFO_3A,*LPDOC_INFO_3A;

  typedef struct _DOC_INFO_3W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwFlags;
  } DOC_INFO_3W,*PDOC_INFO_3W,*LPDOC_INFO_3W;

  typedef DOC_INFO_3W DOC_INFO_3;
  typedef PDOC_INFO_3W PDOC_INFO_3;
  typedef LPDOC_INFO_3W LPDOC_INFO_3;







  typedef struct _PRINTPROCESSOR_INFO_1A {
    LPSTR pName;
  } PRINTPROCESSOR_INFO_1A,*PPRINTPROCESSOR_INFO_1A,*LPPRINTPROCESSOR_INFO_1A;

  typedef struct _PRINTPROCESSOR_INFO_1W {
    LPWSTR pName;
  } PRINTPROCESSOR_INFO_1W,*PPRINTPROCESSOR_INFO_1W,*LPPRINTPROCESSOR_INFO_1W;

  typedef PRINTPROCESSOR_INFO_1W PRINTPROCESSOR_INFO_1;
  typedef PPRINTPROCESSOR_INFO_1W PPRINTPROCESSOR_INFO_1;
  typedef LPPRINTPROCESSOR_INFO_1W LPPRINTPROCESSOR_INFO_1;

  typedef struct _PRINTPROCESSOR_CAPS_1 {
    DWORD dwLevel;
    DWORD dwNupOptions;
    DWORD dwPageOrderFlags;
    DWORD dwNumberOfCopies;
  } PRINTPROCESSOR_CAPS_1,*PPRINTPROCESSOR_CAPS_1;




  typedef struct _PORT_INFO_1A {
    LPSTR pName;
  } PORT_INFO_1A,*PPORT_INFO_1A,*LPPORT_INFO_1A;
  typedef struct _PORT_INFO_1W {
    LPWSTR pName;
  } PORT_INFO_1W,*PPORT_INFO_1W,*LPPORT_INFO_1W;

  typedef PORT_INFO_1W PORT_INFO_1;
  typedef PPORT_INFO_1W PPORT_INFO_1;
  typedef LPPORT_INFO_1W LPPORT_INFO_1;

  typedef struct _PORT_INFO_2A {
    LPSTR pPortName;
    LPSTR pMonitorName;
    LPSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
  } PORT_INFO_2A,*PPORT_INFO_2A,*LPPORT_INFO_2A;

  typedef struct _PORT_INFO_2W {
    LPWSTR pPortName;
    LPWSTR pMonitorName;
    LPWSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
  } PORT_INFO_2W,*PPORT_INFO_2W,*LPPORT_INFO_2W;

  typedef PORT_INFO_2W PORT_INFO_2;
  typedef PPORT_INFO_2W PPORT_INFO_2;
  typedef LPPORT_INFO_2W LPPORT_INFO_2;






  typedef struct _PORT_INFO_3A {
    DWORD dwStatus;
    LPSTR pszStatus;
    DWORD dwSeverity;
  } PORT_INFO_3A,*PPORT_INFO_3A,*LPPORT_INFO_3A;

  typedef struct _PORT_INFO_3W {
    DWORD dwStatus;
    LPWSTR pszStatus;
    DWORD dwSeverity;
  } PORT_INFO_3W,*PPORT_INFO_3W,*LPPORT_INFO_3W;

  typedef PORT_INFO_3W PORT_INFO_3;
  typedef PPORT_INFO_3W PPORT_INFO_3;
  typedef LPPORT_INFO_3W LPPORT_INFO_3;
  typedef struct _MONITOR_INFO_1A{
    LPSTR pName;
  } MONITOR_INFO_1A,*PMONITOR_INFO_1A,*LPMONITOR_INFO_1A;

  typedef struct _MONITOR_INFO_1W{
    LPWSTR pName;
  } MONITOR_INFO_1W,*PMONITOR_INFO_1W,*LPMONITOR_INFO_1W;

  typedef MONITOR_INFO_1W MONITOR_INFO_1;
  typedef PMONITOR_INFO_1W PMONITOR_INFO_1;
  typedef LPMONITOR_INFO_1W LPMONITOR_INFO_1;

  typedef struct _MONITOR_INFO_2A {
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
  } MONITOR_INFO_2A,*PMONITOR_INFO_2A,*LPMONITOR_INFO_2A;

  typedef struct _MONITOR_INFO_2W {
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
  } MONITOR_INFO_2W,*PMONITOR_INFO_2W,*LPMONITOR_INFO_2W;

  typedef MONITOR_INFO_2W MONITOR_INFO_2;
  typedef PMONITOR_INFO_2W PMONITOR_INFO_2;
  typedef LPMONITOR_INFO_2W LPMONITOR_INFO_2;

  typedef struct _DATATYPES_INFO_1A {
    LPSTR pName;
  } DATATYPES_INFO_1A,*PDATATYPES_INFO_1A,*LPDATATYPES_INFO_1A;

  typedef struct _DATATYPES_INFO_1W {
    LPWSTR pName;
  } DATATYPES_INFO_1W,*PDATATYPES_INFO_1W,*LPDATATYPES_INFO_1W;

  typedef DATATYPES_INFO_1W DATATYPES_INFO_1;
  typedef PDATATYPES_INFO_1W PDATATYPES_INFO_1;
  typedef LPDATATYPES_INFO_1W LPDATATYPES_INFO_1;

  typedef struct _PRINTER_DEFAULTSA {
    LPSTR pDatatype;
    LPDEVMODEA pDevMode;
    ACCESS_MASK DesiredAccess;
  } PRINTER_DEFAULTSA,*PPRINTER_DEFAULTSA,*LPPRINTER_DEFAULTSA;

  typedef struct _PRINTER_DEFAULTSW {
    LPWSTR pDatatype;
    LPDEVMODEW pDevMode;
    ACCESS_MASK DesiredAccess;
  } PRINTER_DEFAULTSW,*PPRINTER_DEFAULTSW,*LPPRINTER_DEFAULTSW;

  typedef PRINTER_DEFAULTSW PRINTER_DEFAULTS;
  typedef PPRINTER_DEFAULTSW PPRINTER_DEFAULTS;
  typedef LPPRINTER_DEFAULTSW LPPRINTER_DEFAULTS;

  typedef struct _PRINTER_ENUM_VALUESA {
    LPSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
  } PRINTER_ENUM_VALUESA,*PPRINTER_ENUM_VALUESA,*LPPRINTER_ENUM_VALUESA;

  typedef struct _PRINTER_ENUM_VALUESW {
    LPWSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
  } PRINTER_ENUM_VALUESW,*PPRINTER_ENUM_VALUESW,*LPPRINTER_ENUM_VALUESW;

  typedef PRINTER_ENUM_VALUESW PRINTER_ENUM_VALUES;
  typedef PPRINTER_ENUM_VALUESW PPRINTER_ENUM_VALUES;
  typedef LPPRINTER_ENUM_VALUESW LPPRINTER_ENUM_VALUES;



  WINBOOL __attribute__((__stdcall__)) EnumPrintersA(DWORD Flags,LPSTR Name,DWORD Level,LPBYTE pPrinterEnum,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) EnumPrintersW(DWORD Flags,LPWSTR Name,DWORD Level,LPBYTE pPrinterEnum,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) OpenPrinterA(LPSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTSA pDefault);
  WINBOOL __attribute__((__stdcall__)) OpenPrinterW(LPWSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTSW pDefault);
  WINBOOL __attribute__((__stdcall__)) ResetPrinterA(HANDLE hPrinter,LPPRINTER_DEFAULTSA pDefault);
  WINBOOL __attribute__((__stdcall__)) ResetPrinterW(HANDLE hPrinter,LPPRINTER_DEFAULTSW pDefault);
  WINBOOL __attribute__((__stdcall__)) SetJobA(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD Command);
  WINBOOL __attribute__((__stdcall__)) SetJobW(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD Command);
  WINBOOL __attribute__((__stdcall__)) GetJobA(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) GetJobW(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) EnumJobsA(HANDLE hPrinter,DWORD FirstJob,DWORD NoJobs,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) EnumJobsW(HANDLE hPrinter,DWORD FirstJob,DWORD NoJobs,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  HANDLE __attribute__((__stdcall__)) AddPrinterA(LPSTR pName,DWORD Level,LPBYTE pPrinter);
  HANDLE __attribute__((__stdcall__)) AddPrinterW(LPWSTR pName,DWORD Level,LPBYTE pPrinter);
  WINBOOL __attribute__((__stdcall__)) DeletePrinter(HANDLE hPrinter);
  WINBOOL __attribute__((__stdcall__)) SetPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD Command);
  WINBOOL __attribute__((__stdcall__)) SetPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD Command);
  WINBOOL __attribute__((__stdcall__)) GetPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) GetPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) AddPrinterDriverA(LPSTR pName,DWORD Level,LPBYTE pDriverInfo);
  WINBOOL __attribute__((__stdcall__)) AddPrinterDriverW(LPWSTR pName,DWORD Level,LPBYTE pDriverInfo);
  WINBOOL __attribute__((__stdcall__)) AddPrinterDriverExA(LPSTR pName,DWORD Level,LPBYTE pDriverInfo,DWORD dwFileCopyFlags);
  WINBOOL __attribute__((__stdcall__)) AddPrinterDriverExW(LPWSTR pName,DWORD Level,LPBYTE pDriverInfo,DWORD dwFileCopyFlags);
  WINBOOL __attribute__((__stdcall__)) EnumPrinterDriversA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) EnumPrinterDriversW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) GetPrinterDriverA(HANDLE hPrinter,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) GetPrinterDriverW(HANDLE hPrinter,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) GetPrinterDriverDirectoryA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverDirectory,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) GetPrinterDriverDirectoryW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverDirectory,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) DeletePrinterDriverA(LPSTR pName,LPSTR pEnvironment,LPSTR pDriverName);
  WINBOOL __attribute__((__stdcall__)) DeletePrinterDriverW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pDriverName);
  WINBOOL __attribute__((__stdcall__)) DeletePrinterDriverExA(LPSTR pName,LPSTR pEnvironment,LPSTR pDriverName,DWORD dwDeleteFlag,DWORD dwVersionFlag);
  WINBOOL __attribute__((__stdcall__)) DeletePrinterDriverExW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pDriverName,DWORD dwDeleteFlag,DWORD dwVersionFlag);
  WINBOOL __attribute__((__stdcall__)) AddPrintProcessorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPathName,LPSTR pPrintProcessorName);
  WINBOOL __attribute__((__stdcall__)) AddPrintProcessorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPathName,LPWSTR pPrintProcessorName);
  WINBOOL __attribute__((__stdcall__)) EnumPrintProcessorsA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) EnumPrintProcessorsW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) GetPrintProcessorDirectoryA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) GetPrintProcessorDirectoryW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) EnumPrintProcessorDatatypesA(LPSTR pName,LPSTR pPrintProcessorName,DWORD Level,LPBYTE pDatatypes,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) EnumPrintProcessorDatatypesW(LPWSTR pName,LPWSTR pPrintProcessorName,DWORD Level,LPBYTE pDatatypes,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) DeletePrintProcessorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPrintProcessorName);
  WINBOOL __attribute__((__stdcall__)) DeletePrintProcessorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPrintProcessorName);
  DWORD __attribute__((__stdcall__)) StartDocPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pDocInfo);
  DWORD __attribute__((__stdcall__)) StartDocPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pDocInfo);
  WINBOOL __attribute__((__stdcall__)) StartPagePrinter(HANDLE hPrinter);
  WINBOOL __attribute__((__stdcall__)) WritePrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pcWritten);
  WINBOOL __attribute__((__stdcall__)) FlushPrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pcWritten,DWORD cSleep);
  WINBOOL __attribute__((__stdcall__)) EndPagePrinter(HANDLE hPrinter);
  WINBOOL __attribute__((__stdcall__)) AbortPrinter(HANDLE hPrinter);
  WINBOOL __attribute__((__stdcall__)) ReadPrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pNoBytesRead);
  WINBOOL __attribute__((__stdcall__)) EndDocPrinter(HANDLE hPrinter);
  WINBOOL __attribute__((__stdcall__)) AddJobA(HANDLE hPrinter,DWORD Level,LPBYTE pData,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) AddJobW(HANDLE hPrinter,DWORD Level,LPBYTE pData,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) ScheduleJob(HANDLE hPrinter,DWORD JobId);
  WINBOOL __attribute__((__stdcall__)) PrinterProperties(HWND hWnd,HANDLE hPrinter);
  LONG __attribute__((__stdcall__)) DocumentPropertiesA(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput,DWORD fMode);
  LONG __attribute__((__stdcall__)) DocumentPropertiesW(HWND hWnd,HANDLE hPrinter,LPWSTR pDeviceName,PDEVMODEW pDevModeOutput,PDEVMODEW pDevModeInput,DWORD fMode);
  LONG __attribute__((__stdcall__)) AdvancedDocumentPropertiesA(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput);
  LONG __attribute__((__stdcall__)) AdvancedDocumentPropertiesW(HWND hWnd,HANDLE hPrinter,LPWSTR pDeviceName,PDEVMODEW pDevModeOutput,PDEVMODEW pDevModeInput);
  LONG ExtDeviceMode(HWND hWnd,HANDLE hInst,LPDEVMODEA pDevModeOutput,LPSTR pDeviceName,LPSTR pPort,LPDEVMODEA pDevModeInput,LPSTR pProfile,DWORD fMode);
  DWORD __attribute__((__stdcall__)) GetPrinterDataA(HANDLE hPrinter,LPSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
  DWORD __attribute__((__stdcall__)) GetPrinterDataW(HANDLE hPrinter,LPWSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
  DWORD __attribute__((__stdcall__)) GetPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
  DWORD __attribute__((__stdcall__)) GetPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
  DWORD __attribute__((__stdcall__)) EnumPrinterDataA(HANDLE hPrinter,DWORD dwIndex,LPSTR pValueName,DWORD cbValueName,LPDWORD pcbValueName,LPDWORD pType,LPBYTE pData,DWORD cbData,LPDWORD pcbData);
  DWORD __attribute__((__stdcall__)) EnumPrinterDataW(HANDLE hPrinter,DWORD dwIndex,LPWSTR pValueName,DWORD cbValueName,LPDWORD pcbValueName,LPDWORD pType,LPBYTE pData,DWORD cbData,LPDWORD pcbData);
  DWORD __attribute__((__stdcall__)) EnumPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPBYTE pEnumValues,DWORD cbEnumValues,LPDWORD pcbEnumValues,LPDWORD pnEnumValues);
  DWORD __attribute__((__stdcall__)) EnumPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPBYTE pEnumValues,DWORD cbEnumValues,LPDWORD pcbEnumValues,LPDWORD pnEnumValues);
  DWORD __attribute__((__stdcall__)) EnumPrinterKeyA(HANDLE hPrinter,LPCSTR pKeyName,LPSTR pSubkey,DWORD cbSubkey,LPDWORD pcbSubkey);
  DWORD __attribute__((__stdcall__)) EnumPrinterKeyW(HANDLE hPrinter,LPCWSTR pKeyName,LPWSTR pSubkey,DWORD cbSubkey,LPDWORD pcbSubkey);
  DWORD __attribute__((__stdcall__)) SetPrinterDataA(HANDLE hPrinter,LPSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
  DWORD __attribute__((__stdcall__)) SetPrinterDataW(HANDLE hPrinter,LPWSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
  DWORD __attribute__((__stdcall__)) SetPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
  DWORD __attribute__((__stdcall__)) SetPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
  DWORD __attribute__((__stdcall__)) DeletePrinterDataA(HANDLE hPrinter,LPSTR pValueName);
  DWORD __attribute__((__stdcall__)) DeletePrinterDataW(HANDLE hPrinter,LPWSTR pValueName);
  DWORD __attribute__((__stdcall__)) DeletePrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName);
  DWORD __attribute__((__stdcall__)) DeletePrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName);
  DWORD __attribute__((__stdcall__)) DeletePrinterKeyA(HANDLE hPrinter,LPCSTR pKeyName);
  DWORD __attribute__((__stdcall__)) DeletePrinterKeyW(HANDLE hPrinter,LPCWSTR pKeyName);
  typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
    WORD Type;
    WORD Reserved0;
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD Count;
    PWORD pFields;
  } PRINTER_NOTIFY_OPTIONS_TYPE,*PPRINTER_NOTIFY_OPTIONS_TYPE,*LPPRINTER_NOTIFY_OPTIONS_TYPE;



  typedef struct _PRINTER_NOTIFY_OPTIONS {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
  } PRINTER_NOTIFY_OPTIONS,*PPRINTER_NOTIFY_OPTIONS,*LPPRINTER_NOTIFY_OPTIONS;



  typedef struct _PRINTER_NOTIFY_INFO_DATA {
    WORD Type;
    WORD Field;
    DWORD Reserved;
    DWORD Id;
    union {
      DWORD adwData[2];
      struct {
 DWORD cbBuf;
 LPVOID pBuf;
      } Data;
    } NotifyData;
  } PRINTER_NOTIFY_INFO_DATA,*PPRINTER_NOTIFY_INFO_DATA,*LPPRINTER_NOTIFY_INFO_DATA;

  typedef struct _PRINTER_NOTIFY_INFO {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PRINTER_NOTIFY_INFO_DATA aData[1];
  } PRINTER_NOTIFY_INFO,*PPRINTER_NOTIFY_INFO,*LPPRINTER_NOTIFY_INFO;

  typedef struct _BINARY_CONTAINER{
    DWORD cbBuf;
    LPBYTE pData;
  } BINARY_CONTAINER,*PBINARY_CONTAINER;

  typedef struct _BIDI_DATA{
    DWORD dwBidiType;
    union {
      WINBOOL bData;
      LONG iData;
      LPWSTR sData;
      FLOAT fData;
      BINARY_CONTAINER biData;
    } u;
  } BIDI_DATA,*PBIDI_DATA,*LPBIDI_DATA;

  typedef struct _BIDI_REQUEST_DATA{
    DWORD dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
  } BIDI_REQUEST_DATA ,*PBIDI_REQUEST_DATA ,*LPBIDI_REQUEST_DATA;

  typedef struct _BIDI_REQUEST_CONTAINER{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_REQUEST_DATA aData[1 ];
  }BIDI_REQUEST_CONTAINER,*PBIDI_REQUEST_CONTAINER,*LPBIDI_REQUEST_CONTAINER;

  typedef struct _BIDI_RESPONSE_DATA{
    DWORD dwResult;
    DWORD dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
  } BIDI_RESPONSE_DATA,*PBIDI_RESPONSE_DATA,*LPBIDI_RESPONSE_DATA;

  typedef struct _BIDI_RESPONSE_CONTAINER{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_RESPONSE_DATA aData[1 ];
  } BIDI_RESPONSE_CONTAINER,*PBIDI_RESPONSE_CONTAINER,*LPBIDI_RESPONSE_CONTAINER;






  typedef enum {
    BIDI_NULL = 0,BIDI_INT = 1,BIDI_FLOAT = 2,BIDI_BOOL = 3,BIDI_STRING = 4,BIDI_TEXT = 5,BIDI_ENUM = 6,BIDI_BLOB = 7
  } BIDI_TYPE;
  DWORD __attribute__((__stdcall__)) WaitForPrinterChange(HANDLE hPrinter,DWORD Flags);
  HANDLE __attribute__((__stdcall__)) FindFirstPrinterChangeNotification(HANDLE hPrinter,DWORD fdwFlags,DWORD fdwOptions,LPVOID pPrinterNotifyOptions);
  WINBOOL __attribute__((__stdcall__)) FindNextPrinterChangeNotification(HANDLE hChange,PDWORD pdwChange,LPVOID pPrinterNotifyOptions,LPVOID *ppPrinterNotifyInfo);
  WINBOOL __attribute__((__stdcall__)) FreePrinterNotifyInfo (PPRINTER_NOTIFY_INFO pPrinterNotifyInfo);
  WINBOOL __attribute__((__stdcall__)) FindClosePrinterChangeNotification(HANDLE hChange);
  DWORD __attribute__((__stdcall__)) PrinterMessageBoxA(HANDLE hPrinter,DWORD Error,HWND hWnd,LPSTR pText,LPSTR pCaption,DWORD dwType);
  DWORD __attribute__((__stdcall__)) PrinterMessageBoxW(HANDLE hPrinter,DWORD Error,HWND hWnd,LPWSTR pText,LPWSTR pCaption,DWORD dwType);
  WINBOOL __attribute__((__stdcall__)) ClosePrinter(HANDLE hPrinter);
  WINBOOL __attribute__((__stdcall__)) AddFormA(HANDLE hPrinter,DWORD Level,LPBYTE pForm);
  WINBOOL __attribute__((__stdcall__)) AddFormW(HANDLE hPrinter,DWORD Level,LPBYTE pForm);
  WINBOOL __attribute__((__stdcall__)) DeleteFormA(HANDLE hPrinter,LPSTR pFormName);
  WINBOOL __attribute__((__stdcall__)) DeleteFormW(HANDLE hPrinter,LPWSTR pFormName);
  WINBOOL __attribute__((__stdcall__)) GetFormA(HANDLE hPrinter,LPSTR pFormName,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) GetFormW(HANDLE hPrinter,LPWSTR pFormName,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded);
  WINBOOL __attribute__((__stdcall__)) SetFormA(HANDLE hPrinter,LPSTR pFormName,DWORD Level,LPBYTE pForm);
  WINBOOL __attribute__((__stdcall__)) SetFormW(HANDLE hPrinter,LPWSTR pFormName,DWORD Level,LPBYTE pForm);
  WINBOOL __attribute__((__stdcall__)) EnumFormsA(HANDLE hPrinter,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) EnumFormsW(HANDLE hPrinter,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) EnumMonitorsA(LPSTR pName,DWORD Level,LPBYTE pMonitor,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) EnumMonitorsW(LPWSTR pName,DWORD Level,LPBYTE pMonitor,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) AddMonitorA(LPSTR pName,DWORD Level,LPBYTE pMonitorInfo);
  WINBOOL __attribute__((__stdcall__)) AddMonitorW(LPWSTR pName,DWORD Level,LPBYTE pMonitorInfo);
  WINBOOL __attribute__((__stdcall__)) DeleteMonitorA(LPSTR pName,LPSTR pEnvironment,LPSTR pMonitorName);
  WINBOOL __attribute__((__stdcall__)) DeleteMonitorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pMonitorName);
  WINBOOL __attribute__((__stdcall__)) EnumPortsA(LPSTR pName,DWORD Level,LPBYTE pPorts,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) EnumPortsW(LPWSTR pName,DWORD Level,LPBYTE pPorts,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
  WINBOOL __attribute__((__stdcall__)) AddPortA(LPSTR pName,HWND hWnd,LPSTR pMonitorName);
  WINBOOL __attribute__((__stdcall__)) AddPortW(LPWSTR pName,HWND hWnd,LPWSTR pMonitorName);
  WINBOOL __attribute__((__stdcall__)) ConfigurePortA(LPSTR pName,HWND hWnd,LPSTR pPortName);
  WINBOOL __attribute__((__stdcall__)) ConfigurePortW(LPWSTR pName,HWND hWnd,LPWSTR pPortName);
  WINBOOL __attribute__((__stdcall__)) DeletePortA(LPSTR pName,HWND hWnd,LPSTR pPortName);
  WINBOOL __attribute__((__stdcall__)) DeletePortW(LPWSTR pName,HWND hWnd,LPWSTR pPortName);
  WINBOOL __attribute__((__stdcall__)) XcvDataW(HANDLE hXcv,PCWSTR pszDataName,PBYTE pInputData,DWORD cbInputData,PBYTE pOutputData,DWORD cbOutputData,PDWORD pcbOutputNeeded,PDWORD pdwStatus);



  WINBOOL __attribute__((__stdcall__)) GetDefaultPrinterA(LPSTR pszBuffer,LPDWORD pcchBuffer);
  WINBOOL __attribute__((__stdcall__)) GetDefaultPrinterW(LPWSTR pszBuffer,LPDWORD pcchBuffer);
  WINBOOL __attribute__((__stdcall__)) SetDefaultPrinterA(LPCSTR pszPrinter);
  WINBOOL __attribute__((__stdcall__)) SetDefaultPrinterW(LPCWSTR pszPrinter);
  WINBOOL __attribute__((__stdcall__)) SetPortA(LPSTR pName,LPSTR pPortName,DWORD dwLevel,LPBYTE pPortInfo);
  WINBOOL __attribute__((__stdcall__)) SetPortW(LPWSTR pName,LPWSTR pPortName,DWORD dwLevel,LPBYTE pPortInfo);
  WINBOOL __attribute__((__stdcall__)) AddPrinterConnectionA(LPSTR pName);
  WINBOOL __attribute__((__stdcall__)) AddPrinterConnectionW(LPWSTR pName);
  WINBOOL __attribute__((__stdcall__)) DeletePrinterConnectionA(LPSTR pName);
  WINBOOL __attribute__((__stdcall__)) DeletePrinterConnectionW(LPWSTR pName);
  HANDLE __attribute__((__stdcall__)) ConnectToPrinterDlg(HWND hwnd,DWORD Flags);

  typedef struct _PROVIDOR_INFO_1A{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
  } PROVIDOR_INFO_1A,*PPROVIDOR_INFO_1A,*LPPROVIDOR_INFO_1A;

  typedef struct _PROVIDOR_INFO_1W{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
  } PROVIDOR_INFO_1W,*PPROVIDOR_INFO_1W,*LPPROVIDOR_INFO_1W;

  typedef PROVIDOR_INFO_1W PROVIDOR_INFO_1;
  typedef PPROVIDOR_INFO_1W PPROVIDOR_INFO_1;
  typedef LPPROVIDOR_INFO_1W LPPROVIDOR_INFO_1;

  typedef struct _PROVIDOR_INFO_2A{
    LPSTR pOrder;
  } PROVIDOR_INFO_2A,*PPROVIDOR_INFO_2A,*LPPROVIDOR_INFO_2A;

  typedef struct _PROVIDOR_INFO_2W{
    LPWSTR pOrder;
  } PROVIDOR_INFO_2W,*PPROVIDOR_INFO_2W,*LPPROVIDOR_INFO_2W;

  typedef PROVIDOR_INFO_2W PROVIDOR_INFO_2;
  typedef PPROVIDOR_INFO_2W PPROVIDOR_INFO_2;
  typedef LPPROVIDOR_INFO_2W LPPROVIDOR_INFO_2;





  WINBOOL __attribute__((__stdcall__)) AddPrintProvidorA(LPSTR pName,DWORD level,LPBYTE pProvidorInfo);
  WINBOOL __attribute__((__stdcall__)) AddPrintProvidorW(LPWSTR pName,DWORD level,LPBYTE pProvidorInfo);
  WINBOOL __attribute__((__stdcall__)) DeletePrintProvidorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPrintProvidorName);
  WINBOOL __attribute__((__stdcall__)) DeletePrintProvidorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPrintProvidorName);
  WINBOOL __attribute__((__stdcall__)) IsValidDevmodeA (PDEVMODEA pDevmode,size_t DevmodeSize);
  WINBOOL __attribute__((__stdcall__)) IsValidDevmodeW (PDEVMODEW pDevmode,size_t DevmodeSize);
}
extern "C" const GUID IID_IPrintDialogCallback;
extern "C" const GUID IID_IPrintDialogServices;
extern "C" {
  typedef UINT_PTR (__attribute__((__stdcall__)) *LPOFNHOOKPROC) (HWND,UINT,WPARAM,LPARAM);





  typedef struct tagOFN_NT4A {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpstrFilter;
    LPSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPSTR lpstrFile;
    DWORD nMaxFile;
    LPSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCSTR lpstrInitialDir;
    LPCSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
  } OPENFILENAME_NT4A,*LPOPENFILENAME_NT4A;
  typedef struct tagOFN_NT4W {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
  } OPENFILENAME_NT4W,*LPOPENFILENAME_NT4W;

  typedef OPENFILENAME_NT4W OPENFILENAME_NT4;
  typedef LPOPENFILENAME_NT4W LPOPENFILENAME_NT4;

  typedef struct tagOFNA {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpstrFilter;
    LPSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPSTR lpstrFile;
    DWORD nMaxFile;
    LPSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCSTR lpstrInitialDir;
    LPCSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
    void *pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;
  } OPENFILENAMEA,*LPOPENFILENAMEA;
  typedef struct tagOFNW {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    void *pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;
  } OPENFILENAMEW,*LPOPENFILENAMEW;

  typedef OPENFILENAMEW OPENFILENAME;
  typedef LPOPENFILENAMEW LPOPENFILENAME;






                WINBOOL __attribute__((__stdcall__)) GetOpenFileNameA(LPOPENFILENAMEA);
                WINBOOL __attribute__((__stdcall__)) GetOpenFileNameW(LPOPENFILENAMEW);



                WINBOOL __attribute__((__stdcall__)) GetSaveFileNameA(LPOPENFILENAMEA);
                WINBOOL __attribute__((__stdcall__)) GetSaveFileNameW(LPOPENFILENAMEW);



                short __attribute__((__stdcall__)) GetFileTitleA(LPCSTR,LPSTR,WORD);
                short __attribute__((__stdcall__)) GetFileTitleW(LPCWSTR,LPWSTR,WORD);
  typedef UINT_PTR (__attribute__((__stdcall__)) *LPCCHOOKPROC) (HWND,UINT,WPARAM,LPARAM);

  typedef struct _OFNOTIFYA {
    NMHDR hdr;
    LPOPENFILENAMEA lpOFN;
    LPSTR pszFile;
  } OFNOTIFYA,*LPOFNOTIFYA;

  typedef struct _OFNOTIFYW {
    NMHDR hdr;
    LPOPENFILENAMEW lpOFN;
    LPWSTR pszFile;
  } OFNOTIFYW,*LPOFNOTIFYW;

  typedef OFNOTIFYW OFNOTIFY;
  typedef LPOFNOTIFYW LPOFNOTIFY;

  typedef struct _OFNOTIFYEXA {
    NMHDR hdr;
    LPOPENFILENAMEA lpOFN;
    LPVOID psf;
    LPVOID pidl;
  } OFNOTIFYEXA,*LPOFNOTIFYEXA;

  typedef struct _OFNOTIFYEXW {
    NMHDR hdr;
    LPOPENFILENAMEW lpOFN;
    LPVOID psf;
    LPVOID pidl;
  } OFNOTIFYEXW,*LPOFNOTIFYEXW;

  typedef OFNOTIFYEXW OFNOTIFYEX;
  typedef LPOFNOTIFYEXW LPOFNOTIFYEX;
  typedef struct tagCHOOSECOLORA {
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF *lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
  } CHOOSECOLORA,*LPCHOOSECOLORA;
  typedef struct tagCHOOSECOLORW {
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF *lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
  } CHOOSECOLORW,*LPCHOOSECOLORW;

  typedef CHOOSECOLORW CHOOSECOLOR;
  typedef LPCHOOSECOLORW LPCHOOSECOLOR;

                WINBOOL __attribute__((__stdcall__)) ChooseColorA(LPCHOOSECOLORA);
                WINBOOL __attribute__((__stdcall__)) ChooseColorW(LPCHOOSECOLORW);
  typedef UINT_PTR (__attribute__((__stdcall__)) *LPFRHOOKPROC) (HWND,UINT,WPARAM,LPARAM);

  typedef struct tagFINDREPLACEA {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    DWORD Flags;
    LPSTR lpstrFindWhat;
    LPSTR lpstrReplaceWith;
    WORD wFindWhatLen;
    WORD wReplaceWithLen;
    LPARAM lCustData;
    LPFRHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
  } FINDREPLACEA,*LPFINDREPLACEA;

  typedef struct tagFINDREPLACEW {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    DWORD Flags;
    LPWSTR lpstrFindWhat;
    LPWSTR lpstrReplaceWith;
    WORD wFindWhatLen;
    WORD wReplaceWithLen;
    LPARAM lCustData;
    LPFRHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
  } FINDREPLACEW,*LPFINDREPLACEW;

  typedef FINDREPLACEW FINDREPLACE;
  typedef LPFINDREPLACEW LPFINDREPLACE;
                HWND __attribute__((__stdcall__)) FindTextA(LPFINDREPLACEA);
                HWND __attribute__((__stdcall__)) FindTextW(LPFINDREPLACEW);



                HWND __attribute__((__stdcall__)) ReplaceTextA(LPFINDREPLACEA);
                HWND __attribute__((__stdcall__)) ReplaceTextW(LPFINDREPLACEW);



  typedef UINT_PTR (__attribute__((__stdcall__)) *LPCFHOOKPROC) (HWND,UINT,WPARAM,LPARAM);

  typedef struct tagCHOOSEFONTA {
    DWORD lStructSize;
    HWND hwndOwner;
    HDC hDC;
    LPLOGFONTA lpLogFont;
    INT iPointSize;
    DWORD Flags;
    COLORREF rgbColors;
    LPARAM lCustData;
    LPCFHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
    HINSTANCE hInstance;
    LPSTR lpszStyle;
    WORD nFontType;
    WORD ___MISSING_ALIGNMENT__;
    INT nSizeMin;
    INT nSizeMax;
  } CHOOSEFONTA,*LPCHOOSEFONTA;

  typedef struct tagCHOOSEFONTW {
    DWORD lStructSize;
    HWND hwndOwner;
    HDC hDC;
    LPLOGFONTW lpLogFont;
    INT iPointSize;
    DWORD Flags;
    COLORREF rgbColors;
    LPARAM lCustData;
    LPCFHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    HINSTANCE hInstance;
    LPWSTR lpszStyle;
    WORD nFontType;
    WORD ___MISSING_ALIGNMENT__;
    INT nSizeMin;
    INT nSizeMax;
  } CHOOSEFONTW,*LPCHOOSEFONTW;

  typedef CHOOSEFONTW CHOOSEFONT;
  typedef LPCHOOSEFONTW LPCHOOSEFONT;

                WINBOOL __attribute__((__stdcall__)) ChooseFontA(LPCHOOSEFONTA);
                WINBOOL __attribute__((__stdcall__)) ChooseFontW(LPCHOOSEFONTW);
  typedef UINT_PTR (__attribute__((__stdcall__)) *LPPRINTHOOKPROC) (HWND,UINT,WPARAM,LPARAM);
  typedef UINT_PTR (__attribute__((__stdcall__)) *LPSETUPHOOKPROC) (HWND,UINT,WPARAM,LPARAM);

  typedef struct tagPDA {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCSTR lpPrintTemplateName;
    LPCSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
  } PRINTDLGA,*LPPRINTDLGA;

  typedef struct tagPDW {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCWSTR lpPrintTemplateName;
    LPCWSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
  } PRINTDLGW,*LPPRINTDLGW;

  typedef PRINTDLGW PRINTDLG;
  typedef LPPRINTDLGW LPPRINTDLG;

                WINBOOL __attribute__((__stdcall__)) PrintDlgA(LPPRINTDLGA);
                WINBOOL __attribute__((__stdcall__)) PrintDlgW(LPPRINTDLGW);







  struct IPrintDialogCallback : public IUnknown {





    virtual __attribute__((nothrow)) HRESULT __attribute__((__stdcall__)) InitDone (void) = 0;
    virtual __attribute__((nothrow)) HRESULT __attribute__((__stdcall__)) SelectionChange (void) = 0;
    virtual __attribute__((nothrow)) HRESULT __attribute__((__stdcall__)) HandleMessage ( HWND hDlg,UINT uMsg,WPARAM wParam,LPARAM lParam,LRESULT *pResult) = 0;
  };



  struct IPrintDialogServices : public IUnknown {





    virtual __attribute__((nothrow)) HRESULT __attribute__((__stdcall__)) GetCurrentDevMode ( LPDEVMODE pDevMode,UINT *pcbSize) = 0;
    virtual __attribute__((nothrow)) HRESULT __attribute__((__stdcall__)) GetCurrentPrinterName ( LPTSTR pPrinterName,UINT *pcchSize) = 0;
    virtual __attribute__((nothrow)) HRESULT __attribute__((__stdcall__)) GetCurrentPortName ( LPTSTR pPortName,UINT *pcchSize) = 0;
  };

  typedef struct tagPRINTPAGERANGE {
    DWORD nFromPage;
    DWORD nToPage;
  } PRINTPAGERANGE,*LPPRINTPAGERANGE;

  typedef struct tagPDEXA {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCSTR lpPrintTemplateName;
    LPUNKNOWN lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE *lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
  } PRINTDLGEXA,*LPPRINTDLGEXA;

  typedef struct tagPDEXW {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCWSTR lpPrintTemplateName;
    LPUNKNOWN lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE *lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
  } PRINTDLGEXW,*LPPRINTDLGEXW;

  typedef PRINTDLGEXW PRINTDLGEX;
  typedef LPPRINTDLGEXW LPPRINTDLGEX;

                HRESULT __attribute__((__stdcall__)) PrintDlgExA(LPPRINTDLGEXA);
                HRESULT __attribute__((__stdcall__)) PrintDlgExW(LPPRINTDLGEXW);
  typedef struct tagDEVNAMES {
    WORD wDriverOffset;
    WORD wDeviceOffset;
    WORD wOutputOffset;
    WORD wDefault;
  } DEVNAMES,*LPDEVNAMES;



                DWORD __attribute__((__stdcall__)) CommDlgExtendedError(void);
  typedef UINT_PTR (__attribute__((__stdcall__)) *LPPAGEPAINTHOOK)(HWND,UINT,WPARAM,LPARAM);
  typedef UINT_PTR (__attribute__((__stdcall__)) *LPPAGESETUPHOOK)(HWND,UINT,WPARAM,LPARAM);

  typedef struct tagPSDA {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
  } PAGESETUPDLGA,*LPPAGESETUPDLGA;

  typedef struct tagPSDW {
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
  } PAGESETUPDLGW,*LPPAGESETUPDLGW;

  typedef PAGESETUPDLGW PAGESETUPDLG;
  typedef LPPAGESETUPDLGW LPPAGESETUPDLG;

                WINBOOL __attribute__((__stdcall__)) PageSetupDlgA(LPPAGESETUPDLGA);
                WINBOOL __attribute__((__stdcall__)) PageSetupDlgW(LPPAGESETUPDLGW);
}
extern "C" {
  PUWSTR ua_wcscpy(PUWSTR Destination,PCUWSTR Source);

  inline PUWSTR ua_wcscpy(PUWSTR Destination,PCUWSTR Source) { return wcscpy(Destination,Source); }
}
extern "C" {
}
extern "C" {
  typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR lpDescription;
  } SERVICE_DESCRIPTIONA,*LPSERVICE_DESCRIPTIONA;

  typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR lpDescription;
  } SERVICE_DESCRIPTIONW,*LPSERVICE_DESCRIPTIONW;

  typedef SERVICE_DESCRIPTIONW SERVICE_DESCRIPTION;
  typedef LPSERVICE_DESCRIPTIONW LPSERVICE_DESCRIPTION;

  typedef enum _SC_ACTION_TYPE {
    SC_ACTION_NONE = 0,SC_ACTION_RESTART = 1,SC_ACTION_REBOOT = 2,SC_ACTION_RUN_COMMAND = 3
  } SC_ACTION_TYPE;

  typedef struct _SC_ACTION {
    SC_ACTION_TYPE Type;
    DWORD Delay;
  } SC_ACTION,*LPSC_ACTION;

  typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
  } SERVICE_FAILURE_ACTIONSA,*LPSERVICE_FAILURE_ACTIONSA;

  typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
  } SERVICE_FAILURE_ACTIONSW,*LPSERVICE_FAILURE_ACTIONSW;

  typedef SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONS;
  typedef LPSERVICE_FAILURE_ACTIONSW LPSERVICE_FAILURE_ACTIONS;

  struct SC_HANDLE__ { int unused; }; typedef struct SC_HANDLE__ *SC_HANDLE;
  typedef SC_HANDLE *LPSC_HANDLE;

  struct SERVICE_STATUS_HANDLE__ { int unused; }; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;

  typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO = 0
  } SC_STATUS_TYPE;

  typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO = 0
  } SC_ENUM_TYPE;

  typedef struct _SERVICE_STATUS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
  } SERVICE_STATUS,*LPSERVICE_STATUS;

  typedef struct _SERVICE_STATUS_PROCESS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
  } SERVICE_STATUS_PROCESS,*LPSERVICE_STATUS_PROCESS;

  typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
  } ENUM_SERVICE_STATUSA,*LPENUM_SERVICE_STATUSA;

  typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
  } ENUM_SERVICE_STATUSW,*LPENUM_SERVICE_STATUSW;

  typedef ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUS;
  typedef LPENUM_SERVICE_STATUSW LPENUM_SERVICE_STATUS;

  typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
  } ENUM_SERVICE_STATUS_PROCESSA,*LPENUM_SERVICE_STATUS_PROCESSA;

  typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
  } ENUM_SERVICE_STATUS_PROCESSW,*LPENUM_SERVICE_STATUS_PROCESSW;

  typedef ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESS;
  typedef LPENUM_SERVICE_STATUS_PROCESSW LPENUM_SERVICE_STATUS_PROCESS;

  typedef LPVOID SC_LOCK;

  typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
  } QUERY_SERVICE_LOCK_STATUSA,*LPQUERY_SERVICE_LOCK_STATUSA;

  typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
  } QUERY_SERVICE_LOCK_STATUSW,*LPQUERY_SERVICE_LOCK_STATUSW;

  typedef QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUS;
  typedef LPQUERY_SERVICE_LOCK_STATUSW LPQUERY_SERVICE_LOCK_STATUS;

  typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
  } QUERY_SERVICE_CONFIGA,*LPQUERY_SERVICE_CONFIGA;

  typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
  } QUERY_SERVICE_CONFIGW,*LPQUERY_SERVICE_CONFIGW;

  typedef QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIG;
  typedef LPQUERY_SERVICE_CONFIGW LPQUERY_SERVICE_CONFIG;

  typedef void (__attribute__((__stdcall__)) *LPSERVICE_MAIN_FUNCTIONW)(DWORD dwNumServicesArgs,LPWSTR *lpServiceArgVectors);
  typedef void (__attribute__((__stdcall__)) *LPSERVICE_MAIN_FUNCTIONA)(DWORD dwNumServicesArgs,LPSTR *lpServiceArgVectors);



  typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
  } SERVICE_TABLE_ENTRYA,*LPSERVICE_TABLE_ENTRYA;

  typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
  } SERVICE_TABLE_ENTRYW,*LPSERVICE_TABLE_ENTRYW;

  typedef SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRY;
  typedef LPSERVICE_TABLE_ENTRYW LPSERVICE_TABLE_ENTRY;

  typedef void (__attribute__((__stdcall__)) *LPHANDLER_FUNCTION)(DWORD dwControl);
  typedef DWORD (__attribute__((__stdcall__)) *LPHANDLER_FUNCTION_EX)(DWORD dwControl,DWORD dwEventType,LPVOID lpEventData,LPVOID lpContext);
            WINBOOL __attribute__((__stdcall__)) ChangeServiceConfigA(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword,LPCSTR lpDisplayName);
            WINBOOL __attribute__((__stdcall__)) ChangeServiceConfigW(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCWSTR lpBinaryPathName,LPCWSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCWSTR lpDependencies,LPCWSTR lpServiceStartName,LPCWSTR lpPassword,LPCWSTR lpDisplayName);
            WINBOOL __attribute__((__stdcall__)) ChangeServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
            WINBOOL __attribute__((__stdcall__)) ChangeServiceConfig2W(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
            WINBOOL __attribute__((__stdcall__)) CloseServiceHandle(SC_HANDLE hSCObject);
            WINBOOL __attribute__((__stdcall__)) ControlService(SC_HANDLE hService,DWORD dwControl,LPSERVICE_STATUS lpServiceStatus);
            SC_HANDLE __attribute__((__stdcall__)) CreateServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPCSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword);
            SC_HANDLE __attribute__((__stdcall__)) CreateServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,LPCWSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCWSTR lpBinaryPathName,LPCWSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCWSTR lpDependencies,LPCWSTR lpServiceStartName,LPCWSTR lpPassword);
            WINBOOL __attribute__((__stdcall__)) DeleteService(SC_HANDLE hService);
            WINBOOL __attribute__((__stdcall__)) EnumDependentServicesA(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
            WINBOOL __attribute__((__stdcall__)) EnumDependentServicesW(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSW lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
            WINBOOL __attribute__((__stdcall__)) EnumServicesStatusA(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle);
            WINBOOL __attribute__((__stdcall__)) EnumServicesStatusW(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSW lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle);
            WINBOOL __attribute__((__stdcall__)) EnumServicesStatusExA(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCSTR pszGroupName);
            WINBOOL __attribute__((__stdcall__)) EnumServicesStatusExW(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCWSTR pszGroupName);
            WINBOOL __attribute__((__stdcall__)) GetServiceKeyNameA(SC_HANDLE hSCManager,LPCSTR lpDisplayName,LPSTR lpServiceName,LPDWORD lpcchBuffer);
            WINBOOL __attribute__((__stdcall__)) GetServiceKeyNameW(SC_HANDLE hSCManager,LPCWSTR lpDisplayName,LPWSTR lpServiceName,LPDWORD lpcchBuffer);
            WINBOOL __attribute__((__stdcall__)) GetServiceDisplayNameA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPSTR lpDisplayName,LPDWORD lpcchBuffer);
            WINBOOL __attribute__((__stdcall__)) GetServiceDisplayNameW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,LPWSTR lpDisplayName,LPDWORD lpcchBuffer);
            SC_LOCK __attribute__((__stdcall__)) LockServiceDatabase(SC_HANDLE hSCManager);
            WINBOOL __attribute__((__stdcall__)) NotifyBootConfigStatus(WINBOOL BootAcceptable);
            SC_HANDLE __attribute__((__stdcall__)) OpenSCManagerA(LPCSTR lpMachineName,LPCSTR lpDatabaseName,DWORD dwDesiredAccess);
            SC_HANDLE __attribute__((__stdcall__)) OpenSCManagerW(LPCWSTR lpMachineName,LPCWSTR lpDatabaseName,DWORD dwDesiredAccess);
            SC_HANDLE __attribute__((__stdcall__)) OpenServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,DWORD dwDesiredAccess);
            SC_HANDLE __attribute__((__stdcall__)) OpenServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,DWORD dwDesiredAccess);
            WINBOOL __attribute__((__stdcall__)) QueryServiceConfigA(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGA lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
            WINBOOL __attribute__((__stdcall__)) QueryServiceConfigW(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGW lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
            WINBOOL __attribute__((__stdcall__)) QueryServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
            WINBOOL __attribute__((__stdcall__)) QueryServiceConfig2W(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
            WINBOOL __attribute__((__stdcall__)) QueryServiceLockStatusA(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
            WINBOOL __attribute__((__stdcall__)) QueryServiceLockStatusW(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
            WINBOOL __attribute__((__stdcall__)) QueryServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
            WINBOOL __attribute__((__stdcall__)) QueryServiceStatus(SC_HANDLE hService,LPSERVICE_STATUS lpServiceStatus);
            WINBOOL __attribute__((__stdcall__)) QueryServiceStatusEx(SC_HANDLE hService,SC_STATUS_TYPE InfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
            SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerA(LPCSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc);
            SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc);
            SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext);
            SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext);
            WINBOOL __attribute__((__stdcall__)) SetServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor);
            WINBOOL __attribute__((__stdcall__)) SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus,LPSERVICE_STATUS lpServiceStatus);
            WINBOOL __attribute__((__stdcall__)) StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable);
            WINBOOL __attribute__((__stdcall__)) StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable);
            WINBOOL __attribute__((__stdcall__)) StartServiceA(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCSTR *lpServiceArgVectors);
            WINBOOL __attribute__((__stdcall__)) StartServiceW(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCWSTR *lpServiceArgVectors);
            WINBOOL __attribute__((__stdcall__)) UnlockServiceDatabase(SC_LOCK ScLock);
}
typedef struct _MODEMDEVCAPS {
  DWORD dwActualSize;
  DWORD dwRequiredSize;
  DWORD dwDevSpecificOffset;
  DWORD dwDevSpecificSize;
  DWORD dwModemProviderVersion;
  DWORD dwModemManufacturerOffset;
  DWORD dwModemManufacturerSize;
  DWORD dwModemModelOffset;
  DWORD dwModemModelSize;
  DWORD dwModemVersionOffset;
  DWORD dwModemVersionSize;
  DWORD dwDialOptions;
  DWORD dwCallSetupFailTimer;
  DWORD dwInactivityTimeout;
  DWORD dwSpeakerVolume;
  DWORD dwSpeakerMode;
  DWORD dwModemOptions;
  DWORD dwMaxDTERate;
  DWORD dwMaxDCERate;
  BYTE abVariablePortion[1];
} MODEMDEVCAPS,*PMODEMDEVCAPS,*LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
  DWORD dwActualSize;
  DWORD dwRequiredSize;
  DWORD dwDevSpecificOffset;
  DWORD dwDevSpecificSize;
  DWORD dwCallSetupFailTimer;
  DWORD dwInactivityTimeout;
  DWORD dwSpeakerVolume;
  DWORD dwSpeakerMode;
  DWORD dwPreferredModemOptions;
  DWORD dwNegotiatedModemOptions;
  DWORD dwNegotiatedDCERate;
  BYTE abVariablePortion [1];
} MODEMSETTINGS,*PMODEMSETTINGS,*LPMODEMSETTINGS;
extern "C" {





  struct HIMC__ { int unused; }; typedef struct HIMC__ *HIMC;
  struct HIMCC__ { int unused; }; typedef struct HIMCC__ *HIMCC;

  typedef HKL *LPHKL;





  typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
  } COMPOSITIONFORM,*PCOMPOSITIONFORM,*NPCOMPOSITIONFORM,*LPCOMPOSITIONFORM;

  typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
  } CANDIDATEFORM,*PCANDIDATEFORM,*NPCANDIDATEFORM,*LPCANDIDATEFORM;

  typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
  } CANDIDATELIST,*PCANDIDATELIST,*NPCANDIDATELIST,*LPCANDIDATELIST;

  typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
  } REGISTERWORDA,*PREGISTERWORDA,*NPREGISTERWORDA,*LPREGISTERWORDA;

  typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
  } REGISTERWORDW,*PREGISTERWORDW,*NPREGISTERWORDW,*LPREGISTERWORDW;

  typedef REGISTERWORDW REGISTERWORD;
  typedef PREGISTERWORDW PREGISTERWORD;
  typedef NPREGISTERWORDW NPREGISTERWORD;
  typedef LPREGISTERWORDW LPREGISTERWORD;

  typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
  } RECONVERTSTRING,*PRECONVERTSTRING,*NPRECONVERTSTRING,*LPRECONVERTSTRING;



  typedef struct tagSTYLEBUFA {
    DWORD dwStyle;
    CHAR szDescription[32];
  } STYLEBUFA,*PSTYLEBUFA,*NPSTYLEBUFA,*LPSTYLEBUFA;

  typedef struct tagSTYLEBUFW {
    DWORD dwStyle;
    WCHAR szDescription[32];
  } STYLEBUFW,*PSTYLEBUFW,*NPSTYLEBUFW,*LPSTYLEBUFW;

  typedef STYLEBUFW STYLEBUF;
  typedef PSTYLEBUFW PSTYLEBUF;
  typedef NPSTYLEBUFW NPSTYLEBUF;
  typedef LPSTYLEBUFW LPSTYLEBUF;



  typedef struct tagIMEMENUITEMINFOA {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
  } IMEMENUITEMINFOA,*PIMEMENUITEMINFOA,*NPIMEMENUITEMINFOA,*LPIMEMENUITEMINFOA;

  typedef struct tagIMEMENUITEMINFOW {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
  } IMEMENUITEMINFOW,*PIMEMENUITEMINFOW,*NPIMEMENUITEMINFOW,*LPIMEMENUITEMINFOW;

  typedef IMEMENUITEMINFOW IMEMENUITEMINFO;
  typedef PIMEMENUITEMINFOW PIMEMENUITEMINFO;
  typedef NPIMEMENUITEMINFOW NPIMEMENUITEMINFO;
  typedef LPIMEMENUITEMINFOW LPIMEMENUITEMINFO;

  typedef struct tagIMECHARPOSITION {
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
  } IMECHARPOSITION,*PIMECHARPOSITION,*NPIMECHARPOSITION,*LPIMECHARPOSITION;

  typedef WINBOOL (__attribute__((__stdcall__)) *IMCENUMPROC)(HIMC,LPARAM);
  HKL __attribute__((__stdcall__)) ImmInstallIMEA(LPCSTR lpszIMEFileName,LPCSTR lpszLayoutText);
  HKL __attribute__((__stdcall__)) ImmInstallIMEW(LPCWSTR lpszIMEFileName,LPCWSTR lpszLayoutText);
  HWND __attribute__((__stdcall__)) ImmGetDefaultIMEWnd(HWND);
  UINT __attribute__((__stdcall__)) ImmGetDescriptionA(HKL,LPSTR,UINT uBufLen);
  UINT __attribute__((__stdcall__)) ImmGetDescriptionW(HKL,LPWSTR,UINT uBufLen);
  UINT __attribute__((__stdcall__)) ImmGetIMEFileNameA(HKL,LPSTR,UINT uBufLen);
  UINT __attribute__((__stdcall__)) ImmGetIMEFileNameW(HKL,LPWSTR,UINT uBufLen);
  DWORD __attribute__((__stdcall__)) ImmGetProperty(HKL,DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmIsIME(HKL);
  WINBOOL __attribute__((__stdcall__)) ImmSimulateHotKey(HWND,DWORD);
  HIMC __attribute__((__stdcall__)) ImmCreateContext(void);
  WINBOOL __attribute__((__stdcall__)) ImmDestroyContext(HIMC);
  HIMC __attribute__((__stdcall__)) ImmGetContext(HWND);
  WINBOOL __attribute__((__stdcall__)) ImmReleaseContext(HWND,HIMC);
  HIMC __attribute__((__stdcall__)) ImmAssociateContext(HWND,HIMC);
  WINBOOL __attribute__((__stdcall__)) ImmAssociateContextEx(HWND,HIMC,DWORD);
  LONG __attribute__((__stdcall__)) ImmGetCompositionStringA(HIMC,DWORD,LPVOID,DWORD);
  LONG __attribute__((__stdcall__)) ImmGetCompositionStringW(HIMC,DWORD,LPVOID,DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmSetCompositionStringA(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmSetCompositionStringW(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD);
  DWORD __attribute__((__stdcall__)) ImmGetCandidateListCountA(HIMC,LPDWORD lpdwListCount);
  DWORD __attribute__((__stdcall__)) ImmGetCandidateListCountW(HIMC,LPDWORD lpdwListCount);
  DWORD __attribute__((__stdcall__)) ImmGetCandidateListA(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen);
  DWORD __attribute__((__stdcall__)) ImmGetCandidateListW(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen);
  DWORD __attribute__((__stdcall__)) ImmGetGuideLineA(HIMC,DWORD dwIndex,LPSTR,DWORD dwBufLen);
  DWORD __attribute__((__stdcall__)) ImmGetGuideLineW(HIMC,DWORD dwIndex,LPWSTR,DWORD dwBufLen);
  WINBOOL __attribute__((__stdcall__)) ImmGetConversionStatus(HIMC,LPDWORD,LPDWORD);
  WINBOOL __attribute__((__stdcall__)) ImmSetConversionStatus(HIMC,DWORD,DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmGetOpenStatus(HIMC);
  WINBOOL __attribute__((__stdcall__)) ImmSetOpenStatus(HIMC,WINBOOL);






  WINBOOL __attribute__((__stdcall__)) ImmGetCompositionFontA(HIMC,LPLOGFONTA);
  WINBOOL __attribute__((__stdcall__)) ImmGetCompositionFontW(HIMC,LPLOGFONTW);
  WINBOOL __attribute__((__stdcall__)) ImmSetCompositionFontA(HIMC,LPLOGFONTA);
  WINBOOL __attribute__((__stdcall__)) ImmSetCompositionFontW(HIMC,LPLOGFONTW);


  typedef int (__attribute__((__stdcall__)) *REGISTERWORDENUMPROCA)(LPCSTR,DWORD,LPCSTR,LPVOID);
  typedef int (__attribute__((__stdcall__)) *REGISTERWORDENUMPROCW)(LPCWSTR,DWORD,LPCWSTR,LPVOID);
  WINBOOL __attribute__((__stdcall__)) ImmConfigureIMEA(HKL,HWND,DWORD,LPVOID);
  WINBOOL __attribute__((__stdcall__)) ImmConfigureIMEW(HKL,HWND,DWORD,LPVOID);
  LRESULT __attribute__((__stdcall__)) ImmEscapeA(HKL,HIMC,UINT,LPVOID);
  LRESULT __attribute__((__stdcall__)) ImmEscapeW(HKL,HIMC,UINT,LPVOID);
  DWORD __attribute__((__stdcall__)) ImmGetConversionListA(HKL,HIMC,LPCSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag);
  DWORD __attribute__((__stdcall__)) ImmGetConversionListW(HKL,HIMC,LPCWSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag);
  WINBOOL __attribute__((__stdcall__)) ImmNotifyIME(HIMC,DWORD dwAction,DWORD dwIndex,DWORD dwValue);
  WINBOOL __attribute__((__stdcall__)) ImmGetStatusWindowPos(HIMC,LPPOINT);
  WINBOOL __attribute__((__stdcall__)) ImmSetStatusWindowPos(HIMC,LPPOINT);
  WINBOOL __attribute__((__stdcall__)) ImmGetCompositionWindow(HIMC,LPCOMPOSITIONFORM);
  WINBOOL __attribute__((__stdcall__)) ImmSetCompositionWindow(HIMC,LPCOMPOSITIONFORM);
  WINBOOL __attribute__((__stdcall__)) ImmGetCandidateWindow(HIMC,DWORD,LPCANDIDATEFORM);
  WINBOOL __attribute__((__stdcall__)) ImmSetCandidateWindow(HIMC,LPCANDIDATEFORM);
  WINBOOL __attribute__((__stdcall__)) ImmIsUIMessageA(HWND,UINT,WPARAM,LPARAM);
  WINBOOL __attribute__((__stdcall__)) ImmIsUIMessageW(HWND,UINT,WPARAM,LPARAM);
  UINT __attribute__((__stdcall__)) ImmGetVirtualKey(HWND);
  WINBOOL __attribute__((__stdcall__)) ImmRegisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister);
  WINBOOL __attribute__((__stdcall__)) ImmRegisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister);
  WINBOOL __attribute__((__stdcall__)) ImmUnregisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszUnregister);
  WINBOOL __attribute__((__stdcall__)) ImmUnregisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszUnregister);
  UINT __attribute__((__stdcall__)) ImmGetRegisterWordStyleA(HKL,UINT nItem,LPSTYLEBUFA);
  UINT __attribute__((__stdcall__)) ImmGetRegisterWordStyleW(HKL,UINT nItem,LPSTYLEBUFW);
  UINT __attribute__((__stdcall__)) ImmEnumRegisterWordA(HKL,REGISTERWORDENUMPROCA,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister,LPVOID);
  UINT __attribute__((__stdcall__)) ImmEnumRegisterWordW(HKL,REGISTERWORDENUMPROCW,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister,LPVOID);
  WINBOOL __attribute__((__stdcall__)) ImmDisableIME(DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmEnumInputContext(DWORD idThread,IMCENUMPROC lpfn,LPARAM lParam);
  DWORD __attribute__((__stdcall__)) ImmGetImeMenuItemsA(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOA,LPIMEMENUITEMINFOA,DWORD);
  DWORD __attribute__((__stdcall__)) ImmGetImeMenuItemsW(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOW,LPIMEMENUITEMINFOW,DWORD);
  WINBOOL __attribute__((__stdcall__)) ImmDisableTextFrameService(DWORD idThread);
}
extern "C"{


            wchar_t* __attribute__((__cdecl__)) fgetws (wchar_t*, int, FILE*);
            int __attribute__((__cdecl__)) fputws (const wchar_t*, FILE*);
             wint_t __attribute__((__cdecl__)) getwc (FILE*);
             wint_t __attribute__((__cdecl__)) getwchar (void);
             wchar_t* __attribute__((__cdecl__)) _getws (wchar_t*);
             wint_t __attribute__((__cdecl__)) putwc (wint_t, FILE*);
            int __attribute__((__cdecl__)) _putws (const wchar_t*);
            wint_t __attribute__((__cdecl__)) putwchar (wint_t);
            FILE* __attribute__((__cdecl__)) _wfdopen(int, const wchar_t *);
            FILE* __attribute__((__cdecl__)) _wfopen (const wchar_t*, const wchar_t*);
            FILE* __attribute__((__cdecl__)) _wfreopen (const wchar_t*, const wchar_t*, FILE*);
            FILE* __attribute__((__cdecl__)) _wfsopen (const wchar_t*, const wchar_t*, int);
            wchar_t* __attribute__((__cdecl__)) _wtmpnam (wchar_t*);
            wchar_t* __attribute__((__cdecl__)) _wtempnam (const wchar_t*, const wchar_t*);
            int __attribute__((__cdecl__)) _wrename (const wchar_t*, const wchar_t*);
             int __attribute__((__cdecl__)) _wremove (const wchar_t*);

            FILE* __attribute__((__cdecl__)) _wpopen (const wchar_t*, const wchar_t*);
}


}




void* c_e(void* _ptr){
    if(_ptr == 0){


        while(1){


                    if(Lib_GZ::Lib::nNumWindows!= 0){
                            MSG msg;
                            while( GetMessageW(&msg, 0, 0, 0)) {
                                    TranslateMessage(&msg);
                                    DispatchMessageW(&msg);
                            }
                            Lib_GZ::Lib::nAppReturn = (gzInt32)msg.wParam ;
                    }
                    Sleep(1000);

        }
    }
    return _ptr;
}



ArrayPtr** GZ_tAw_Ptr(ArrayPtr* _aArray, gzUInt _nIndex){
 if(_nIndex > _aArray->size){
 }
 if(_aArray->array[_nIndex] == 0){

        ArrayPtr* _aNewArray;
        _aNewArray = (ArrayPtr*)malloc((1) * (sizeof(ArrayPtr))); _aNewArray->array = (ArrayPtr**)calloc(10, sizeof(void*)); _aNewArray->size = 10;
        _aArray->array[_nIndex] = _aNewArray;

        return &_aArray->array[_nIndex];
 }
 return &_aArray->array[_nIndex];
}


ArrayPtr* GZ_tAr_Ptr(ArrayPtr* _aArray, gzUInt _nIndex){
 if(_nIndex > _aArray->size){
 }
 if(_aArray->array[_nIndex] == 0){

        ArrayPtr* _aNewArray;
        _aNewArray = (ArrayPtr*)malloc((1) * (sizeof(ArrayPtr))); _aNewArray->array = (ArrayPtr**)calloc(10, sizeof(void*)); _aNewArray->size = 10;
        _aArray->array[_nIndex] = _aNewArray;
        return _aNewArray;
 }
 return _aArray->array[_nIndex];
}


gzInt32* GZ_tAw_Int(ArrayInt* _aArray, gzUInt _nIndex){
 if(_nIndex > _aArray->size){

 }
 return &_aArray->array[_nIndex];
}
gzInt32 GZ_tAr_Int(ArrayInt* _aArray, gzUInt _nIndex){
 if(_nIndex > _aArray->size){
        return 0;
 }
 return _aArray->array[_nIndex];
}

void gzDataRoot::fFree(){



  free(aTab);

}

void gzDataRoot::fMalloc(gzUInt _nSize){
  aTab = malloc((_nSize) * (nStride));


}

 gzPtr gzaCallStack[1024];
 gzUInt gznCallStackIndex;


namespace Lib_GZ{

    void fConsole(const gzStr& _sValue){
        printf("c:");
        printf("%s", (char*)_sValue.fcStr() );
        printf("\n");
    }

    void fSpAssertError(gzUInt _nLine){
        Lib_GZ::fConsole((gzStr((gzUInt8*)"\0" "Shared Ptr Error, place breakpoint here to get the call stack", (sizeof("\0" "Shared Ptr Error, place breakpoint here to get the call stack")/sizeof(gzUInt8)) - 2, true)));
            ;
    }

    void fSpAssertError(const gzStr& _sMessage, gzUInt _nLine){
        Lib_GZ::fConsole((gzStr((gzUInt8*)"\0" "Shared Ptr Error:", (sizeof("\0" "Shared Ptr Error:")/sizeof(gzUInt8)) - 2, true)) + _sMessage + (gzStr((gzUInt8*)"\0" ", place breakpoint here to get the call stack", (sizeof("\0" ", place breakpoint here to get the call stack")/sizeof(gzUInt8)) - 2, true)));
            ;
    }
}

namespace Lib_GZ{
void GZ_uEase_fStep(GZ_uEase_gzInt8* _rEase){

    if(_rEase->nLastVal != *(_rEase->nVal)){
        _rEase->nFracVal = gzFloat( *(_rEase->nVal) );
    }
    _rEase->nFracVal += (gzFloat(_rEase->nTo) - _rEase->nFracVal)/_rEase->nSpeed;
    _rEase->nLastVal = (_rEase->nFracVal);
    *(_rEase->nVal) = _rEase->nLastVal;
}

void GZ_uEase_fStep(GZ_uEase_gzInt16* _rEase){

    if(_rEase->nLastVal != *(_rEase->nVal)){
        _rEase->nFracVal = gzFloat( *(_rEase->nVal) );
    }
    _rEase->nFracVal += (gzFloat(_rEase->nTo) - _rEase->nFracVal)/_rEase->nSpeed;
    _rEase->nLastVal = (_rEase->nFracVal);
    *(_rEase->nVal) = _rEase->nLastVal;
}

void GZ_uEase_fStep(GZ_uEase_gzInt32* _rEase){

    if(_rEase->nLastVal != *(_rEase->nVal)){
        _rEase->nFracVal = gzFloat( *(_rEase->nVal) );
    }
    if(_rEase->nSpeed > 0){
        _rEase->nFracVal += (gzFloat(_rEase->nTo) - _rEase->nFracVal)/_rEase->nSpeed;
    }else{
        _rEase->nFracVal += (gzFloat(_rEase->nTo)*(-0.03) - _rEase->nFracVal)/_rEase->nSpeed;
    }

    _rEase->nLastVal = (_rEase->nFracVal);
    *(_rEase->nVal) = _rEase->nLastVal;
}

void GZ_uEase_fStep(GZ_uEase_gzInt64* _rEase){

    if(_rEase->nLastVal != *(_rEase->nVal)){
        _rEase->nFracVal = gzFloat( *(_rEase->nVal) );
    }
    _rEase->nFracVal += (gzFloat(_rEase->nTo) - _rEase->nFracVal)/_rEase->nSpeed;
    _rEase->nLastVal = (_rEase->nFracVal);
    *(_rEase->nVal) = _rEase->nLastVal;
}


void GZ_uEase_fStep(GZ_uEase_gzFloat32* _rEase){


    if(_rEase->nLastVal != *(_rEase->nVal)){
        _rEase->nFracVal = *(_rEase->nVal);
    }
    _rEase->nLastVal = *(_rEase->nVal);

    if(_rEase->nSpeed >= 0){
        gzFloat _nVal = (_rEase->nTo - _rEase->nFracVal)/_rEase->nSpeed;
        if(_nVal > _rEase->nLimit){
            _nVal = _rEase->nLimit;
        }
        if(_nVal < -_rEase->nLimit){
            _nVal = -_rEase->nLimit;
        }
        _rEase->nFracVal += _nVal;

    }else{
        gzFloat _nVal = (_rEase->nTo*(-0.03) - _rEase->nFracVal)/_rEase->nSpeed;
        if(_nVal > _rEase->nLimit){
            _nVal = _rEase->nLimit;
        }
        if(_nVal < -_rEase->nLimit){
            _nVal = -_rEase->nLimit;
        }
        _rEase->nFracVal += _nVal;
        if( _rEase->nFracVal > _rEase->nTo){
            _rEase->nFracVal = _rEase->nTo;
        }
    }

    *(_rEase->nVal) = (_rEase->nFracVal);
}


}

namespace Lib_GZ{class cAtomicQueue;}




template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}





template <class T> class gzQArray;






namespace Lib_GZ{class cThreadMsg;}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace ThreadMsg{



}}


namespace Lib_GZ{class cThreadMsg;}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace ThreadMsg{
}
class pThreadMsg {

 public:


};

class cThreadMsg : public Lib_GZ::cClass {

 public:



  cThreadMsg(Lib_GZ::cBase* _parent);
  virtual void Ini_cThreadMsg();
  virtual void fRun();

  inline cThreadMsg(const cThreadMsg &_o) : Lib_GZ::cClass(_o){};
  inline cThreadMsg(const cThreadMsg &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual ~cThreadMsg();

 private:



};
class csThreadMsg : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cThreadMsg> New(Lib_GZ::cBase* _parent){
   gzSp<cThreadMsg>_oTemp = gzSp<cThreadMsg>(new cThreadMsg(_parent));
   _oTemp->Ini_cThreadMsg();
   return _oTemp;
  }




  inline csThreadMsg(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csThreadMsg(){};
};
namespace ThreadMsg{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csThreadMsg((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csThreadMsg> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csThreadMsg*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csThreadMsg*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csThreadMsg>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace ThreadMsg{
}}


namespace Lib_GZ{class cAtomicQueue;}
namespace Lib_GZ{
namespace AtomicQueue{}


class cAtomicQueue {



  gzQArray<void*> qaQueue;


 public:
  inline void* fReceive(){
    return qaQueue.fPrePop();

  }

  inline gzInt fSend(Lib_GZ::cThreadMsg* _oMsg) {




    qaQueue.fPush(_oMsg);
    return 0;

  }


  inline cAtomicQueue(){};
  inline ~cAtomicQueue(){};
 private:
};


}



namespace Lib_GZ{
namespace Gate{

 void fAdd(Lib_GZ::cHoldGate* _oHold){
  _oHold->nNbIns++;
 }

 void fSub(Lib_GZ::cHoldGate* _oHold){
  if(_oHold->nNbIns == 1){
   delete _oHold;
  }else{
   _oHold->nNbIns--;
  }
 }
}


 cHoldGate::cHoldGate():nNbIns(1){
  oQueue = new cAtomicQueue();
 }

 cHoldGate::~cHoldGate(){
  delete oQueue;
 }


  int cHoldGate::fSend(Lib_GZ::cThreadMsg* _oMsg){

  Lib_GZ::cThreadMsg* _oCpyMsg = (Lib_GZ::cThreadMsg*) ((Lib_GZ::cDelegate*)_oMsg)->DeepCopy();

  oQueue->fSend(_oCpyMsg);
  return 0;
  }


 Lib_GZ::cThreadMsg* cHoldGate::fReceive(cBase* _oReceivingClass) {
        Lib_GZ::cThreadMsg* _oMsg = (Lib_GZ::cThreadMsg*)oQueue->fReceive();
        if(_oMsg){
   _oMsg->parent = _oReceivingClass->SpFromThis();
            _oMsg->thread = _oReceivingClass->thread;
        }
  return _oMsg;
 }


 }




namespace Lib_GZ{namespace Sys{class cSystem;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Sys{namespace System{



}}}


namespace Lib_GZ{namespace Sys{class cSystem;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace System{
}
class pSystem {

 public:


};

class cSystem : public Lib_GZ::cClass {

 public:



  cSystem(Lib_GZ::cBase* _parent);
  virtual void Ini_cSystem();
  virtual void fSleep(gzUInt _nMilliseconds = 1);

  inline cSystem(const cSystem &_o) : Lib_GZ::cClass(_o){};
  inline cSystem(const cSystem &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cSystem();

 private:



};
class csSystem : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cSystem> New(Lib_GZ::cBase* _parent){
   gzSp<cSystem>_oTemp = gzSp<cSystem>(new cSystem(_parent));
   _oTemp->Ini_cSystem();
   return _oTemp;
  }

  gzSp<Lib_GZ::Sys::cSystem> oInst;
  gzUIntX nInstance;
  gzBool bHaveGpu;
  gzStr sCmdLineArguments;


  virtual void fSleep(gzUInt _nMilliseconds = 1);
  virtual void fIni(gzUIntX _nInstance, const gzStr& _sCommandLine, gzUInt _nShowCmd);
  virtual gzBool fDetectGpu();
  virtual void fExit();
  virtual gzBool GbAnyResolutionAvailable();
  virtual gzUInt GnForceWidth();
  virtual gzUInt GnForceHeight();

  inline csSystem(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csSystem(){};
};
namespace System{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csSystem((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csSystem> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csSystem*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csSystem*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csSystem>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace System{
}}}









namespace Lib_GZ{namespace Sys{class cFile;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}






namespace Lib_GZ{namespace Sys{namespace File{



}}}



namespace Lib_GZ{namespace File{class cResource;}}



namespace Lib_GZ{namespace File{namespace Resource{





 struct eLocation{
  enum Type {
   Unknow = 0,
   Drive = 1,
   Memory = 2
  };
  Type t_;inline eLocation(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eLocation(){};
 };
}}}

namespace Lib_GZ{namespace Sys{class cFile;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace File{
}
class pFile {

 public:


};

class cFile : public Lib_GZ::cClass {

 public:



  cFile(Lib_GZ::cBase* _parent);
  virtual void Ini_cFile();

  inline cFile(const cFile &_o) : Lib_GZ::cClass(_o){};
  inline cFile(const cFile &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cFile();

 private:



};
class csFile : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cFile> New(Lib_GZ::cBase* _parent){
   gzSp<cFile>_oTemp = gzSp<cFile>(new cFile(_parent));
   _oTemp->Ini_cFile();
   return _oTemp;
  }



  virtual gzInt fCreateDirectory(const gzStr& _sFolder);
  virtual gzBool fIsFileExist(const gzStr& _sFile);
  virtual void fLauch(const gzStr& _sFile, const gzStr& _sArguments);
  virtual gzStr fGetExePath();
  virtual gzStr fGetFullPath(const gzStr& _sDrive, const gzStr& _sPath);
  virtual gzBool fLoadFileFromVDrive(Lib_GZ::File::cResource* _oRc);
  virtual gzBool fLoadFile(Lib_GZ::File::cResource* _oRc, const gzStr& _sFullPath);

  inline csFile(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csFile(){};
};
namespace File{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csFile((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csFile> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csFile*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csFile*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csFile>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace File{
}}}



namespace Lib_GZ{class cThreadList;}




template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}


namespace Lib_GZ{class cThreadList;}


namespace Lib_GZ{
namespace ThreadList{
    extern gzQArray<gzSp<cThreadExt>> qaList;
    extern gzQElement<gzSp<cThreadExt>> qeTask;
    void fAdd(cThreadExt* _opThread);
    void fRemove(cThreadExt* _opThread);
    void Ini_Class();
    void fNextTask();
}
}
namespace Lib_GZ {

namespace Lib {
  gzUInt _nId = Lib_GZ::Lib::nClass++;

  gzBool bLittleEndian;


       gzInt32 nThreadCount = 0;

       uLib* rLastLib = 0;
       gzUInt nClass = 0;


        gzBool bIniFinish = false;
        gzInt32 nNumWindows = 0;
        gzBool bIsAlive = true;
        gzInt32 nAppReturn = 0;
        gzBool bIsIni = false;

         gzStr sDirExe;
         gzStr sExeName;
         gzStr sExeExt;
         gzStr sExe;


         gzStr sDirRcFiles;
         gzStr sDirRcEmbed;
        gzArray<gzStr> aLib;

        gzWp<Lib_GZ::Sys::cContext> oWinLib;

        void Ini_Class(){

           Lib_GZ::ThreadList::Ini_Class();
            printf("\n\n\n INII_Class! \n\n");
        }


}

namespace Lib{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); };



struct uRcList{
    uRcList* rNext;
    File::cResource* _oRc;
};
static uRcList* rFirstRc = 0;


struct uRcPtrFuncList{
    uRcPtrFuncList* rPrec;
    gzPtrFuncRc _dPtrFunc;
};
static uRcPtrFuncList* _rLastPtrFunc = 0;
gzBool Lib::fAddLoadRc(gzPtrFuncRc _dPtrFunc){
    uRcPtrFuncList* _rPtrFunc = (uRcPtrFuncList*)malloc((1) * (sizeof(uRcPtrFuncList)));
    _rPtrFunc->_dPtrFunc = _dPtrFunc;
    _rPtrFunc->rPrec = _rLastPtrFunc;
    _rLastPtrFunc = _rPtrFunc;
    return true;
}



void csLib::fStaticIni(){

 gzStr _sPath = Lib_GZ::Sys::File::Get(thread)->fGetExePath();
 _sPath.fEnd();
 _sPath.fPathFindPrecFolder();
 _sPath.fNext();
 Lib::sDirExe = _sPath.fRevSubStr((gzStr((gzUInt8*)"\0" "\xEF\xB7\x90", (sizeof("\0" "\xEF\xB7\x90")/sizeof(gzUInt8)) - 2, true)));

 Lib::sExeName = _sPath.fPathGetFileName();
 Lib::sExeExt = _sPath.fPathGetFileExtention();
 Lib::sExe = Lib::sExeName + (gzStr((gzUInt8*)"\0" ".", (sizeof("\0" ".")/sizeof(gzUInt8)) - 2, true)) + Lib::sExeExt;


      Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "*********************--- PATH: ", (sizeof("\0" "*********************--- PATH: ")/sizeof(gzUInt8)) - 2, true)) + Lib::sDirExe);
}

void cLib::fLoadAllRc(){

     uRcPtrFuncList* _rPtrFunc = _rLastPtrFunc;
    while (_rPtrFunc != 0){

        uRcList* _oPtrRc = (uRcList*)malloc((1) * (sizeof(uRcList)));
        _oPtrRc->rNext = rFirstRc;
        _oPtrRc->_oRc = (*_rPtrFunc->_dPtrFunc)();
        rFirstRc = _oPtrRc;

        _rPtrFunc = _rPtrFunc->rPrec;
        free(_rPtrFunc);
    }
     free(_rLastPtrFunc);
    _rLastPtrFunc = 0;
}


static uLib* _rLasLib = 0;
void Lib::fLoadAllLib(){
     Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "\n ---fLoadAllLib - ", (sizeof("\0" "\n ---fLoadAllLib - ")/sizeof(gzUInt8)) - 2, true)));

     uLib* _rLib = rLastLib;
    while (_rLib != 0){

        Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "\n----Lib: ", (sizeof("\0" "\n----Lib: ")/sizeof(gzUInt8)) - 2, true)) + _rLib->sName);

        fSetID(*_rLib->_rLastClass);
        _rLib = _rLib->rPrec;

    }

    _rLastPtrFunc = 0;

    gzStr _sLib = gzStrC("[Lib_GZ,Lib_GZ_Windows,Lib_GZ_OpenGL,Lib_GZ_WinOpenGL,Lib_Demo]");
    _sLib.fEnd();
    _sLib.fPrev();
    _sLib = _sLib.fRevSubStr((gzStr((gzUInt8*)"\0" "[", (sizeof("\0" "[")/sizeof(gzUInt8)) - 2, true)), true);
    _sLib.fBegin();
    aLib = _sLib.fSplit((gzStr((gzUInt8*)"\0" ",", (sizeof("\0" ",")/sizeof(gzUInt8)) - 2, true)));
    _sLib.fBegin();

    fCheckOverPlace(aLib);
     Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "\n ----- End -------------- ", (sizeof("\0" "\n ----- End -------------- ")/sizeof(gzUInt8)) - 2, true)) );


}

void Lib::fSetID(uOverplace* _rClass){

    while (_rClass != 0){
        _rClass->nId = Lib_GZ::Lib::nClass++;
        _rClass = _rClass->_rPrec;
    }
}

void Lib::fCheckOverPlace(const gzArray<gzStr>& _aLib){

      printf("\n--- Check OverPlace %d \n", _aLib.GnSize());
    for(gzInt i = 0; i < _aLib.GnSize(); i++ ){
       Lib_GZ::fConsole((gzStr((gzUInt8*)"\0" "Sel", (sizeof("\0" "Sel")/sizeof(gzUInt8)) - 2, true)) + gzStrI(i) + (gzStr((gzUInt8*)"\0" ":", (sizeof("\0" ":")/sizeof(gzUInt8)) - 2, true)) +_aLib[i]);
        gzStr _sLibName = _aLib[i];
        gzBool _bFound = false;
        uLib* _rLib = rLastLib;
        while (_rLib != 0){


            if(_sLibName == _rLib->sName){
                    Lib_GZ::fConsole((gzStr((gzUInt8*)"\0" "Lib OverPlace: ", (sizeof("\0" "Lib OverPlace: ")/sizeof(gzUInt8)) - 2, true)) + _sLibName);
                   fDoOverPlace(*_rLib->_rLastClass);
                  _bFound = true;
                  break;
            }
            _rLib = _rLib->rPrec;
        }
        if(!_bFound){
            Lib_GZ::fConsole((gzStr((gzUInt8*)"\0" "Warning Lib Not found: ", (sizeof("\0" "Warning Lib Not found: ")/sizeof(gzUInt8)) - 2, true)) + _sLibName);
        }
    }
}

void Lib::fDoOverPlace(uOverplace* _rClass){
    while (_rClass != 0){

    uOverplace* _subClass = _rClass;
                while(_subClass->cfExtAdr != 0){
     uOverplace* _subExtClass = ((uOverplace*)_subClass->cfExtAdr());
     _subExtClass->cfOver = _rClass->cfOri;
     _subClass = _subExtClass;
                }

       _rClass = _rClass->_rPrec;
    }
}
cLib::cLib(gzUIntX _nInstanceId, gzStr _sArg, gzUIntX _nCmd): Lib_GZ::cThread(0){

 const gzInt32 nNum = 1;
 if(*(char *)&nNum == 1){
  Lib::bLittleEndian = true;
 }else{
  Lib::bLittleEndian = false;
 }


    Lib_GZ::Lib::fLoadAllLib();
    Lib_GZ::Sys::Debug::Get(thread)->New(this);

    bIsAlive = true;


    Lib_GZ::Sys::System::Get(thread)->fDetectGpu();




    oWinLib = Lib_GZ::Sys::Context::Get(thread)->New(thread, 0, (gzStr((gzUInt8*)"\0" "OpenGL", (sizeof("\0" "OpenGL")/sizeof(gzUInt8)) - 2, true)), 5, 5, false, 0xFFFFFFFF);

    oWinLib->bLibSharedContext = true;







        oWinLib->bReady = true;
        Lib::oWinLib = oWinLib;




    oWinLib->fIniProcess();


    Lib_GZ::Sys::System::Get(thread)->bHaveGpu = oWinLib->bWinGPU;

 Lib_GZ::Sys::System::Get(thread)->fIni(_nInstanceId, _sArg, _nCmd);
 fIni();
 Lib_GZ::Lib::Get(thread)->fStaticIni();
}

void cLib::fIni(){

   fLoadAllRc();
   Lib::bIsIni = true;
}

void cLib::fSetDirRcFiles(const gzStr& _sDirRcFiles){
    using namespace Lib;
    sDirRcFiles = sDirExe.fPathGetRelative( _sDirRcFiles);
    Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "RC PATH:    ", (sizeof("\0" "RC PATH:    ")/sizeof(gzUInt8)) - 2, true)) + sDirRcFiles);
}

void cLib::fSetDirRcEmbed(const gzStr& _sDirRcEmbed){
    using namespace Lib;
    sDirRcEmbed = sDirExe.fPathGetRelative( _sDirRcEmbed);
     Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "EMBED PATH: ", (sizeof("\0" "EMBED PATH: ")/sizeof(gzUInt8)) - 2, true)) + sDirRcEmbed);
}

gzBool cLib::fMainUpdate(gzInt _nSleepTime){

 Lib::bIniFinish = true;
 Sys::Context::Get(this)->fManageMessage();



        Lib_GZ::ThreadList::fNextTask();



   Lib_GZ::Sys::System::Get(this)->fSleep(1);


  if(!(Lib::nThreadCount > 0)){



        Lib::bIsAlive = false;
        bIsAlive = false;

        return false;
    }
    return true;
}




cLib::~cLib(){
     Lib_GZ::Sys::System::Get(this)->fExit();

    uRcList* _nCurrent = rFirstRc;
    while(_nCurrent != 0){
        uRcList* _nLast = _nCurrent;
        _nCurrent = _nCurrent->rNext;

        free(_nLast);
    }
}
}







namespace Lib_Demo{class cMainEntry;}


namespace Lib_Demo{ void fIniLib(); extern Lib_GZ::uLib zpLib; extern Lib_GZ::uOverplace* rLastClass; inline Lib_GZ::uLib NewLib(){return {Lib_GZ::fSetLib(&zpLib), (gzStr((gzUInt8*)"\0" "Lib_Demo", (sizeof("\0" "Lib_Demo")/sizeof(gzUInt8)) - 2, true)), &rLastClass };} namespace Lib{ inline Lib_GZ::uOverplace* SetClass(Lib_GZ::uOverplace* _rClass){ Lib_GZ::uOverplace* rTemp = rLastClass; rLastClass = _rClass; return rTemp; } }}

template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_Demo{namespace MainEntry{



}}


namespace Lib_Demo{class cMainInterface;}
namespace Lib_GZ{class cThreadExt;}
namespace Lib_GZ{namespace Sys{class cFile;}}
namespace Lib_Demo{class cMainEntry;}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}
namespace Lib_Demo{namespace MainEntry{


 namespace Dlg_fQueueDelegate_r_gzBool_p_gzQElement_gzQElement{

  class Dlg;typedef const Dlg& DlgP; typedef gzBool(* FpM)(gzDlgWrapM* _w , gzQElement<gzInt> _qT1, gzQElement<gzInt> _qT2); typedef gzBool(* FpD)(gzDlgWrapD* _w , gzQElement<gzInt> _qT1, gzQElement<gzInt> _qT2); typedef gzBool(* FpP)(void* _oInst , gzQElement<gzInt> _qT1, gzQElement<gzInt> _qT2); inline gzBool fDlgEmptyFunction(void* _oInst , gzQElement<gzInt> _qT1, gzQElement<gzInt> _qT2){return false;};
   class Dlg { struct _dStD{void* oClass; FpD fCall; };struct _dStM{void* oClass; FpM fCall; };struct _dStP{void* oClass; FpP fCall; };private:Lib_GZ::gzComp_r_gzBool_p_gzQElement_gzQElement cfDlg;public:inline Dlg(){ ((_dStD*)&cfDlg)->oClass = 0; ((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}inline Dlg(Lib_GZ::gzComp_r_gzBool_p_gzQElement_gzQElement _cfDelegate){ cfDlg = _cfDelegate;}inline Dlg& operator=(Lib_GZ::gzComp_r_gzBool_p_gzQElement_gzQElement _cfDelegate){ cfDlg = _cfDelegate; return *this;}inline Lib_GZ::gzComp_r_gzBool_p_gzQElement_gzQElement get() const {return cfDlg;} inline gzBool fIsSet(){return true;}inline Dlg(FpD _Func){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)_Func;}inline Dlg(void* _opClass, FpM _Func){((_dStD*)&cfDlg)->oClass = _opClass;((_dStM*)&cfDlg)->fCall = (FpM)_Func;} inline void fReset(){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}

   inline gzBool fCall(gzQElement<gzInt> _qT1, gzQElement<gzInt> _qT2){
    return (*((_dStP*)&cfDlg)->fCall)(((gzComp*)&cfDlg)->oClass , _qT1, _qT2 );
    }
  };
 }







}
class pMainEntry {

 public:


};

class cMainEntry : public Lib_GZ::cClass {

 public:





  gzSp<Lib_GZ::cThreadExt> oThread;
  gzSp<Lib_Demo::cMainInterface> oInterface;
  cMainEntry(Lib_GZ::cBase* _parent);
  virtual void Ini_cMainEntry();
  virtual void fTestArray(gzArray<gzInt> _aTest);
  virtual gzInt fTestDelegate(gzFloat _nF1, gzFloat _nF2);
  inline static gzBool wQueueDelegate(gzDlgWrapM* _w, gzQElement<gzInt> _qT1, gzQElement<gzInt> _qT2){return ((cMainEntry*)_w)->fQueueDelegate(_qT1, _qT2);}
  gzBool fQueueDelegate(gzQElement<gzInt> _qT1, gzQElement<gzInt> _qT2);

  inline cMainEntry(const cMainEntry &_o) : Lib_GZ::cClass(_o), oThread(), aInt1d(), aInt2d(), qaShort(), dComapre(), oInterface(){};
  inline cMainEntry(const cMainEntry &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), oThread(), aInt1d(), aInt2d(), qaShort(), dComapre(), oInterface(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cMainEntry();

 private:


  gzArray<gzInt> aInt1d;
  gzArray<gzArray<gzInt>> aInt2d;
  gzQArray<gzInt> qaShort;
  MainEntry::Dlg_fQueueDelegate_r_gzBool_p_gzQElement_gzQElement::Dlg dComapre;

};
class csMainEntry : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cMainEntry> New(Lib_GZ::cBase* _parent){
   gzSp<cMainEntry>_oTemp = gzSp<cMainEntry>(new cMainEntry(_parent));
   _oTemp->Ini_cMainEntry();
   return _oTemp;
  }




  inline csMainEntry(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csMainEntry(){};
};
namespace MainEntry{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csMainEntry((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csMainEntry> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMainEntry*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMainEntry*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csMainEntry>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace MainEntry{
}}





template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}


 gzUIntX nTestProgInstance = 0;

 gzInt __attribute__((__stdcall__)) WinMain(HINSTANCE _hInstance, HINSTANCE _hNull, LPSTR _lpCmdLine, gzInt _nShowCmd){
  using namespace Lib_GZ; using namespace Lib_GZ::Sys;
  {

   gzSp<Lib_GZ::cLib> _oGz = Lib_GZ::Lib::New((gzUIntX)_hInstance, (gzStr((gzUInt8*)"\0" "", (sizeof("\0" "")/sizeof(gzUInt8)) - 2, true)), (gzUIntX)_nShowCmd);


   gzSp<Lib_Demo::cMainEntry> _oTest = Lib_Demo::MainEntry::Get(_oGz->thread)->New(_oGz->thread);

   while( _oGz->bIsAlive){
    _oGz->fMainUpdate();
   }

  }


  return 0;
 }

namespace Lib_GZ{
    gzFloat32 pMath::fSqrt(const gzFloat32 _nVal){
      union{
        gzInt32 i;
        gzFloat32 x;
      } _u;
      _u.x = _nVal;
      _u.i = (1<<29) + (_u.i >> 1) - (1<<22);
      _u.x = _u.x + _nVal/_u.x;
      _u.x = 0.25*_u.x + _nVal/_u.x;
      return _u.x;
    }
gzFloat64 pMath::fPow(gzFloat64 uiNombre, gzUInt32 uiExposant) {

    gzFloat64 uiResult = uiNombre ;
    while(uiExposant > 1) {
   uiExposant--;
       uiResult *= uiNombre;
    }
    return uiResult;
}

gzInt32 pMath::fPow(gzInt32 uiNombre, gzUInt32 uiExposant) {

    gzFloat uiResult = uiNombre ;
    while(uiExposant > 1) {
   uiExposant--;
       uiResult *= uiNombre;
    }
    return uiResult;
}
gzFloat pMath::fSin(gzFloat _nAngle){

    if(_nAngle < 0){
        _nAngle = _nAngle * -1.0;
        if(_nAngle > Math::nPI){
            _nAngle = _nAngle - (gzInt(_nAngle / (Math::nPI*2.0)) * (Math::nPI*2.0));
            if(_nAngle > Math::nPI){
                _nAngle = (_nAngle - Math::nPI);
                if(_nAngle > Math::nHPI){
                    _nAngle -= Math::nPI;
                        gzFloat _nASqrt = _nAngle*_nAngle;
                        gzFloat _nResult = -2.39e-08; _nResult *= _nASqrt; _nResult += 2.7526e-06; _nResult *= _nASqrt; _nResult -= 1.98409e-04; _nResult *= _nASqrt; _nResult += 8.3333315e-03; _nResult *= _nASqrt; _nResult -= 1.666666664e-01; _nResult *= _nASqrt; _nResult += 1.0; _nResult *= _nAngle;;
                        return -_nResult;
                    }else{
                        gzFloat _nASqrt = _nAngle*_nAngle;
                        gzFloat _nResult = -2.39e-08; _nResult *= _nASqrt; _nResult += 2.7526e-06; _nResult *= _nASqrt; _nResult -= 1.98409e-04; _nResult *= _nASqrt; _nResult += 8.3333315e-03; _nResult *= _nASqrt; _nResult -= 1.666666664e-01; _nResult *= _nASqrt; _nResult += 1.0; _nResult *= _nAngle;;
                        return _nResult;
                }
            }
        }
        if(_nAngle > Math::nHPI){
            _nAngle -= Math::nPI;
            gzFloat _nASqrt = _nAngle*_nAngle;
            gzFloat _nResult = -2.39e-08; _nResult *= _nASqrt; _nResult += 2.7526e-06; _nResult *= _nASqrt; _nResult -= 1.98409e-04; _nResult *= _nASqrt; _nResult += 8.3333315e-03; _nResult *= _nASqrt; _nResult -= 1.666666664e-01; _nResult *= _nASqrt; _nResult += 1.0; _nResult *= _nAngle;;
            return _nResult;

        }else{
            gzFloat _nASqrt = _nAngle*_nAngle;
            gzFloat _nResult = -2.39e-08; _nResult *= _nASqrt; _nResult += 2.7526e-06; _nResult *= _nASqrt; _nResult -= 1.98409e-04; _nResult *= _nASqrt; _nResult += 8.3333315e-03; _nResult *= _nASqrt; _nResult -= 1.666666664e-01; _nResult *= _nASqrt; _nResult += 1.0; _nResult *= _nAngle;;
            return -_nResult;
        }
    }else{
        if(_nAngle > Math::nPI){
            _nAngle = _nAngle - (gzInt(_nAngle / (Math::nPI*2.0)) * (Math::nPI*2.0));
            if(_nAngle > Math::nPI){
                _nAngle = (_nAngle - Math::nPI);
                if(_nAngle > Math::nHPI){
                    _nAngle -= Math::nPI;
                        gzFloat _nASqrt = _nAngle*_nAngle;
                         gzFloat _nResult = -2.39e-08; _nResult *= _nAngle*_nAngle; _nResult += 2.7526e-06; _nResult *= _nAngle*_nAngle; _nResult -= 1.98409e-04; _nResult *= _nAngle*_nAngle; _nResult += 8.3333315e-03; _nResult *= _nAngle*_nAngle; _nResult -= 1.666666664e-01; _nResult *= _nAngle*_nAngle; _nResult += 1.0; _nResult *= _nAngle;;
                        return _nResult;
                    }else{
                        gzFloat _nASqrt = _nAngle*_nAngle;
                        gzFloat _nResult = -2.39e-08; _nResult *= _nASqrt; _nResult += 2.7526e-06; _nResult *= _nASqrt; _nResult -= 1.98409e-04; _nResult *= _nASqrt; _nResult += 8.3333315e-03; _nResult *= _nASqrt; _nResult -= 1.666666664e-01; _nResult *= _nASqrt; _nResult += 1.0; _nResult *= _nAngle;;
                        return -_nResult;
                }
            }
        }
        if(_nAngle > Math::nHPI){
            _nAngle -= Math::nPI;
            gzFloat _nASqrt = _nAngle*_nAngle;
            gzFloat _nResult = -2.39e-08; _nResult *= _nASqrt; _nResult += 2.7526e-06; _nResult *= _nASqrt; _nResult -= 1.98409e-04; _nResult *= _nASqrt; _nResult += 8.3333315e-03; _nResult *= _nASqrt; _nResult -= 1.666666664e-01; _nResult *= _nASqrt; _nResult += 1.0; _nResult *= _nAngle;;
            return -_nResult;

        }else{
            gzFloat _nASqrt = _nAngle*_nAngle;
            gzFloat _nResult = -2.39e-08; _nResult *= _nASqrt; _nResult += 2.7526e-06; _nResult *= _nASqrt; _nResult -= 1.98409e-04; _nResult *= _nASqrt; _nResult += 8.3333315e-03; _nResult *= _nASqrt; _nResult -= 1.666666664e-01; _nResult *= _nASqrt; _nResult += 1.0; _nResult *= _nAngle;;
            return _nResult;
        }
    }
}
gzFloat pMath::fCos(gzFloat _nAngle){

    _nAngle = pMath::fAbs(_nAngle);
    if(_nAngle > Math::nPI){
        _nAngle = _nAngle - (gzInt(_nAngle / (Math::nPI*2.0)) * (Math::nPI*2.0));
        if(_nAngle > Math::nPI){
            _nAngle = (_nAngle - Math::nPI);
            if(_nAngle > Math::nHPI){
                _nAngle -= Math::nPI;
                    gzFloat _nASqrt = _nAngle*_nAngle;
                    gzFloat _nResult = -2.605e-07; _nResult *= _nASqrt; _nResult += 2.47609e-05; _nResult *= _nASqrt; _nResult -= 1.3888397e-03; _nResult *= _nASqrt; _nResult += 4.16666418e-02; _nResult *= _nASqrt; _nResult -= 4.999999963e-01; _nResult *= _nASqrt; _nResult += 1.0;;
                    return _nResult;
                }else{
                    gzFloat _nASqrt = _nAngle*_nAngle;
                    gzFloat _nResult = -2.605e-07; _nResult *= _nASqrt; _nResult += 2.47609e-05; _nResult *= _nASqrt; _nResult -= 1.3888397e-03; _nResult *= _nASqrt; _nResult += 4.16666418e-02; _nResult *= _nASqrt; _nResult -= 4.999999963e-01; _nResult *= _nASqrt; _nResult += 1.0;;
                    return -_nResult;
            }
        }
    }
    if(_nAngle > Math::nHPI){
        _nAngle -= Math::nPI;
        gzFloat _nASqrt = _nAngle*_nAngle;
        gzFloat _nResult = -2.605e-07; _nResult *= _nASqrt; _nResult += 2.47609e-05; _nResult *= _nASqrt; _nResult -= 1.3888397e-03; _nResult *= _nASqrt; _nResult += 4.16666418e-02; _nResult *= _nASqrt; _nResult -= 4.999999963e-01; _nResult *= _nASqrt; _nResult += 1.0;;
        return -_nResult;

    }else{
        gzFloat _nASqrt = _nAngle*_nAngle;
        gzFloat _nResult = -2.605e-07; _nResult *= _nASqrt; _nResult += 2.47609e-05; _nResult *= _nASqrt; _nResult -= 1.3888397e-03; _nResult *= _nASqrt; _nResult += 4.16666418e-02; _nResult *= _nASqrt; _nResult -= 4.999999963e-01; _nResult *= _nASqrt; _nResult += 1.0;;
        return _nResult;
    }
}


gzFloat pMath::fTan(gzFloat _nAngle){

    if(_nAngle < 0){
        _nAngle = _nAngle * -1.0;
        if(_nAngle > Math::nPI){
            _nAngle = _nAngle - (gzInt(_nAngle / (Math::nPI*2.0)) * (Math::nPI*2.0));
            if(_nAngle > Math::nPI){
                _nAngle = (_nAngle - Math::nPI);
                if(_nAngle > Math::nHPI){
                    _nAngle -= Math::nPI;
                        gzFloat _nASqrt = _nAngle*_nAngle;
                        gzFloat _nResSin = -2.39e-08; _nResSin *= _nASqrt; _nResSin += 2.7526e-06; _nResSin *= _nASqrt; _nResSin -= 1.98409e-04; _nResSin *= _nASqrt; _nResSin += 8.3333315e-03; _nResSin *= _nASqrt; _nResSin -= 1.666666664e-01; _nResSin *= _nASqrt; _nResSin += 1.0; _nResSin *= _nAngle;;
                        gzFloat _nResCos = -2.605e-07; _nResCos *= _nASqrt; _nResCos += 2.47609e-05; _nResCos *= _nASqrt; _nResCos -= 1.3888397e-03; _nResCos *= _nASqrt; _nResCos += 4.16666418e-02; _nResCos *= _nASqrt; _nResCos -= 4.999999963e-01; _nResCos *= _nASqrt; _nResCos += 1.0;;
                        return -_nResSin / _nResCos;
                    }else{
                        gzFloat _nASqrt = _nAngle*_nAngle;
                        gzFloat _nResSin = -2.39e-08; _nResSin *= _nASqrt; _nResSin += 2.7526e-06; _nResSin *= _nASqrt; _nResSin -= 1.98409e-04; _nResSin *= _nASqrt; _nResSin += 8.3333315e-03; _nResSin *= _nASqrt; _nResSin -= 1.666666664e-01; _nResSin *= _nASqrt; _nResSin += 1.0; _nResSin *= _nAngle;;
                        gzFloat _nResCos = -2.605e-07; _nResCos *= _nASqrt; _nResCos += 2.47609e-05; _nResCos *= _nASqrt; _nResCos -= 1.3888397e-03; _nResCos *= _nASqrt; _nResCos += 4.16666418e-02; _nResCos *= _nASqrt; _nResCos -= 4.999999963e-01; _nResCos *= _nASqrt; _nResCos += 1.0;;
                        return -_nResSin / _nResCos;
                }
            }
        }
        if(_nAngle > Math::nHPI){
            _nAngle -= Math::nPI;
            gzFloat _nASqrt = _nAngle*_nAngle;
            gzFloat _nResSin = -2.39e-08; _nResSin *= _nASqrt; _nResSin += 2.7526e-06; _nResSin *= _nASqrt; _nResSin -= 1.98409e-04; _nResSin *= _nASqrt; _nResSin += 8.3333315e-03; _nResSin *= _nASqrt; _nResSin -= 1.666666664e-01; _nResSin *= _nASqrt; _nResSin += 1.0; _nResSin *= _nAngle;;
            gzFloat _nResCos = -2.605e-07; _nResCos *= _nASqrt; _nResCos += 2.47609e-05; _nResCos *= _nASqrt; _nResCos -= 1.3888397e-03; _nResCos *= _nASqrt; _nResCos += 4.16666418e-02; _nResCos *= _nASqrt; _nResCos -= 4.999999963e-01; _nResCos *= _nASqrt; _nResCos += 1.0;;
            return -_nResSin / _nResCos;

        }else{
            gzFloat _nASqrt = _nAngle*_nAngle;
            gzFloat _nResSin = -2.39e-08; _nResSin *= _nASqrt; _nResSin += 2.7526e-06; _nResSin *= _nASqrt; _nResSin -= 1.98409e-04; _nResSin *= _nASqrt; _nResSin += 8.3333315e-03; _nResSin *= _nASqrt; _nResSin -= 1.666666664e-01; _nResSin *= _nASqrt; _nResSin += 1.0; _nResSin *= _nAngle;;
            gzFloat _nResCos = -2.605e-07; _nResCos *= _nASqrt; _nResCos += 2.47609e-05; _nResCos *= _nASqrt; _nResCos -= 1.3888397e-03; _nResCos *= _nASqrt; _nResCos += 4.16666418e-02; _nResCos *= _nASqrt; _nResCos -= 4.999999963e-01; _nResCos *= _nASqrt; _nResCos += 1.0;;
            return -_nResSin / _nResCos;
        }
    }else{
        if(_nAngle > Math::nPI){
            _nAngle = _nAngle - (gzInt(_nAngle / (Math::nPI*2.0)) * (Math::nPI*2.0));
            if(_nAngle > Math::nPI){
                _nAngle = (_nAngle - Math::nPI);
                if(_nAngle > Math::nHPI){
                    _nAngle -= Math::nPI;
                        gzFloat _nASqrt = _nAngle*_nAngle;
                        gzFloat _nResSin = -2.39e-08; _nResSin *= _nASqrt; _nResSin += 2.7526e-06; _nResSin *= _nASqrt; _nResSin -= 1.98409e-04; _nResSin *= _nASqrt; _nResSin += 8.3333315e-03; _nResSin *= _nASqrt; _nResSin -= 1.666666664e-01; _nResSin *= _nASqrt; _nResSin += 1.0; _nResSin *= _nAngle;;
                        gzFloat _nResCos = -2.605e-07; _nResCos *= _nASqrt; _nResCos += 2.47609e-05; _nResCos *= _nASqrt; _nResCos -= 1.3888397e-03; _nResCos *= _nASqrt; _nResCos += 4.16666418e-02; _nResCos *= _nASqrt; _nResCos -= 4.999999963e-01; _nResCos *= _nASqrt; _nResCos += 1.0;;
                        return _nResSin / _nResCos;
                    }else{
                        gzFloat _nASqrt = _nAngle*_nAngle;
                        gzFloat _nResSin = -2.39e-08; _nResSin *= _nASqrt; _nResSin += 2.7526e-06; _nResSin *= _nASqrt; _nResSin -= 1.98409e-04; _nResSin *= _nASqrt; _nResSin += 8.3333315e-03; _nResSin *= _nASqrt; _nResSin -= 1.666666664e-01; _nResSin *= _nASqrt; _nResSin += 1.0; _nResSin *= _nAngle;;
                        gzFloat _nResCos = -2.605e-07; _nResCos *= _nASqrt; _nResCos += 2.47609e-05; _nResCos *= _nASqrt; _nResCos -= 1.3888397e-03; _nResCos *= _nASqrt; _nResCos += 4.16666418e-02; _nResCos *= _nASqrt; _nResCos -= 4.999999963e-01; _nResCos *= _nASqrt; _nResCos += 1.0;;
                        return _nResSin / _nResCos;
                }
            }
        }
        if(_nAngle > Math::nHPI){
            _nAngle -= Math::nPI;
            gzFloat _nASqrt = _nAngle*_nAngle;
            gzFloat _nResSin = -2.39e-08; _nResSin *= _nASqrt; _nResSin += 2.7526e-06; _nResSin *= _nASqrt; _nResSin -= 1.98409e-04; _nResSin *= _nASqrt; _nResSin += 8.3333315e-03; _nResSin *= _nASqrt; _nResSin -= 1.666666664e-01; _nResSin *= _nASqrt; _nResSin += 1.0; _nResSin *= _nAngle;;
            gzFloat _nResCos = -2.605e-07; _nResCos *= _nASqrt; _nResCos += 2.47609e-05; _nResCos *= _nASqrt; _nResCos -= 1.3888397e-03; _nResCos *= _nASqrt; _nResCos += 4.16666418e-02; _nResCos *= _nASqrt; _nResCos -= 4.999999963e-01; _nResCos *= _nASqrt; _nResCos += 1.0;;
            return _nResSin / _nResCos;

        }else{
            gzFloat _nASqrt = _nAngle*_nAngle;
            gzFloat _nResSin = -2.39e-08; _nResSin *= _nASqrt; _nResSin += 2.7526e-06; _nResSin *= _nASqrt; _nResSin -= 1.98409e-04; _nResSin *= _nASqrt; _nResSin += 8.3333315e-03; _nResSin *= _nASqrt; _nResSin -= 1.666666664e-01; _nResSin *= _nASqrt; _nResSin += 1.0; _nResSin *= _nAngle;;
            gzFloat _nResCos = -2.605e-07; _nResCos *= _nASqrt; _nResCos += 2.47609e-05; _nResCos *= _nASqrt; _nResCos -= 1.3888397e-03; _nResCos *= _nASqrt; _nResCos += 4.16666418e-02; _nResCos *= _nASqrt; _nResCos -= 4.999999963e-01; _nResCos *= _nASqrt; _nResCos += 1.0;;
            return _nResSin / _nResCos;
        }
    }
}



gzFloat pMath::fASin (gzFloat _nValue){

    if(_nValue > 0){
        gzFloat fRoot = fSqrt(1.0-_nValue);
        gzFloat _nResult = -0.0187293;
        _nResult *= _nValue;
        _nResult += 0.0742610;
        _nResult *= _nValue;
        _nResult -= 0.2121144;
        _nResult *= _nValue;
        _nResult += 1.5707288;
        _nResult = 1.5707288 - fRoot*_nResult;
        return _nResult;
    }else{
        _nValue *= -1;
        gzFloat fRoot = fSqrt(1.0-_nValue);
        gzFloat _nResult = -0.0187293;
        _nResult *= _nValue;
        _nResult += 0.0742610;
        _nResult *= _nValue;
        _nResult -= 0.2121144;
        _nResult *= _nValue;
        _nResult += 1.5707288;
        _nResult = 1.5707288 - fRoot*_nResult;
        return -_nResult;
    }
}

gzFloat pMath::fACos(gzFloat _nValue){

        if( _nValue < 0){
            _nValue *= -1;
            gzFloat fRoot = fSqrt(1.0-_nValue);
            gzFloat _nResult = -0.0187293;
            _nResult *= _nValue;
            _nResult += 0.0742610;
            _nResult *= _nValue;
            _nResult -= 0.2121144;
            _nResult *= _nValue;
            _nResult += 1.5707288;
            _nResult = 1.5707288 - fRoot*_nResult;
            return Math::nHPI + _nResult;
        }else{
            gzFloat fRoot = fSqrt(1.0-_nValue);
            gzFloat _nResult = -0.0187293;
            _nResult *= _nValue;
            _nResult += 0.0742610;
            _nResult *= _nValue;
            _nResult -= 0.2121144;
            _nResult *= _nValue;
            _nResult += 1.5707288;
            _nResult *= fRoot;
            return _nResult;
        }
}

gzFloat pMath::fATan(gzFloat _nValue){
 gzFloat _nResult;
    gzFloat _nVSqr = _nValue*_nValue;

    if( (_nValue < -1.23) || (_nValue > 1.23) ){







        gzFloat _nVSqr = _nValue*-_nValue;
        if( _nValue > 1.0 ){
            _nResult = Math::nHPI;
        }else{
            _nResult = -Math::nHPI;
        }
        gzFloat _a = -1.0/_nValue;
        _nResult += _a;
        _a *= (2.0* 1.0 -1)/((2.0* 1.0 +1)*_nVSqr);
        _nResult += _a;
        _a *= (2.0* 2.0 -1)/((2.0* 2.0 +1)*_nVSqr);
        _nResult += _a;
        _a *= (2.0* 3.0 -1)/((2.0* 3.0 +1)*_nVSqr);
        _nResult += _a;
        _a *= (2.0* 4.0 -1)/((2.0* 4.0 +1)*_nVSqr);
        _nResult += _a;
        _a *= (2.0* 5.0 -1)/((2.0* 5.0 +1)*_nVSqr);
        _nResult += _a;
        _a *= (2.0* 5.0 -1)/((2.0* 5.0 +1)*_nVSqr);
        _nResult += _a;

    } else {

        gzFloat _nVSqr = _nValue*_nValue;
        _nResult = 0.0028662257f;
        _nResult *= _nVSqr;
        _nResult -= 0.0161657367f;
        _nResult *= _nVSqr;
        _nResult += 0.0429096138f;
        _nResult *= _nVSqr;
        _nResult -= 0.0752896400f;
        _nResult *= _nVSqr;
        _nResult += 0.1065626393f;
        _nResult *= _nVSqr;
        _nResult -= 0.1420889944f;
        _nResult *= _nVSqr;
        _nResult += 0.1999355085f;
        _nResult *= _nVSqr;
        _nResult -= 0.3333314528f;
        _nResult *= _nVSqr;
        _nResult += 1.0f;
        _nResult *= _nValue;
    }
    return _nResult;
}

gzFloat pMath::fATan2( gzFloat _nY, gzFloat _nX ){

    if ( _nX == 0.0 ){
        if ( _nY > 0.0 ){
           return Math::nHPI;
        }
        if (_nY == 0.0 ) {
            return 0.0;
        }
        return -Math::nHPI;
    }
    gzFloat _nRatio = pMath::fAbs( _nY / _nX );
    gzFloat _nResult = pMath::fATan( _nRatio);
    if( _nX < 0.0 ){
        _nResult = Math::nPI - _nResult;
    }
    if( _nY < 0.0 ){
        _nResult *= -1;
    }
    return _nResult;
}



}

template <class T> class gzQArray;






namespace Lib_GZ{
namespace cQArray{

  void fRangeShort( gzQElementAnyHold* pLeft, gzQElementAnyHold* pRight, Dlg_r_gzBool_p_gzQElement_gzQElement::DlgP _dCustomShort){

            gzQElementAnyHold* rTempNext;
            gzQElementAnyHold* rTempPrev;
            gzQElementAnyHold* rTemp;


            gzQElementAnyHold* pCurrent;


            if (pLeft == pRight) return;


            pCurrent = (gzQElementAnyHold*)pLeft->pNext;


            while (1){



                if ( _dCustomShort.fCall( gzQElementAny( pLeft), gzQElementAny(pCurrent) ) )
                {

                    fSwap(pLeft, pCurrent);
                    rTemp = pLeft;
                    pLeft = pCurrent;
                    pCurrent = rTemp;

                }


                if (pCurrent == pRight) break;


                pCurrent = (gzQElementAnyHold*)pCurrent->pNext;

                if(pCurrent == 0){
                    return;
                }
            }


            fSwap(pLeft, pCurrent);
            rTemp = pLeft;
            pLeft = pCurrent;
            pCurrent = rTemp;


            gzQElementAnyHold *pOldCurrent = pCurrent;

            pCurrent = (gzQElementAnyHold*)pCurrent->pPrev;
            if (pCurrent != 0){
                if ((pLeft->pPrev != pCurrent) && (pCurrent->pNext != pLeft)){
                    fRangeShort(pLeft, pCurrent, _dCustomShort);
                    return;
                }
            }

            pCurrent = pOldCurrent;
            pCurrent = (gzQElementAnyHold*)pCurrent->pNext;
            if (pCurrent != 0){
                if ((pCurrent->pPrev != pRight) && (pRight->pNext != pCurrent)){
                    fRangeShort(pCurrent, pRight, _dCustomShort);
                    return;
                }
            }
        }

}
}

class gzStr;
using namespace Lib_GZ;

gzStr::gzStr(){


    sStr = (gzHoldStr*)malloc((1) * sizeof(gzHoldStr));;

    sStr->array = (gzUInt8*)"\0\0";
    sStr->end = &sStr->array[1];
    sStr->NoDelete = true;
    sStr->nNbIns = 1;
    pCurrPos = (gzUInt8*)sStr->array;

}

gzStr::gzStr(gzUInt8* _Array, gzUInt _nLength, bool _bNoDelete){

    sStr = (gzHoldStr*)malloc((1) * sizeof(gzHoldStr));;

    sStr->array = (gzUInt8*)_Array;
    sStr->end = (gzUInt8*)_Array + _nLength + 1;
    sStr->NoDelete = _bNoDelete;
    sStr->nNbIns = 1;
    pCurrPos = (gzUInt8*)sStr->array;

}
gzStr::gzStr(gzUInt16* _Array){


    sStr = (gzHoldStr*)malloc((1) * sizeof(gzHoldStr));;

    sStr->array = NewConvertUTF16toUTF8(_Array);


    sStr->end = sStr->array + sStr->array[0];
    sStr->array[0] = 0;
    sStr->NoDelete = false;
    sStr->nNbIns = 1;
    pCurrPos = (gzUInt8*)sStr->array;

}
gzStr::gzStr(const gzStr& _sOther){
    sStr = _sOther.sStr;
    ++sStr->nNbIns;


    pCurrPos = (gzUInt8*)sStr->array;
}

gzStr::gzStr(const gzStr& _sOther, gzBool _bDeepCpy){
 sStr = (gzHoldStr*)malloc((1) * sizeof(gzHoldStr));;

 gzUInt8* _aOtherStr = _sOther.sStr->array;
    gzUInt _nOtherSize = _sOther.sStr->end - _aOtherStr;


    gzUInt8* _aNew = (gzUInt8*)malloc(((_nOtherSize + 1 )) * sizeof(gzUInt8));;
    memcpy( _aNew, _aOtherStr, (_nOtherSize + 1 ) * sizeof(gzUInt8));
    sStr->array = _aNew;

    sStr->end = sStr->array +_nOtherSize;
    sStr->NoDelete = _sOther.sStr->NoDelete;
    sStr->nNbIns = 1;
    pCurrPos = (gzUInt8*)sStr->array;
}





gzStr::gzStr(gzInt32 _nChar){

   sStr = (gzHoldStr*)malloc((1) * sizeof(gzHoldStr));;

    sStr->array = u8_fNewUtf32ToUtf8(_nChar);
    sStr->end = sStr->array + sStr->array[0];
    sStr->array[0] = 0;
    sStr->NoDelete = false;
    sStr->nNbIns = 1;
    pCurrPos = (gzUInt8*)sStr->array;
}




gzStr::~gzStr(){


    --sStr->nNbIns;


    if(sStr->nNbIns == 0) {

        if(!sStr->NoDelete){

            free(sStr->array);
        }

        free(sStr);
    }else{

    }

}


gzStr& gzStr::operator=(const gzStr& _sOther) const{

     if(this == &_sOther || sStr == _sOther.sStr){

            return *const_cast<gzStr*>(this);
     }
    if(sStr != 0){
       --sStr->nNbIns;


       if(sStr->nNbIns == 0){


          if(!sStr->NoDelete){
            free(sStr->array);
          }
          free(sStr);
       }else{

        }
    }
    const_cast<gzStr*>(this)->sStr = _sOther.sStr;

   ++sStr->nNbIns;


     const_cast<gzStr*>(this)->pCurrPos = (gzUInt8*)sStr->array;


    return *const_cast<gzStr*>(this);
}

gzBool gzStr::operator==(const gzStr& _sOther) const{

    if(GnSize() == _sOther.GnSize()){
        gzUInt8* _aLeft = &sStr->array[1];
        gzUInt8* _aRight = &_sOther.sStr->array[1];

        gzUInt i = 0;
        while(_aLeft[i] != 0 && _aRight[i] != 0 && _aLeft[i] == _aRight[i]){
            i++;
        }
        if(_aLeft[i] == 0 && _aRight[i] == 0){
            return true;
        }
    }
    return false;
}





gzBool gzStr::fDetachAndHold() const{


  if(sStr->nNbIns == 1) {
        return !sStr->NoDelete;
  }



   gzHoldStr* _sTemp = (gzHoldStr*)malloc((1) * sizeof(gzHoldStr));;
   _sTemp->array = sStr->array;
   _sTemp->end = sStr->end;
   _sTemp->NoDelete = false;
   _sTemp->nNbIns = 1;
   --sStr->nNbIns;
    const_cast<gzStr*>(this)->sStr = _sTemp;


    return false;
}


void gzStr::fReleaseHold(gzBool _bPrevRelease) const{

    if(_bPrevRelease){
        free(sStr->array);
    }else{
        sStr->NoDelete = false;
    }
}
gzStr gzStr::operator+(const gzStr& _sOther) const {

    gzUInt8* _aStr1 = sStr->array;
    gzUInt _nSize1 = sStr->end - _aStr1;

    gzUInt8* _aStr2 = _sOther.sStr->array;
    gzUInt _nSize2 = _sOther.sStr->end - _aStr2;

    gzUInt _nNewSize = _nSize1 + _nSize2 - 1;

    gzUInt8* _aNew = (gzUInt8*)malloc(((_nNewSize + 1)) * sizeof(gzUInt8));;


    memcpy( _aNew, _aStr1, _nSize1 * sizeof(gzUInt8));
    memcpy( _aNew + _nSize1, _aStr2 + 1, _nSize2 * sizeof(gzUInt8));

    _aNew[_nNewSize] = 0;


    return gzStr(_aNew, _nNewSize - 1, false);
}

gzStr gzStr::operator+=(const gzStr& _sOther) const {


    gzBool _bPrevRelease = fDetachAndHold();




    gzUInt8* _aStr1 = sStr->array;
    gzUInt _nSize1 = sStr->end - _aStr1;

    gzUInt8* _aStr2 = _sOther.sStr->array;
    gzUInt _nSize2 = _sOther.sStr->end - _aStr2;

    gzUInt _nNewSize = _nSize1 + _nSize2 - 1;


    gzUInt8* _aNew = (gzUInt8*)malloc(((_nNewSize + 1)) * sizeof(gzUInt8));;


    memcpy( _aNew, _aStr1, _nSize1 * sizeof(gzUInt8));
    memcpy( _aNew + _nSize1, _aStr2 + 1, _nSize2 * sizeof(gzUInt8));

    _aNew[_nNewSize] = 0;


     const_cast<gzStr*>(this)->pCurrPos = (pCurrPos - _aStr1) + _aNew;

    fReleaseHold(_bPrevRelease);

    sStr->array = _aNew;
    sStr->end = _aNew + _nNewSize;
    return *const_cast<gzStr*>(this);
}




gzStr& gzStr::fSubStrCount(gzUInt nCount) const {
    gzUInt8* _pBackPos = pCurrPos;
    gzUInt _nNewSize = nCount;

    if(_pBackPos == sStr->array){
        _pBackPos++;
        nCount++;
    }

    while(nCount > 0 && fNext()){
        nCount--;
    }

    gzBool _bPrevRelease = fDetachAndHold();
    gzUIntX nRealSize = pCurrPos - _pBackPos;


    gzUInt8* _aNew = (gzUInt8*)malloc((nRealSize + 2) * sizeof(gzUInt8));;


    _aNew[0] = 0;
    gzUInt8* _aSubStr = &_aNew[1];
    _aSubStr[nRealSize] = 0;

    memcpy(_aSubStr, _pBackPos, pCurrPos - _pBackPos);

    fReleaseHold(_bPrevRelease);


    sStr->array = _aNew;
    sStr->end = _aSubStr + nRealSize ;
    const_cast<gzStr*>(this)->pCurrPos = _aNew;
    return *const_cast<gzStr*>(this);
}

gzStr gzStr::fSubStr(const gzStr& _sFind, gzBool _bExclude) const {

   gzUInt8* _pBackPos = pCurrPos;
    if(_pBackPos == sStr->array){
       _pBackPos++;
    }

   gzUIntX nRealSize;
    if(!fFind(_sFind, !_bExclude)){
        fEnd();
    }
    nRealSize = pCurrPos - _pBackPos;


    gzUInt8* _aNew = (gzUInt8*)malloc((nRealSize + 2) * sizeof(gzUInt8));;

    _aNew[0] = 0;
    _aNew[nRealSize + 1] = 0;

    memcpy(_aNew + 1, _pBackPos, nRealSize);


    return gzStr(_aNew, nRealSize, false);






}

gzStr gzStr::fRevSubStr(const gzStr& _sFind, gzBool _bExclude) const {

   gzUInt8* _pBackPos = pCurrPos;
    if(_pBackPos == sStr->end){
       _pBackPos--;
    }


  if(fRevFind(_sFind, _bExclude)){


        gzBool _bPrevRelease = fDetachAndHold();

       if(pCurrPos == sStr->array){
            const_cast<gzStr*>(this)->pCurrPos++;
            if(pCurrPos > _pBackPos){
                _pBackPos = pCurrPos;
            }
        }


    } else{
        fBegin();
    }

    gzUIntX nRealSize = _pBackPos - pCurrPos;
    gzUInt8* _aNew = (gzUInt8*)malloc((nRealSize + 2) * sizeof(gzUInt8));;

    _aNew[0] = 0;
    _aNew[nRealSize] = 0;

    memcpy(_aNew + 1, pCurrPos, nRealSize );


    return gzStr(_aNew, nRealSize, false);






}


gzUInt gzStr::fReplaceAll(const gzStr& _sFind, const gzStr& _sReplace) const {

    gzUInt _nCount = 0;
    while(fReplace(_sFind, _sReplace) ){
        _nCount++;
    }
    return _nCount;
}


gzBool gzStr::fReplace(const gzStr& _sFind, const gzStr& _sReplace) const {
    if(fFind(_sFind)){

        gzBool _bPrevRelease = fDetachAndHold();
        gzUInt _nNewSize = GnSize() - _sFind.GnSize() + _sReplace.GnSize() + 1;
        gzUInt8* _aNew = (gzUInt8*)malloc((_nNewSize + 1) * sizeof(gzUInt8));;


        gzUIntX _nSize = pCurrPos - (sStr->array);

        memcpy( _aNew, sStr->array, _nSize);
        memcpy( _aNew + _nSize , _sReplace.sStr->array + 1, _sReplace.GnSize());
        gzUInt8* pStart = sStr->array + _nSize + _sFind.GnSize();
        memcpy( _aNew + _nSize + _sReplace.GnSize(), pStart, sStr->end - pStart + 1);

        const_cast<gzStr*>(this)->pCurrPos = (pCurrPos - sStr->array) + _aNew;
        fReleaseHold(_bPrevRelease);

        sStr->array = _aNew;
        sStr->end = _aNew + _nNewSize;
        return true;
    }
    return false;
}

gzUInt gzStr::fRevReplaceAll(const gzStr& _sFind, const gzStr& _sReplace) const {

    gzUInt _nCount = 0;
    while(fRevReplace(_sFind, _sReplace) ){
        _nCount++;
    }
    return _nCount;
}

gzBool gzStr::fRevReplace(const gzStr& _sFind, const gzStr& _sReplace) const {
    if(fRevFind(_sFind)){
        gzBool _bPrevRelease = fDetachAndHold();

        gzUInt _nNewSize = GnSize() - _sFind.GnSize() + _sReplace.GnSize() + 1;
        gzUInt8* _aNew = (gzUInt8*)calloc(_nNewSize + 1, sizeof(gzUInt8));;
        gzUIntX _nSize = pCurrPos - (sStr->array) ;

        memcpy( _aNew, sStr->array, _nSize);
        memcpy( _aNew + _nSize, _sReplace.sStr->array + 1, _sReplace.GnSize() + 1);
        gzUInt8* pStart = sStr->array + _nSize + _sFind.GnSize();
        memcpy( _aNew + _nSize + _sReplace.GnSize(), pStart, sStr->end - pStart + 1);

        const_cast<gzStr*>(this)->pCurrPos = (pCurrPos - sStr->array) + _aNew;
        fReleaseHold(_bPrevRelease);

        sStr->array = _aNew;
        sStr->end = _aNew + _nNewSize;
        return true;
    }
    return false;
}
gzUInt32 gzStr::GnCurrChar() const{
    return u8_fGetChar(pCurrPos);
}
extern char trailingBytesForUTF8[];


gzStr& gzStr::fBegin() const {
   const_cast<gzStr*>(this)->pCurrPos = sStr->array;
    return *const_cast<gzStr*>(this);
}
gzStr& gzStr::fEnd() const {
   const_cast<gzStr*>(this)->pCurrPos = sStr->end;
    return *const_cast<gzStr*>(this);
}


gzBool gzStr::fNext() const {
    const_cast<gzStr*>(this)->pCurrPos += u8_next(pCurrPos);
    if(pCurrPos >= (gzUInt8*)sStr->end){
         const_cast<gzStr*>(this)->pCurrPos = (gzUInt8*)sStr->end;
        return false;
    }else{
        return true;
    }
}

gzBool gzStr::fPrev() const {
    const_cast<gzStr*>(this)->pCurrPos += u8_prev(pCurrPos);
    if(pCurrPos <= (gzUInt8*)sStr->array){
         const_cast<gzStr*>(this)->pCurrPos = (gzUInt8*)sStr->array;
        return false;
    }else{
        return true;
    }
}

gzBool gzStr::fFind(const gzStr& _sFind, gzBool _bExclude) const {

    if(_sFind.sStr->array[1] == 0xEF && _sFind.GnSize() == 3 && _sFind.sStr->array[2] == 0xB7 && _sFind.sStr->array[3] == 0x90){
        fEnd();
        return true;
    }

    gzUInt8* _pBackSearchPos = _sFind.pCurrPos;
    gzUInt8* _pBackPos = pCurrPos;

    gzUInt8* pFirstSearchChar = _sFind.sStr->array + 1;
    const_cast<gzStr*>(&_sFind)->pCurrPos = pFirstSearchChar;

    gzUInt32 _nFirstSearchChar = _sFind.GnCurrChar();

    while(fNext()){

        if(GnCurrChar() == _nFirstSearchChar){



            while(_sFind.fNext() && fNext()){
                  if(GnCurrChar() != _sFind.GnCurrChar()){
                      break;
                  }
            }
            if(_sFind.GnCurrChar() == 0){

                const_cast<gzStr*>(this)->fNext();

                 if(!_bExclude){
                    const_cast<gzStr*>(this)->pCurrPos -= _sFind.GnSize();
                  }



                const_cast<gzStr*>(&_sFind)->pCurrPos = _pBackSearchPos;
                return true;

            }else{

                const_cast<gzStr*>(&_sFind)->pCurrPos = pFirstSearchChar;
            }
        }
    }


    const_cast<gzStr*>(this)->pCurrPos = _pBackPos;
    const_cast<gzStr*>(&_sFind)->pCurrPos = _pBackSearchPos;
    return false;
 }


gzBool gzStr::fRevFind(const gzStr& _sFind, gzBool _bExclude) const {


    if(_sFind.sStr->array[1] == 0xEF && _sFind.GnSize() == 3 && _sFind.sStr->array[2] == 0xB7 && _sFind.sStr->array[3] == 0x90){
        fBegin();
        return true;
    }

    gzUInt8* _pBackSearchPos = _sFind.pCurrPos;
    gzUInt8* _pBackPos = pCurrPos;

    _sFind.fEnd();
    _sFind.fPrev();
    gzUInt8* pLastSearchChar = _sFind.pCurrPos;
    const_cast<gzStr*>(&_sFind)->pCurrPos = pLastSearchChar;

    gzUInt32 _nLastSearchChar = _sFind.GnCurrChar();

    while(fPrev()){
        if(GnCurrChar() == _nLastSearchChar){


            while(_sFind.fPrev() && fPrev()){

                  if(GnCurrChar() != _sFind.GnCurrChar()){
                      break;
                  }
            }
            if(_sFind.GnCurrChar() == 0){





                if(_bExclude){
                    const_cast<gzStr*>(this)->pCurrPos += _sFind.GnSize();
                }

                const_cast<gzStr*>(&_sFind)->pCurrPos = _pBackSearchPos;
                return true;

            }else{

                const_cast<gzStr*>(&_sFind)->pCurrPos = pLastSearchChar;
            }
        }
    }

    const_cast<gzStr*>(this)->pCurrPos = _pBackPos;
    const_cast<gzStr*>(&_sFind)->pCurrPos = _pBackSearchPos;
    return false;
 }


gzArray<gzStr> gzStr::fSplit(const gzStr& _sDelimiter) const {
    gzArray<gzStr> aSplit;
    gzUInt8* _pBackPos = pCurrPos;
    fBegin();

    gzUInt i = 0;
    do{
        aSplit[i] = fSubStr(_sDelimiter,true);

        i++;
    }while(fNext());

    const_cast<gzStr*>(this)->pCurrPos = _pBackPos;

    return aSplit;
}






gzStr gzStr::fPathGetFileExtention() const {

    gzUStrAutoRestore _sBackup(*this);
    fEnd();
    return fRevSubStr( (gzStr((gzUInt8*)"\0" ".", (sizeof("\0" ".")/sizeof(gzUInt8)) - 2, true)), true );
}

gzStr gzStr::fPathGetFileName() const {

    gzUStrAutoRestore _sBackup(*this);
    fEnd();
    fRevFind((gzStr((gzUInt8*)"\0" ".", (sizeof("\0" ".")/sizeof(gzUInt8)) - 2, true)));
    return fRevSubStr( (gzStr((gzUInt8*)"\0" "/", (sizeof("\0" "/")/sizeof(gzUInt8)) - 2, true)), true );
}

gzStr gzStr::fPathGetCurrFolder() const {


    gzUStrAutoRestore _sBackup(*this);

    fRevFind((gzStr((gzUInt8*)"\0" "/", (sizeof("\0" "/")/sizeof(gzUInt8)) - 2, true)), true);
    gzUInt8* _pBackPos = pCurrPos;
    if(fRevFind((gzStr((gzUInt8*)"\0" "/", (sizeof("\0" "/")/sizeof(gzUInt8)) - 2, true)), true)){

        return fSubStr((gzStr((gzUInt8*)"\0" "/", (sizeof("\0" "/")/sizeof(gzUInt8)) - 2, true)),false);
    }else{
        fBegin();
        return fSubStr((gzStr((gzUInt8*)"\0" "/", (sizeof("\0" "/")/sizeof(gzUInt8)) - 2, true)));
    }
}

gzStr gzStr::fPathGetRelative(const gzStr& _sRelativePath) const {
    gzUStrAutoRestore _sBackup(*this);
    gzUStrAutoRestore _sBackup2(_sRelativePath);

    fEnd();
    fPathFindPrecFolder();
    _sRelativePath.fBegin();
    while(_sRelativePath.fFind((gzStr((gzUInt8*)"\0" "../", (sizeof("\0" "../")/sizeof(gzUInt8)) - 2, true)))){
        fPathFindPrecFolder();
    }
    _sRelativePath.fNext();
    _sRelativePath.fNext();
   return fRevSubStr((gzStr((gzUInt8*)"\0" "\xEF\xB7\x90", (sizeof("\0" "\xEF\xB7\x90")/sizeof(gzUInt8)) - 2, true))) + _sRelativePath.fSubStr((gzStr((gzUInt8*)"\0" "\xEF\xB7\x90", (sizeof("\0" "\xEF\xB7\x90")/sizeof(gzUInt8)) - 2, true)));
}



gzBool gzStr::fPathFindPrecFolder() const {

    if( fRevFind((gzStr((gzUInt8*)"\0" "/", (sizeof("\0" "/")/sizeof(gzUInt8)) - 2, true))) ){

        return true;
    }else{

        return false;
    }
}

gzUInt gzStr::fToUInt() const {
    gzInt c = 0;
    gzInt sign = 0;
    gzInt x = 0;
    gzUInt8* p = &sStr->array[1];

    for(c = *(p++); (c < 48 || c > 57); c = *(p++)) {
        if (c == 45) {
            sign = 1; c = *(p++); break;
        }
    };

    for(; c > 47 && c < 58; c = *(p++)){
        x = (x << 1) + (x << 3) + c - 48;
    }

    return sign ? -x : x;
}







gzStr gzStrUI(gzUInt64 _nEntier) {

    gzUInt _nSize = 0;
    gzUInt8* _aArray;
    if(_nEntier != 0){

        gzUInt8 intBuff[20];

        while (_nEntier > 0){
            intBuff[_nSize] = _nEntier % 10 + 0x30;
            _nEntier /= 10;
            _nSize ++;
        }

        _aArray = (gzUInt8*)malloc(((_nSize + 2)) * sizeof(gzUInt8));;

        _aArray[0] = 0;
        gzUInt8* _aNumbers = &_aArray[1];


        int i = 0;
        int j = _nSize;
        while ( i < _nSize){
            j --;
            _aNumbers[i] = intBuff[j];
            i++;
        }

        _aNumbers[_nSize] = 0;

    }else{

        _aArray = (gzUInt8*)malloc((3) * sizeof(gzUInt8));;


        _aArray[0] = 0;
        _aArray[1] = 0x30;
        _aArray[2] = 0;
        _nSize = 1;
    }

    return gzStr(_aArray, _nSize, false);
}



gzStr gzStrI(gzInt64 _nEntier) {

    gzUInt _nSize = 0;
    gzUInt8* _aArray;

    if(_nEntier != 0){

        gzInt i;


        if(_nEntier > 0){
            i = 0;
            _nSize = 0;
        }else{
            i = 1;
            _nSize = 1;
            _nEntier *= -1;
        }


        gzUInt8 intBuff[11];

        while (_nEntier != 0){
            intBuff[_nSize] = _nEntier % 10 + 0x30;
            _nEntier /= 10;
            _nSize ++;
        }

        _aArray = (gzUInt8*)malloc(((_nSize + 2)) * sizeof(gzUInt8));;
        _aArray[0] = 0;
        gzUInt8* _aNumbers = &_aArray[1];


        if(i == 1){
            _aNumbers[0] = 0x2D;
        }


        gzInt j = _nSize;
        while ( i < _nSize){
            j --;
            _aNumbers[i] = intBuff[j];
            i++;
        }

        _aNumbers[_nSize] = 0;

    }else{

        _aArray = (gzUInt8*)malloc((3) * sizeof(gzUInt8));;

        _aArray[0] = 0;
        _aArray[1] = 0x30;
        _aArray[2] = 0;
        _nSize = 1;
    }

    return gzStr(_aArray, _nSize, false);
}


gzStr gzStrF(gzFloat64 _nFloat, gzUInt8 _nbCharAfter){

    if(_nbCharAfter > 8){
        _nbCharAfter = 8;
    }
    gzUInt _nEntier = _nFloat;

    _nbCharAfter++;
    gzStr _sFloat = gzStrUI(_nEntier);
    gzUInt _nSize = _sFloat.GnSize();
    gzUInt _nNewSize = _nSize + _nbCharAfter;


    gzUInt8* _aNewArray = (gzUInt8*)malloc(((_nNewSize + 2 )) * sizeof(gzUInt8));;


    _aNewArray[0] = 0;
    gzUInt8* _aArray = &_aNewArray[1];

    memcpy( _aArray, _sFloat.sStr->array+1, _nSize * sizeof(gzUInt8));

    _aArray[_nSize] = L'.';

    gzFloat64 _nTest = (1.0 + _nFloat - gzFloat64(_nEntier)) * Lib_GZ::pMath::fPow(gzFloat64(10.0), (_nbCharAfter));
 gzUInt64 _nAfterDot = Lib_GZ::pMath::fFloatToInt(_nTest );
    gzStr _sAfterDot = gzStrUI(_nAfterDot);

    memcpy(_aArray + _nSize + 1, _sAfterDot.sStr->array+2, (_sAfterDot.GnSize() -1)* sizeof(gzUInt8));
    free(_sFloat.sStr->array);

    _aArray[_nNewSize] = 0;
    _sFloat.sStr->array = _aNewArray;
    _sFloat.sStr->end = _aNewArray + _nNewSize + 1;
    _sFloat.pCurrPos = (gzUInt8*)_sFloat.sStr->array;

    return _sFloat;
}


inline gzUInt GZ_fHexToChar(gzUInt _nVal){
    _nVal += 0x30;
    if(_nVal > 0x39){
        _nVal += 0x07;
    }
    return _nVal;
}

gzStr gzStrH32(gzUInt32 _nEntier){


   gzUInt8* _aArray = (gzUInt8*)malloc((10) * sizeof(gzUInt8));;
    _aArray[0] = 0;
    _aArray[1] = GZ_fHexToChar((_nEntier >> 28 ) & 0x0F);
    _aArray[2] = GZ_fHexToChar((_nEntier >> 24 ) & 0x0F);
    _aArray[3] = GZ_fHexToChar((_nEntier >> 20 ) & 0x0F);
    _aArray[4] = GZ_fHexToChar((_nEntier >> 16 ) & 0x0F);
    _aArray[5] = GZ_fHexToChar((_nEntier >> 12 ) & 0x0F);
    _aArray[6] = GZ_fHexToChar((_nEntier >> 8 ) & 0x0F);
    _aArray[7] = GZ_fHexToChar((_nEntier >> 4 ) & 0x0F);
    _aArray[8] = GZ_fHexToChar(_nEntier & 0x0F);
    _aArray[9] = 0;

    return gzStr(_aArray, 8, false);
}


gzStr gzStrC(const char* _Array){
    if(_Array == 0){
        return (gzStr((gzUInt8*)"\0" "", (sizeof("\0" "")/sizeof(gzUInt8)) - 2, true));
    }
    gzUInt _nCount = 0;
    if(_Array[0] != 0){
        do{
            _nCount++;
        }while(_Array[_nCount] != 0);
    }

    gzUInt8* _aNew = (gzUInt8*)malloc(((_nCount + 2)) * sizeof(gzUInt8));;
    memcpy( _aNew+1, _Array, _nCount * sizeof(gzUInt8));
    _aNew[0] = 0;
    _aNew[_nCount + 1] = 0;

   return gzStr((gzUInt8*)_aNew, _nCount);
}
gzStr gzStrC(gzInt* _Array){
    if(_Array == 0){
        return (gzStr((gzUInt8*)"\0" "", (sizeof("\0" "")/sizeof(gzUInt8)) - 2, true));
    }
    gzUInt _nCount = 0;
    if(_Array[0] != 0){
        do{
            _nCount++;
        }while(_Array[_nCount] != 0);
    }
    gzUInt8* _aNew = (gzUInt8*)malloc(((_nCount + 2)) * sizeof(gzUInt8));;
    memcpy( _aNew+1, _Array, _nCount * sizeof(gzUInt8));
    _aNew[0] = 0;
    _aNew[_nCount + 1] = 0;
   return gzStr((gzUInt8*)_aNew, _nCount);
}

gzStr gzStrC(const char* _Array, gzUInt _nCount){
    if(_Array == 0){
        return (gzStr((gzUInt8*)"\0" "", (sizeof("\0" "")/sizeof(gzUInt8)) - 2, true));
    }
    gzUInt8* _aNew = (gzUInt8*)malloc(((_nCount + 2)) * sizeof(gzUInt8));;
    memcpy( _aNew+1, _Array, _nCount * sizeof(gzUInt8));
    _aNew[0] = 0;
    _aNew[_nCount + 1] = 0;
   return gzStr((gzUInt8*)_aNew, _nCount);
}


gzStr gzStrB(gzBool _bValue){
    if(_bValue){
        return (gzStr((gzUInt8*)"\0" "true", (sizeof("\0" "true")/sizeof(gzUInt8)) - 2, true));
    }else{
        return (gzStr((gzUInt8*)"\0" "false", (sizeof("\0" "false")/sizeof(gzUInt8)) - 2, true));
    }
}

namespace Lib_GZ{class cStThread;}





namespace Lib_GZ{






}

namespace Lib_GZ{class cThread;}






namespace Lib_GZ{


gzUInt cThread::nCurrId = 0;
cThread::cThread(cBase* _parent):cBase(_parent),bRun(true){
    thread = this;
 nId = nCurrId;
 nCurrId++;
};


void cThread::fLinkThreadExt(cThreadExt* _pThreadExt){
 Lib_GZ::Sys::Debug::Get(thread)->New(this);
    pThreadExt = _pThreadExt;
    pThreadExt->oThread = this;

}

void cThread::fStart(cBase* _opObj){

    oObj = gzSCastSelf<Lib_GZ::cBase>(_opObj);
    fLoop();

}

void cThread::fLoop(){






    oObj->ThreadLoop();

}

cThread::~cThread(){
}
}

namespace Lib_GZ{class cThreadExt;}




namespace Lib_GZ{namespace Sys{class cThreadObj;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Sys{namespace ThreadObj{



}}}


namespace Lib_GZ{class cThread;}
namespace Lib_GZ{class cThreadExt;}
namespace Lib_GZ{namespace Gfx{class cInterface;}}
namespace Lib_GZ{namespace Sys{class cThreadObj;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}
namespace Lib_GZ{namespace Sys{namespace ThreadObj{


 namespace Dlg_fThreadCallBack_r_void_p_gzPtr{

  class Dlg;typedef const Dlg& DlgP; typedef void(* FpM)(gzDlgWrapM* _w , Lib_GZ::cThreadExt* _oThreadEx); typedef void(* FpD)(gzDlgWrapD* _w , Lib_GZ::cThreadExt* _oThreadEx); typedef void(* FpP)(void* _oInst , Lib_GZ::cThreadExt* _oThreadEx); inline void fDlgEmptyFunction(void* _oInst , Lib_GZ::cThreadExt* _oThreadEx){return ;};
   class Dlg { struct _dStD{void* oClass; FpD fCall; };struct _dStM{void* oClass; FpM fCall; };struct _dStP{void* oClass; FpP fCall; };private:Lib_GZ::gzComp_r_void_p_gzPtr cfDlg;public:inline Dlg(){ ((_dStD*)&cfDlg)->oClass = 0; ((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}inline Dlg(Lib_GZ::gzComp_r_void_p_gzPtr _cfDelegate){ cfDlg = _cfDelegate;}inline Dlg& operator=(Lib_GZ::gzComp_r_void_p_gzPtr _cfDelegate){ cfDlg = _cfDelegate; return *this;}inline Lib_GZ::gzComp_r_void_p_gzPtr get() const {return cfDlg;} inline gzBool fIsSet(){return true;}inline Dlg(FpD _Func){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)_Func;}inline Dlg(void* _opClass, FpM _Func){((_dStD*)&cfDlg)->oClass = _opClass;((_dStM*)&cfDlg)->fCall = (FpM)_Func;} inline void fReset(){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}

   inline void fCall(Lib_GZ::cThreadExt* _oThreadEx){
    (*((_dStP*)&cfDlg)->fCall)(((gzComp*)&cfDlg)->oClass , _oThreadEx );
    }
  };
 }







}
class pThreadObj {

 public:


};

class cThreadObj : public Lib_GZ::cClass {

 public:





  gzBool bStarted;
  gzBool bCreated;
  gzSp<Lib_GZ::cThreadExt> oThreadExt;
  ThreadObj::Dlg_fThreadCallBack_r_void_p_gzPtr::Dlg dCallBack;
  cThreadObj(Lib_GZ::cBase* _parent);
  virtual void Ini_cThreadObj(Lib_GZ::cThreadExt* _oThreadEx, ThreadObj::Dlg_fThreadCallBack_r_void_p_gzPtr::Dlg _dCallBack);
  virtual void fSetPriority(gzUInt _nPriority);
  virtual void fThreadCallBack(Lib_GZ::cThreadExt* _oThreadEx);
  virtual void fStart();
  virtual void fJoin();
  virtual void fCancel();
  virtual void fClose();

  inline cThreadObj(const cThreadObj &_o) : Lib_GZ::cClass(_o), bStarted(_o.bStarted), bCreated(_o.bCreated), oThreadExt(), dCallBack(){};
  inline cThreadObj(const cThreadObj &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), bStarted(_o.bStarted), bCreated(_o.bCreated), oThreadExt(), dCallBack(){};
  virtual ~cThreadObj();

 private:



};
class csThreadObj : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cThreadObj> New(Lib_GZ::cBase* _parent, Lib_GZ::cThreadExt* _oThreadEx, ThreadObj::Dlg_fThreadCallBack_r_void_p_gzPtr::Dlg _dCallBack){
   gzSp<cThreadObj>_oTemp = gzSp<cThreadObj>(new cThreadObj(_parent));
   _oTemp->Ini_cThreadObj(_oThreadEx, _dCallBack);
   return _oTemp;
  }




  inline csThreadObj(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csThreadObj(){};
};
namespace ThreadObj{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csThreadObj((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csThreadObj> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csThreadObj*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csThreadObj*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csThreadObj>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace ThreadObj{
}}}
namespace Lib_GZ{class cThread;}
namespace Lib_GZ{class cThreadList;}






namespace Lib_GZ{

    void cThreadExt::Ini_cThreadExt(Lib_GZ::Dlg_r_void_p_gzPtr::DlgP _dCallBack){

        ThreadList::fAdd(this);

       oThreadObj = Sys::ThreadObj::Get(thread)->New(this, this, _dCallBack.get());
       fStart();

    }







 void cThreadExt::fStart(){





           oThreadObj->bStarted = true;
            oThreadObj->dCallBack.fCall(this);



 }

 void cThreadExt::fJoin(){
  if(!oThreadObj->bStarted){
   oThreadObj->fJoin();
  }
 }

 void cThreadExt::fCancel(){

 }

 void cThreadExt::fClose(){

 }


    cThreadExt::~cThreadExt(){


        if( oThreadObj->bStarted){
             while(oThread == 0){
                Sys::System::Get(thread)->fSleep(1);
             }
            oThread->bRun = false;
            oThreadObj->fClose();
        }

    }

}

namespace Lib_GZ{class cThread;}



namespace Lib_GZ{class cThreadExt;}



namespace Lib_GZ{ namespace ThreadList{



    gzQArray<gzSp<cThreadExt>> qaList;

    gzQElement<gzSp<cThreadExt>> qeTask;


    void Ini_Class(){
        qaList = gzQArray<gzSp<cThreadExt>> ();
        gzQElement<gzSp<cThreadExt>> qeTask = qaList.GqeFirst();

        printf("\n\n\n INaaaaaII_Class! \n\n");
    }


    void fAdd(cThreadExt* _opThread){
        Lib_GZ::Lib::nThreadCount++;
        qaList.fPush( gzSCast<cThreadExt>( _opThread->SpFromThis()) );
        _opThread->qeInList = qaList.GqeLast();
    }

    void fRemove(cThreadExt* _opThread){
        Lib_GZ::Lib::nThreadCount--;
    }


   void fNextTask(){
       if(qaList.GnTotal() > 0){

            qeTask = qaList.GqeFirst();
            qeTask.ref()->oThread->fLoop();
            qeTask = qeTask.GqeNext();
       }
   }

}
}



gzUInt16* NewConvertUTF8toUTF16 ( const gzUInt8* source);
gzUInt8* NewConvertUTF16toUTF8 ( const gzUInt16* source);
int ConvertUTF8toUTF16 ( const gzUInt8* source, gzUInt16* target);
int ConvertUTF16toUTF8 ( const gzUInt16* source, gzUInt8* target);

gzUInt8* u8_fNewUtf32ToUtf8(gzUInt32 _nChar);




gzInt32 u8_fGetChar(gzUInt8* _sSrc);


int u8_toucs(gzInt32 *dest, int sz, char *src, int srcsz);


int u8_toutf8(char *dest, int sz, gzInt32 *src, int srcsz);


int u8_wc_toutf8(char* dest, gzInt32 ch);


int u8_offset(char *str, int charnum);


int u8_charnum(char *s, int offset);



gzInt32 u8_nextchar(char *s, int *i);
gzUInt8 u8_next(gzUInt8* _sSrc);
gzInt8 u8_prev(gzUInt8* _sSrc);



void u8_inc(char *s, int *i);


void u8_dec(char *s, int *i);


int u8_seqlen(char *s);




int u8_read_escape_sequence(char *src, gzInt32 *dest);



int u8_escape_wchar(char *buf, int sz, gzInt32 ch);


int u8_unescape(char *buf, int sz, char *src);




int u8_escape(char *buf, int sz, char *src, int escape_quotes);

static const gzUInt32 offsetsFromUTF8[6] = {
    0x00000000UL, 0x00003080UL, 0x000E2080UL,
    0x03C82080UL, 0xFA082080UL, 0x82082080UL
};


  char trailingBytesForUTF8[] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
};


int u8_seqlen(char *s)
{
    return trailingBytesForUTF8[(unsigned int)(unsigned char)s[0]] + 1;
}


static const int halfShift = 10;

static const gzUInt32 halfBase = 0x0010000UL;
static const gzUInt32 halfMask = 0x3FFUL;







 gzUInt16* NewConvertUTF8toUTF16 ( const gzUInt8* source) {

    gzUInt32 _sSize = 0;
    const gzUInt8* _sSrcCt = source;

    while (*_sSrcCt != 0){
        gzUInt32 ch = 0;
        unsigned short extraBytesToRead = trailingBytesForUTF8[*_sSrcCt];
        switch (extraBytesToRead) {
            case 5: ch += *_sSrcCt++; ch <<= 6;
            case 4: ch += *_sSrcCt++; ch <<= 6;
            case 3: ch += *_sSrcCt++; ch <<= 6;
            case 2: ch += *_sSrcCt++; ch <<= 6;
            case 1: ch += *_sSrcCt++; ch <<= 6;
            case 0: ch += *_sSrcCt++;
        }
        ch -= offsetsFromUTF8[extraBytesToRead];
        if (ch > (gzUInt32)0x0000FFFF && ch <= (gzUInt32)0x0010FFFF) {
             _sSize +=2;
        } else {
            _sSize ++;
        }
    }

   gzUInt16* sResult = (gzUInt16*)malloc((_sSize + 1) * (sizeof(gzUInt16)));
    ConvertUTF8toUTF16(source, sResult);
    return sResult;
 }

int ConvertUTF8toUTF16 ( const gzUInt8* source, gzUInt16* target) {
    while (*source != 0 ) {

        gzUInt32 ch = 0;
        unsigned short extraBytesToRead = trailingBytesForUTF8[*source];

        switch (extraBytesToRead) {
            case 5: ch += *source++; ch <<= 6;
            case 4: ch += *source++; ch <<= 6;
            case 3: ch += *source++; ch <<= 6;
            case 2: ch += *source++; ch <<= 6;
            case 1: ch += *source++; ch <<= 6;
            case 0: ch += *source++;
        }
        ch -= offsetsFromUTF8[extraBytesToRead];

        if (ch <= (gzUInt32)0x0000FFFF) {
            if (ch >= (gzUInt32)0xD800 && ch <= (gzUInt32)0xDFFF) {
                *target++ = (gzUInt32)0x0000FFFD;
            } else {
                *target++ = (gzUInt16)ch;
            }
        } else if (ch > (gzUInt32)0x0010FFFF) {
                *target++ = (gzUInt32)0x0000FFFD;
        } else {

            ch -= halfBase;
            *target++ = (gzUInt16)((ch >> halfShift) + (gzUInt32)0xD800);
            *target++ = (gzUInt16)((ch & halfMask) + (gzUInt32)0xDC00);
        }
    }
    *target = 0;
    return 1;
}




gzUInt8* NewConvertUTF16toUTF8 ( const gzUInt16* source){

    gzUInt32 _sSize = 0;
    const gzUInt16* _sSrcCt = source;


   while (*_sSrcCt != 0 ) {

        gzUInt32 ch = 0;

        const gzUInt32 byteMask = 0xBF;
        const gzUInt32 byteMark = 0x80;
        ch = *_sSrcCt++;
        gzUInt32 ch2 = *_sSrcCt;

        if (ch >= (gzUInt32)0xD800 && ch <= (gzUInt32)0xDBFF) {
            gzUInt32 ch2 = *source;

            if (ch2 >= (gzUInt32)0xDC00 && ch2 <= (gzUInt32)0xDFFF) {
                ch = ((ch - (gzUInt32)0xD800) << halfShift)
                    + (ch2 - (gzUInt32)0xDC00) + halfBase;
                ++source;
            }
        }

        if (ch < (gzUInt32)0x80) { _sSize += 1;
        } else if (ch < (gzUInt32)0x800) { _sSize += 2;
        } else if (ch < (gzUInt32)0x10000) { _sSize += 3;
        } else if (ch < (gzUInt32)0x110000) { _sSize += 4;
        } else { _sSize += 3;

        }
    }


   gzUInt8* _sResult = (gzUInt8*)malloc((_sSize + 2) * (sizeof(gzUInt8)));
    ConvertUTF16toUTF8(source, _sResult + 1);
    _sResult[0] = _sSize+1;
    _sResult[_sSize + 1] = 0;
    return _sResult;
 }
static const gzUInt8 firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
int ConvertUTF16toUTF8 ( const gzUInt16* source, gzUInt8* target) {

    while (*source != 0 ) {

        gzUInt32 ch = 0;

        unsigned short bytesToWrite = 0;
        const gzUInt32 byteMask = 0xBF;
        const gzUInt32 byteMark = 0x80;

        ch = *source++;

        if (ch >= (gzUInt32)0xD800 && ch <= (gzUInt32)0xDBFF) {
            gzUInt32 ch2 = *source;

            if (ch2 >= (gzUInt32)0xDC00 && ch2 <= (gzUInt32)0xDFFF) {
                ch = ((ch - (gzUInt32)0xD800) << halfShift)
                    + (ch2 - (gzUInt32)0xDC00) + halfBase;
                ++source;
            }
        }


        if (ch < (gzUInt32)0x80) { bytesToWrite = 1;
        } else if (ch < (gzUInt32)0x800) { bytesToWrite = 2;
        } else if (ch < (gzUInt32)0x10000) { bytesToWrite = 3;
        } else if (ch < (gzUInt32)0x110000) { bytesToWrite = 4;
        } else { bytesToWrite = 3;
                                            ch = (gzUInt32)0x0000FFFD;
        }

        target += bytesToWrite;

        switch (bytesToWrite) {
            case 4: *--target = (gzUInt8)((ch | byteMark) & byteMask); ch >>= 6;
            case 3: *--target = (gzUInt8)((ch | byteMark) & byteMask); ch >>= 6;
            case 2: *--target = (gzUInt8)((ch | byteMark) & byteMask); ch >>= 6;
            case 1: *--target = (gzUInt8)(ch | firstByteMark[bytesToWrite]);
        }
        target += bytesToWrite;
    }

    return 1;
}






 gzUInt8* u8_fNewUtf32ToUtf8(gzUInt32 _nChar){

    if (_nChar < 0x80) {
         gzUInt8* _sDest = (gzUInt8*)malloc((3) * (sizeof(gzUInt8)));
        _sDest[0] = 2;
        _sDest[1] = (gzUInt8)_nChar;
        _sDest[2] = 0;
        return _sDest;

    }else if (_nChar < 0x800) {
        gzUInt8* _sDest = (gzUInt8*)malloc((4) * (sizeof(gzUInt8)));
        _sDest[0] = 3;
        _sDest[1] = (_nChar >> 6) | 0xC0;
        _sDest[2] = (_nChar & 0x3F) | 0x80;
        _sDest[3] = 0;
        return _sDest;

    }else if (_nChar < 0x10000) {
        gzUInt8* _sDest = (gzUInt8*)malloc((5) * (sizeof(gzUInt8)));
        _sDest[0] = 4;
        _sDest[1] = (_nChar >> 12) | 0xE0;
        _sDest[2] = ((_nChar >> 6) & 0x3F) | 0x80;
        _sDest[3] = (_nChar & 0x3F) | 0x80;
        _sDest[4] = 0;
        return _sDest;

    }else if (_nChar < 0x110000) {
        gzUInt8* _sDest = (gzUInt8*)malloc((6) * (sizeof(gzUInt8)));
        _sDest[0] = 5;
        _sDest[1] = (_nChar >> 18) | 0xF0;
        _sDest[2] = ((_nChar >> 12) & 0x3F) | 0x80;
        _sDest[3] = ((_nChar >> 6) & 0x3F) | 0x80;
        _sDest[4] = (_nChar & 0x3F) | 0x80;
        _sDest[5] = 0;
        return _sDest;
    }else{
        return 0;
    }

}


gzInt32 u8_fGetChar(gzUInt8* _sSrc){

    gzUInt32 ch = 0;

    unsigned short extraBytesToRead = trailingBytesForUTF8[*_sSrc];
    switch (extraBytesToRead) {
        case 0:
            ch += *_sSrc;
        break;
        case 1:
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++;
        break;
        case 2:
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++;
        break;
        case 3:
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++;
        break;
        case 4:
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++;
        break;
        case 5:
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++;
        break;
        case 6:
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++; ch <<= 6;
            ch += *_sSrc++;
        break;
    }
    ch -= offsetsFromUTF8[extraBytesToRead];
    return ch;
}



gzInt32 u8_nextchar(char *s, int *i)
{
    gzInt32 ch = 0;
    int sz = 0;

    do {
        ch <<= 6;
        ch += (unsigned char)s[(*i)++];
        sz++;
    } while (s[*i] && !(((s[*i])&0xC0)!=0x80));
    ch -= offsetsFromUTF8[sz-1];

    return ch;
}


gzUInt8 u8_next(gzUInt8* _sSrc) {
    return trailingBytesForUTF8[*_sSrc] + 1;
}

gzInt8 u8_prev(gzUInt8* _sSrc) {
    int i = 0;
    (void)((((_sSrc[--i])&0xC0)!=0x80) || (((_sSrc[--i])&0xC0)!=0x80) ||
           (((_sSrc[--i])&0xC0)!=0x80) || --i);
    return i;
}

void u8_inc(char *s, int *i)
{
    (void)((((s[++(*i)])&0xC0)!=0x80) || (((s[++(*i)])&0xC0)!=0x80) ||
           (((s[++(*i)])&0xC0)!=0x80) || ++(*i));
}

void u8_dec(char *s, int *i)
{
    (void)((((s[--(*i)])&0xC0)!=0x80) || (((s[--(*i)])&0xC0)!=0x80) ||
           (((s[--(*i)])&0xC0)!=0x80) || --(*i));
}

template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}









extern "C" {
 int printf ( const char * format, ... );
 int wprintf (const wchar_t* format, ...);

 size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );
 int fclose ( FILE * stream );

}
enum
{
   STBI_default = 0,

   STBI_grey = 1,
   STBI_grey_alpha = 2,
   STBI_rgb = 3,
   STBI_rgb_alpha = 4
};

typedef unsigned char stbi_uc;


extern "C" {
typedef struct
{
   int (*read) (void *user,char *data,int size);
   void (*skip) (void *user,int n);
   int (*eof) (void *user);
} stbi_io_callbacks;

extern stbi_uc *stbi_load (char const *filename, int *x, int *y, int *comp, int req_comp);
extern stbi_uc *stbi_load_from_memory (stbi_uc const *buffer, int len , int *x, int *y, int *comp, int req_comp);
extern stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk , void *user, int *x, int *y, int *comp, int req_comp);







   extern float *stbi_loadf (char const *filename, int *x, int *y, int *comp, int req_comp);
   extern float *stbi_loadf_from_memory (stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp);
   extern float *stbi_loadf_from_callbacks (stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp);







   extern void stbi_hdr_to_ldr_gamma(float gamma);
   extern void stbi_hdr_to_ldr_scale(float scale);



   extern void stbi_ldr_to_hdr_gamma(float gamma);
   extern void stbi_ldr_to_hdr_scale(float scale);



extern int stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user);
extern int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len);
extern const char *stbi_failure_reason (void);


extern void stbi_image_free (void *retval_from_stbi_load);


extern int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp);
extern int stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);
extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);



extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);


extern void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip);



extern char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen);
extern char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header);
extern char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen);
extern int stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);

extern char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen);
extern int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);



}



namespace Lib_GZ{namespace File{class cRcImg;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}





namespace Lib_GZ{namespace File{class cResource;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace File{class cResource;}}


namespace Lib_GZ{namespace File{namespace Resource{



}}}


namespace Lib_GZ{namespace Sys{class cFile;}}

namespace Lib_GZ{namespace File{class cResource;}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace File{namespace Resource{
}
class pResource {

 public:


};

class cResource : public Lib_GZ::cClass {

 public:


  cResource* fSet(const gzRcFolder* _oFolder, gzStr _sFile, const gzUInt8* _aSrcMemData, gzUInt _nSize){
  aSrcMemData = (gzUInt8*)_aSrcMemData;
  sFile = _sFile;
  nSize = _nSize;
  hLocation = Lib_GZ::File::Resource::eLocation::Memory;
  return this;
  }




  gzStr sFile;
  gzUInt8* aSrcMemData;
  gzStr sPath;
  gzStr sVDrive;
  gzBool bReadOnly;
  gzBool bRcLoaded;
  gzBool bGpuLoaded;
  Lib_GZ::File::Resource::eLocation hLocation;
  gzUInt nSize;
  cResource(Lib_GZ::cBase* _parent);
  virtual void Ini_cResource(const gzStr& _sPath, Lib_GZ::File::Resource::eLocation _hLocation = Lib_GZ::File::Resource::eLocation::Unknow);
  virtual void fLoadFile();
  virtual void fSetDynamicMemData(gzUInt8* _aSrcMemData, gzUIntX _nSize);
  virtual void fSetStaticMemData(gzUInt8* _aSrcMemData, gzUIntX _nSize);

  inline cResource(const cResource &_o) : Lib_GZ::cClass(_o), sFile(_o.sFile), aSrcMemData(), sPath(_o.sPath), sVDrive(_o.sVDrive), bReadOnly(_o.bReadOnly), bRcLoaded(_o.bRcLoaded), bGpuLoaded(_o.bGpuLoaded), hLocation(), nSize(_o.nSize){};
  inline cResource(const cResource &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), sFile(_o.sFile,_b), aSrcMemData(), sPath(_o.sPath,_b), sVDrive(_o.sVDrive,_b), bReadOnly(_o.bReadOnly), bRcLoaded(_o.bRcLoaded), bGpuLoaded(_o.bGpuLoaded), hLocation(), nSize(_o.nSize){};
  virtual ~cResource();

 private:



};
class csResource : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cResource> New(Lib_GZ::cBase* _parent, const gzStr& _sPath, Lib_GZ::File::Resource::eLocation _hLocation = Lib_GZ::File::Resource::eLocation::Unknow){
   gzSp<cResource>_oTemp = gzSp<cResource>(new cResource(_parent));
   _oTemp->Ini_cResource(_sPath, _hLocation);
   return _oTemp;
  }




  inline csResource(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csResource(){};
};
namespace Resource{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csResource((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csResource> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csResource*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csResource*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csResource>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Resource{
}}}

namespace Lib_GZ{namespace File{namespace RcImg{



}}}


namespace Lib_GZ{namespace Wrap{class cImage;}}
namespace Lib_GZ{namespace Sys{class cSystem;}}

namespace Lib_GZ{namespace File{class cResource;}}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuObject;}}}
namespace Lib_GZ{namespace File{class cRcImg;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace File{namespace RcImg{
}
class pRcImg {

 public:


};

class cRcImg : public Lib_GZ::File::cResource {

 public:


  cRcImg(gzBool _bStartRc = false):cResource(0) {


  printf("\n RcImg");

  }




  gzUInt32 nGpuTexId;
  gzUInt nWidth;
  gzUInt nHeight;
  gzInt32** aImg;
  cRcImg(Lib_GZ::cBase* _parent);
  virtual void Ini_cRcImg(const gzStr& _sPath);
  virtual gzBool fCpuLoad();
  virtual gzBool fGpuLoad();

  inline cRcImg(const cRcImg &_o) : Lib_GZ::File::cResource(_o), nGpuTexId(_o.nGpuTexId), nWidth(_o.nWidth), nHeight(_o.nHeight), aImg(){};
  inline cRcImg(const cRcImg &_o, gzBool _b) : Lib_GZ::File::cResource(_o, _b), nGpuTexId(_o.nGpuTexId), nWidth(_o.nWidth), nHeight(_o.nHeight), aImg(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cRcImg();

 private:



};
class csRcImg : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cRcImg> New(Lib_GZ::cBase* _parent, const gzStr& _sPath){
   gzSp<cRcImg>_oTemp = gzSp<cRcImg>(new cRcImg(_parent));
   _oTemp->Ini_cRcImg(_sPath);
   return _oTemp;
  }




  inline csRcImg(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csRcImg(){};
};
namespace RcImg{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csRcImg((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csRcImg> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csRcImg*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csRcImg*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csRcImg>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace RcImg{
}}}


namespace Lib_GZ{namespace Wrap{

    namespace Image{
        struct pixel { gzUInt color; };
        struct pixel3Chan { gzUInt8 R;gzUInt8 G; gzUInt8 B; };
        extern gzUInt nNbFile;
         extern gzInt** aFileList;
         extern gzInt8** aPathList;
    }
    namespace pImage{
         gzInt fOpen(File::cRcImg* _oRc);



         void fClear(gzInt** _aPixelArray, gzInt _height, gzInt _width );
         gzInt fDelete(gzInt** _aPixelArray, gzInt _nCurrentHeight);
   gzInt** fNewEmpty(gzInt _height, gzInt _width);


        gzInt** fGetImage(File::cRcImg* _oRc, gzUInt8* image_data, gzUInt image_nbChannel);

         gzInt fDelete(File::cRcImg* _oRc);
    }


class cImage {

    public:



        gzStr* sPath;

        gzUInt pChannels;
        gzUInt pRowbytes;
        gzInt nGamma;

        cImage();


        gzInt fOpenFromMemory(gzInt* _aData, gzUInt _uLength) ;


        void iniFlashList();
        gzInt findFileInFlashList(gzStr* _sPath);



        gzInt fGetWidth();
        gzInt fGetHeight();



    private:

        ArrayInt* aArrayInt;
  ArrayPtr* aPixelArray;

};
}}




namespace Lib_GZ{ namespace Wrap{


namespace Image{
gzInt** aFileList = 0;
gzInt8** aPathList = 0;
gzUInt nNbFile = 0;
}


gzInt pImage::fOpen(File::cRcImg* _oRc) {
    gzUInt8* image_data;
    gzUInt image_nbChannel;
    gzInt32 x,y,n;
    gzUInt8* data;
  if(_oRc->aSrcMemData == 0){
    Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "IMG LOAD FAIL: Nothing in memory for: ", (sizeof("\0" "IMG LOAD FAIL: Nothing in memory for: ")/sizeof(gzUInt8)) - 2, true)) + _oRc->sVDrive + _oRc->sPath );
    data = 0;
   }else{
    data = stbi_load_from_memory( (stbi_uc*)_oRc->aSrcMemData, _oRc->nSize, &x, &y, &n, 0);


    if(data){
     image_data = data;
      _oRc->nWidth= (gzInt)x;
      _oRc->nHeight = (gzInt)y;
     image_nbChannel = n;




    }else {


      Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "IMG LOAD FAIL: ", (sizeof("\0" "IMG LOAD FAIL: ")/sizeof(gzUInt8)) - 2, true)) + gzStrC(stbi_failure_reason()) + (gzStr((gzUInt8*)"\0" " ", (sizeof("\0" " ")/sizeof(gzUInt8)) - 2, true)) + _oRc->sVDrive + _oRc->sPath );


    }
  }
    pImage::fGetImage(_oRc, image_data, image_nbChannel);

 return 0;
}


gzInt** pImage::fGetImage(File::cRcImg* _oRc, gzUInt8* image_data, gzUInt image_nbChannel)
{


    gzUInt image_height = _oRc->nHeight;
    gzUInt image_width = _oRc->nWidth;

    gzInt** p2DArray;



    Image::pixel *p;
    Image::pixel *pixels;

    gzUInt nExtWidth;
    gzUInt nExtHeight;

    nExtHeight = _oRc->nHeight + (1*2);
    nExtWidth = _oRc->nWidth + (1*2);




    p2DArray = new gzInt*[nExtHeight];

    gzUInt _nPixelFrame;
    gzUInt _nFrameAlpha;
    gzUInt _nFrameRed;
    gzUInt _nFrameBlue;
    gzUInt _nFrameGreen;
 gzInt* p1DArray = (gzInt *)calloc(nExtHeight * nExtWidth, sizeof(gzInt));

    p2DArray[0] = p1DArray;
    p2DArray[nExtHeight - 1] = &p1DArray[ nExtWidth * (image_height + 1)];

 switch(image_nbChannel){

   case 3 :
     for (gzInt y = 0; y < image_height; y++){


        for (gzInt x = 0; x < image_width; x++){


         Image::pixel3Chan* _nPix = (Image::pixel3Chan*)&image_data[y * image_width*image_nbChannel + x*3];
         _nFrameAlpha = 0xFF;

         _nFrameRed = _nPix->R;
         _nFrameGreen = _nPix->G;
         _nFrameBlue = _nPix->B;

                                    p1DArray[((y+1) * nExtWidth) + (x+1) ] = (_nFrameAlpha << 24) | (_nFrameRed << 16) | (_nFrameGreen << 8) | _nFrameBlue;
                                    p2DArray[(y+1)] = &p1DArray[((y+1) * nExtWidth)];
       }
     }
   break;


   case 4 :

     for (gzInt y = 0; y < image_height; y++){



                            gzInt* RowY = (gzInt*)&image_data[y * image_width*image_nbChannel];

        for (gzInt x = 0; x < image_width; x++){

         _nPixelFrame = RowY[x];
         _nFrameAlpha = (_nPixelFrame >> 24);

         _nFrameBlue = ((_nPixelFrame >> 16) & 0xFF) * _nFrameAlpha >> 8;
         _nFrameGreen = ((_nPixelFrame >> 8) & 0xFF) * _nFrameAlpha >> 8;
         _nFrameRed = (_nPixelFrame & 0xFF) * _nFrameAlpha >> 8;


         p1DArray[((y+1) * nExtWidth) + (x+1) ] = (_nFrameAlpha << 24) | (_nFrameRed << 16) | (_nFrameGreen << 8) | _nFrameBlue;

         p2DArray[(y+1)] = &p1DArray[((y+1) * nExtWidth)];
      }
     }
   break;

 }
    _oRc->aImg = p2DArray;


    return p2DArray;
}


void cImage::iniFlashList(){
}




gzInt cImage::findFileInFlashList(gzStr* _sPath){
    return 0;
}



void pImage::fClear(gzInt** _aPixelArray, gzInt _height, gzInt _width ){


    if(_aPixelArray != 0){

         for (gzInt y = 0; y < _height; y++){
             memset(_aPixelArray[y+1],0,_width*4);
        }
    }
}



gzInt pImage::fDelete(File::cRcImg* _oRc){


    gzInt32** _aPixelArray = _oRc->aImg;
    if(_aPixelArray != 0){

      free(_aPixelArray[0]);

    }

    return 0;
}


gzInt** pImage::fNewEmpty( gzInt _height, gzInt _width){

 gzInt _nExtHeight = _height + (1*2);
    gzInt _nExtWidth = _width + (1*2);

    gzInt ** _aPixelArray = (gzInt **)malloc((_nExtWidth) * (sizeof(gzInt*)));

    _aPixelArray[0] = (gzInt *)calloc(sizeof(gzInt), _nExtWidth);
    _aPixelArray[1] = _aPixelArray[0];
    _aPixelArray[_nExtHeight - 1] = _aPixelArray[0];
    _aPixelArray[_nExtHeight - 2] = _aPixelArray[0];

    for (gzInt y = 0; y < _height; y++){
        _aPixelArray[y+1] = (gzInt *)calloc(sizeof(gzInt), _nExtWidth);
    }
 return _aPixelArray;
}


}

}

template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}




namespace Lib_GZ_OpenGL{class cOpenGL;}


namespace Lib_GZ_OpenGL{ void fIniLib(); extern Lib_GZ::uLib zpLib; extern Lib_GZ::uOverplace* rLastClass; inline Lib_GZ::uLib NewLib(){return {Lib_GZ::fSetLib(&zpLib), (gzStr((gzUInt8*)"\0" "Lib_GZ_OpenGL", (sizeof("\0" "Lib_GZ_OpenGL")/sizeof(gzUInt8)) - 2, true)), &rLastClass };} namespace Lib{ inline Lib_GZ::uOverplace* SetClass(Lib_GZ::uOverplace* _rClass){ Lib_GZ::uOverplace* rTemp = rLastClass; rLastClass = _rClass; return rTemp; } }}

template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

   namespace Lib_GZ_OpenGL{class cOpenGL;}



namespace Lib_GZ_OpenGL{namespace OpenGL{





 struct eShaderInfo{
  enum Type {
   SHADER_TYPE = gzInt(35663),
   DELETE_STATUS = gzInt(35712),
   COMPILE_STATUS = gzInt(35713),
   INFO_LOG_LENGTH = gzInt(35716),
   SHADER_SOURCE_LENGTH = gzInt(35720)
  };
  Type t_;inline eShaderInfo(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eShaderInfo(){};
 };
 struct eProgramInfo{
  enum Type {
   LINK_STATUS = gzInt(35714)
  };
  Type t_;inline eProgramInfo(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eProgramInfo(){};
 };
 struct eShader{
  enum Type {
   VERTEX_SHADER = gzInt(35633),
   FRAGMENT_SHADER = gzInt(35632)
  };
  Type t_;inline eShader(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eShader(){};
 };
 struct eGetName{
  enum Type {
   MAJOR_VERSION = gzInt(33307),
   MINOR_VERSION = gzInt(33308)
  };
  Type t_;inline eGetName(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eGetName(){};
 };
 struct eDrawMode{
  enum Type {
   POINTS = gzInt(0),
   PATCHES = gzInt(14),
   LINES = gzInt(1),
   LINE_LOOP = gzInt(2),
   LINES_ADJACENCY = gzInt(10),
   LINE_STRIP = gzInt(3),
   LINE_STRIP_ADJACENCY = gzInt(11),
   TRIANGLES = gzInt(4),
   TRIANGLE_FAN = gzInt(6),
   TRIANGLES_ADJACENCY = gzInt(12),
   TRIANGLE_STRIP = gzInt(5),
   TRIANGLE_STRIP_ADJACENCY = gzInt(13)
  };
  Type t_;inline eDrawMode(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eDrawMode(){};
 };
 struct eDrawFlow{
  enum Type {
   STREAM_DRAW = gzInt(35040),
   STATIC_DRAW = gzInt(35044),
   DYNAMIC_DRAW = gzInt(35048)
  };
  Type t_;inline eDrawFlow(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eDrawFlow(){};
 };
 struct eTypeSize{
  enum Type {
   Vec1 = 1 * 4,
   Vec2 = 2 * 4,
   Vec3 = 3 * 4,
   Vec4 = 4 * 4
  };
  Type t_;inline eTypeSize(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eTypeSize(){};
 };
 struct eVarType{
  enum Type {
   BYTE = gzInt(5120),
   UNSIGNED_BYTE = gzInt(5121),
   FLOAT = gzInt(5126)
  };
  Type t_;inline eVarType(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eVarType(){};
 };
 struct eClearBuffer{
  enum Type {
   COLOR_BUFFER_BIT = gzInt(16384),
   DEPTH_BUFFER_BIT = gzInt(256),
   STENCIL_BUFFER_BIT = gzInt(1024)
  };
  Type t_;inline eClearBuffer(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eClearBuffer(){};
 };
 struct eVecLength{
  enum Type {
   Vec1 = 1,
   Vec2 = 2,
   Vec3 = 3,
   Vec4 = 4
  };
  Type t_;inline eVecLength(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eVecLength(){};
 };
 struct eBufferTarget{
  enum Type {
   ARRAY_BUFFER = gzInt(34962),
   READ_BUFFER = gzInt(3074),
   TEXTURE_BUFFER = gzInt(35882),
   TRANSFORM_FEEDBACK_BUFFER = gzInt(35982),
   UNIFORM_BUFFER_BINDING = gzInt(35368),
   ELEMENT_ARRAY_BUFFER = gzInt(34963),
   ARRAY_BUFFER_BINDING = gzInt(34964),
   ELEMENT_ARRAY_BUFFER_BINDING = gzInt(34965)
  };
  Type t_;inline eBufferTarget(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eBufferTarget(){};
 };
}}






extern void* gzEmscPtrBuffer;


namespace Lib_GZ_OpenGL{namespace OpenGL{



}}



   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace OpenGL{
}
class pOpenGL {

 public:


};

class cOpenGL : public Lib_GZ::cClass {

 public:



  cOpenGL(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpenGL();

  inline cOpenGL(const cOpenGL &_o) : Lib_GZ::cClass(_o){};
  inline cOpenGL(const cOpenGL &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpenGL();

 private:



};
class csOpenGL : public Lib_GZ::cStThread {

 public:







  inline virtual gzSp<cOpenGL> New(Lib_GZ::cBase* _parent){
   gzSp<cOpenGL>_oTemp = gzSp<cOpenGL>(new cOpenGL(_parent));
   _oTemp->Ini_cOpenGL();
   return _oTemp;
  }



  virtual gzUInt fGetError();
  virtual void fFlush();
  virtual void fEnable(gzUInt _eCapability);
  virtual void fDisable(gzUInt _eCapability);
  virtual void fDepthMask(gzBool _bEnable);
  virtual void fDepthFunc(gzUInt _eFunc);
  virtual void fGetBooleanv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzBool* _pData);
  virtual void fGetDoublev(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzFloat64* _pData);
  virtual void fGetFloatv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzFloat32* _pData);
  virtual void fGetIntegerv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzInt32* _pData);
  virtual void fGetInteger64v(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzInt64* _pData);
  virtual void fGetBooleani_v(gzUInt _hTarget, gzUInt _nIndex, gzBool* _pData);
  virtual void fGetIntegeri_v(gzUInt _hTarget, gzUInt _nIndex, gzFloat64* _pData);
  virtual void fGetFloati_v(gzUInt _hTarget, gzUInt _nIndex, gzFloat32* _pData);
  virtual void fGetDoublei_v(gzUInt _hTarget, gzUInt _nIndex, gzInt32* _pData);
  virtual void fGetInteger64i_v(gzUInt _hTarget, gzUInt _nIndex, gzInt64* _pData);
  virtual void fVertexAttribPointer(gzVal _nIndex, Lib_GZ_OpenGL::OpenGL::eVecLength _hLength, Lib_GZ_OpenGL::OpenGL::eVarType _hType, gzBool _bNormalized, gzInt _nStride, gzUInt _nPointer);
  virtual void fVertexAttribDivisor(gzVal _nIndex, gzUInt _nDivisor);
  virtual void fEnableVertexAttribArray(gzVal _nIndex);
  virtual void fDisableVertexAttribArray(gzUInt _nIndex);
  virtual gzBool fSwapIntervalEXT(gzInt _nInterval);
  virtual void fBlendEquation(gzUInt _eMode);
  virtual void fBlendFuncSeparate(gzUInt _eSFactorRGB, gzUInt _eDFactorRGB, gzUInt _eSFactorAlpha, gzUInt _eDFactorAlpha);
  virtual void fBlendFunc(gzUInt _eSrcFactor, gzUInt _eDstFactor);
  virtual void fGenVertexArrays(gzInt _nNb, gzUInt* _aArrays);
  virtual gzVal fCreateBuffer();
  virtual void fGenBuffers(gzInt _nNb, gzUInt* _aBuffers);
  virtual void fBindVertexArray(gzUInt _nVAO);
  virtual void fBindBuffer(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzVal _nBuffer);
  virtual void fBufferSubData(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzIntX _nOffset, gzIntX _nSize, void* _pData);
  virtual gzStr fGetShaderInfoLog(gzVal _nShaderId);
  virtual void fGetShaderInfoLog(gzVal _nShaderId, gzInt _nMaxLength, gzInt* _aLength, gzUInt8* _cLogInfo);
  virtual gzVal fCreateProgram();
  virtual void fLinkProgram(gzVal _nIdProgram);
  virtual void fGetProgramParameter(gzVal _nShaderId, Lib_GZ_OpenGL::OpenGL::eProgramInfo _hInfo, gzInt* _aParams);
  virtual void fGetProgramiv(gzVal _nIdProgram, Lib_GZ_OpenGL::OpenGL::eProgramInfo _hInfo, gzInt* _aParams);
  virtual void fUseProgram(gzVal _nIdProgram);
  virtual void fDeleteProgram(gzVal _nIdProgram);
  virtual void fGetProgramInfoLog(gzVal _nProgramId, gzInt _nMaxLength, gzInt* _aLength, gzUInt8* _cLogInfo);
  virtual gzVal fGetUniformLocation(gzVal _nIdProgram, gzUInt8* _cName);
  virtual gzVal fGetAttribLocation(gzVal _nIdProgram, gzUInt8* _cName);
  virtual void fBindAttribLocation(gzVal _nIdProgram, gzUInt _nIndex, gzUInt8* _cName);
  virtual gzVal fCreateShader(Lib_GZ_OpenGL::OpenGL::eShader _hType);
  virtual void fShaderSource(gzVal _nShaderId, const gzStr& _sSourceCode);
  virtual void fShaderSource(gzVal _nShaderId, gzInt _nCount, gzUInt8** _cSourceCode, gzInt* _pLength = (0));
  virtual void fCompileShader(gzVal _nShaderId);
  virtual gzUInt fGetShaderParameter(gzVal _nShaderId, Lib_GZ_OpenGL::OpenGL::eShaderInfo _hInfo);
  virtual void fGetShaderiv(gzVal _nShaderId, Lib_GZ_OpenGL::OpenGL::eShaderInfo _hInfo, gzInt* _aParams);
  virtual void fDeleteShader(gzVal _nShaderId);
  virtual void fAttachShader(gzVal _nIdProgram, gzVal _nShaderId);
  virtual void fActiveTexture(gzUInt _eTexture);
  virtual void fTexImage2D(gzUInt _eTarget, gzInt _nLevel, gzInt _nInternalformat, gzInt _nWidth, gzInt _nHeight, gzInt _nBorder, gzUInt _eFormat, gzUInt _eType, void* _pPixel);
  virtual void fTexImage3D(gzUInt _eTarget, gzInt _nLevel, gzInt _nInternalformat, gzInt _nWidth, gzInt _nHeight, gzInt _nDepth, gzInt _nBorder, gzUInt _eFormat, gzUInt _eType, void* _pPixel);
  virtual void fTexSubImage3D(gzUInt _eTarget, gzInt _nLevel, gzInt _nOffsetX, gzInt _nOffsetY, gzInt _nOffsetZ, gzInt _nWidth, gzInt _nHeight, gzInt _nDepth, gzUInt _eFormat, gzUInt _eType, void* _pPixel);
  virtual void fBindTexture(gzUInt _eTarget, gzUInt _nTextureId);
  virtual void fTexParameterf(gzUInt _eTarget, gzUInt _eName, gzFloat32 _nParam);
  virtual void fTexParameteri(gzUInt _eTarget, gzUInt _eName, gzInt _nParam);
  virtual void fGenTextures(gzInt _nNb, gzUInt* _aTextures);
  virtual void fClear(Lib_GZ_OpenGL::OpenGL::eClearBuffer _hMask);
  virtual void fClearColor(gzFloat32 _nRed, gzFloat32 _nGreen, gzFloat32 _nBlue, gzFloat32 _nAlpha);
  virtual void fBufferData(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzUInt _nNb, Lib_GZ_OpenGL::OpenGL::eTypeSize _hType, const gzFData<gzUInt8>& _pData, Lib_GZ_OpenGL::OpenGL::eDrawFlow _hUsage);
  virtual void fBufferData(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzIntX _nSize, void* _pData, Lib_GZ_OpenGL::OpenGL::eDrawFlow _hUsage);
  virtual void fDrawElements(Lib_GZ_OpenGL::OpenGL::eDrawMode _hMode, gzInt _nCount, Lib_GZ_OpenGL::OpenGL::eVarType _hVarType, void* _pOffset);
  virtual void fDrawElementsInstanced(Lib_GZ_OpenGL::OpenGL::eDrawMode _hMode, gzInt _nCount, Lib_GZ_OpenGL::OpenGL::eVarType _hVarType, void* _pIndicesLocation, gzInt _nInstanceCount);
  virtual void fGenFramebuffers(gzInt _nNb, gzUInt* _aFrameBuffers);
  virtual void fBindFramebuffer(gzUInt _eTarget, gzUInt _nFrameBufferId);
  virtual void fGenRenderbuffers(gzInt _nNb, gzUInt* _aRenderBuffers);
  virtual void fBindRenderbuffer(gzUInt _eTarget, gzUInt _nRenderBufferId);
  virtual void fRenderbufferStorage(gzUInt _eTarget, gzUInt _eInternalFormat, gzInt _nWidth, gzInt _nHeight);
  virtual void fFramebufferTexture2D(gzUInt _eTarget, gzUInt _eAttachement, gzUInt _eTextureTarget, gzUInt _nTexture, gzInt _nLevel);
  virtual void fFramebufferRenderbuffer(gzUInt _eTarget, gzUInt _eAttachement, gzUInt _eRenderBufferTarget, gzUInt _nRenderBufferId);
  virtual gzUInt fCheckFramebufferStatus(gzUInt _eTarget);
  virtual void fDeleteBuffers(gzInt _nNb, gzUInt* _aBuffers);
  virtual void fUniform1f(gzVal _nLocation, gzFloat32 _n0);
  virtual void fUniform2f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1);
  virtual void fUniform3f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, gzFloat32 _n2);
  virtual void fUniform4f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, gzFloat32 _n2, gzFloat32 _n3);
  virtual void fUniform1i(gzVal _nLocation, gzInt32 _n0);
  virtual void fUniform2i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1);
  virtual void fUniform3i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, gzInt32 _n2);
  virtual void fUniform4i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, gzInt32 _n2, gzInt32 _n3);
  virtual void fUniform1fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue);
  virtual void fUniform2fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue);
  virtual void fUniform3fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue);
  virtual void fUniform4fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue);
  virtual void fUniform1iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue);
  virtual void fUniform2iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue);
  virtual void fUniform3iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue);
  virtual void fUniform4iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue);
  virtual void fUniformMatrix2fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue);
  virtual void fUniformMatrix3fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue);
  virtual void fUniformMatrix4fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue);
  virtual void fUniform1d(gzVal _nLocation, gzFloat64 _nX);
  virtual void fUniform2d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY);
  virtual void fUniform3d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, gzFloat64 _nZ);
  virtual void fUniform4d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, gzFloat64 _nZ, gzFloat64 _nW);
  virtual void fUniform1dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue);
  virtual void fUniform2dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue);
  virtual void fUniform3dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue);
  virtual void fUniform4dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue);
  virtual void fUniformMatrix2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
  virtual void fUniformMatrix3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
  virtual void fUniformMatrix4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
  virtual void fUniformMatrix2x3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
  virtual void fUniformMatrix2x4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
  virtual void fUniformMatrix3x2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
  virtual void fUniformMatrix3x4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
  virtual void fUniformMatrix4x2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
  virtual void fUniformMatrix4x3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
  virtual void fUniform1ui(gzVal _nLocation, gzUInt32 _n0);
  virtual void fUniform2ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1);
  virtual void fUniform3ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, gzUInt32 _n2);
  virtual void fUniform4ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, gzUInt32 _n2, gzUInt32 _n3);
  virtual void fUniform1uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue);
  virtual void fUniform2uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue);
  virtual void fUniform3uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue);
  virtual void fUniform4uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue);
  virtual gzUInt fGetUniformBlockIndex(gzUInt _nPorgramId, gzUInt8* _cUboName);
  virtual void fBindBufferBase(gzUInt _eTarget, gzUInt _nIndex, gzUInt _nBuffer);
  virtual void fUniformBlockBinding(gzUInt _nPorgramId, gzUInt _nUniformBlickId, gzUInt _nBindPoint);

  inline csOpenGL(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csOpenGL(){};
};
namespace OpenGL{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpenGL((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csOpenGL> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpenGL*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpenGL*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpenGL>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace OpenGL{
}}
namespace Lib_GZ_OpenGL{class cOpenGL;}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}



namespace Lib_GZ_OpenGL {namespace SysGpuFunc{
void* fGetFuncGL(const char *_cName, gzBool _bRequired = true);
gzBool fGetGpuFunctions();
}}



typedef gzUInt (__attribute__((__stdcall__))* FUNC_fGetError)();
extern FUNC_fGetError glCall_fGetError;





typedef void (__attribute__((__stdcall__))* FUNC_fFlush)();
extern FUNC_fFlush glCall_fFlush;
void glDbg_fFlush(const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fEnable)(gzUInt _eCapability);
extern FUNC_fEnable glCall_fEnable;
void glDbg_fEnable(gzUInt _eCapability, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fDisable)(gzUInt _eCapability);
extern FUNC_fDisable glCall_fDisable;
void glDbg_fDisable(gzUInt _eCapability, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fDepthMask)(gzBool _bEnable);
extern FUNC_fDepthMask glCall_fDepthMask;
void glDbg_fDepthMask(gzBool _bEnable, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fDepthFunc)(gzUInt _eFunc);
extern FUNC_fDepthFunc glCall_fDepthFunc;
void glDbg_fDepthFunc(gzUInt _eFunc, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetBooleanv)(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzBool* _pData);
extern FUNC_fGetBooleanv glCall_fGetBooleanv;
void glDbg_fGetBooleanv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzBool* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetDoublev)(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzFloat64* _pData);
extern FUNC_fGetDoublev glCall_fGetDoublev;
void glDbg_fGetDoublev(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzFloat64* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetFloatv)(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzFloat32* _pData);
extern FUNC_fGetFloatv glCall_fGetFloatv;
void glDbg_fGetFloatv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzFloat32* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetIntegerv)(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzInt32* _pData);
extern FUNC_fGetIntegerv glCall_fGetIntegerv;
void glDbg_fGetIntegerv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzInt32* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetInteger64v)(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzInt64* _pData);
extern FUNC_fGetInteger64v glCall_fGetInteger64v;
void glDbg_fGetInteger64v(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzInt64* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetBooleani_v)(gzUInt _hTarget, gzUInt _nIndex, gzBool* _pData);
extern FUNC_fGetBooleani_v glCall_fGetBooleani_v;
void glDbg_fGetBooleani_v(gzUInt _hTarget, gzUInt _nIndex, gzBool* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetIntegeri_v)(gzUInt _hTarget, gzUInt _nIndex, gzFloat64* _pData);
extern FUNC_fGetIntegeri_v glCall_fGetIntegeri_v;
void glDbg_fGetIntegeri_v(gzUInt _hTarget, gzUInt _nIndex, gzFloat64* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetFloati_v)(gzUInt _hTarget, gzUInt _nIndex, gzFloat32* _pData);
extern FUNC_fGetFloati_v glCall_fGetFloati_v;
void glDbg_fGetFloati_v(gzUInt _hTarget, gzUInt _nIndex, gzFloat32* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetDoublei_v)(gzUInt _hTarget, gzUInt _nIndex, gzInt32* _pData);
extern FUNC_fGetDoublei_v glCall_fGetDoublei_v;
void glDbg_fGetDoublei_v(gzUInt _hTarget, gzUInt _nIndex, gzInt32* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetInteger64i_v)(gzUInt _hTarget, gzUInt _nIndex, gzInt64* _pData);
extern FUNC_fGetInteger64i_v glCall_fGetInteger64i_v;
void glDbg_fGetInteger64i_v(gzUInt _hTarget, gzUInt _nIndex, gzInt64* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fVertexAttribPointer)(gzVal _nIndex, Lib_GZ_OpenGL::OpenGL::eVecLength _hLength, Lib_GZ_OpenGL::OpenGL::eVarType _hType, gzBool _bNormalized, gzInt _nStride, gzUInt _nPointer);
extern FUNC_fVertexAttribPointer glCall_fVertexAttribPointer;
void glDbg_fVertexAttribPointer(gzVal _nIndex, Lib_GZ_OpenGL::OpenGL::eVecLength _hLength, Lib_GZ_OpenGL::OpenGL::eVarType _hType, gzBool _bNormalized, gzInt _nStride, gzUInt _nPointer, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fVertexAttribDivisor)(gzVal _nIndex, gzUInt _nDivisor);
extern FUNC_fVertexAttribDivisor glCall_fVertexAttribDivisor;
void glDbg_fVertexAttribDivisor(gzVal _nIndex, gzUInt _nDivisor, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fEnableVertexAttribArray)(gzVal _nIndex);
extern FUNC_fEnableVertexAttribArray glCall_fEnableVertexAttribArray;
void glDbg_fEnableVertexAttribArray(gzVal _nIndex, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fDisableVertexAttribArray)(gzUInt _nIndex);
extern FUNC_fDisableVertexAttribArray glCall_fDisableVertexAttribArray;
void glDbg_fDisableVertexAttribArray(gzUInt _nIndex, const char* _cFile , gzUInt _nLine);


typedef gzBool (__attribute__((__stdcall__))* FUNC_fSwapIntervalEXT)(gzInt _nInterval);
extern FUNC_fSwapIntervalEXT glCall_fSwapIntervalEXT;
gzBool glDbg_fSwapIntervalEXT(gzInt _nInterval, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBlendEquation)(gzUInt _eMode);
extern FUNC_fBlendEquation glCall_fBlendEquation;
void glDbg_fBlendEquation(gzUInt _eMode, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBlendFuncSeparate)(gzUInt _eSFactorRGB, gzUInt _eDFactorRGB, gzUInt _eSFactorAlpha, gzUInt _eDFactorAlpha);
extern FUNC_fBlendFuncSeparate glCall_fBlendFuncSeparate;
void glDbg_fBlendFuncSeparate(gzUInt _eSFactorRGB, gzUInt _eDFactorRGB, gzUInt _eSFactorAlpha, gzUInt _eDFactorAlpha, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBlendFunc)(gzUInt _eSrcFactor, gzUInt _eDstFactor);
extern FUNC_fBlendFunc glCall_fBlendFunc;
void glDbg_fBlendFunc(gzUInt _eSrcFactor, gzUInt _eDstFactor, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGenVertexArrays)(gzInt _nNb, gzUInt* _aArrays);
extern FUNC_fGenVertexArrays glCall_fGenVertexArrays;
void glDbg_fGenVertexArrays(gzInt _nNb, gzUInt* _aArrays, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGenBuffers)(gzInt _nNb, gzUInt* _aBuffers);
extern FUNC_fGenBuffers glCall_fGenBuffers;
void glDbg_fGenBuffers(gzInt _nNb, gzUInt* _aBuffers, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBindVertexArray)(gzUInt _nVAO);
extern FUNC_fBindVertexArray glCall_fBindVertexArray;
void glDbg_fBindVertexArray(gzUInt _nVAO, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBindBuffer)(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzVal _nBuffer);
extern FUNC_fBindBuffer glCall_fBindBuffer;
void glDbg_fBindBuffer(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzVal _nBuffer, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBufferSubData)(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzIntX _nOffset, gzIntX _nSize, void* _pData);
extern FUNC_fBufferSubData glCall_fBufferSubData;
void glDbg_fBufferSubData(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzIntX _nOffset, gzIntX _nSize, void* _pData, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetShaderInfoLog)(gzVal _nShaderId, gzInt _nMaxLength, gzInt* _aLength, gzUInt8* _cLogInfo);
extern FUNC_fGetShaderInfoLog glCall_fGetShaderInfoLog;
void glDbg_fGetShaderInfoLog(gzVal _nShaderId, gzInt _nMaxLength, gzInt* _aLength, gzUInt8* _cLogInfo, const char* _cFile , gzUInt _nLine);


typedef gzVal (__attribute__((__stdcall__))* FUNC_fCreateProgram)();
extern FUNC_fCreateProgram glCall_fCreateProgram;
gzVal glDbg_fCreateProgram(const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fLinkProgram)(gzVal _nIdProgram);
extern FUNC_fLinkProgram glCall_fLinkProgram;
void glDbg_fLinkProgram(gzVal _nIdProgram, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetProgramiv)(gzVal _nIdProgram, Lib_GZ_OpenGL::OpenGL::eProgramInfo _hInfo, gzInt* _aParams);
extern FUNC_fGetProgramiv glCall_fGetProgramiv;
void glDbg_fGetProgramiv(gzVal _nIdProgram, Lib_GZ_OpenGL::OpenGL::eProgramInfo _hInfo, gzInt* _aParams, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUseProgram)(gzVal _nIdProgram);
extern FUNC_fUseProgram glCall_fUseProgram;
void glDbg_fUseProgram(gzVal _nIdProgram, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fDeleteProgram)(gzVal _nIdProgram);
extern FUNC_fDeleteProgram glCall_fDeleteProgram;
void glDbg_fDeleteProgram(gzVal _nIdProgram, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetProgramInfoLog)(gzVal _nProgramId, gzInt _nMaxLength, gzInt* _aLength, gzUInt8* _cLogInfo);
extern FUNC_fGetProgramInfoLog glCall_fGetProgramInfoLog;
void glDbg_fGetProgramInfoLog(gzVal _nProgramId, gzInt _nMaxLength, gzInt* _aLength, gzUInt8* _cLogInfo, const char* _cFile , gzUInt _nLine);


typedef gzVal (__attribute__((__stdcall__))* FUNC_fGetUniformLocation)(gzVal _nIdProgram, gzUInt8* _cName);
extern FUNC_fGetUniformLocation glCall_fGetUniformLocation;
gzVal glDbg_fGetUniformLocation(gzVal _nIdProgram, gzUInt8* _cName, const char* _cFile , gzUInt _nLine);


typedef gzVal (__attribute__((__stdcall__))* FUNC_fGetAttribLocation)(gzVal _nIdProgram, gzUInt8* _cName);
extern FUNC_fGetAttribLocation glCall_fGetAttribLocation;
gzVal glDbg_fGetAttribLocation(gzVal _nIdProgram, gzUInt8* _cName, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBindAttribLocation)(gzVal _nIdProgram, gzUInt _nIndex, gzUInt8* _cName);
extern FUNC_fBindAttribLocation glCall_fBindAttribLocation;
void glDbg_fBindAttribLocation(gzVal _nIdProgram, gzUInt _nIndex, gzUInt8* _cName, const char* _cFile , gzUInt _nLine);


typedef gzVal (__attribute__((__stdcall__))* FUNC_fCreateShader)(Lib_GZ_OpenGL::OpenGL::eShader _hType);
extern FUNC_fCreateShader glCall_fCreateShader;
gzVal glDbg_fCreateShader(Lib_GZ_OpenGL::OpenGL::eShader _hType, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fShaderSource)(gzVal _nShaderId, gzInt _nCount, gzUInt8** _cSourceCode, gzInt* _pLength);
extern FUNC_fShaderSource glCall_fShaderSource;
void glDbg_fShaderSource(gzVal _nShaderId, gzInt _nCount, gzUInt8** _cSourceCode, gzInt* _pLength, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fCompileShader)(gzVal _nShaderId);
extern FUNC_fCompileShader glCall_fCompileShader;
void glDbg_fCompileShader(gzVal _nShaderId, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGetShaderiv)(gzVal _nShaderId, Lib_GZ_OpenGL::OpenGL::eShaderInfo _hInfo, gzInt* _aParams);
extern FUNC_fGetShaderiv glCall_fGetShaderiv;
void glDbg_fGetShaderiv(gzVal _nShaderId, Lib_GZ_OpenGL::OpenGL::eShaderInfo _hInfo, gzInt* _aParams, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fDeleteShader)(gzVal _nShaderId);
extern FUNC_fDeleteShader glCall_fDeleteShader;
void glDbg_fDeleteShader(gzVal _nShaderId, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fAttachShader)(gzVal _nIdProgram, gzVal _nShaderId);
extern FUNC_fAttachShader glCall_fAttachShader;
void glDbg_fAttachShader(gzVal _nIdProgram, gzVal _nShaderId, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fActiveTexture)(gzUInt _eTexture);
extern FUNC_fActiveTexture glCall_fActiveTexture;
void glDbg_fActiveTexture(gzUInt _eTexture, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fTexImage2D)(gzUInt _eTarget, gzInt _nLevel, gzInt _nInternalformat, gzInt _nWidth, gzInt _nHeight, gzInt _nBorder, gzUInt _eFormat, gzUInt _eType, void* _pPixel);
extern FUNC_fTexImage2D glCall_fTexImage2D;
void glDbg_fTexImage2D(gzUInt _eTarget, gzInt _nLevel, gzInt _nInternalformat, gzInt _nWidth, gzInt _nHeight, gzInt _nBorder, gzUInt _eFormat, gzUInt _eType, void* _pPixel, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fTexImage3D)(gzUInt _eTarget, gzInt _nLevel, gzInt _nInternalformat, gzInt _nWidth, gzInt _nHeight, gzInt _nDepth, gzInt _nBorder, gzUInt _eFormat, gzUInt _eType, void* _pPixel);
extern FUNC_fTexImage3D glCall_fTexImage3D;
void glDbg_fTexImage3D(gzUInt _eTarget, gzInt _nLevel, gzInt _nInternalformat, gzInt _nWidth, gzInt _nHeight, gzInt _nDepth, gzInt _nBorder, gzUInt _eFormat, gzUInt _eType, void* _pPixel, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fTexSubImage3D)(gzUInt _eTarget, gzInt _nLevel, gzInt _nOffsetX, gzInt _nOffsetY, gzInt _nOffsetZ, gzInt _nWidth, gzInt _nHeight, gzInt _nDepth, gzUInt _eFormat, gzUInt _eType, void* _pPixel);
extern FUNC_fTexSubImage3D glCall_fTexSubImage3D;
void glDbg_fTexSubImage3D(gzUInt _eTarget, gzInt _nLevel, gzInt _nOffsetX, gzInt _nOffsetY, gzInt _nOffsetZ, gzInt _nWidth, gzInt _nHeight, gzInt _nDepth, gzUInt _eFormat, gzUInt _eType, void* _pPixel, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBindTexture)(gzUInt _eTarget, gzUInt _nTextureId);
extern FUNC_fBindTexture glCall_fBindTexture;
void glDbg_fBindTexture(gzUInt _eTarget, gzUInt _nTextureId, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fTexParameterf)(gzUInt _eTarget, gzUInt _eName, gzFloat32 _nParam);
extern FUNC_fTexParameterf glCall_fTexParameterf;
void glDbg_fTexParameterf(gzUInt _eTarget, gzUInt _eName, gzFloat32 _nParam, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fTexParameteri)(gzUInt _eTarget, gzUInt _eName, gzInt _nParam);
extern FUNC_fTexParameteri glCall_fTexParameteri;
void glDbg_fTexParameteri(gzUInt _eTarget, gzUInt _eName, gzInt _nParam, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGenTextures)(gzInt _nNb, gzUInt* _aTextures);
extern FUNC_fGenTextures glCall_fGenTextures;
void glDbg_fGenTextures(gzInt _nNb, gzUInt* _aTextures, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fClear)(Lib_GZ_OpenGL::OpenGL::eClearBuffer _hMask);
extern FUNC_fClear glCall_fClear;
void glDbg_fClear(Lib_GZ_OpenGL::OpenGL::eClearBuffer _hMask, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fClearColor)(gzFloat32 _nRed, gzFloat32 _nGreen, gzFloat32 _nBlue, gzFloat32 _nAlpha);
extern FUNC_fClearColor glCall_fClearColor;
void glDbg_fClearColor(gzFloat32 _nRed, gzFloat32 _nGreen, gzFloat32 _nBlue, gzFloat32 _nAlpha, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBufferData)(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzIntX _nSize, void* _pData, Lib_GZ_OpenGL::OpenGL::eDrawFlow _hUsage);
extern FUNC_fBufferData glCall_fBufferData;
void glDbg_fBufferData(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzIntX _nSize, void* _pData, Lib_GZ_OpenGL::OpenGL::eDrawFlow _hUsage, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fDrawElements)(Lib_GZ_OpenGL::OpenGL::eDrawMode _hMode, gzInt _nCount, Lib_GZ_OpenGL::OpenGL::eVarType _hVarType, void* _pOffset);
extern FUNC_fDrawElements glCall_fDrawElements;
void glDbg_fDrawElements(Lib_GZ_OpenGL::OpenGL::eDrawMode _hMode, gzInt _nCount, Lib_GZ_OpenGL::OpenGL::eVarType _hVarType, void* _pOffset, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fDrawElementsInstanced)(Lib_GZ_OpenGL::OpenGL::eDrawMode _hMode, gzInt _nCount, Lib_GZ_OpenGL::OpenGL::eVarType _hVarType, void* _pIndicesLocation, gzInt _nInstanceCount);
extern FUNC_fDrawElementsInstanced glCall_fDrawElementsInstanced;
void glDbg_fDrawElementsInstanced(Lib_GZ_OpenGL::OpenGL::eDrawMode _hMode, gzInt _nCount, Lib_GZ_OpenGL::OpenGL::eVarType _hVarType, void* _pIndicesLocation, gzInt _nInstanceCount, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGenFramebuffers)(gzInt _nNb, gzUInt* _aFrameBuffers);
extern FUNC_fGenFramebuffers glCall_fGenFramebuffers;
void glDbg_fGenFramebuffers(gzInt _nNb, gzUInt* _aFrameBuffers, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBindFramebuffer)(gzUInt _eTarget, gzUInt _nFrameBufferId);
extern FUNC_fBindFramebuffer glCall_fBindFramebuffer;
void glDbg_fBindFramebuffer(gzUInt _eTarget, gzUInt _nFrameBufferId, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fGenRenderbuffers)(gzInt _nNb, gzUInt* _aRenderBuffers);
extern FUNC_fGenRenderbuffers glCall_fGenRenderbuffers;
void glDbg_fGenRenderbuffers(gzInt _nNb, gzUInt* _aRenderBuffers, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBindRenderbuffer)(gzUInt _eTarget, gzUInt _nRenderBufferId);
extern FUNC_fBindRenderbuffer glCall_fBindRenderbuffer;
void glDbg_fBindRenderbuffer(gzUInt _eTarget, gzUInt _nRenderBufferId, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fRenderbufferStorage)(gzUInt _eTarget, gzUInt _eInternalFormat, gzInt _nWidth, gzInt _nHeight);
extern FUNC_fRenderbufferStorage glCall_fRenderbufferStorage;
void glDbg_fRenderbufferStorage(gzUInt _eTarget, gzUInt _eInternalFormat, gzInt _nWidth, gzInt _nHeight, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fFramebufferTexture2D)(gzUInt _eTarget, gzUInt _eAttachement, gzUInt _eTextureTarget, gzUInt _nTexture, gzInt _nLevel);
extern FUNC_fFramebufferTexture2D glCall_fFramebufferTexture2D;
void glDbg_fFramebufferTexture2D(gzUInt _eTarget, gzUInt _eAttachement, gzUInt _eTextureTarget, gzUInt _nTexture, gzInt _nLevel, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fFramebufferRenderbuffer)(gzUInt _eTarget, gzUInt _eAttachement, gzUInt _eRenderBufferTarget, gzUInt _nRenderBufferId);
extern FUNC_fFramebufferRenderbuffer glCall_fFramebufferRenderbuffer;
void glDbg_fFramebufferRenderbuffer(gzUInt _eTarget, gzUInt _eAttachement, gzUInt _eRenderBufferTarget, gzUInt _nRenderBufferId, const char* _cFile , gzUInt _nLine);


typedef gzUInt (__attribute__((__stdcall__))* FUNC_fCheckFramebufferStatus)(gzUInt _eTarget);
extern FUNC_fCheckFramebufferStatus glCall_fCheckFramebufferStatus;
gzUInt glDbg_fCheckFramebufferStatus(gzUInt _eTarget, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fDeleteBuffers)(gzInt _nNb, gzUInt* _aBuffers);
extern FUNC_fDeleteBuffers glCall_fDeleteBuffers;
void glDbg_fDeleteBuffers(gzInt _nNb, gzUInt* _aBuffers, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform1f)(gzVal _nLocation, gzFloat32 _n0);
extern FUNC_fUniform1f glCall_fUniform1f;
void glDbg_fUniform1f(gzVal _nLocation, gzFloat32 _n0, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform2f)(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1);
extern FUNC_fUniform2f glCall_fUniform2f;
void glDbg_fUniform2f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform3f)(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, gzFloat32 _n2);
extern FUNC_fUniform3f glCall_fUniform3f;
void glDbg_fUniform3f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, gzFloat32 _n2, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform4f)(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, gzFloat32 _n2, gzFloat32 _n3);
extern FUNC_fUniform4f glCall_fUniform4f;
void glDbg_fUniform4f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, gzFloat32 _n2, gzFloat32 _n3, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform1i)(gzVal _nLocation, gzInt32 _n0);
extern FUNC_fUniform1i glCall_fUniform1i;
void glDbg_fUniform1i(gzVal _nLocation, gzInt32 _n0, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform2i)(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1);
extern FUNC_fUniform2i glCall_fUniform2i;
void glDbg_fUniform2i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform3i)(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, gzInt32 _n2);
extern FUNC_fUniform3i glCall_fUniform3i;
void glDbg_fUniform3i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, gzInt32 _n2, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform4i)(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, gzInt32 _n2, gzInt32 _n3);
extern FUNC_fUniform4i glCall_fUniform4i;
void glDbg_fUniform4i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, gzInt32 _n2, gzInt32 _n3, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform1fv)(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue);
extern FUNC_fUniform1fv glCall_fUniform1fv;
void glDbg_fUniform1fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform2fv)(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue);
extern FUNC_fUniform2fv glCall_fUniform2fv;
void glDbg_fUniform2fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform3fv)(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue);
extern FUNC_fUniform3fv glCall_fUniform3fv;
void glDbg_fUniform3fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform4fv)(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue);
extern FUNC_fUniform4fv glCall_fUniform4fv;
void glDbg_fUniform4fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform1iv)(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue);
extern FUNC_fUniform1iv glCall_fUniform1iv;
void glDbg_fUniform1iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform2iv)(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue);
extern FUNC_fUniform2iv glCall_fUniform2iv;
void glDbg_fUniform2iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform3iv)(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue);
extern FUNC_fUniform3iv glCall_fUniform3iv;
void glDbg_fUniform3iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform4iv)(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue);
extern FUNC_fUniform4iv glCall_fUniform4iv;
void glDbg_fUniform4iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix2fv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue);
extern FUNC_fUniformMatrix2fv glCall_fUniformMatrix2fv;
void glDbg_fUniformMatrix2fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix3fv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue);
extern FUNC_fUniformMatrix3fv glCall_fUniformMatrix3fv;
void glDbg_fUniformMatrix3fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix4fv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue);
extern FUNC_fUniformMatrix4fv glCall_fUniformMatrix4fv;
void glDbg_fUniformMatrix4fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform1d)(gzVal _nLocation, gzFloat64 _nX);
extern FUNC_fUniform1d glCall_fUniform1d;
void glDbg_fUniform1d(gzVal _nLocation, gzFloat64 _nX, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform2d)(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY);
extern FUNC_fUniform2d glCall_fUniform2d;
void glDbg_fUniform2d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform3d)(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, gzFloat64 _nZ);
extern FUNC_fUniform3d glCall_fUniform3d;
void glDbg_fUniform3d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, gzFloat64 _nZ, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform4d)(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, gzFloat64 _nZ, gzFloat64 _nW);
extern FUNC_fUniform4d glCall_fUniform4d;
void glDbg_fUniform4d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, gzFloat64 _nZ, gzFloat64 _nW, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform1dv)(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue);
extern FUNC_fUniform1dv glCall_fUniform1dv;
void glDbg_fUniform1dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform2dv)(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue);
extern FUNC_fUniform2dv glCall_fUniform2dv;
void glDbg_fUniform2dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform3dv)(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue);
extern FUNC_fUniform3dv glCall_fUniform3dv;
void glDbg_fUniform3dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform4dv)(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue);
extern FUNC_fUniform4dv glCall_fUniform4dv;
void glDbg_fUniform4dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix2dv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
extern FUNC_fUniformMatrix2dv glCall_fUniformMatrix2dv;
void glDbg_fUniformMatrix2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix3dv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
extern FUNC_fUniformMatrix3dv glCall_fUniformMatrix3dv;
void glDbg_fUniformMatrix3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix4dv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
extern FUNC_fUniformMatrix4dv glCall_fUniformMatrix4dv;
void glDbg_fUniformMatrix4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix2x3dv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
extern FUNC_fUniformMatrix2x3dv glCall_fUniformMatrix2x3dv;
void glDbg_fUniformMatrix2x3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix2x4dv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
extern FUNC_fUniformMatrix2x4dv glCall_fUniformMatrix2x4dv;
void glDbg_fUniformMatrix2x4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix3x2dv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
extern FUNC_fUniformMatrix3x2dv glCall_fUniformMatrix3x2dv;
void glDbg_fUniformMatrix3x2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix3x4dv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
extern FUNC_fUniformMatrix3x4dv glCall_fUniformMatrix3x4dv;
void glDbg_fUniformMatrix3x4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix4x2dv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
extern FUNC_fUniformMatrix4x2dv glCall_fUniformMatrix4x2dv;
void glDbg_fUniformMatrix4x2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformMatrix4x3dv)(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue);
extern FUNC_fUniformMatrix4x3dv glCall_fUniformMatrix4x3dv;
void glDbg_fUniformMatrix4x3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform1ui)(gzVal _nLocation, gzUInt32 _n0);
extern FUNC_fUniform1ui glCall_fUniform1ui;
void glDbg_fUniform1ui(gzVal _nLocation, gzUInt32 _n0, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform2ui)(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1);
extern FUNC_fUniform2ui glCall_fUniform2ui;
void glDbg_fUniform2ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform3ui)(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, gzUInt32 _n2);
extern FUNC_fUniform3ui glCall_fUniform3ui;
void glDbg_fUniform3ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, gzUInt32 _n2, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform4ui)(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, gzUInt32 _n2, gzUInt32 _n3);
extern FUNC_fUniform4ui glCall_fUniform4ui;
void glDbg_fUniform4ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, gzUInt32 _n2, gzUInt32 _n3, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform1uiv)(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue);
extern FUNC_fUniform1uiv glCall_fUniform1uiv;
void glDbg_fUniform1uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform2uiv)(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue);
extern FUNC_fUniform2uiv glCall_fUniform2uiv;
void glDbg_fUniform2uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform3uiv)(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue);
extern FUNC_fUniform3uiv glCall_fUniform3uiv;
void glDbg_fUniform3uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniform4uiv)(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue);
extern FUNC_fUniform4uiv glCall_fUniform4uiv;
void glDbg_fUniform4uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue, const char* _cFile , gzUInt _nLine);


typedef gzUInt (__attribute__((__stdcall__))* FUNC_fGetUniformBlockIndex)(gzUInt _nPorgramId, gzUInt8* _cUboName);
extern FUNC_fGetUniformBlockIndex glCall_fGetUniformBlockIndex;
gzUInt glDbg_fGetUniformBlockIndex(gzUInt _nPorgramId, gzUInt8* _cUboName, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fBindBufferBase)(gzUInt _eTarget, gzUInt _nIndex, gzUInt _nBuffer);
extern FUNC_fBindBufferBase glCall_fBindBufferBase;
void glDbg_fBindBufferBase(gzUInt _eTarget, gzUInt _nIndex, gzUInt _nBuffer, const char* _cFile , gzUInt _nLine);


typedef void (__attribute__((__stdcall__))* FUNC_fUniformBlockBinding)(gzUInt _nPorgramId, gzUInt _nUniformBlickId, gzUInt _nBindPoint);
extern FUNC_fUniformBlockBinding glCall_fUniformBlockBinding;
void glDbg_fUniformBlockBinding(gzUInt _nPorgramId, gzUInt _nUniformBlickId, gzUInt _nBindPoint, const char* _cFile , gzUInt _nLine);


 typedef BOOL (__attribute__((__stdcall__)) * PFNWGLCHOOSEPIXELFORMATARBPROC) (HDC hdc, const int *piAttribIList, const gzFloat32 *pfAttribFList, gzUInt32 nMaxFormats, int *piFormats, gzUInt32 *nNumFormats);
 typedef HGLRC (__attribute__((__stdcall__)) * PFNWGLCREATECONTEXTATTRIBSARBPROC) (HDC hDC, HGLRC hShareContext, const int *attribList);

 typedef const char* (__attribute__((__stdcall__))* PFNWGLGETEXTENSIONSSTRINGARBPROC)(HDC hdc);

 namespace System{
  gzStr fGetLastErrorString(gzUInt _nError);
  inline void fResetLastError(){
   gzUInt _nErr = GetLastError();
   if(_nErr){
    Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "Previous Win GetLastError detected (", (sizeof("\0" "Previous Win GetLastError detected (")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_nErr) + (gzStr((gzUInt8*)"\0" "): ", (sizeof("\0" "): ")/sizeof(gzUInt8)) - 2, true)) + System::fGetLastErrorString(_nErr) );
   }
   SetLastError(0);
  }
 }
namespace _SysGpuInfo{
 gzStr fGetErrorString(gzUInt _nError);
}

 gzStr fGetFile(const char *_cFile);

template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}




namespace _SysGpuInfo{
  gzStr fGetErrorString(gzUInt _nError){
   switch (_nError) {
    case 0 :
     return (gzStr((gzUInt8*)"\0" "GL_NO_ERROR", (sizeof("\0" "GL_NO_ERROR")/sizeof(gzUInt8)) - 2, true));
    break;
    case 0x0500 :
     return (gzStr((gzUInt8*)"\0" "GL_INVALID_ENUM", (sizeof("\0" "GL_INVALID_ENUM")/sizeof(gzUInt8)) - 2, true));
    break;
    case 0x0501 :
     return (gzStr((gzUInt8*)"\0" "GL_INVALID_VALUE", (sizeof("\0" "GL_INVALID_VALUE")/sizeof(gzUInt8)) - 2, true));
    break;
    case 0x0502 :
     return (gzStr((gzUInt8*)"\0" "GL_INVALID_OPERATION", (sizeof("\0" "GL_INVALID_OPERATION")/sizeof(gzUInt8)) - 2, true));
    break;
    case 0x0503 :
     return (gzStr((gzUInt8*)"\0" "GL_STACK_OVERFLOW", (sizeof("\0" "GL_STACK_OVERFLOW")/sizeof(gzUInt8)) - 2, true));
    break;
    case 0x0504 :
     return (gzStr((gzUInt8*)"\0" "GL_STACK_UNDERFLOW", (sizeof("\0" "GL_STACK_UNDERFLOW")/sizeof(gzUInt8)) - 2, true));
    break;
    case 0x0505 :
     return (gzStr((gzUInt8*)"\0" "GL_OUT_OF_MEMORY", (sizeof("\0" "GL_OUT_OF_MEMORY")/sizeof(gzUInt8)) - 2, true));
    break;
    default :
     return (gzStr((gzUInt8*)"\0" "GL_UNKNOW(", (sizeof("\0" "GL_UNKNOW(")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_nError) + (gzStr((gzUInt8*)"\0" ")", (sizeof("\0" ")")/sizeof(gzUInt8)) - 2, true));
    break;
   }
  }
 }

 gzStr fGetFile(const char *_cFile){
  gzStr _sFile = gzStrC(_cFile);
  _sFile.fReplaceAll((gzStr((gzUInt8*)"\0" "\\", (sizeof("\0" "\\")/sizeof(gzUInt8)) - 2, true)), (gzStr((gzUInt8*)"\0" "/", (sizeof("\0" "/")/sizeof(gzUInt8)) - 2, true)));
  return _sFile;
 }
 namespace System{
  gzStr fGetLastErrorString(gzUInt _nError){
    if (_nError)
    {
   LPVOID lpMsgBuf;
   DWORD bufLen = FormatMessageW(
    0x00000100 |
    0x00001000 |
    0x00000200,
    0,
    _nError,
    ((((WORD)(0x01)) << 10) | (WORD)(0x00)),
    (LPTSTR) &lpMsgBuf,
    0, 0 );
   if (bufLen)
   {
     LPCSTR lpMsgStr = (LPCSTR)lpMsgBuf;


    gzStr _sError = gzStr((gzUInt16*) lpMsgStr);

   _sError.fEnd().fPrev();
   _sError = _sError.fRevSubStr((gzStr((gzUInt8*)"\0" "\xEF\xB7\x90", (sizeof("\0" "\xEF\xB7\x90")/sizeof(gzUInt8)) - 2, true)));
     LocalFree(lpMsgBuf);

     return _sError;
   }
    }
    return (gzStr((gzUInt8*)"\0" "Unknow", (sizeof("\0" "Unknow")/sizeof(gzUInt8)) - 2, true));
  }
 }


 void* Lib_GZ_OpenGL::SysGpuFunc::fGetFuncGL(const char *_cName, gzBool _bRequired){
  using namespace Lib_GZ;
  System::fResetLastError();
  void *p = (void *)wglGetProcAddress(_cName);
  gzUInt _nErr = GetLastError();
  if(_nErr == 127){
   SetLastError(0);
   HMODULE _pModule = LoadLibraryA("opengl32.dll");
   p = (void *)GetProcAddress(_pModule, _cName);
   if(p == 0 && _bRequired){
    Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "Error OGL function Missing: ", (sizeof("\0" "Error OGL function Missing: ")/sizeof(gzUInt8)) - 2, true)) + gzStrC(_cName));
   }
  }else{
   if(_nErr){
    SetLastError(0);
    Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "Error loading OGL function (", (sizeof("\0" "Error loading OGL function (")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_nErr) + (gzStr((gzUInt8*)"\0" "): ", (sizeof("\0" "): ")/sizeof(gzUInt8)) - 2, true)) + System::fGetLastErrorString(_nErr) + gzStrC(_cName));
   }
  }
  return p;
 }





extern "C" {
 int printf ( const char * format, ... );
 int wprintf (const wchar_t* format, ...);

 size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );
 int fclose ( FILE * stream );

}



extern "C" {

 void* malloc(gzUIntX _nSize);
 void* calloc(gzUIntX num, gzUIntX size);
 void* realloc (void* ptr, gzUIntX size);
 void free (void* ptr);

 void* memcpy ( void * destination, const void * source, gzUIntX num );
 void* memset ( void * ptr, int value, gzUIntX num );



}


extern "C" {
 int memcmp( const void * ptr1, const void * ptr2, gzUIntX num );

 int strcmp( const char * str1, const char * str2 );
 int strncmp( const char * str1, const char * str2, gzUIntX num );

 long strtol(const char* str, char** endptr, int base);

}
typedef long long int int64_t;

typedef long long unsigned int uint64_t;
typedef int64_t int_least64_t;
typedef uint64_t uint_least64_t;
typedef int64_t int_fast64_t;
typedef uint64_t uint_fast64_t;
typedef int int32_t;




typedef unsigned int uint32_t;
typedef int32_t int_least32_t;
typedef uint32_t uint_least32_t;
typedef int32_t int_fast32_t;
typedef uint32_t uint_fast32_t;
typedef short int16_t;

typedef unsigned short uint16_t;







typedef int16_t int_least16_t;
typedef uint16_t uint_least16_t;
typedef int16_t int_fast16_t;
typedef uint16_t uint_fast16_t;





typedef signed char int8_t;

typedef unsigned char uint8_t;





typedef int8_t int_least8_t;
typedef uint8_t uint_least8_t;
typedef int8_t int_fast8_t;
typedef uint8_t uint_fast8_t;
typedef uint32_t uintptr_t;





typedef long long int intmax_t;
typedef long long unsigned int uintmax_t;
typedef uint16_t stbi__uint16;
typedef int16_t stbi__int16;
typedef uint32_t stbi__uint32;
typedef int32_t stbi__int32;



typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];
typedef struct
{
   stbi__uint32 img_x, img_y;
   int img_n, img_out_n;

   stbi_io_callbacks io;
   void *io_user_data;

   int read_from_callbacks;
   int buflen;
   stbi_uc buffer_start[128];

   stbi_uc *img_buffer, *img_buffer_end;
   stbi_uc *img_buffer_original, *img_buffer_original_end;
} stbi__context;


static void stbi__refill_buffer(stbi__context *s);


static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)
{
   s->io.read = 0;
   s->read_from_callbacks = 0;
   s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer;
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
}


static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)
{
   s->io = *c;
   s->io_user_data = user;
   s->buflen = sizeof(s->buffer_start);
   s->read_from_callbacks = 1;
   s->img_buffer_original = s->buffer_start;
   stbi__refill_buffer(s);
   s->img_buffer_original_end = s->img_buffer_end;
}
static void stbi__rewind(stbi__context *s)
{



   s->img_buffer = s->img_buffer_original;
   s->img_buffer_end = s->img_buffer_original_end;
}
static int stbi__png_test(stbi__context *s);
static stbi_uc *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);
static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__bmp_test(stbi__context *s);
static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);
static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__tga_test(stbi__context *s);
static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);
static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__psd_test(stbi__context *s);
static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);
static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__hdr_test(stbi__context *s);
static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);
static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__pic_test(stbi__context *s);
static stbi_uc *stbi__pic_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);
static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__gif_test(stbi__context *s);
static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);
static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__pnm_test(stbi__context *s);
static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);
static int stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp);



static const char *stbi__g_failure_reason;

extern const char *stbi_failure_reason(void)
{
   return stbi__g_failure_reason;
}

static int stbi__err(const char *str)
{
   stbi__g_failure_reason = str;
   return 0;
}

static void *stbi__malloc(size_t size)
{
    return malloc(size);
}
extern void stbi_image_free(void *retval_from_stbi_load)
{
   free(retval_from_stbi_load);
}


static float *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp);



static stbi_uc *stbi__hdr_to_ldr(float *data, int x, int y, int comp);


static int stbi__vertically_flip_on_load = 0;

extern void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)
{
    stbi__vertically_flip_on_load = flag_true_if_should_flip;
}

static unsigned char *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{




   if (stbi__png_test(s)) return stbi__png_load(s,x,y,comp,req_comp);


   if (stbi__bmp_test(s)) return stbi__bmp_load(s,x,y,comp,req_comp);


   if (stbi__gif_test(s)) return stbi__gif_load(s,x,y,comp,req_comp);


   if (stbi__psd_test(s)) return stbi__psd_load(s,x,y,comp,req_comp);


   if (stbi__pic_test(s)) return stbi__pic_load(s,x,y,comp,req_comp);


   if (stbi__pnm_test(s)) return stbi__pnm_load(s,x,y,comp,req_comp);



   if (stbi__hdr_test(s)) {
      float *hdr = stbi__hdr_load(s, x,y,comp,req_comp);
      return stbi__hdr_to_ldr(hdr, *x, *y, req_comp ? req_comp : *comp);
   }




   if (stbi__tga_test(s))
      return stbi__tga_load(s,x,y,comp,req_comp);


   return ((unsigned char *)(size_t) (stbi__err("unknown image type")?0:0));
}

static unsigned char *stbi__load_flip(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   unsigned char *result = stbi__load_main(s, x, y, comp, req_comp);

   if (stbi__vertically_flip_on_load && result != 0) {
      int w = *x, h = *y;
      int depth = req_comp ? req_comp : *comp;
      int row,col,z;
      stbi_uc temp;


      for (row = 0; row < (h>>1); row++) {
         for (col = 0; col < w; col++) {
            for (z = 0; z < depth; z++) {
               temp = result[(row * w + col) * depth + z];
               result[(row * w + col) * depth + z] = result[((h - row - 1) * w + col) * depth + z];
               result[((h - row - 1) * w + col) * depth + z] = temp;
            }
         }
      }
   }

   return result;
}


static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)
{
   if (stbi__vertically_flip_on_load && result != 0) {
      int w = *x, h = *y;
      int depth = req_comp ? req_comp : *comp;
      int row,col,z;
      float temp;


      for (row = 0; row < (h>>1); row++) {
         for (col = 0; col < w; col++) {
            for (z = 0; z < depth; z++) {
               temp = result[(row * w + col) * depth + z];
               result[(row * w + col) * depth + z] = result[((h - row - 1) * w + col) * depth + z];
               result[((h - row - 1) * w + col) * depth + z] = temp;
            }
         }
      }
   }
}
extern stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
{
   stbi__context s;
   stbi__start_mem(&s,buffer,len);
   return stbi__load_flip(&s,x,y,comp,req_comp);
}

extern stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
{
   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *) clbk, user);
   return stbi__load_flip(&s,x,y,comp,req_comp);
}


static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   unsigned char *data;

   if (stbi__hdr_test(s)) {
      float *hdr_data = stbi__hdr_load(s,x,y,comp,req_comp);
      if (hdr_data)
         stbi__float_postprocess(hdr_data,x,y,comp,req_comp);
      return hdr_data;
   }

   data = stbi__load_flip(s, x, y, comp, req_comp);
   if (data)
      return stbi__ldr_to_hdr(data, *x, *y, req_comp ? req_comp : *comp);
   return ((float *)(size_t) (stbi__err("unknown image type")?0:0));
}

extern float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
{
   stbi__context s;
   stbi__start_mem(&s,buffer,len);
   return stbi__loadf_main(&s,x,y,comp,req_comp);
}

extern float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
{
   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *) clbk, user);
   return stbi__loadf_main(&s,x,y,comp,req_comp);
}
extern int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)
{

   stbi__context s;
   stbi__start_mem(&s,buffer,len);
   return stbi__hdr_test(&s);





}
extern int stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)
{

   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *) clbk, user);
   return stbi__hdr_test(&s);





}


static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;

extern void stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }
extern void stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }


static float stbi__h2l_gamma_i=1.0f/2.2f, stbi__h2l_scale_i=1.0f;

extern void stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1/gamma; }
extern void stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1/scale; }







enum
{
   STBI__SCAN_load=0,
   STBI__SCAN_type,
   STBI__SCAN_header
};

static void stbi__refill_buffer(stbi__context *s)
{
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   if (n == 0) {


      s->read_from_callbacks = 0;
      s->img_buffer = s->buffer_start;
      s->img_buffer_end = s->buffer_start+1;
      *s->img_buffer = 0;
   } else {
      s->img_buffer = s->buffer_start;
      s->img_buffer_end = s->buffer_start + n;
   }
}

inline static stbi_uc stbi__get8(stbi__context *s)
{
   if (s->img_buffer < s->img_buffer_end)
      return *s->img_buffer++;
   if (s->read_from_callbacks) {
      stbi__refill_buffer(s);
      return *s->img_buffer++;
   }
   return 0;
}

inline static int stbi__at_eof(stbi__context *s)
{
   if (s->io.read) {
      if (!(s->io.eof)(s->io_user_data)) return 0;


      if (s->read_from_callbacks == 0) return 1;
   }

   return s->img_buffer >= s->img_buffer_end;
}

static void stbi__skip(stbi__context *s, int n)
{
   if (n < 0) {
      s->img_buffer = s->img_buffer_end;
      return;
   }
   if (s->io.read) {
      int blen = (int) (s->img_buffer_end - s->img_buffer);
      if (blen < n) {
         s->img_buffer = s->img_buffer_end;
         (s->io.skip)(s->io_user_data, n - blen);
         return;
      }
   }
   s->img_buffer += n;
}

static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)
{
   if (s->io.read) {
      int blen = (int) (s->img_buffer_end - s->img_buffer);
      if (blen < n) {
         int res, count;

         memcpy(buffer, s->img_buffer, blen);

         count = (s->io.read)(s->io_user_data, (char*) buffer + blen, n - blen);
         res = (count == (n-blen));
         s->img_buffer = s->img_buffer_end;
         return res;
      }
   }

   if (s->img_buffer+n <= s->img_buffer_end) {
      memcpy(buffer, s->img_buffer, n);
      s->img_buffer += n;
      return 1;
   } else
      return 0;
}

static int stbi__get16be(stbi__context *s)
{
   int z = stbi__get8(s);
   return (z << 8) + stbi__get8(s);
}

static stbi__uint32 stbi__get32be(stbi__context *s)
{
   stbi__uint32 z = stbi__get16be(s);
   return (z << 16) + stbi__get16be(s);
}




static int stbi__get16le(stbi__context *s)
{
   int z = stbi__get8(s);
   return z + (stbi__get8(s) << 8);
}



static stbi__uint32 stbi__get32le(stbi__context *s)
{
   stbi__uint32 z = stbi__get16le(s);
   return z + (stbi__get16le(s) << 16);
}
static stbi_uc stbi__compute_y(int r, int g, int b)
{
   return (stbi_uc) (((r*77) + (g*150) + (29*b)) >> 8);
}

static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)
{
   int i,j;
   unsigned char *good;

   if (req_comp == img_n) return data;
                                              ;

   good = (unsigned char *) stbi__malloc(req_comp * x * y);
   if (good == 0) {
      free(data);
      return ((unsigned char *)(size_t) (stbi__err("outofmem")?0:0));
   }

   for (j=0; j < (int) y; ++j) {
      unsigned char *src = data + j * x * img_n ;
      unsigned char *dest = good + j * x * req_comp;





      switch (((img_n)*8+(req_comp))) {
         case ((1)*8+(2)): for(i=x-1; i >= 0; --i, src += 1, dest += 2) dest[0]=src[0], dest[1]=255; break;
         case ((1)*8+(3)): for(i=x-1; i >= 0; --i, src += 1, dest += 3) dest[0]=dest[1]=dest[2]=src[0]; break;
         case ((1)*8+(4)): for(i=x-1; i >= 0; --i, src += 1, dest += 4) dest[0]=dest[1]=dest[2]=src[0], dest[3]=255; break;
         case ((2)*8+(1)): for(i=x-1; i >= 0; --i, src += 2, dest += 1) dest[0]=src[0]; break;
         case ((2)*8+(3)): for(i=x-1; i >= 0; --i, src += 2, dest += 3) dest[0]=dest[1]=dest[2]=src[0]; break;
         case ((2)*8+(4)): for(i=x-1; i >= 0; --i, src += 2, dest += 4) dest[0]=dest[1]=dest[2]=src[0], dest[3]=src[1]; break;
         case ((3)*8+(4)): for(i=x-1; i >= 0; --i, src += 3, dest += 4) dest[0]=src[0],dest[1]=src[1],dest[2]=src[2],dest[3]=255; break;
         case ((3)*8+(1)): for(i=x-1; i >= 0; --i, src += 3, dest += 1) dest[0]=stbi__compute_y(src[0],src[1],src[2]); break;
         case ((3)*8+(2)): for(i=x-1; i >= 0; --i, src += 3, dest += 2) dest[0]=stbi__compute_y(src[0],src[1],src[2]), dest[1] = 255; break;
         case ((4)*8+(1)): for(i=x-1; i >= 0; --i, src += 4, dest += 1) dest[0]=stbi__compute_y(src[0],src[1],src[2]); break;
         case ((4)*8+(2)): for(i=x-1; i >= 0; --i, src += 4, dest += 2) dest[0]=stbi__compute_y(src[0],src[1],src[2]), dest[1] = src[3]; break;
         case ((4)*8+(3)): for(i=x-1; i >= 0; --i, src += 4, dest += 3) dest[0]=src[0],dest[1]=src[1],dest[2]=src[2]; break;
         default: ;
      }

   }

   free(data);
   return good;
}


static float *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)
{
   int i,k,n;
   float *output = (float *) stbi__malloc(x * y * comp * sizeof(float));
   if (output == 0) { free(data); return ((float *)(size_t) (stbi__err("outofmem")?0:0)); }

   if (comp & 1) n = comp; else n = comp-1;
   for (i=0; i < x*y; ++i) {
      for (k=0; k < n; ++k) {
         output[i*comp + k] = (float) (pow(data[i*comp+k]/255.0f, stbi__l2h_gamma) * stbi__l2h_scale);
      }
      if (k < comp) output[i*comp + k] = data[i*comp+k]/255.0f;
   }
   free(data);
   return output;
}




static stbi_uc *stbi__hdr_to_ldr(float *data, int x, int y, int comp)
{
   int i,k,n;
   stbi_uc *output = (stbi_uc *) stbi__malloc(x * y * comp);
   if (output == 0) { free(data); return ((unsigned char *)(size_t) (stbi__err("outofmem")?0:0)); }

   if (comp & 1) n = comp; else n = comp-1;
   for (i=0; i < x*y; ++i) {
      for (k=0; k < n; ++k) {
         float z = (float) pow(data[i*comp+k]*stbi__h2l_scale_i, stbi__h2l_gamma_i) * 255 + 0.5f;
         if (z < 0) z = 0;
         if (z > 255) z = 255;
         output[i*comp + k] = (stbi_uc) ((int) (z));
      }
      if (k < comp) {
         float z = data[i*comp+k] * 255 + 0.5f;
         if (z < 0) z = 0;
         if (z > 255) z = 255;
         output[i*comp + k] = (stbi_uc) ((int) (z));
      }
   }
   free(data);
   return output;
}
typedef struct
{
   stbi__uint16 fast[1 << 9];
   stbi__uint16 firstcode[16];
   int maxcode[17];
   stbi__uint16 firstsymbol[16];
   stbi_uc size[288];
   stbi__uint16 value[288];
} stbi__zhuffman;

inline static int stbi__bitreverse16(int n)
{
  n = ((n & 0xAAAA) >> 1) | ((n & 0x5555) << 1);
  n = ((n & 0xCCCC) >> 2) | ((n & 0x3333) << 2);
  n = ((n & 0xF0F0) >> 4) | ((n & 0x0F0F) << 4);
  n = ((n & 0xFF00) >> 8) | ((n & 0x00FF) << 8);
  return n;
}

inline static int stbi__bit_reverse(int v, int bits)
{
                          ;


   return stbi__bitreverse16(v) >> (16-bits);
}

static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)
{
   int i,k=0;
   int code, next_code[16], sizes[17];


   memset(sizes, 0, sizeof(sizes));
   memset(z->fast, 0, sizeof(z->fast));
   for (i=0; i < num; ++i)
      ++sizes[sizelist[i]];
   sizes[0] = 0;
   for (i=1; i < 16; ++i)
      if (sizes[i] > (1 << i))
         return stbi__err("bad sizes");
   code = 0;
   for (i=1; i < 16; ++i) {
      next_code[i] = code;
      z->firstcode[i] = (stbi__uint16) code;
      z->firstsymbol[i] = (stbi__uint16) k;
      code = (code + sizes[i]);
      if (sizes[i])
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths");
      z->maxcode[i] = code << (16-i);
      code <<= 1;
      k += sizes[i];
   }
   z->maxcode[16] = 0x10000;
   for (i=0; i < num; ++i) {
      int s = sizelist[i];
      if (s) {
         int c = next_code[s] - z->firstcode[s] + z->firstsymbol[s];
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
         z->size [c] = (stbi_uc ) s;
         z->value[c] = (stbi__uint16) i;
         if (s <= 9) {
            int j = stbi__bit_reverse(next_code[s],s);
            while (j < (1 << 9)) {
               z->fast[j] = fastv;
               j += (1 << s);
            }
         }
         ++next_code[s];
      }
   }
   return 1;
}







typedef struct
{
   stbi_uc *zbuffer, *zbuffer_end;
   int num_bits;
   stbi__uint32 code_buffer;

   char *zout;
   char *zout_start;
   char *zout_end;
   int z_expandable;

   stbi__zhuffman z_length, z_distance;
} stbi__zbuf;

inline static stbi_uc stbi__zget8(stbi__zbuf *z)
{
   if (z->zbuffer >= z->zbuffer_end) return 0;
   return *z->zbuffer++;
}

static void stbi__fill_bits(stbi__zbuf *z)
{
   do {
                                                       ;
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
      z->num_bits += 8;
   } while (z->num_bits <= 24);
}

inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)
{
   unsigned int k;
   if (z->num_bits < n) stbi__fill_bits(z);
   k = z->code_buffer & ((1 << n) - 1);
   z->code_buffer >>= n;
   z->num_bits -= n;
   return k;
}

static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)
{
   int b,s,k;


   k = stbi__bit_reverse(a->code_buffer, 16);
   for (s=9 +1; ; ++s)
      if (k < z->maxcode[s])
         break;
   if (s == 16) return -1;

   b = (k >> (16-s)) - z->firstcode[s] + z->firstsymbol[s];
                               ;
   a->code_buffer >>= s;
   a->num_bits -= s;
   return z->value[b];
}

inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)
{
   int b,s;
   if (a->num_bits < 16) stbi__fill_bits(a);
   b = z->fast[a->code_buffer & ((1 << 9) - 1)];
   if (b) {
      s = b >> 9;
      a->code_buffer >>= s;
      a->num_bits -= s;
      return b & 511;
   }
   return stbi__zhuffman_decode_slowpath(a, z);
}

static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)
{
   char *q;
   int cur, limit, old_limit;
   z->zout = zout;
   if (!z->z_expandable) return stbi__err("output buffer limit");
   cur = (int) (z->zout - z->zout_start);
   limit = old_limit = (int) (z->zout_end - z->zout_start);
   while (cur + n > limit)
      limit *= 2;
   q = (char *) realloc(z->zout_start,limit);
   (void)sizeof(old_limit);
   if (q == 0) return stbi__err("outofmem");
   z->zout_start = q;
   z->zout = q + cur;
   z->zout_end = q + limit;
   return 1;
}

static int stbi__zlength_base[31] = {
   3,4,5,6,7,8,9,10,11,13,
   15,17,19,23,27,31,35,43,51,59,
   67,83,99,115,131,163,195,227,258,0,0 };

static int stbi__zlength_extra[31]=
{ 0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0 };

static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,
257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0};

static int stbi__zdist_extra[32] =
{ 0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};

static int stbi__parse_huffman_block(stbi__zbuf *a)
{
   char *zout = a->zout;
   for(;;) {
      int z = stbi__zhuffman_decode(a, &a->z_length);
      if (z < 256) {
         if (z < 0) return stbi__err("bad huffman code");
         if (zout >= a->zout_end) {
            if (!stbi__zexpand(a, zout, 1)) return 0;
            zout = a->zout;
         }
         *zout++ = (char) z;
      } else {
         stbi_uc *p;
         int len,dist;
         if (z == 256) {
            a->zout = zout;
            return 1;
         }
         z -= 257;
         len = stbi__zlength_base[z];
         if (stbi__zlength_extra[z]) len += stbi__zreceive(a, stbi__zlength_extra[z]);
         z = stbi__zhuffman_decode(a, &a->z_distance);
         if (z < 0) return stbi__err("bad huffman code");
         dist = stbi__zdist_base[z];
         if (stbi__zdist_extra[z]) dist += stbi__zreceive(a, stbi__zdist_extra[z]);
         if (zout - a->zout_start < dist) return stbi__err("bad dist");
         if (zout + len > a->zout_end) {
            if (!stbi__zexpand(a, zout, len)) return 0;
            zout = a->zout;
         }
         p = (stbi_uc *) (zout - dist);
         if (dist == 1) {
            stbi_uc v = *p;
            if (len) { do *zout++ = v; while (--len); }
         } else {
            if (len) { do *zout++ = *p++; while (--len); }
         }
      }
   }
}

static int stbi__compute_huffman_codes(stbi__zbuf *a)
{
   static stbi_uc length_dezigzag[19] = { 16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15 };
   stbi__zhuffman z_codelength;
   stbi_uc lencodes[286+32+137];
   stbi_uc codelength_sizes[19];
   int i,n;

   int hlit = stbi__zreceive(a,5) + 257;
   int hdist = stbi__zreceive(a,5) + 1;
   int hclen = stbi__zreceive(a,4) + 4;

   memset(codelength_sizes, 0, sizeof(codelength_sizes));
   for (i=0; i < hclen; ++i) {
      int s = stbi__zreceive(a,3);
      codelength_sizes[length_dezigzag[i]] = (stbi_uc) s;
   }
   if (!stbi__zbuild_huffman(&z_codelength, codelength_sizes, 19)) return 0;

   n = 0;
   while (n < hlit + hdist) {
      int c = stbi__zhuffman_decode(a, &z_codelength);
      if (c < 0 || c >= 19) return stbi__err("bad codelengths");
      if (c < 16)
         lencodes[n++] = (stbi_uc) c;
      else if (c == 16) {
         c = stbi__zreceive(a,2)+3;
         memset(lencodes+n, lencodes[n-1], c);
         n += c;
      } else if (c == 17) {
         c = stbi__zreceive(a,3)+3;
         memset(lencodes+n, 0, c);
         n += c;
      } else {
                             ;
         c = stbi__zreceive(a,7)+11;
         memset(lencodes+n, 0, c);
         n += c;
      }
   }
   if (n != hlit+hdist) return stbi__err("bad codelengths");
   if (!stbi__zbuild_huffman(&a->z_length, lencodes, hlit)) return 0;
   if (!stbi__zbuild_huffman(&a->z_distance, lencodes+hlit, hdist)) return 0;
   return 1;
}

static int stbi__parse_uncompressed_block(stbi__zbuf *a)
{
   stbi_uc header[4];
   int len,nlen,k;
   if (a->num_bits & 7)
      stbi__zreceive(a, a->num_bits & 7);

   k = 0;
   while (a->num_bits > 0) {
      header[k++] = (stbi_uc) (a->code_buffer & 255);
      a->code_buffer >>= 8;
      a->num_bits -= 8;
   }
                                ;

   while (k < 4)
      header[k++] = stbi__zget8(a);
   len = header[1] * 256 + header[0];
   nlen = header[3] * 256 + header[2];
   if (nlen != (len ^ 0xffff)) return stbi__err("zlib corrupt");
   if (a->zbuffer + len > a->zbuffer_end) return stbi__err("read past buffer");
   if (a->zout + len > a->zout_end)
      if (!stbi__zexpand(a, a->zout, len)) return 0;
   memcpy(a->zout, a->zbuffer, len);
   a->zbuffer += len;
   a->zout += len;
   return 1;
}

static int stbi__parse_zlib_header(stbi__zbuf *a)
{
   int cmf = stbi__zget8(a);
   int cm = cmf & 15;

   int flg = stbi__zget8(a);
   if ((cmf*256+flg) % 31 != 0) return stbi__err("bad zlib header");
   if (flg & 32) return stbi__err("no preset dict");
   if (cm != 8) return stbi__err("bad compression");

   return 1;
}


static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];
static void stbi__init_zdefaults(void)
{
   int i;
   for (i=0; i <= 143; ++i) stbi__zdefault_length[i] = 8;
   for ( ; i <= 255; ++i) stbi__zdefault_length[i] = 9;
   for ( ; i <= 279; ++i) stbi__zdefault_length[i] = 7;
   for ( ; i <= 287; ++i) stbi__zdefault_length[i] = 8;

   for (i=0; i <= 31; ++i) stbi__zdefault_distance[i] = 5;
}

static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)
{
   int final, type;
   if (parse_header)
      if (!stbi__parse_zlib_header(a)) return 0;
   a->num_bits = 0;
   a->code_buffer = 0;
   do {
      final = stbi__zreceive(a,1);
      type = stbi__zreceive(a,2);
      if (type == 0) {
         if (!stbi__parse_uncompressed_block(a)) return 0;
      } else if (type == 3) {
         return 0;
      } else {
         if (type == 1) {

            if (!stbi__zdefault_distance[31]) stbi__init_zdefaults();
            if (!stbi__zbuild_huffman(&a->z_length , stbi__zdefault_length , 288)) return 0;
            if (!stbi__zbuild_huffman(&a->z_distance, stbi__zdefault_distance, 32)) return 0;
         } else {
            if (!stbi__compute_huffman_codes(a)) return 0;
         }
         if (!stbi__parse_huffman_block(a)) return 0;
      }
   } while (!final);
   return 1;
}

static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)
{
   a->zout_start = obuf;
   a->zout = obuf;
   a->zout_end = obuf + olen;
   a->z_expandable = exp;

   return stbi__parse_zlib(a, parse_header);
}

extern char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)
{
   stbi__zbuf a;
   char *p = (char *) stbi__malloc(initial_size);
   if (p == 0) return 0;
   a.zbuffer = (stbi_uc *) buffer;
   a.zbuffer_end = (stbi_uc *) buffer + len;
   if (stbi__do_zlib(&a, p, initial_size, 1, 1)) {
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
      return a.zout_start;
   } else {
      free(a.zout_start);
      return 0;
   }
}

extern char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)
{
   return stbi_zlib_decode_malloc_guesssize(buffer, len, 16384, outlen);
}

extern char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)
{
   stbi__zbuf a;
   char *p = (char *) stbi__malloc(initial_size);
   if (p == 0) return 0;
   a.zbuffer = (stbi_uc *) buffer;
   a.zbuffer_end = (stbi_uc *) buffer + len;
   if (stbi__do_zlib(&a, p, initial_size, 1, parse_header)) {
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
      return a.zout_start;
   } else {
      free(a.zout_start);
      return 0;
   }
}

extern int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)
{
   stbi__zbuf a;
   a.zbuffer = (stbi_uc *) ibuffer;
   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;
   if (stbi__do_zlib(&a, obuffer, olen, 0, 1))
      return (int) (a.zout - a.zout_start);
   else
      return -1;
}

extern char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)
{
   stbi__zbuf a;
   char *p = (char *) stbi__malloc(16384);
   if (p == 0) return 0;
   a.zbuffer = (stbi_uc *) buffer;
   a.zbuffer_end = (stbi_uc *) buffer+len;
   if (stbi__do_zlib(&a, p, 16384, 1, 0)) {
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
      return a.zout_start;
   } else {
      free(a.zout_start);
      return 0;
   }
}

extern int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)
{
   stbi__zbuf a;
   a.zbuffer = (stbi_uc *) ibuffer;
   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;
   if (stbi__do_zlib(&a, obuffer, olen, 0, 0))
      return (int) (a.zout - a.zout_start);
   else
      return -1;
}
typedef struct
{
   stbi__uint32 length;
   stbi__uint32 type;
} stbi__pngchunk;

static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)
{
   stbi__pngchunk c;
   c.length = stbi__get32be(s);
   c.type = stbi__get32be(s);
   return c;
}

static int stbi__check_png_header(stbi__context *s)
{
   static stbi_uc png_sig[8] = { 137,80,78,71,13,10,26,10 };
   int i;
   for (i=0; i < 8; ++i)
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig");
   return 1;
}

typedef struct
{
   stbi__context *s;
   stbi_uc *idata, *expanded, *out;
   int depth;
} stbi__png;


enum {
   STBI__F_none=0,
   STBI__F_sub=1,
   STBI__F_up=2,
   STBI__F_avg=3,
   STBI__F_paeth=4,

   STBI__F_avg_first,
   STBI__F_paeth_first
};

static stbi_uc first_row_filter[5] =
{
   STBI__F_none,
   STBI__F_sub,
   STBI__F_none,
   STBI__F_avg_first,
   STBI__F_paeth_first
};

static int stbi__paeth(int a, int b, int c)
{
   int p = a + b - c;
   int pa = abs(p-a);
   int pb = abs(p-b);
   int pc = abs(p-c);
   if (pa <= pb && pa <= pc) return a;
   if (pb <= pc) return b;
   return c;
}

static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };


static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)
{
   int bytes = (depth == 16? 2 : 1);
   stbi__context *s = a->s;
   stbi__uint32 i,j,stride = x*out_n*bytes;
   stbi__uint32 img_len, img_width_bytes;
   int k;
   int img_n = s->img_n;

   int output_bytes = out_n*bytes;
   int filter_bytes = img_n*bytes;
   int width = x;

                                                        ;
   a->out = (stbi_uc *) stbi__malloc(x * y * output_bytes);
   if (!a->out) return stbi__err("outofmem");

   img_width_bytes = (((img_n * x * depth) + 7) >> 3);
   img_len = (img_width_bytes + 1) * y;
   if (s->img_x == x && s->img_y == y) {
      if (raw_len != img_len) return stbi__err("not enough pixels");
   } else {
      if (raw_len < img_len) return stbi__err("not enough pixels");
   }

   for (j=0; j < y; ++j) {
      stbi_uc *cur = a->out + stride*j;
      stbi_uc *prior = cur - stride;
      int filter = *raw++;

      if (filter > 4)
         return stbi__err("invalid filter");

      if (depth < 8) {
                                          ;
         cur += x*out_n - img_width_bytes;
         filter_bytes = 1;
         width = img_width_bytes;
      }


      if (j == 0) filter = first_row_filter[filter];


      for (k=0; k < filter_bytes; ++k) {
         switch (filter) {
            case STBI__F_none : cur[k] = raw[k]; break;
            case STBI__F_sub : cur[k] = raw[k]; break;
            case STBI__F_up : cur[k] = ((stbi_uc) ((raw[k] + prior[k]) & 255)); break;
            case STBI__F_avg : cur[k] = ((stbi_uc) ((raw[k] + (prior[k]>>1)) & 255)); break;
            case STBI__F_paeth : cur[k] = ((stbi_uc) ((raw[k] + stbi__paeth(0,prior[k],0)) & 255)); break;
            case STBI__F_avg_first : cur[k] = raw[k]; break;
            case STBI__F_paeth_first: cur[k] = raw[k]; break;
         }
      }

      if (depth == 8) {
         if (img_n != out_n)
            cur[img_n] = 255;
         raw += img_n;
         cur += out_n;
         prior += out_n;
      } else if (depth == 16) {
         if (img_n != out_n) {
            cur[filter_bytes] = 255;
            cur[filter_bytes+1] = 255;
         }
         raw += filter_bytes;
         cur += output_bytes;
         prior += output_bytes;
      } else {
         raw += 1;
         cur += 1;
         prior += 1;
      }


      if (depth < 8 || img_n == out_n) {
         int nk = (width - 1)*filter_bytes;



         switch (filter) {

            case STBI__F_none: memcpy(cur, raw, nk); break;
            case STBI__F_sub: for (k=0; k < nk; ++k) cur[k] = ((stbi_uc) ((raw[k] + cur[k-filter_bytes]) & 255)); break;
            case STBI__F_up: for (k=0; k < nk; ++k) cur[k] = ((stbi_uc) ((raw[k] + prior[k]) & 255)); break;
            case STBI__F_avg: for (k=0; k < nk; ++k) cur[k] = ((stbi_uc) ((raw[k] + ((prior[k] + cur[k-filter_bytes])>>1)) & 255)); break;
            case STBI__F_paeth: for (k=0; k < nk; ++k) cur[k] = ((stbi_uc) ((raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])) & 255)); break;
            case STBI__F_avg_first: for (k=0; k < nk; ++k) cur[k] = ((stbi_uc) ((raw[k] + (cur[k-filter_bytes] >> 1)) & 255)); break;
            case STBI__F_paeth_first: for (k=0; k < nk; ++k) cur[k] = ((stbi_uc) ((raw[k] + stbi__paeth(cur[k-filter_bytes],0,0)) & 255)); break;
         }

         raw += nk;
      } else {
                                      ;




         switch (filter) {
            case STBI__F_none: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) cur[k] = raw[k]; break;
            case STBI__F_sub: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) cur[k] = ((stbi_uc) ((raw[k] + cur[k- output_bytes]) & 255)); break;
            case STBI__F_up: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) cur[k] = ((stbi_uc) ((raw[k] + prior[k]) & 255)); break;
            case STBI__F_avg: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) cur[k] = ((stbi_uc) ((raw[k] + ((prior[k] + cur[k- output_bytes])>>1)) & 255)); break;
            case STBI__F_paeth: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) cur[k] = ((stbi_uc) ((raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])) & 255)); break;
            case STBI__F_avg_first: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) cur[k] = ((stbi_uc) ((raw[k] + (cur[k- output_bytes] >> 1)) & 255)); break;
            case STBI__F_paeth_first: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) cur[k] = ((stbi_uc) ((raw[k] + stbi__paeth(cur[k- output_bytes],0,0)) & 255)); break;
         }




         if (depth == 16) {
            cur = a->out + stride*j;
            for (i=0; i < x; ++i,cur+=output_bytes) {
               cur[filter_bytes+1] = 255;
            }
         }
      }
   }




   if (depth < 8) {
      for (j=0; j < y; ++j) {
         stbi_uc *cur = a->out + stride*j;
         stbi_uc *in = a->out + stride*j + x*out_n - img_width_bytes;


         stbi_uc scale = (color == 0) ? stbi__depth_scale_table[depth] : 1;







         if (depth == 4) {
            for (k=x*img_n; k >= 2; k-=2, ++in) {
               *cur++ = scale * ((*in >> 4) );
               *cur++ = scale * ((*in ) & 0x0f);
            }
            if (k > 0) *cur++ = scale * ((*in >> 4) );
         } else if (depth == 2) {
            for (k=x*img_n; k >= 4; k-=4, ++in) {
               *cur++ = scale * ((*in >> 6) );
               *cur++ = scale * ((*in >> 4) & 0x03);
               *cur++ = scale * ((*in >> 2) & 0x03);
               *cur++ = scale * ((*in ) & 0x03);
            }
            if (k > 0) *cur++ = scale * ((*in >> 6) );
            if (k > 1) *cur++ = scale * ((*in >> 4) & 0x03);
            if (k > 2) *cur++ = scale * ((*in >> 2) & 0x03);
         } else if (depth == 1) {
            for (k=x*img_n; k >= 8; k-=8, ++in) {
               *cur++ = scale * ((*in >> 7) );
               *cur++ = scale * ((*in >> 6) & 0x01);
               *cur++ = scale * ((*in >> 5) & 0x01);
               *cur++ = scale * ((*in >> 4) & 0x01);
               *cur++ = scale * ((*in >> 3) & 0x01);
               *cur++ = scale * ((*in >> 2) & 0x01);
               *cur++ = scale * ((*in >> 1) & 0x01);
               *cur++ = scale * ((*in ) & 0x01);
            }
            if (k > 0) *cur++ = scale * ((*in >> 7) );
            if (k > 1) *cur++ = scale * ((*in >> 6) & 0x01);
            if (k > 2) *cur++ = scale * ((*in >> 5) & 0x01);
            if (k > 3) *cur++ = scale * ((*in >> 4) & 0x01);
            if (k > 4) *cur++ = scale * ((*in >> 3) & 0x01);
            if (k > 5) *cur++ = scale * ((*in >> 2) & 0x01);
            if (k > 6) *cur++ = scale * ((*in >> 1) & 0x01);
         }
         if (img_n != out_n) {
            int q;

            cur = a->out + stride*j;
            if (img_n == 1) {
               for (q=x-1; q >= 0; --q) {
                  cur[q*2+1] = 255;
                  cur[q*2+0] = cur[q];
               }
            } else {
                                      ;
               for (q=x-1; q >= 0; --q) {
                  cur[q*4+3] = 255;
                  cur[q*4+2] = cur[q*3+2];
                  cur[q*4+1] = cur[q*3+1];
                  cur[q*4+0] = cur[q*3+0];
               }
            }
         }
      }
   } else if (depth == 16) {




      stbi_uc *cur = a->out;
      stbi__uint16 *cur16 = (stbi__uint16*)cur;

      for(i=0; i < x*y*out_n; ++i,cur16++,cur+=2) {
         *cur16 = (cur[0] << 8) | cur[1];
      }
   }

   return 1;
}

static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)
{
   stbi_uc *final;
   int p;
   if (!interlaced)
      return stbi__create_png_image_raw(a, image_data, image_data_len, out_n, a->s->img_x, a->s->img_y, depth, color);


   final = (stbi_uc *) stbi__malloc(a->s->img_x * a->s->img_y * out_n);
   for (p=0; p < 7; ++p) {
      int xorig[] = { 0,4,0,2,0,1,0 };
      int yorig[] = { 0,0,4,0,2,0,1 };
      int xspc[] = { 8,8,4,4,2,2,1 };
      int yspc[] = { 8,8,8,4,4,2,2 };
      int i,j,x,y;

      x = (a->s->img_x - xorig[p] + xspc[p]-1) / xspc[p];
      y = (a->s->img_y - yorig[p] + yspc[p]-1) / yspc[p];
      if (x && y) {
         stbi__uint32 img_len = ((((a->s->img_n * x * depth) + 7) >> 3) + 1) * y;
         if (!stbi__create_png_image_raw(a, image_data, image_data_len, out_n, x, y, depth, color)) {
            free(final);
            return 0;
         }
         for (j=0; j < y; ++j) {
            for (i=0; i < x; ++i) {
               int out_y = j*yspc[p]+yorig[p];
               int out_x = i*xspc[p]+xorig[p];
               memcpy(final + out_y*a->s->img_x*out_n + out_x*out_n,
                      a->out + (j*x+i)*out_n, out_n);
            }
         }
         free(a->out);
         image_data += img_len;
         image_data_len -= img_len;
      }
   }
   a->out = final;

   return 1;
}

static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)
{
   stbi__context *s = z->s;
   stbi__uint32 i, pixel_count = s->img_x * s->img_y;
   stbi_uc *p = z->out;



                                        ;

   if (out_n == 2) {
      for (i=0; i < pixel_count; ++i) {
         p[1] = (p[0] == tc[0] ? 0 : 255);
         p += 2;
      }
   } else {
      for (i=0; i < pixel_count; ++i) {
         if (p[0] == tc[0] && p[1] == tc[1] && p[2] == tc[2])
            p[3] = 0;
         p += 4;
      }
   }
   return 1;
}

static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)
{
   stbi__context *s = z->s;
   stbi__uint32 i, pixel_count = s->img_x * s->img_y;
   stbi__uint16 *p = (stbi__uint16*) z->out;



                                        ;

   if (out_n == 2) {
      for (i = 0; i < pixel_count; ++i) {
         p[1] = (p[0] == tc[0] ? 0 : 65535);
         p += 2;
      }
   } else {
      for (i = 0; i < pixel_count; ++i) {
         if (p[0] == tc[0] && p[1] == tc[1] && p[2] == tc[2])
            p[3] = 0;
         p += 4;
      }
   }
   return 1;
}

static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)
{
   stbi__uint32 i, pixel_count = a->s->img_x * a->s->img_y;
   stbi_uc *p, *temp_out, *orig = a->out;

   p = (stbi_uc *) stbi__malloc(pixel_count * pal_img_n);
   if (p == 0) return stbi__err("outofmem");


   temp_out = p;

   if (pal_img_n == 3) {
      for (i=0; i < pixel_count; ++i) {
         int n = orig[i]*4;
         p[0] = palette[n ];
         p[1] = palette[n+1];
         p[2] = palette[n+2];
         p += 3;
      }
   } else {
      for (i=0; i < pixel_count; ++i) {
         int n = orig[i]*4;
         p[0] = palette[n ];
         p[1] = palette[n+1];
         p[2] = palette[n+2];
         p[3] = palette[n+3];
         p += 4;
      }
   }
   free(a->out);
   a->out = temp_out;

   (void)sizeof(len);

   return 1;
}

static int stbi__reduce_png(stbi__png *p)
{
   int i;
   int img_len = p->s->img_x * p->s->img_y * p->s->img_out_n;
   stbi_uc *reduced;
   stbi__uint16 *orig = (stbi__uint16*)p->out;

   if (p->depth != 16) return 1;

   reduced = (stbi_uc *)stbi__malloc(img_len);
   if (p == 0) return stbi__err("outofmem");

   for (i = 0; i < img_len; ++i) reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF);

   p->out = reduced;
   free(orig);

   return 1;
}

static int stbi__unpremultiply_on_load = 0;
static int stbi__de_iphone_flag = 0;

extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)
{
   stbi__unpremultiply_on_load = flag_true_if_should_unpremultiply;
}

extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)
{
   stbi__de_iphone_flag = flag_true_if_should_convert;
}

static void stbi__de_iphone(stbi__png *z)
{
   stbi__context *s = z->s;
   stbi__uint32 i, pixel_count = s->img_x * s->img_y;
   stbi_uc *p = z->out;

   if (s->img_out_n == 3) {
      for (i=0; i < pixel_count; ++i) {
         stbi_uc t = p[0];
         p[0] = p[2];
         p[2] = t;
         p += 3;
      }
   } else {
                                    ;
      if (stbi__unpremultiply_on_load) {

         for (i=0; i < pixel_count; ++i) {
            stbi_uc a = p[3];
            stbi_uc t = p[0];
            if (a) {
               p[0] = p[2] * 255 / a;
               p[1] = p[1] * 255 / a;
               p[2] = t * 255 / a;
            } else {
               p[0] = p[2];
               p[2] = t;
            }
            p += 4;
         }
      } else {

         for (i=0; i < pixel_count; ++i) {
            stbi_uc t = p[0];
            p[0] = p[2];
            p[2] = t;
            p += 4;
         }
      }
   }
}



static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)
{
   stbi_uc palette[1024], pal_img_n=0;
   stbi_uc has_trans=0, tc[3];
   stbi__uint16 tc16[3];
   stbi__uint32 ioff=0, idata_limit=0, i, pal_len=0;
   int first=1,k,interlace=0, color=0, is_iphone=0;
   stbi__context *s = z->s;

   z->expanded = 0;
   z->idata = 0;
   z->out = 0;

   if (!stbi__check_png_header(s)) return 0;

   if (scan == STBI__SCAN_type) return 1;

   for (;;) {
      stbi__pngchunk c = stbi__get_chunk_header(s);
      switch (c.type) {
         case ((('C') << 24) + (('g') << 16) + (('B') << 8) + ('I')):
            is_iphone = 1;
            stbi__skip(s, c.length);
            break;
         case ((('I') << 24) + (('H') << 16) + (('D') << 8) + ('R')): {
            int comp,filter;
            if (!first) return stbi__err("multiple IHDR");
            first = 0;
            if (c.length != 13) return stbi__err("bad IHDR len");
            s->img_x = stbi__get32be(s); if (s->img_x > (1 << 24)) return stbi__err("too large");
            s->img_y = stbi__get32be(s); if (s->img_y > (1 << 24)) return stbi__err("too large");
            z->depth = stbi__get8(s); if (z->depth != 1 && z->depth != 2 && z->depth != 4 && z->depth != 8 && z->depth != 16) return stbi__err("1/2/4/8/16-bit only");
            color = stbi__get8(s); if (color > 6) return stbi__err("bad ctype");
   if (color == 3 && z->depth == 16) return stbi__err("bad ctype");
            if (color == 3) pal_img_n = 3; else if (color & 1) return stbi__err("bad ctype");
            comp = stbi__get8(s); if (comp) return stbi__err("bad comp method");
            filter= stbi__get8(s); if (filter) return stbi__err("bad filter method");
            interlace = stbi__get8(s); if (interlace>1) return stbi__err("bad interlace method");
            if (!s->img_x || !s->img_y) return stbi__err("0-pixel image");
            if (!pal_img_n) {
               s->img_n = (color & 2 ? 3 : 1) + (color & 4 ? 1 : 0);
               if ((1 << 30) / s->img_x / s->img_n < s->img_y) return stbi__err("too large");
               if (scan == STBI__SCAN_header) return 1;
            } else {


               s->img_n = 1;
               if ((1 << 30) / s->img_x / 4 < s->img_y) return stbi__err("too large");

            }
            break;
         }

         case ((('P') << 24) + (('L') << 16) + (('T') << 8) + ('E')): {
            if (first) return stbi__err("first not IHDR");
            if (c.length > 256*3) return stbi__err("invalid PLTE");
            pal_len = c.length / 3;
            if (pal_len * 3 != c.length) return stbi__err("invalid PLTE");
            for (i=0; i < pal_len; ++i) {
               palette[i*4+0] = stbi__get8(s);
               palette[i*4+1] = stbi__get8(s);
               palette[i*4+2] = stbi__get8(s);
               palette[i*4+3] = 255;
            }
            break;
         }

         case ((('t') << 24) + (('R') << 16) + (('N') << 8) + ('S')): {
            if (first) return stbi__err("first not IHDR");
            if (z->idata) return stbi__err("tRNS after IDAT");
            if (pal_img_n) {
               if (scan == STBI__SCAN_header) { s->img_n = 4; return 1; }
               if (pal_len == 0) return stbi__err("tRNS before PLTE");
               if (c.length > pal_len) return stbi__err("bad tRNS len");
               pal_img_n = 4;
               for (i=0; i < c.length; ++i)
                  palette[i*4+3] = stbi__get8(s);
            } else {
               if (!(s->img_n & 1)) return stbi__err("tRNS with alpha");
               if (c.length != (stbi__uint32) s->img_n*2) return stbi__err("bad tRNS len");
               has_trans = 1;
               if (z->depth == 16) {
                  for (k = 0; k < s->img_n; ++k) tc16[k] = stbi__get16be(s);
               } else {
                  for (k = 0; k < s->img_n; ++k) tc[k] = (stbi_uc)(stbi__get16be(s) & 255) * stbi__depth_scale_table[z->depth];
               }
            }
            break;
         }

         case ((('I') << 24) + (('D') << 16) + (('A') << 8) + ('T')): {
            if (first) return stbi__err("first not IHDR");
            if (pal_img_n && !pal_len) return stbi__err("no PLTE");
            if (scan == STBI__SCAN_header) { s->img_n = pal_img_n; return 1; }
            if ((int)(ioff + c.length) < (int)ioff) return 0;
            if (ioff + c.length > idata_limit) {
               stbi__uint32 idata_limit_old = idata_limit;
               stbi_uc *p;
               if (idata_limit == 0) idata_limit = c.length > 4096 ? c.length : 4096;
               while (ioff + c.length > idata_limit)
                  idata_limit *= 2;
               (void)sizeof(idata_limit_old);
               p = (stbi_uc *) realloc(z->idata,idata_limit); if (p == 0) return stbi__err("outofmem");
               z->idata = p;
            }
            if (!stbi__getn(s, z->idata+ioff,c.length)) return stbi__err("outofdata");
            ioff += c.length;
            break;
         }

         case ((('I') << 24) + (('E') << 16) + (('N') << 8) + ('D')): {
            stbi__uint32 raw_len, bpl;
            if (first) return stbi__err("first not IHDR");
            if (scan != STBI__SCAN_load) return 1;
            if (z->idata == 0) return stbi__err("no IDAT");

            bpl = (s->img_x * z->depth + 7) / 8;
            raw_len = bpl * s->img_y * s->img_n + s->img_y ;
            z->expanded = (stbi_uc *) stbi_zlib_decode_malloc_guesssize_headerflag((char *) z->idata, ioff, raw_len, (int *) &raw_len, !is_iphone);
            if (z->expanded == 0) return 0;
            free(z->idata); z->idata = 0;
            if ((req_comp == s->img_n+1 && req_comp != 3 && !pal_img_n) || has_trans)
               s->img_out_n = s->img_n+1;
            else
               s->img_out_n = s->img_n;
            if (!stbi__create_png_image(z, z->expanded, raw_len, s->img_out_n, z->depth, color, interlace)) return 0;
            if (has_trans) {
               if (z->depth == 16) {
                  if (!stbi__compute_transparency16(z, tc16, s->img_out_n)) return 0;
               } else {
                  if (!stbi__compute_transparency(z, tc, s->img_out_n)) return 0;
               }
            }
            if (is_iphone && stbi__de_iphone_flag && s->img_out_n > 2)
               stbi__de_iphone(z);
            if (pal_img_n) {

               s->img_n = pal_img_n;
               s->img_out_n = pal_img_n;
               if (req_comp >= 3) s->img_out_n = req_comp;
               if (!stbi__expand_png_palette(z, palette, pal_len, s->img_out_n))
                  return 0;
            }
            free(z->expanded); z->expanded = 0;
            return 1;
         }

         default:

            if (first) return stbi__err("first not IHDR");
            if ((c.type & (1 << 29)) == 0) {


               static char invalid_chunk[] = "XXXX PNG chunk not known";
               invalid_chunk[0] = ((stbi_uc) ((c.type >> 24) & 255));
               invalid_chunk[1] = ((stbi_uc) ((c.type >> 16) & 255));
               invalid_chunk[2] = ((stbi_uc) ((c.type >> 8) & 255));
               invalid_chunk[3] = ((stbi_uc) ((c.type >> 0) & 255));

               return stbi__err(invalid_chunk);
            }
            stbi__skip(s, c.length);
            break;
      }

      stbi__get32be(s);
   }
}

static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)
{
   unsigned char *result=0;
   if (req_comp < 0 || req_comp > 4) return ((unsigned char *)(size_t) (stbi__err("bad req_comp")?0:0));
   if (stbi__parse_png_file(p, STBI__SCAN_load, req_comp)) {
      if (p->depth == 16) {
         if (!stbi__reduce_png(p)) {
            return result;
         }
      }
      result = p->out;
      p->out = 0;
      if (req_comp && req_comp != p->s->img_out_n) {
         result = stbi__convert_format(result, p->s->img_out_n, req_comp, p->s->img_x, p->s->img_y);
         p->s->img_out_n = req_comp;
         if (result == 0) return result;
      }
      *x = p->s->img_x;
      *y = p->s->img_y;
      if (n) *n = p->s->img_n;
   }
   free(p->out); p->out = 0;
   free(p->expanded); p->expanded = 0;
   free(p->idata); p->idata = 0;

   return result;
}

static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   stbi__png p;
   p.s = s;
   return stbi__do_png(&p, x,y,comp,req_comp);
}

static int stbi__png_test(stbi__context *s)
{
   int r;
   r = stbi__check_png_header(s);
   stbi__rewind(s);
   return r;
}

static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)
{
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
      stbi__rewind( p->s );
      return 0;
   }
   if (x) *x = p->s->img_x;
   if (y) *y = p->s->img_y;
   if (comp) *comp = p->s->img_n;
   return 1;
}

static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)
{
   stbi__png p;
   p.s = s;
   return stbi__png_info_raw(&p, x, y, comp);
}





static int stbi__bmp_test_raw(stbi__context *s)
{
   int r;
   int sz;
   if (stbi__get8(s) != 'B') return 0;
   if (stbi__get8(s) != 'M') return 0;
   stbi__get32le(s);
   stbi__get16le(s);
   stbi__get16le(s);
   stbi__get32le(s);
   sz = stbi__get32le(s);
   r = (sz == 12 || sz == 40 || sz == 56 || sz == 108 || sz == 124);
   return r;
}

static int stbi__bmp_test(stbi__context *s)
{
   int r = stbi__bmp_test_raw(s);
   stbi__rewind(s);
   return r;
}



static int stbi__high_bit(unsigned int z)
{
   int n=0;
   if (z == 0) return -1;
   if (z >= 0x10000) n += 16, z >>= 16;
   if (z >= 0x00100) n += 8, z >>= 8;
   if (z >= 0x00010) n += 4, z >>= 4;
   if (z >= 0x00004) n += 2, z >>= 2;
   if (z >= 0x00002) n += 1, z >>= 1;
   return n;
}

static int stbi__bitcount(unsigned int a)
{
   a = (a & 0x55555555) + ((a >> 1) & 0x55555555);
   a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
   a = (a + (a >> 4)) & 0x0f0f0f0f;
   a = (a + (a >> 8));
   a = (a + (a >> 16));
   return a & 0xff;
}

static int stbi__shiftsigned(int v, int shift, int bits)
{
   int result;
   int z=0;

   if (shift < 0) v <<= -shift;
   else v >>= shift;
   result = v;

   z = bits;
   while (z < 8) {
      result += v >> z;
      z += bits;
   }
   return result;
}

typedef struct
{
   int bpp, offset, hsz;
   unsigned int mr,mg,mb,ma, all_a;
} stbi__bmp_data;

static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)
{
   int hsz;
   if (stbi__get8(s) != 'B' || stbi__get8(s) != 'M') return ((unsigned char *)(size_t) (stbi__err("not BMP")?0:0));
   stbi__get32le(s);
   stbi__get16le(s);
   stbi__get16le(s);
   info->offset = stbi__get32le(s);
   info->hsz = hsz = stbi__get32le(s);
   info->mr = info->mg = info->mb = info->ma = 0;

   if (hsz != 12 && hsz != 40 && hsz != 56 && hsz != 108 && hsz != 124) return ((unsigned char *)(size_t) (stbi__err("unknown BMP")?0:0));
   if (hsz == 12) {
      s->img_x = stbi__get16le(s);
      s->img_y = stbi__get16le(s);
   } else {
      s->img_x = stbi__get32le(s);
      s->img_y = stbi__get32le(s);
   }
   if (stbi__get16le(s) != 1) return ((unsigned char *)(size_t) (stbi__err("bad BMP")?0:0));
   info->bpp = stbi__get16le(s);
   if (info->bpp == 1) return ((unsigned char *)(size_t) (stbi__err("monochrome")?0:0));
   if (hsz != 12) {
      int compress = stbi__get32le(s);
      if (compress == 1 || compress == 2) return ((unsigned char *)(size_t) (stbi__err("BMP RLE")?0:0));
      stbi__get32le(s);
      stbi__get32le(s);
      stbi__get32le(s);
      stbi__get32le(s);
      stbi__get32le(s);
      if (hsz == 40 || hsz == 56) {
         if (hsz == 56) {
            stbi__get32le(s);
            stbi__get32le(s);
            stbi__get32le(s);
            stbi__get32le(s);
         }
         if (info->bpp == 16 || info->bpp == 32) {
            if (compress == 0) {
               if (info->bpp == 32) {
                  info->mr = 0xffu << 16;
                  info->mg = 0xffu << 8;
                  info->mb = 0xffu << 0;
                  info->ma = 0xffu << 24;
                  info->all_a = 0;
               } else {
                  info->mr = 31u << 10;
                  info->mg = 31u << 5;
                  info->mb = 31u << 0;
               }
            } else if (compress == 3) {
               info->mr = stbi__get32le(s);
               info->mg = stbi__get32le(s);
               info->mb = stbi__get32le(s);

               if (info->mr == info->mg && info->mg == info->mb) {

                  return ((unsigned char *)(size_t) (stbi__err("bad BMP")?0:0));
               }
            } else
               return ((unsigned char *)(size_t) (stbi__err("bad BMP")?0:0));
         }
      } else {
         int i;
         if (hsz != 108 && hsz != 124)
            return ((unsigned char *)(size_t) (stbi__err("bad BMP")?0:0));
         info->mr = stbi__get32le(s);
         info->mg = stbi__get32le(s);
         info->mb = stbi__get32le(s);
         info->ma = stbi__get32le(s);
         stbi__get32le(s);
         for (i=0; i < 12; ++i)
            stbi__get32le(s);
         if (hsz == 124) {
            stbi__get32le(s);
            stbi__get32le(s);
            stbi__get32le(s);
            stbi__get32le(s);
         }
      }
   }
   return (void *) 1;
}


static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   stbi_uc *out;
   unsigned int mr=0,mg=0,mb=0,ma=0, all_a;
   stbi_uc pal[256][4];
   int psize=0,i,j,width;
   int flip_vertically, pad, target;
   stbi__bmp_data info;

   info.all_a = 255;
   if (stbi__bmp_parse_header(s, &info) == 0)
      return 0;

   flip_vertically = ((int) s->img_y) > 0;
   s->img_y = abs((int) s->img_y);

   mr = info.mr;
   mg = info.mg;
   mb = info.mb;
   ma = info.ma;
   all_a = info.all_a;

   if (info.hsz == 12) {
      if (info.bpp < 24)
         psize = (info.offset - 14 - 24) / 3;
   } else {
      if (info.bpp < 16)
         psize = (info.offset - 14 - info.hsz) >> 2;
   }

   s->img_n = ma ? 4 : 3;
   if (req_comp && req_comp >= 3)
      target = req_comp;
   else
      target = s->img_n;

   out = (stbi_uc *) stbi__malloc(target * s->img_x * s->img_y);
   if (!out) return ((unsigned char *)(size_t) (stbi__err("outofmem")?0:0));
   if (info.bpp < 16) {
      int z=0;
      if (psize == 0 || psize > 256) { free(out); return ((unsigned char *)(size_t) (stbi__err("invalid")?0:0)); }
      for (i=0; i < psize; ++i) {
         pal[i][2] = stbi__get8(s);
         pal[i][1] = stbi__get8(s);
         pal[i][0] = stbi__get8(s);
         if (info.hsz != 12) stbi__get8(s);
         pal[i][3] = 255;
      }
      stbi__skip(s, info.offset - 14 - info.hsz - psize * (info.hsz == 12 ? 3 : 4));
      if (info.bpp == 4) width = (s->img_x + 1) >> 1;
      else if (info.bpp == 8) width = s->img_x;
      else { free(out); return ((unsigned char *)(size_t) (stbi__err("bad bpp")?0:0)); }
      pad = (-width)&3;
      for (j=0; j < (int) s->img_y; ++j) {
         for (i=0; i < (int) s->img_x; i += 2) {
            int v=stbi__get8(s),v2=0;
            if (info.bpp == 4) {
               v2 = v & 15;
               v >>= 4;
            }
            out[z++] = pal[v][0];
            out[z++] = pal[v][1];
            out[z++] = pal[v][2];
            if (target == 4) out[z++] = 255;
            if (i+1 == (int) s->img_x) break;
            v = (info.bpp == 8) ? stbi__get8(s) : v2;
            out[z++] = pal[v][0];
            out[z++] = pal[v][1];
            out[z++] = pal[v][2];
            if (target == 4) out[z++] = 255;
         }
         stbi__skip(s, pad);
      }
   } else {
      int rshift=0,gshift=0,bshift=0,ashift=0,rcount=0,gcount=0,bcount=0,acount=0;
      int z = 0;
      int easy=0;
      stbi__skip(s, info.offset - 14 - info.hsz);
      if (info.bpp == 24) width = 3 * s->img_x;
      else if (info.bpp == 16) width = 2*s->img_x;
      else width=0;
      pad = (-width) & 3;
      if (info.bpp == 24) {
         easy = 1;
      } else if (info.bpp == 32) {
         if (mb == 0xff && mg == 0xff00 && mr == 0x00ff0000 && ma == 0xff000000)
            easy = 2;
      }
      if (!easy) {
         if (!mr || !mg || !mb) { free(out); return ((unsigned char *)(size_t) (stbi__err("bad masks")?0:0)); }

         rshift = stbi__high_bit(mr)-7; rcount = stbi__bitcount(mr);
         gshift = stbi__high_bit(mg)-7; gcount = stbi__bitcount(mg);
         bshift = stbi__high_bit(mb)-7; bcount = stbi__bitcount(mb);
         ashift = stbi__high_bit(ma)-7; acount = stbi__bitcount(ma);
      }
      for (j=0; j < (int) s->img_y; ++j) {
         if (easy) {
            for (i=0; i < (int) s->img_x; ++i) {
               unsigned char a;
               out[z+2] = stbi__get8(s);
               out[z+1] = stbi__get8(s);
               out[z+0] = stbi__get8(s);
               z += 3;
               a = (easy == 2 ? stbi__get8(s) : 255);
               all_a |= a;
               if (target == 4) out[z++] = a;
            }
         } else {
            int bpp = info.bpp;
            for (i=0; i < (int) s->img_x; ++i) {
               stbi__uint32 v = (bpp == 16 ? (stbi__uint32) stbi__get16le(s) : stbi__get32le(s));
               int a;
               out[z++] = ((stbi_uc) ((stbi__shiftsigned(v & mr, rshift, rcount)) & 255));
               out[z++] = ((stbi_uc) ((stbi__shiftsigned(v & mg, gshift, gcount)) & 255));
               out[z++] = ((stbi_uc) ((stbi__shiftsigned(v & mb, bshift, bcount)) & 255));
               a = (ma ? stbi__shiftsigned(v & ma, ashift, acount) : 255);
               all_a |= a;
               if (target == 4) out[z++] = ((stbi_uc) ((a) & 255));
            }
         }
         stbi__skip(s, pad);
      }
   }


   if (target == 4 && all_a == 0)
      for (i=4*s->img_x*s->img_y-1; i >= 0; i -= 4)
         out[i] = 255;

   if (flip_vertically) {
      stbi_uc t;
      for (j=0; j < (int) s->img_y>>1; ++j) {
         stbi_uc *p1 = out + j *s->img_x*target;
         stbi_uc *p2 = out + (s->img_y-1-j)*s->img_x*target;
         for (i=0; i < (int) s->img_x*target; ++i) {
            t = p1[i], p1[i] = p2[i], p2[i] = t;
         }
      }
   }

   if (req_comp && req_comp != target) {
      out = stbi__convert_format(out, target, req_comp, s->img_x, s->img_y);
      if (out == 0) return out;
   }

   *x = s->img_x;
   *y = s->img_y;
   if (comp) *comp = s->img_n;
   return out;
}






static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)
{

   if(is_rgb16) *is_rgb16 = 0;
   switch(bits_per_pixel) {
      case 8: return STBI_grey;
      case 16: if(is_grey) return STBI_grey_alpha;

      case 15: if(is_rgb16) *is_rgb16 = 1;
            return STBI_rgb;
      case 24:
      case 32: return bits_per_pixel/8;
      default: return 0;
   }
}

static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)
{
    int tga_w, tga_h, tga_comp, tga_image_type, tga_bits_per_pixel, tga_colormap_bpp;
    int sz, tga_colormap_type;
    stbi__get8(s);
    tga_colormap_type = stbi__get8(s);
    if( tga_colormap_type > 1 ) {
        stbi__rewind(s);
        return 0;
    }
    tga_image_type = stbi__get8(s);
    if ( tga_colormap_type == 1 ) {
        if (tga_image_type != 1 && tga_image_type != 9) {
            stbi__rewind(s);
            return 0;
        }
        stbi__skip(s,4);
        sz = stbi__get8(s);
        if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) {
            stbi__rewind(s);
            return 0;
        }
        stbi__skip(s,4);
        tga_colormap_bpp = sz;
    } else {
        if ( (tga_image_type != 2) && (tga_image_type != 3) && (tga_image_type != 10) && (tga_image_type != 11) ) {
            stbi__rewind(s);
            return 0;
        }
        stbi__skip(s,9);
        tga_colormap_bpp = 0;
    }
    tga_w = stbi__get16le(s);
    if( tga_w < 1 ) {
        stbi__rewind(s);
        return 0;
    }
    tga_h = stbi__get16le(s);
    if( tga_h < 1 ) {
        stbi__rewind(s);
        return 0;
    }
    tga_bits_per_pixel = stbi__get8(s);
    stbi__get8(s);
    if (tga_colormap_bpp != 0) {
        if((tga_bits_per_pixel != 8) && (tga_bits_per_pixel != 16)) {


            stbi__rewind(s);
            return 0;
        }
        tga_comp = stbi__tga_get_comp(tga_colormap_bpp, 0, 0);
    } else {
        tga_comp = stbi__tga_get_comp(tga_bits_per_pixel, (tga_image_type == 3) || (tga_image_type == 11), 0);
    }
    if(!tga_comp) {
      stbi__rewind(s);
      return 0;
    }
    if (x) *x = tga_w;
    if (y) *y = tga_h;
    if (comp) *comp = tga_comp;
    return 1;
}

static int stbi__tga_test(stbi__context *s)
{
   int res = 0;
   int sz, tga_color_type;
   stbi__get8(s);
   tga_color_type = stbi__get8(s);
   if ( tga_color_type > 1 ) goto errorEnd;
   sz = stbi__get8(s);
   if ( tga_color_type == 1 ) {
      if (sz != 1 && sz != 9) goto errorEnd;
      stbi__skip(s,4);
      sz = stbi__get8(s);
      if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) goto errorEnd;
      stbi__skip(s,4);
   } else {
      if ( (sz != 2) && (sz != 3) && (sz != 10) && (sz != 11) ) goto errorEnd;
      stbi__skip(s,9);
   }
   if ( stbi__get16le(s) < 1 ) goto errorEnd;
   if ( stbi__get16le(s) < 1 ) goto errorEnd;
   sz = stbi__get8(s);
   if ( (tga_color_type == 1) && (sz != 8) && (sz != 16) ) goto errorEnd;
   if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) goto errorEnd;

   res = 1;

errorEnd:
   stbi__rewind(s);
   return res;
}


void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)
{
   stbi__uint16 px = stbi__get16le(s);
   stbi__uint16 fiveBitMask = 31;

   int r = (px >> 10) & fiveBitMask;
   int g = (px >> 5) & fiveBitMask;
   int b = px & fiveBitMask;

   out[0] = (r * 255)/31;
   out[1] = (g * 255)/31;
   out[2] = (b * 255)/31;





}

static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{

   int tga_offset = stbi__get8(s);
   int tga_indexed = stbi__get8(s);
   int tga_image_type = stbi__get8(s);
   int tga_is_RLE = 0;
   int tga_palette_start = stbi__get16le(s);
   int tga_palette_len = stbi__get16le(s);
   int tga_palette_bits = stbi__get8(s);
   int tga_x_origin = stbi__get16le(s);
   int tga_y_origin = stbi__get16le(s);
   int tga_width = stbi__get16le(s);
   int tga_height = stbi__get16le(s);
   int tga_bits_per_pixel = stbi__get8(s);
   int tga_comp, tga_rgb16=0;
   int tga_inverted = stbi__get8(s);


   unsigned char *tga_data;
   unsigned char *tga_palette = 0;
   int i, j;
   unsigned char raw_data[4];
   int RLE_count = 0;
   int RLE_repeating = 0;
   int read_next_pixel = 1;


   if ( tga_image_type >= 8 )
   {
      tga_image_type -= 8;
      tga_is_RLE = 1;
   }
   tga_inverted = 1 - ((tga_inverted >> 5) & 1);


   if ( tga_indexed ) tga_comp = stbi__tga_get_comp(tga_palette_bits, 0, &tga_rgb16);
   else tga_comp = stbi__tga_get_comp(tga_bits_per_pixel, (tga_image_type == 3), &tga_rgb16);

   if(!tga_comp)
      return ((unsigned char *)(size_t) (stbi__err("bad format")?0:0));


   *x = tga_width;
   *y = tga_height;
   if (comp) *comp = tga_comp;

   tga_data = (unsigned char*)stbi__malloc( (size_t)tga_width * tga_height * tga_comp );
   if (!tga_data) return ((unsigned char *)(size_t) (stbi__err("outofmem")?0:0));


   stbi__skip(s, tga_offset );

   if ( !tga_indexed && !tga_is_RLE && !tga_rgb16 ) {
      for (i=0; i < tga_height; ++i) {
         int row = tga_inverted ? tga_height -i - 1 : i;
         stbi_uc *tga_row = tga_data + row*tga_width*tga_comp;
         stbi__getn(s, tga_row, tga_width * tga_comp);
      }
   } else {

      if ( tga_indexed)
      {

         stbi__skip(s, tga_palette_start );

         tga_palette = (unsigned char*)stbi__malloc( tga_palette_len * tga_comp );
         if (!tga_palette) {
            free(tga_data);
            return ((unsigned char *)(size_t) (stbi__err("outofmem")?0:0));
         }
         if (tga_rgb16) {
            stbi_uc *pal_entry = tga_palette;
                                             ;
            for (i=0; i < tga_palette_len; ++i) {
               stbi__tga_read_rgb16(s, pal_entry);
               pal_entry += tga_comp;
            }
         } else if (!stbi__getn(s, tga_palette, tga_palette_len * tga_comp)) {
               free(tga_data);
               free(tga_palette);
               return ((unsigned char *)(size_t) (stbi__err("bad palette")?0:0));
         }
      }

      for (i=0; i < tga_width * tga_height; ++i)
      {

         if ( tga_is_RLE )
         {
            if ( RLE_count == 0 )
            {

               int RLE_cmd = stbi__get8(s);
               RLE_count = 1 + (RLE_cmd & 127);
               RLE_repeating = RLE_cmd >> 7;
               read_next_pixel = 1;
            } else if ( !RLE_repeating )
            {
               read_next_pixel = 1;
            }
         } else
         {
            read_next_pixel = 1;
         }

         if ( read_next_pixel )
         {

            if ( tga_indexed )
            {

               int pal_idx = (tga_bits_per_pixel == 8) ? stbi__get8(s) : stbi__get16le(s);
               if ( pal_idx >= tga_palette_len ) {

                  pal_idx = 0;
               }
               pal_idx *= tga_comp;
               for (j = 0; j < tga_comp; ++j) {
                  raw_data[j] = tga_palette[pal_idx+j];
               }
            } else if(tga_rgb16) {
                                                ;
               stbi__tga_read_rgb16(s, raw_data);
            } else {

               for (j = 0; j < tga_comp; ++j) {
                  raw_data[j] = stbi__get8(s);
               }
            }

            read_next_pixel = 0;
         }


         for (j = 0; j < tga_comp; ++j)
           tga_data[i*tga_comp+j] = raw_data[j];


         --RLE_count;
      }

      if ( tga_inverted )
      {
         for (j = 0; j*2 < tga_height; ++j)
         {
            int index1 = j * tga_width * tga_comp;
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
            for (i = tga_width * tga_comp; i > 0; --i)
            {
               unsigned char temp = tga_data[index1];
               tga_data[index1] = tga_data[index2];
               tga_data[index2] = temp;
               ++index1;
               ++index2;
            }
         }
      }

      if ( tga_palette != 0 )
      {
         free(tga_palette);
      }
   }


   if (tga_comp >= 3 && !tga_rgb16)
   {
      unsigned char* tga_pixel = tga_data;
      for (i=0; i < tga_width * tga_height; ++i)
      {
         unsigned char temp = tga_pixel[0];
         tga_pixel[0] = tga_pixel[2];
         tga_pixel[2] = temp;
         tga_pixel += tga_comp;
      }
   }


   if (req_comp && req_comp != tga_comp)
      tga_data = stbi__convert_format(tga_data, tga_comp, req_comp, tga_width, tga_height);



   tga_palette_start = tga_palette_len = tga_palette_bits =
         tga_x_origin = tga_y_origin = 0;

   return tga_data;
}






static int stbi__psd_test(stbi__context *s)
{
   int r = (stbi__get32be(s) == 0x38425053);
   stbi__rewind(s);
   return r;
}

static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   int pixelCount;
   int channelCount, compression;
   int channel, i, count, len;
   int bitdepth;
   int w,h;
   stbi_uc *out;


   if (stbi__get32be(s) != 0x38425053)
      return ((unsigned char *)(size_t) (stbi__err("not PSD")?0:0));


   if (stbi__get16be(s) != 1)
      return ((unsigned char *)(size_t) (stbi__err("wrong version")?0:0));


   stbi__skip(s, 6 );


   channelCount = stbi__get16be(s);
   if (channelCount < 0 || channelCount > 16)
      return ((unsigned char *)(size_t) (stbi__err("wrong channel count")?0:0));


   h = stbi__get32be(s);
   w = stbi__get32be(s);


   bitdepth = stbi__get16be(s);
   if (bitdepth != 8 && bitdepth != 16)
      return ((unsigned char *)(size_t) (stbi__err("unsupported bit depth")?0:0));
   if (stbi__get16be(s) != 3)
      return ((unsigned char *)(size_t) (stbi__err("wrong color format")?0:0));


   stbi__skip(s,stbi__get32be(s) );


   stbi__skip(s, stbi__get32be(s) );


   stbi__skip(s, stbi__get32be(s) );





   compression = stbi__get16be(s);
   if (compression > 1)
      return ((unsigned char *)(size_t) (stbi__err("bad compression")?0:0));


   out = (stbi_uc *) stbi__malloc(4 * w*h);
   if (!out) return ((unsigned char *)(size_t) (stbi__err("outofmem")?0:0));
   pixelCount = w*h;





   if (compression) {
      stbi__skip(s, h * channelCount * 2 );


      for (channel = 0; channel < 4; channel++) {
         stbi_uc *p;

         p = out+channel;
         if (channel >= channelCount) {

            for (i = 0; i < pixelCount; i++, p += 4)
               *p = (channel == 3 ? 255 : 0);
         } else {

            count = 0;
            while (count < pixelCount) {
               len = stbi__get8(s);
               if (len == 128) {

               } else if (len < 128) {

                  len++;
                  count += len;
                  while (len) {
                     *p = stbi__get8(s);
                     p += 4;
                     len--;
                  }
               } else if (len > 128) {
                  stbi_uc val;


                  len ^= 0x0FF;
                  len += 2;
                  val = stbi__get8(s);
                  count += len;
                  while (len) {
                     *p = val;
                     p += 4;
                     len--;
                  }
               }
            }
         }
      }

   } else {




      for (channel = 0; channel < 4; channel++) {
         stbi_uc *p;

         p = out + channel;
         if (channel >= channelCount) {

            stbi_uc val = channel == 3 ? 255 : 0;
            for (i = 0; i < pixelCount; i++, p += 4)
               *p = val;
         } else {

            if (bitdepth == 16) {
               for (i = 0; i < pixelCount; i++, p += 4)
                  *p = (stbi_uc) (stbi__get16be(s) >> 8);
            } else {
               for (i = 0; i < pixelCount; i++, p += 4)
                  *p = stbi__get8(s);
            }
         }
      }
   }

   if (channelCount >= 4) {
      for (i=0; i < w*h; ++i) {
         unsigned char *pixel = out + 4*i;
         if (pixel[3] != 0 && pixel[3] != 255) {

            float a = pixel[3] / 255.0f;
            float ra = 1.0f / a;
            float inv_a = 255.0f * (1 - ra);
            pixel[0] = (unsigned char) (pixel[0]*ra + inv_a);
            pixel[1] = (unsigned char) (pixel[1]*ra + inv_a);
            pixel[2] = (unsigned char) (pixel[2]*ra + inv_a);
         }
      }
   }

   if (req_comp && req_comp != 4) {
      out = stbi__convert_format(out, 4, req_comp, w, h);
      if (out == 0) return out;
   }

   if (comp) *comp = 4;
   *y = h;
   *x = w;

   return out;
}
static int stbi__pic_is4(stbi__context *s,const char *str)
{
   int i;
   for (i=0; i<4; ++i)
      if (stbi__get8(s) != (stbi_uc)str[i])
         return 0;

   return 1;
}

static int stbi__pic_test_core(stbi__context *s)
{
   int i;

   if (!stbi__pic_is4(s,"\x53\x80\xF6\x34"))
      return 0;

   for(i=0;i<84;++i)
      stbi__get8(s);

   if (!stbi__pic_is4(s,"PICT"))
      return 0;

   return 1;
}

typedef struct
{
   stbi_uc size,type,channel;
} stbi__pic_packet;

static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)
{
   int mask=0x80, i;

   for (i=0; i<4; ++i, mask>>=1) {
      if (channel & mask) {
         if (stbi__at_eof(s)) return ((unsigned char *)(size_t) (stbi__err("bad file")?0:0));
         dest[i]=stbi__get8(s);
      }
   }

   return dest;
}

static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)
{
   int mask=0x80,i;

   for (i=0;i<4; ++i, mask>>=1)
      if (channel&mask)
         dest[i]=src[i];
}

static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)
{
   int act_comp=0,num_packets=0,y,chained;
   stbi__pic_packet packets[10];



   do {
      stbi__pic_packet *packet;

      if (num_packets==sizeof(packets)/sizeof(packets[0]))
         return ((unsigned char *)(size_t) (stbi__err("bad format")?0:0));

      packet = &packets[num_packets++];

      chained = stbi__get8(s);
      packet->size = stbi__get8(s);
      packet->type = stbi__get8(s);
      packet->channel = stbi__get8(s);

      act_comp |= packet->channel;

      if (stbi__at_eof(s)) return ((unsigned char *)(size_t) (stbi__err("bad file")?0:0));
      if (packet->size != 8) return ((unsigned char *)(size_t) (stbi__err("bad format")?0:0));
   } while (chained);

   *comp = (act_comp & 0x10 ? 4 : 3);

   for(y=0; y<height; ++y) {
      int packet_idx;

      for(packet_idx=0; packet_idx < num_packets; ++packet_idx) {
         stbi__pic_packet *packet = &packets[packet_idx];
         stbi_uc *dest = result+y*width*4;

         switch (packet->type) {
            default:
               return ((unsigned char *)(size_t) (stbi__err("bad format")?0:0));

            case 0: {
               int x;

               for(x=0;x<width;++x, dest+=4)
                  if (!stbi__readval(s,packet->channel,dest))
                     return 0;
               break;
            }

            case 1:
               {
                  int left=width, i;

                  while (left>0) {
                     stbi_uc count,value[4];

                     count=stbi__get8(s);
                     if (stbi__at_eof(s)) return ((unsigned char *)(size_t) (stbi__err("bad file")?0:0));

                     if (count > left)
                        count = (stbi_uc) left;

                     if (!stbi__readval(s,packet->channel,value)) return 0;

                     for(i=0; i<count; ++i,dest+=4)
                        stbi__copyval(packet->channel,dest,value);
                     left -= count;
                  }
               }
               break;

            case 2: {
               int left=width;
               while (left>0) {
                  int count = stbi__get8(s), i;
                  if (stbi__at_eof(s)) return ((unsigned char *)(size_t) (stbi__err("bad file")?0:0));

                  if (count >= 128) {
                     stbi_uc value[4];

                     if (count==128)
                        count = stbi__get16be(s);
                     else
                        count -= 127;
                     if (count > left)
                        return ((unsigned char *)(size_t) (stbi__err("bad file")?0:0));

                     if (!stbi__readval(s,packet->channel,value))
                        return 0;

                     for(i=0;i<count;++i, dest += 4)
                        stbi__copyval(packet->channel,dest,value);
                  } else {
                     ++count;
                     if (count>left) return ((unsigned char *)(size_t) (stbi__err("bad file")?0:0));

                     for(i=0;i<count;++i, dest+=4)
                        if (!stbi__readval(s,packet->channel,dest))
                           return 0;
                  }
                  left-=count;
               }
               break;
            }
         }
      }
   }

   return result;
}

static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)
{
   stbi_uc *result;
   int i, x,y;

   for (i=0; i<92; ++i)
      stbi__get8(s);

   x = stbi__get16be(s);
   y = stbi__get16be(s);
   if (stbi__at_eof(s)) return ((unsigned char *)(size_t) (stbi__err("bad file")?0:0));
   if ((1 << 28) / x < y) return ((unsigned char *)(size_t) (stbi__err("too large")?0:0));

   stbi__get32be(s);
   stbi__get16be(s);
   stbi__get16be(s);


   result = (stbi_uc *) stbi__malloc(x*y*4);
   memset(result, 0xff, x*y*4);

   if (!stbi__pic_load_core(s,x,y,comp, result)) {
      free(result);
      result=0;
   }
   *px = x;
   *py = y;
   if (req_comp == 0) req_comp = *comp;
   result=stbi__convert_format(result,4,req_comp,x,y);

   return result;
}

static int stbi__pic_test(stbi__context *s)
{
   int r = stbi__pic_test_core(s);
   stbi__rewind(s);
   return r;
}






typedef struct
{
   stbi__int16 prefix;
   stbi_uc first;
   stbi_uc suffix;
} stbi__gif_lzw;

typedef struct
{
   int w,h;
   stbi_uc *out, *old_out;
   int flags, bgindex, ratio, transparent, eflags, delay;
   stbi_uc pal[256][4];
   stbi_uc lpal[256][4];
   stbi__gif_lzw codes[4096];
   stbi_uc *color_table;
   int parse, step;
   int lflags;
   int start_x, start_y;
   int max_x, max_y;
   int cur_x, cur_y;
   int line_size;
} stbi__gif;

static int stbi__gif_test_raw(stbi__context *s)
{
   int sz;
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8') return 0;
   sz = stbi__get8(s);
   if (sz != '9' && sz != '7') return 0;
   if (stbi__get8(s) != 'a') return 0;
   return 1;
}

static int stbi__gif_test(stbi__context *s)
{
   int r = stbi__gif_test_raw(s);
   stbi__rewind(s);
   return r;
}

static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)
{
   int i;
   for (i=0; i < num_entries; ++i) {
      pal[i][2] = stbi__get8(s);
      pal[i][1] = stbi__get8(s);
      pal[i][0] = stbi__get8(s);
      pal[i][3] = transp == i ? 0 : 255;
   }
}

static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)
{
   stbi_uc version;
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')
      return stbi__err("not GIF");

   version = stbi__get8(s);
   if (version != '7' && version != '9') return stbi__err("not GIF");
   if (stbi__get8(s) != 'a') return stbi__err("not GIF");

   stbi__g_failure_reason = "";
   g->w = stbi__get16le(s);
   g->h = stbi__get16le(s);
   g->flags = stbi__get8(s);
   g->bgindex = stbi__get8(s);
   g->ratio = stbi__get8(s);
   g->transparent = -1;

   if (comp != 0) *comp = 4;

   if (is_info) return 1;

   if (g->flags & 0x80)
      stbi__gif_parse_colortable(s,g->pal, 2 << (g->flags & 7), -1);

   return 1;
}

static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)
{
   stbi__gif* g = (stbi__gif*) stbi__malloc(sizeof(stbi__gif));
   if (!stbi__gif_header(s, g, comp, 1)) {
      free(g);
      stbi__rewind( s );
      return 0;
   }
   if (x) *x = g->w;
   if (y) *y = g->h;
   free(g);
   return 1;
}

static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)
{
   stbi_uc *p, *c;



   if (g->codes[code].prefix >= 0)
      stbi__out_gif_code(g, g->codes[code].prefix);

   if (g->cur_y >= g->max_y) return;

   p = &g->out[g->cur_x + g->cur_y];
   c = &g->color_table[g->codes[code].suffix * 4];

   if (c[3] >= 128) {
      p[0] = c[2];
      p[1] = c[1];
      p[2] = c[0];
      p[3] = c[3];
   }
   g->cur_x += 4;

   if (g->cur_x >= g->max_x) {
      g->cur_x = g->start_x;
      g->cur_y += g->step;

      while (g->cur_y >= g->max_y && g->parse > 0) {
         g->step = (1 << g->parse) * g->line_size;
         g->cur_y = g->start_y + (g->step >> 1);
         --g->parse;
      }
   }
}

static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)
{
   stbi_uc lzw_cs;
   stbi__int32 len, init_code;
   stbi__uint32 first;
   stbi__int32 codesize, codemask, avail, oldcode, bits, valid_bits, clear;
   stbi__gif_lzw *p;

   lzw_cs = stbi__get8(s);
   if (lzw_cs > 12) return 0;
   clear = 1 << lzw_cs;
   first = 1;
   codesize = lzw_cs + 1;
   codemask = (1 << codesize) - 1;
   bits = 0;
   valid_bits = 0;
   for (init_code = 0; init_code < clear; init_code++) {
      g->codes[init_code].prefix = -1;
      g->codes[init_code].first = (stbi_uc) init_code;
      g->codes[init_code].suffix = (stbi_uc) init_code;
   }


   avail = clear+2;
   oldcode = -1;

   len = 0;
   for(;;) {
      if (valid_bits < codesize) {
         if (len == 0) {
            len = stbi__get8(s);
            if (len == 0)
               return g->out;
         }
         --len;
         bits |= (stbi__int32) stbi__get8(s) << valid_bits;
         valid_bits += 8;
      } else {
         stbi__int32 code = bits & codemask;
         bits >>= codesize;
         valid_bits -= codesize;

         if (code == clear) {
            codesize = lzw_cs + 1;
            codemask = (1 << codesize) - 1;
            avail = clear + 2;
            oldcode = -1;
            first = 0;
         } else if (code == clear + 1) {
            stbi__skip(s, len);
            while ((len = stbi__get8(s)) > 0)
               stbi__skip(s,len);
            return g->out;
         } else if (code <= avail) {
            if (first) return ((unsigned char *)(size_t) (stbi__err("no clear code")?0:0));

            if (oldcode >= 0) {
               p = &g->codes[avail++];
               if (avail > 4096) return ((unsigned char *)(size_t) (stbi__err("too many codes")?0:0));
               p->prefix = (stbi__int16) oldcode;
               p->first = g->codes[oldcode].first;
               p->suffix = (code == avail) ? p->first : g->codes[code].first;
            } else if (code == avail)
               return ((unsigned char *)(size_t) (stbi__err("illegal code in raster")?0:0));

            stbi__out_gif_code(g, (stbi__uint16) code);

            if ((avail & codemask) == 0 && avail <= 0x0FFF) {
               codesize++;
               codemask = (1 << codesize) - 1;
            }

            oldcode = code;
         } else {
            return ((unsigned char *)(size_t) (stbi__err("illegal code in raster")?0:0));
         }
      }
   }
}

static void stbi__fill_gif_background(stbi__gif *g, int x0, int y0, int x1, int y1)
{
   int x, y;
   stbi_uc *c = g->pal[g->bgindex];
   for (y = y0; y < y1; y += 4 * g->w) {
      for (x = x0; x < x1; x += 4) {
         stbi_uc *p = &g->out[y + x];
         p[0] = c[2];
         p[1] = c[1];
         p[2] = c[0];
         p[3] = 0;
      }
   }
}


static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)
{
   int i;
   stbi_uc *prev_out = 0;

   if (g->out == 0 && !stbi__gif_header(s, g, comp,0))
      return 0;

   prev_out = g->out;
   g->out = (stbi_uc *) stbi__malloc(4 * g->w * g->h);
   if (g->out == 0) return ((unsigned char *)(size_t) (stbi__err("outofmem")?0:0));

   switch ((g->eflags & 0x1C) >> 2) {
      case 0:
         stbi__fill_gif_background(g, 0, 0, 4 * g->w, 4 * g->w * g->h);
         break;
      case 1:
         if (prev_out) memcpy(g->out, prev_out, 4 * g->w * g->h);
         g->old_out = prev_out;
         break;
      case 2:
         if (prev_out) memcpy(g->out, prev_out, 4 * g->w * g->h);
         stbi__fill_gif_background(g, g->start_x, g->start_y, g->max_x, g->max_y);
         break;
      case 3:
         if (g->old_out) {
            for (i = g->start_y; i < g->max_y; i += 4 * g->w)
               memcpy(&g->out[i + g->start_x], &g->old_out[i + g->start_x], g->max_x - g->start_x);
         }
         break;
   }

   for (;;) {
      switch (stbi__get8(s)) {
         case 0x2C:
         {
            int prev_trans = -1;
            stbi__int32 x, y, w, h;
            stbi_uc *o;

            x = stbi__get16le(s);
            y = stbi__get16le(s);
            w = stbi__get16le(s);
            h = stbi__get16le(s);
            if (((x + w) > (g->w)) || ((y + h) > (g->h)))
               return ((unsigned char *)(size_t) (stbi__err("bad Image Descriptor")?0:0));

            g->line_size = g->w * 4;
            g->start_x = x * 4;
            g->start_y = y * g->line_size;
            g->max_x = g->start_x + w * 4;
            g->max_y = g->start_y + h * g->line_size;
            g->cur_x = g->start_x;
            g->cur_y = g->start_y;

            g->lflags = stbi__get8(s);

            if (g->lflags & 0x40) {
               g->step = 8 * g->line_size;
               g->parse = 3;
            } else {
               g->step = g->line_size;
               g->parse = 0;
            }

            if (g->lflags & 0x80) {
               stbi__gif_parse_colortable(s,g->lpal, 2 << (g->lflags & 7), g->eflags & 0x01 ? g->transparent : -1);
               g->color_table = (stbi_uc *) g->lpal;
            } else if (g->flags & 0x80) {
               if (g->transparent >= 0 && (g->eflags & 0x01)) {
                  prev_trans = g->pal[g->transparent][3];
                  g->pal[g->transparent][3] = 0;
               }
               g->color_table = (stbi_uc *) g->pal;
            } else
               return ((unsigned char *)(size_t) (stbi__err("missing color table")?0:0));

            o = stbi__process_gif_raster(s, g);
            if (o == 0) return 0;

            if (prev_trans != -1)
               g->pal[g->transparent][3] = (stbi_uc) prev_trans;

            return o;
         }

         case 0x21:
         {
            int len;
            if (stbi__get8(s) == 0xF9) {
               len = stbi__get8(s);
               if (len == 4) {
                  g->eflags = stbi__get8(s);
                  g->delay = stbi__get16le(s);
                  g->transparent = stbi__get8(s);
               } else {
                  stbi__skip(s, len);
                  break;
               }
            }
            while ((len = stbi__get8(s)) != 0)
               stbi__skip(s, len);
            break;
         }

         case 0x3B:
            return (stbi_uc *) s;

         default:
            return ((unsigned char *)(size_t) (stbi__err("unknown code")?0:0));
      }
   }

   (void)sizeof(req_comp);
}

static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   stbi_uc *u = 0;
   stbi__gif* g = (stbi__gif*) stbi__malloc(sizeof(stbi__gif));
   memset(g, 0, sizeof(*g));

   u = stbi__gif_load_next(s, g, comp, req_comp);
   if (u == (stbi_uc *) s) u = 0;
   if (u) {
      *x = g->w;
      *y = g->h;
      if (req_comp && req_comp != 4)
         u = stbi__convert_format(u, 4, req_comp, g->w, g->h);
   }
   else if (g->out)
      free(g->out);
   free(g);
   return u;
}

static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)
{
   return stbi__gif_info_raw(s,x,y,comp);
}






static int stbi__hdr_test_core(stbi__context *s)
{
   const char *signature = "#?RADIANCE\n";
   int i;
   for (i=0; signature[i]; ++i)
      if (stbi__get8(s) != signature[i])
         return 0;
   return 1;
}

static int stbi__hdr_test(stbi__context* s)
{
   int r = stbi__hdr_test_core(s);
   stbi__rewind(s);
   return r;
}


static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)
{
   int len=0;
   char c = '\0';

   c = (char) stbi__get8(z);

   while (!stbi__at_eof(z) && c != '\n') {
      buffer[len++] = c;
      if (len == 1024 -1) {

         while (!stbi__at_eof(z) && stbi__get8(z) != '\n')
            ;
         break;
      }
      c = (char) stbi__get8(z);
   }

   buffer[len] = 0;
   return buffer;
}

static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)
{
   if ( input[3] != 0 ) {
      float f1;

      f1 = (float) ldexp(1.0f, input[3] - (int)(128 + 8));
      if (req_comp <= 2)
         output[0] = (input[0] + input[1] + input[2]) * f1 / 3;
      else {
         output[0] = input[0] * f1;
         output[1] = input[1] * f1;
         output[2] = input[2] * f1;
      }
      if (req_comp == 2) output[1] = 1;
      if (req_comp == 4) output[3] = 1;
   } else {
      switch (req_comp) {
         case 4: output[3] = 1;
         case 3: output[0] = output[1] = output[2] = 0;
                 break;
         case 2: output[1] = 1;
         case 1: output[0] = 0;
                 break;
      }
   }
}

static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   char buffer[1024];
   char *token;
   int valid = 0;
   int width, height;
   stbi_uc *scanline;
   float *hdr_data;
   int len;
   unsigned char count, value;
   int i, j, k, c1,c2, z;



   if (strcmp(stbi__hdr_gettoken(s,buffer), "#?RADIANCE") != 0)
      return ((float *)(size_t) (stbi__err("not HDR")?0:0));


   for(;;) {
      token = stbi__hdr_gettoken(s,buffer);
      if (token[0] == 0) break;
      if (strcmp(token, "FORMAT=32-bit_rle_rgbe") == 0) valid = 1;
   }

   if (!valid) return ((float *)(size_t) (stbi__err("unsupported format")?0:0));



   token = stbi__hdr_gettoken(s,buffer);
   if (strncmp(token, "-Y ", 3)) return ((float *)(size_t) (stbi__err("unsupported data layout")?0:0));
   token += 3;
   height = (int) strtol(token, &token, 10);
   while (*token == ' ') ++token;
   if (strncmp(token, "+X ", 3)) return ((float *)(size_t) (stbi__err("unsupported data layout")?0:0));
   token += 3;
   width = (int) strtol(token, 0, 10);

   *x = width;
   *y = height;

   if (comp) *comp = 3;
   if (req_comp == 0) req_comp = 3;


   hdr_data = (float *) stbi__malloc(height * width * req_comp * sizeof(float));



   if ( width < 8 || width >= 32768) {

      for (j=0; j < height; ++j) {
         for (i=0; i < width; ++i) {
            stbi_uc rgbe[4];
           main_decode_loop:
            stbi__getn(s, rgbe, 4);
            stbi__hdr_convert(hdr_data + j * width * req_comp + i * req_comp, rgbe, req_comp);
         }
      }
   } else {

      scanline = 0;

      for (j = 0; j < height; ++j) {
         c1 = stbi__get8(s);
         c2 = stbi__get8(s);
         len = stbi__get8(s);
         if (c1 != 2 || c2 != 2 || (len & 0x80)) {


            stbi_uc rgbe[4];
            rgbe[0] = (stbi_uc) c1;
            rgbe[1] = (stbi_uc) c2;
            rgbe[2] = (stbi_uc) len;
            rgbe[3] = (stbi_uc) stbi__get8(s);
            stbi__hdr_convert(hdr_data, rgbe, req_comp);
            i = 1;
            j = 0;
            free(scanline);
            goto main_decode_loop;
         }
         len <<= 8;
         len |= stbi__get8(s);
         if (len != width) { free(hdr_data); free(scanline); return ((float *)(size_t) (stbi__err("invalid decoded scanline length")?0:0)); }
         if (scanline == 0) scanline = (stbi_uc *) stbi__malloc(width * 4);

         for (k = 0; k < 4; ++k) {
            i = 0;
            while (i < width) {
               count = stbi__get8(s);
               if (count > 128) {

                  value = stbi__get8(s);
                  count -= 128;
                  for (z = 0; z < count; ++z)
                     scanline[i++ * 4 + k] = value;
               } else {

                  for (z = 0; z < count; ++z)
                     scanline[i++ * 4 + k] = stbi__get8(s);
               }
            }
         }
         for (i=0; i < width; ++i)
            stbi__hdr_convert(hdr_data+(j*width + i)*req_comp, scanline + i*4, req_comp);
      }
      free(scanline);
   }

   return hdr_data;
}

static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)
{
   char buffer[1024];
   char *token;
   int valid = 0;

   if (stbi__hdr_test(s) == 0) {
       stbi__rewind( s );
       return 0;
   }

   for(;;) {
      token = stbi__hdr_gettoken(s,buffer);
      if (token[0] == 0) break;
      if (strcmp(token, "FORMAT=32-bit_rle_rgbe") == 0) valid = 1;
   }

   if (!valid) {
       stbi__rewind( s );
       return 0;
   }
   token = stbi__hdr_gettoken(s,buffer);
   if (strncmp(token, "-Y ", 3)) {
       stbi__rewind( s );
       return 0;
   }
   token += 3;
   *y = (int) strtol(token, &token, 10);
   while (*token == ' ') ++token;
   if (strncmp(token, "+X ", 3)) {
       stbi__rewind( s );
       return 0;
   }
   token += 3;
   *x = (int) strtol(token, 0, 10);
   *comp = 3;
   return 1;
}



static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)
{
   void *p;
   stbi__bmp_data info;

   info.all_a = 255;
   p = stbi__bmp_parse_header(s, &info);
   stbi__rewind( s );
   if (p == 0)
      return 0;
   *x = s->img_x;
   *y = s->img_y;
   *comp = info.ma ? 4 : 3;
   return 1;
}



static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)
{
   int channelCount;
   if (stbi__get32be(s) != 0x38425053) {
       stbi__rewind( s );
       return 0;
   }
   if (stbi__get16be(s) != 1) {
       stbi__rewind( s );
       return 0;
   }
   stbi__skip(s, 6);
   channelCount = stbi__get16be(s);
   if (channelCount < 0 || channelCount > 16) {
       stbi__rewind( s );
       return 0;
   }
   *y = stbi__get32be(s);
   *x = stbi__get32be(s);
   if (stbi__get16be(s) != 8) {
       stbi__rewind( s );
       return 0;
   }
   if (stbi__get16be(s) != 3) {
       stbi__rewind( s );
       return 0;
   }
   *comp = 4;
   return 1;
}



static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)
{
   int act_comp=0,num_packets=0,chained;
   stbi__pic_packet packets[10];

   if (!stbi__pic_is4(s,"\x53\x80\xF6\x34")) {
      stbi__rewind(s);
      return 0;
   }

   stbi__skip(s, 88);

   *x = stbi__get16be(s);
   *y = stbi__get16be(s);
   if (stbi__at_eof(s)) {
      stbi__rewind( s);
      return 0;
   }
   if ( (*x) != 0 && (1 << 28) / (*x) < (*y)) {
      stbi__rewind( s );
      return 0;
   }

   stbi__skip(s, 8);

   do {
      stbi__pic_packet *packet;

      if (num_packets==sizeof(packets)/sizeof(packets[0]))
         return 0;

      packet = &packets[num_packets++];
      chained = stbi__get8(s);
      packet->size = stbi__get8(s);
      packet->type = stbi__get8(s);
      packet->channel = stbi__get8(s);
      act_comp |= packet->channel;

      if (stbi__at_eof(s)) {
          stbi__rewind( s );
          return 0;
      }
      if (packet->size != 8) {
          stbi__rewind( s );
          return 0;
      }
   } while (chained);

   *comp = (act_comp & 0x10 ? 4 : 3);

   return 1;
}
static int stbi__pnm_test(stbi__context *s)
{
   char p, t;
   p = (char) stbi__get8(s);
   t = (char) stbi__get8(s);
   if (p != 'P' || (t != '5' && t != '6')) {
       stbi__rewind( s );
       return 0;
   }
   return 1;
}

static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   stbi_uc *out;
   if (!stbi__pnm_info(s, (int *)&s->img_x, (int *)&s->img_y, (int *)&s->img_n))
      return 0;
   *x = s->img_x;
   *y = s->img_y;
   *comp = s->img_n;

   out = (stbi_uc *) stbi__malloc(s->img_n * s->img_x * s->img_y);
   if (!out) return ((unsigned char *)(size_t) (stbi__err("outofmem")?0:0));
   stbi__getn(s, out, s->img_n * s->img_x * s->img_y);

   if (req_comp && req_comp != s->img_n) {
      out = stbi__convert_format(out, s->img_n, req_comp, s->img_x, s->img_y);
      if (out == 0) return out;
   }
   return out;
}

static int stbi__pnm_isspace(char c)
{
   return c == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r';
}

static void stbi__pnm_skip_whitespace(stbi__context *s, char *c)
{
   for (;;) {
      while (!stbi__at_eof(s) && stbi__pnm_isspace(*c))
         *c = (char) stbi__get8(s);

      if (stbi__at_eof(s) || *c != '#')
         break;

      while (!stbi__at_eof(s) && *c != '\n' && *c != '\r' )
         *c = (char) stbi__get8(s);
   }
}

static int stbi__pnm_isdigit(char c)
{
   return c >= '0' && c <= '9';
}

static int stbi__pnm_getinteger(stbi__context *s, char *c)
{
   int value = 0;

   while (!stbi__at_eof(s) && stbi__pnm_isdigit(*c)) {
      value = value*10 + (*c - '0');
      *c = (char) stbi__get8(s);
   }

   return value;
}

static int stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)
{
   int maxv;
   char c, p, t;

   stbi__rewind( s );


   p = (char) stbi__get8(s);
   t = (char) stbi__get8(s);
   if (p != 'P' || (t != '5' && t != '6')) {
       stbi__rewind( s );
       return 0;
   }

   *comp = (t == '6') ? 3 : 1;

   c = (char) stbi__get8(s);
   stbi__pnm_skip_whitespace(s, &c);

   *x = stbi__pnm_getinteger(s, &c);
   stbi__pnm_skip_whitespace(s, &c);

   *y = stbi__pnm_getinteger(s, &c);
   stbi__pnm_skip_whitespace(s, &c);

   maxv = stbi__pnm_getinteger(s, &c);

   if (maxv > 255)
      return stbi__err("max value > 255");
   else
      return 1;
}


static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)
{





   if (stbi__png_info(s, x, y, comp)) return 1;



   if (stbi__gif_info(s, x, y, comp)) return 1;



   if (stbi__bmp_info(s, x, y, comp)) return 1;



   if (stbi__psd_info(s, x, y, comp)) return 1;



   if (stbi__pic_info(s, x, y, comp)) return 1;



   if (stbi__pnm_info(s, x, y, comp)) return 1;



   if (stbi__hdr_info(s, x, y, comp)) return 1;




   if (stbi__tga_info(s, x, y, comp))
       return 1;

   return stbi__err("unknown image type");
}
extern int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
{
   stbi__context s;
   stbi__start_mem(&s,buffer,len);
   return stbi__info_main(&s,x,y,comp);
}

extern int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
{
   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *) c, user);
   return stbi__info_main(&s,x,y,comp);
}









namespace Lib_GZ{namespace Gpu{class cGpu;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gpu{namespace Gpu{



}}}


namespace Lib_GZ{namespace Gpu{class cGpuInfo;}}
namespace Lib_GZ{namespace Gpu{class cGpu;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace Gpu{
}
class pGpu {

 public:


};

class cGpu : public Lib_GZ::cClass {

 public:



  gzSp<Lib_GZ::Gpu::cGpuInfo> oGpuInfo;
  cGpu(Lib_GZ::cBase* _parent);
  virtual void Ini_cGpu(gzUIntX _nHandleId, gzBool _bGlobalSharedContext);
  virtual void fLoadImg(gzInt* _aImg, gzInt _nWidth, gzInt _nHeight);
  virtual void fBlit();
  virtual gzBool fContextIni(gzUIntX _nHandleId, gzBool _bGlobalSharedContext);
  virtual gzBool fError(const gzStr& _sError);
  virtual gzBool fFatal(const gzStr& _sError);
  virtual void fClear();

  inline cGpu(const cGpu &_o) : Lib_GZ::cClass(_o), oGpuInfo(){};
  inline cGpu(const cGpu &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), oGpuInfo(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cGpu();

 private:



};
class csGpu : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cGpu> New(Lib_GZ::cBase* _parent, gzUIntX _nHandleId, gzBool _bGlobalSharedContext){
   gzSp<cGpu>_oTemp = gzSp<cGpu>(new cGpu(_parent));
   _oTemp->Ini_cGpu(_nHandleId, _bGlobalSharedContext);
   return _oTemp;
  }




  inline csGpu(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csGpu(){};
};
namespace Gpu{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csGpu((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csGpu> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpu*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpu*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csGpu>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Gpu{
}}}




namespace Lib_GZ{namespace Gpu{class cGpuInfo;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gpu{namespace GpuInfo{



}}}


namespace Lib_GZ{namespace Gpu{class cGpuInfo;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace GpuInfo{
}
class pGpuInfo {

 public:


};

class cGpuInfo : public Lib_GZ::cClass {

 public:



  cGpuInfo(Lib_GZ::cBase* _parent);
  virtual void Ini_cGpuInfo();
  virtual gzBool fIniFunctions();
  virtual gzBool fGetVersion();

  inline cGpuInfo(const cGpuInfo &_o) : Lib_GZ::cClass(_o){};
  inline cGpuInfo(const cGpuInfo &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cGpuInfo();

 private:



};
class csGpuInfo : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cGpuInfo> New(Lib_GZ::cBase* _parent){
   gzSp<cGpuInfo>_oTemp = gzSp<cGpuInfo>(new cGpuInfo(_parent));
   _oTemp->Ini_cGpuInfo();
   return _oTemp;
  }

  gzUInt nVersionMajor;
  gzUInt nVersionMinor;



  inline csGpuInfo(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csGpuInfo(){};
};
namespace GpuInfo{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csGpuInfo((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csGpuInfo> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpuInfo*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpuInfo*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csGpuInfo>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace GpuInfo{
}}}





namespace Lib_GZ{namespace Gfx{class cInterface;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}





namespace Lib_GZ{namespace Sys{class cFrameRate;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}





namespace Lib_GZ{namespace Gfx{class cBuffer;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Gfx{class cBuffer;}}



namespace Lib_GZ{namespace Gfx{namespace Buffer{





 struct eBufferType{
  enum Type {
   Permanent = 0,
   Temporary = 1,
   Direct = 2
  };
  Type t_;inline eBufferType(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eBufferType(){};
 };
}}}





namespace Lib_GZ{namespace Gfx{class cObject;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}





namespace Lib_GZ{namespace Gfx{class cAttribute;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Gfx{class cAttribute;}}



namespace Lib_GZ{namespace Gfx{namespace Attribute{





 struct eRotateOrder{
  enum Type {
   RollYawPitch = 0,
   YawPitchRoll = 1
  };
  Type t_;inline eRotateOrder(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eRotateOrder(){};
 };
}}}





namespace Lib_GZ{namespace Gfx{class cRoot;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Gfx{class cRoot;}}



namespace Lib_GZ{namespace Gfx{namespace Root{





 struct eType{
  enum Type {
   None = 0,
   Tile = 1,
   Img = 2
  };
  Type t_;inline eType(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eType(){};
 };
}}}





namespace Lib_GZ{namespace Gfx{class cDispacher;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gfx{namespace Dispacher{



}}}


namespace Lib_GZ{namespace Gfx{class cObject;}}

namespace Lib_GZ{namespace Gfx{class cBuffer;}}

namespace Lib_GZ{namespace Gfx{class cRoot;}}

namespace Lib_GZ{namespace Gfx{class cDispacher;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Dispacher{
}
class pDispacher {

 public:


};

class cDispacher : public Lib_GZ::cClass {

 public:



  gzQArray<gzSp<Lib_GZ::Gfx::cRoot>> qaChild;
  cDispacher(Lib_GZ::cBase* _parent);
  virtual void Ini_cDispacher();
  virtual void fAddChild(Lib_GZ::Gfx::cRoot* _oObj);
  virtual void fDispatchUpdate();
  virtual void fDispatchRender();
  virtual void fDispatchContextResume();

  inline cDispacher(const cDispacher &_o) : Lib_GZ::cClass(_o), qaChild(){};
  inline cDispacher(const cDispacher &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), qaChild(){};
  virtual ~cDispacher();

 private:



};
class csDispacher : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cDispacher> New(Lib_GZ::cBase* _parent){
   gzSp<cDispacher>_oTemp = gzSp<cDispacher>(new cDispacher(_parent));
   _oTemp->Ini_cDispacher();
   return _oTemp;
  }




  inline csDispacher(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csDispacher(){};
};
namespace Dispacher{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csDispacher((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csDispacher> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csDispacher*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csDispacher*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csDispacher>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Dispacher{
}}}

namespace Lib_GZ{namespace Gfx{namespace Root{



}}}


namespace Lib_GZ{namespace Gfx{class cDispacher;}}

namespace Lib_GZ{namespace Sys{class cWindow;}}

namespace Lib_GZ{namespace Gfx{class cObject;}}

namespace Lib_GZ{namespace Gfx{class cBuffer;}}

namespace Lib_GZ{namespace Gfx{class cInterface;}}

namespace Lib_GZ{namespace Gfx{class cAttribute;}}


namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuObject;}}}

namespace Lib_GZ{namespace Gfx{class cRoot;}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Root{
}
class pRoot {

 public:


};

class cRoot : public Lib_GZ::Gfx::cDispacher {

 public:



  gzWp<Lib_GZ::Gfx::cObject> oParent;
  Lib_GZ::Gfx::Root::eType hType;
  gzBool bFirstSetLimit;
  gzBool bLimitLock;
  gzBool bDeleteReady;
  gzBool bToDelete;
  gzBool bContainer;
  gzInt nParBrRed;
  gzInt nParBrBlue;
  gzInt nParBrGreen;
  gzInt nParAlpha;
  gzInt nParRevRed;
  gzInt nParRevBlue;
  gzInt nParRevGreen;
  gzFloat nParRotation;
  gzFloat nParYaw;
  gzFloat nParPitch;
  gzWp<Lib_GZ::Gfx::cInterface> oItf;
  gzWp<Lib_GZ::Gfx::cBuffer> oDstBuff;
  cRoot(Lib_GZ::cBase* _parent);
  virtual void Ini_cRoot(Lib_GZ::Gfx::cRoot* _oParent);
  virtual void fChangeParent(Lib_GZ::Gfx::cRoot* _oParent, gzBool _bUpdateManually = false);
  virtual void fUpdateChild();
  virtual void fUpdateRoot();
  virtual void fRender();
  virtual void fApplyPos();
  virtual void tDelete();
  virtual void fFinalUpdate();
  virtual void fApplyTransform();
  virtual void fUpdateChildToParent();
  virtual void fUpdateParentToChild();
  virtual void fApplyColor();
  virtual void fContextResume();

  inline cRoot(const cRoot &_o) : Lib_GZ::Gfx::cDispacher(_o), oParent(), hType(), nEventValue(_o.nEventValue), bFirstSetLimit(_o.bFirstSetLimit), bLimitLock(_o.bLimitLock), bDeleteReady(_o.bDeleteReady), bToDelete(_o.bToDelete), bContainer(_o.bContainer), nParBrRed(_o.nParBrRed), nParBrBlue(_o.nParBrBlue), nParBrGreen(_o.nParBrGreen), nParAlpha(_o.nParAlpha), nParRevRed(_o.nParRevRed), nParRevBlue(_o.nParRevBlue), nParRevGreen(_o.nParRevGreen), nParRotation(_o.nParRotation), nParYaw(_o.nParYaw), nParPitch(_o.nParPitch), oItf(), oDstBuff(){};
  inline cRoot(const cRoot &_o, gzBool _b) : Lib_GZ::Gfx::cDispacher(_o, _b), oParent(), hType(), nEventValue(_o.nEventValue), bFirstSetLimit(_o.bFirstSetLimit), bLimitLock(_o.bLimitLock), bDeleteReady(_o.bDeleteReady), bToDelete(_o.bToDelete), bContainer(_o.bContainer), nParBrRed(_o.nParBrRed), nParBrBlue(_o.nParBrBlue), nParBrGreen(_o.nParBrGreen), nParAlpha(_o.nParAlpha), nParRevRed(_o.nParRevRed), nParRevBlue(_o.nParRevBlue), nParRevGreen(_o.nParRevGreen), nParRotation(_o.nParRotation), nParYaw(_o.nParYaw), nParPitch(_o.nParPitch), oItf(), oDstBuff(){};
  virtual ~cRoot();

 private:


  gzInt nEventValue;

};
class csRoot : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cRoot> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cRoot* _oParent){
   gzSp<cRoot>_oTemp = gzSp<cRoot>(new cRoot(_parent));
   _oTemp->Ini_cRoot(_oParent);
   return _oTemp;
  }




  inline csRoot(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csRoot(){};
};
namespace Root{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csRoot((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csRoot> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csRoot*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csRoot*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csRoot>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Root{
}}}

namespace Lib_GZ{namespace Gfx{namespace Attribute{


struct uColor; struct _uColor;
}}}









namespace Lib_GZ{namespace Gfx{class cPixel;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gfx{namespace Pixel{



}}}




namespace Lib_GZ{namespace Gfx{class cShape;}}



namespace Lib_GZ{namespace Gfx{namespace Shape{


 const gzUInt nBorder = 1;



}}}

namespace Lib_GZ{namespace Gfx{class cTriangle; namespace Triangle {struct uPoint3D; struct _uPoint3D; struct uPoint2D; struct _uPoint2D; }}}
namespace Lib_GZ{namespace Base{class cPt;}}
namespace Lib_GZ{namespace Gfx{class cPixel;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Pixel{
}
class pPixel {

 public:

 static void fCopyPixelToDest(gzInt32** _aDest, gzUInt _nPixelClip, gzInt _nX, gzInt _nY);
 static void fGetSmoothPixel(gzInt32** _aSource, gzUInt32 _nLx, gzUInt32 _nTy, gzInt32** _aDest, gzUInt32 _nDestX, gzUInt32 _nDestY, gzUInt32 _nAlpha, gzUInt32 _nPcBrRed, gzUInt32 _nPcBrGreen, gzUInt32 _nPcBrBlue, gzUInt32 _nPcRevRed, gzUInt32 _nPcRevBlue, gzUInt32 _nPcRevGreen, gzUInt32 _nOfRevRed, gzUInt32 _nOfRevBlue, gzUInt32 _nOfRevGreen);
 static void fDrawSegTri(gzInt _nDirX, Lib_GZ::Base::cPt* _oPtT, Lib_GZ::Base::cPt* _oPtL, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtST, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtSL, Lib_GZ::Base::cPt* _oPtSegT, Lib_GZ::Base::cPt* _oPtSegL, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtSegST, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtSegSL, gzInt32** _aDest, gzInt32** _aSource, gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End, gzUInt _nLimW, gzUInt _nLimH, gzInt _nLast, gzUInt _nAlpha, gzUInt _nPcBrRed, gzUInt _nPcBrGreen, gzUInt _nPcBrBlue, gzUInt _nPcRevRed, gzUInt _nPcRevGreen, gzUInt _nPcRevBlue, gzUInt _nOfRevRed, gzUInt _nOfRevBlue, gzUInt _nOfRevGreen, gzInt _nFirst, gzBool _bNothingRight = false);

};

class cPixel : public Lib_GZ::cClass {

 public:



  cPixel(Lib_GZ::cBase* _parent);
  virtual void Ini_cPixel();

  inline cPixel(const cPixel &_o) : Lib_GZ::cClass(_o){};
  inline cPixel(const cPixel &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cPixel();

 private:



};
class csPixel : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cPixel> New(Lib_GZ::cBase* _parent){
   gzSp<cPixel>_oTemp = gzSp<cPixel>(new cPixel(_parent));
   _oTemp->Ini_cPixel();
   return _oTemp;
  }



  virtual void fTestShape(Lib_GZ::Gfx::cShape* _oShape);
  static void fCopyPixelToDest(gzInt32** _aDest, gzUInt _nPixelClip, gzInt _nX, gzInt _nY);
  static void fGetSmoothPixel(gzInt32** _aSource, gzUInt32 _nLx, gzUInt32 _nTy, gzInt32** _aDest, gzUInt32 _nDestX, gzUInt32 _nDestY, gzUInt32 _nAlpha, gzUInt32 _nPcBrRed, gzUInt32 _nPcBrGreen, gzUInt32 _nPcBrBlue, gzUInt32 _nPcRevRed, gzUInt32 _nPcRevBlue, gzUInt32 _nPcRevGreen, gzUInt32 _nOfRevRed, gzUInt32 _nOfRevBlue, gzUInt32 _nOfRevGreen);
  static void fDrawSegTri(gzInt _nDirX, Lib_GZ::Base::cPt* _oPtT, Lib_GZ::Base::cPt* _oPtL, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtST, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtSL, Lib_GZ::Base::cPt* _oPtSegT, Lib_GZ::Base::cPt* _oPtSegL, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtSegST, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtSegSL, gzInt32** _aDest, gzInt32** _aSource, gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End, gzUInt _nLimW, gzUInt _nLimH, gzInt _nLast, gzUInt _nAlpha, gzUInt _nPcBrRed, gzUInt _nPcBrGreen, gzUInt _nPcBrBlue, gzUInt _nPcRevRed, gzUInt _nPcRevGreen, gzUInt _nPcRevBlue, gzUInt _nOfRevRed, gzUInt _nOfRevBlue, gzUInt _nOfRevGreen, gzInt _nFirst, gzBool _bNothingRight = false);
  virtual void fDrawClipSquare(gzInt32** _aDest, gzInt32** _aSource, gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End);

  inline csPixel(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csPixel(){};
};
namespace Pixel{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csPixel((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csPixel> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPixel*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPixel*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csPixel>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Pixel{
}}}




namespace Lib_GZ{namespace Base{class cQuaternion;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}




namespace Lib_GZ{namespace Base{class cVec4;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}




namespace Lib_GZ{namespace Base{class cVec3;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}




namespace Lib_GZ{namespace Base{class cVec2;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Base{namespace Vec2{



}}}



namespace Lib_GZ{namespace Base{class cVec2;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Vec2{
}
class pVec2 {

 public:


};

class cVec2 : public Lib_GZ::cClass {

 public:



  gzFloat nX;
  gzFloat nY;
  cVec2(Lib_GZ::cBase* _parent);
  virtual void Ini_cVec2(gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0));

  inline cVec2(const cVec2 &_o) : Lib_GZ::cClass(_o), nX(_o.nX), nY(_o.nY){};
  inline cVec2(const cVec2 &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), nX(_o.nX), nY(_o.nY){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cVec2();

 private:



};
class csVec2 : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cVec2> New(Lib_GZ::cBase* _parent, gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0)){
   gzSp<cVec2>_oTemp = gzSp<cVec2>(new cVec2(_parent));
   _oTemp->Ini_cVec2(_nX, _nY);
   return _oTemp;
  }




  inline csVec2(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csVec2(){};
};
namespace Vec2{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csVec2((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csVec2> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csVec2*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csVec2*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csVec2>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Vec2{
}}}

namespace Lib_GZ{namespace Base{namespace Vec3{



}}}



namespace Lib_GZ{namespace Base{class cQuaternion;}}
namespace Lib_GZ{namespace Base{class cVec2;}}
namespace Lib_GZ{namespace Base{class cVec3;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Vec3{
}
class pVec3 {

 public:


};

class cVec3 : public Lib_GZ::Base::cVec2 {

 public:



  gzFloat nZ;
  cVec3(Lib_GZ::cBase* _parent);
  virtual void Ini_cVec3(gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0), gzFloat _nZ = gzFloat(0));
  virtual void fCross(Lib_GZ::Base::cVec3* _oOther);
  virtual void fRevCross(Lib_GZ::Base::cVec3* _oOther);
  virtual void fRotate(Lib_GZ::Base::cQuaternion* _oQuat);

  inline cVec3(const cVec3 &_o) : Lib_GZ::Base::cVec2(_o), nZ(_o.nZ){};
  inline cVec3(const cVec3 &_o, gzBool _b) : Lib_GZ::Base::cVec2(_o, _b), nZ(_o.nZ){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cVec3();

 private:



};
class csVec3 : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cVec3> New(Lib_GZ::cBase* _parent, gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0), gzFloat _nZ = gzFloat(0)){
   gzSp<cVec3>_oTemp = gzSp<cVec3>(new cVec3(_parent));
   _oTemp->Ini_cVec3(_nX, _nY, _nZ);
   return _oTemp;
  }




  inline csVec3(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csVec3(){};
};
namespace Vec3{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csVec3((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csVec3> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csVec3*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csVec3*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csVec3>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Vec3{
}}}

namespace Lib_GZ{namespace Base{namespace Vec4{



}}}



namespace Lib_GZ{namespace Base{class cVec3;}}
namespace Lib_GZ{namespace Base{class cVec4;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Vec4{
}
class pVec4 {

 public:


};

class cVec4 : public Lib_GZ::Base::cVec3 {

 public:



  gzFloat nW;
  cVec4(Lib_GZ::cBase* _parent);
  virtual void Ini_cVec4(gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0), gzFloat _nZ = gzFloat(0), gzFloat _nW = gzFloat(0));

  inline cVec4(const cVec4 &_o) : Lib_GZ::Base::cVec3(_o), nW(_o.nW){};
  inline cVec4(const cVec4 &_o, gzBool _b) : Lib_GZ::Base::cVec3(_o, _b), nW(_o.nW){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cVec4();

 private:



};
class csVec4 : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cVec4> New(Lib_GZ::cBase* _parent, gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0), gzFloat _nZ = gzFloat(0), gzFloat _nW = gzFloat(0)){
   gzSp<cVec4>_oTemp = gzSp<cVec4>(new cVec4(_parent));
   _oTemp->Ini_cVec4(_nX, _nY, _nZ, _nW);
   return _oTemp;
  }




  inline csVec4(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csVec4(){};
};
namespace Vec4{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csVec4((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csVec4> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csVec4*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csVec4*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csVec4>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Vec4{
}}}

namespace Lib_GZ{namespace Base{namespace Quaternion{



}}}



namespace Lib_GZ{namespace Base{class cVec4;}}
namespace Lib_GZ{namespace Base{class cQuaternion;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Quaternion{
}
class pQuaternion {

 public:


};

class cQuaternion : public Lib_GZ::Base::cVec4 {

 public:



  cQuaternion(Lib_GZ::cBase* _parent);
  virtual void Ini_cQuaternion();
  virtual void fReset();
  virtual void fRoll(gzFloat _nAngle);
  virtual void fYaw(gzFloat _nAngle);
  virtual void fPitch(gzFloat _nAngle);
  virtual void fCombine(Lib_GZ::Base::cQuaternion* _oOther);

  inline cQuaternion(const cQuaternion &_o) : Lib_GZ::Base::cVec4(_o){};
  inline cQuaternion(const cQuaternion &_o, gzBool _b) : Lib_GZ::Base::cVec4(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cQuaternion();

 private:



};
class csQuaternion : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cQuaternion> New(Lib_GZ::cBase* _parent){
   gzSp<cQuaternion>_oTemp = gzSp<cQuaternion>(new cQuaternion(_parent));
   _oTemp->Ini_cQuaternion();
   return _oTemp;
  }




  inline csQuaternion(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csQuaternion(){};
};
namespace Quaternion{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csQuaternion((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csQuaternion> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csQuaternion*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csQuaternion*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csQuaternion>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Quaternion{
}}}




namespace Lib_GZ{namespace Base{class cPtA;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}




namespace Lib_GZ{namespace Base{class cPt;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Base{namespace Pt{



}}}



namespace Lib_GZ{namespace Base{class cVec3;}}
namespace Lib_GZ{namespace Base{class cPt;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Pt{
}
class pPt {

 public:


};

class cPt : public Lib_GZ::Base::cVec3 {

 public:



  cPt(Lib_GZ::cBase* _parent);
  virtual void Ini_cPt(gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0), gzFloat _nZ = gzFloat(0));

  inline cPt(const cPt &_o) : Lib_GZ::Base::cVec3(_o){};
  inline cPt(const cPt &_o, gzBool _b) : Lib_GZ::Base::cVec3(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cPt();

 private:



};
class csPt : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cPt> New(Lib_GZ::cBase* _parent, gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0), gzFloat _nZ = gzFloat(0)){
   gzSp<cPt>_oTemp = gzSp<cPt>(new cPt(_parent));
   _oTemp->Ini_cPt(_nX, _nY, _nZ);
   return _oTemp;
  }




  inline csPt(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csPt(){};
};
namespace Pt{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csPt((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csPt> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPt*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPt*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csPt>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Pt{
}}}

namespace Lib_GZ{namespace Base{namespace PtA{



}}}





namespace Lib_GZ{namespace Base{class cPtA;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace PtA{
}
class pPtA {

 public:


};

class cPtA : public Lib_GZ::Base::cPt {

 public:



  gzEmbed<Lib_GZ::Base::cPt> oTf;
  gzEmbed<Lib_GZ::Base::cPt> o2d;
  cPtA(Lib_GZ::cBase* _parent);
  virtual void Ini_cPtA(gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0), gzFloat _nZ = gzFloat(0));
  virtual void fCopyToTf();

  inline cPtA(const cPtA &_o) : Lib_GZ::Base::cPt(_o), oTf(_o.oTf), o2d(_o.o2d){};
  inline cPtA(const cPtA &_o, gzBool _b) : Lib_GZ::Base::cPt(_o, _b), oTf(_o.oTf), o2d(_o.o2d){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cPtA();

 private:



};
class csPtA : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cPtA> New(Lib_GZ::cBase* _parent, gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0), gzFloat _nZ = gzFloat(0)){
   gzSp<cPtA>_oTemp = gzSp<cPtA>(new cPtA(_parent));
   _oTemp->Ini_cPtA(_nX, _nY, _nZ);
   return _oTemp;
  }




  inline csPtA(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csPtA(){};
};
namespace PtA{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csPtA((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csPtA> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPtA*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPtA*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csPtA>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace PtA{
}}}

namespace Lib_GZ{namespace Gfx{class cAttribute;}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}
namespace Lib_GZ{namespace Gfx{namespace Attribute{


 namespace Dlg_fRotationOrder1_r_void_p_No{

  class Dlg;typedef const Dlg& DlgP; typedef void(* FpM)(gzDlgWrapM* _w ); typedef void(* FpD)(gzDlgWrapD* _w ); typedef void(* FpP)(void* _oInst ); inline void fDlgEmptyFunction(void* _oInst ){return ;};
   class Dlg { struct _dStD{void* oClass; FpD fCall; };struct _dStM{void* oClass; FpM fCall; };struct _dStP{void* oClass; FpP fCall; };private:Lib_GZ::gzComp_r_void_p_No cfDlg;public:inline Dlg(){ ((_dStD*)&cfDlg)->oClass = 0; ((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}inline Dlg(Lib_GZ::gzComp_r_void_p_No _cfDelegate){ cfDlg = _cfDelegate;}inline Dlg& operator=(Lib_GZ::gzComp_r_void_p_No _cfDelegate){ cfDlg = _cfDelegate; return *this;}inline Lib_GZ::gzComp_r_void_p_No get() const {return cfDlg;} inline gzBool fIsSet(){return true;}inline Dlg(FpD _Func){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)_Func;}inline Dlg(void* _opClass, FpM _Func){((_dStD*)&cfDlg)->oClass = _opClass;((_dStM*)&cfDlg)->fCall = (FpM)_Func;} inline void fReset(){((_dStD*)&cfDlg)->oClass = 0;((_dStD*)&cfDlg)->fCall = (FpD)&fDlgEmptyFunction;}

   inline void fCall(){
    (*((_dStP*)&cfDlg)->fCall)(((gzComp*)&cfDlg)->oClass );
    }
  };
 }


 struct uColor { gzUInt nNbIns; gzFloat nA; gzFloat nR; gzFloat nG; gzFloat nB; };struct _uColor { gzFloat nA; gzFloat nR; gzFloat nG; gzFloat nB; };


 uColor* tNew_uColor();

 void tDel_uColor(void* _oRtu);

 uColor* tAw_uColor(ArrayPtr* _aArray, unsigned int _nIndex);

}
class pAttribute {

 public:


};

class cAttribute : public Lib_GZ::Gfx::cRoot {

 public:





  Lib_GZ::Gfx::Attribute::eRotateOrder hRotateOrder;
  gzFloat nGAttX;
  gzFloat nGAttY;
  gzFloat nGAttZ;
  gzEmbed<Lib_GZ::Base::cPtA> oGblPt;
  gzFloat nGAttRoll;
  gzFloat nGAttYaw;
  gzFloat nGAttPitch;
  gzFloat nGAttWidth;
  gzFloat nGAttHeight;
  gzFloat nGAttLength;
  gzFloat nGAttType;
  gzEmbed<Lib_GZ::Base::cQuaternion> oQuaternion;
  gzFloat nGAttRed;
  gzFloat nGAttGreen;
  gzFloat nGAttBlue;
  gzFloat nGAttAlpha;
  gzBool bUpdateOneTimeColor;
  gzBool bUpdateEasing;
  gzInt nAlpha;
  gzInt nBrRed;
  gzInt nBrBlue;
  gzInt nBrGreen;
  gzInt nRsBrRed;
  gzInt nRsBrBlue;
  gzInt nRsBrGreen;
  gzInt nRsAlpha;
  cAttribute(Lib_GZ::cBase* _parent);
  virtual void Ini_cAttribute(Lib_GZ::Gfx::cRoot* _oParent);
  virtual void WnX(gzFloat _nVal);
  virtual void WnY(gzFloat _nVal);
  virtual void WnZ(gzFloat _nVal);
  virtual void TnX(gzFloat _nVal);
  virtual void TnY(gzFloat _nVal);
  virtual void TnZ(gzFloat _nVal);
  virtual void MnX(gzFloat _nVal);
  virtual void MnY(gzFloat _nVal);
  virtual void MnZ(gzFloat _nVal);
  virtual void LnX(gzFloat _nVal);
  virtual void LnY(gzFloat _nVal);
  virtual void LnZ(gzFloat _nVal);
  virtual void EnX(gzFloat _nSpeed);
  virtual void EnY(gzFloat _nSpeed);
  virtual void EnZ(gzFloat _nSpeed);
  virtual gzFloat GnX();
  virtual gzFloat GnY();
  virtual gzFloat GnZ();
  inline static void wRotationOrder1(gzDlgWrapM* _w){((cAttribute*)_w)->fRotationOrder1();}
  void fRotationOrder1();
  virtual void fRotationOrder2();
  virtual void fRotationOrder3();
  virtual void WnWidth(gzFloat _nVal);
  virtual void WnHeight(gzFloat _nVal);
  virtual void WnLength(gzFloat _nVal);
  virtual void TnWidth(gzFloat _nVal);
  virtual void TnHeight(gzFloat _nVal);
  virtual void TnLength(gzFloat _nVal);
  virtual void MnWidth(gzFloat _nVal);
  virtual void MnHeight(gzFloat _nVal);
  virtual void MnLength(gzFloat _nVal);
  virtual void LnWidth(gzFloat _nVal);
  virtual void LnHeight(gzFloat _nVal);
  virtual void LnLength(gzFloat _nVal);
  virtual void EnWidth(gzFloat _nSpeed);
  virtual void EnHeight(gzFloat _nSpeed);
  virtual void EnLength(gzFloat _nSpeed);
  virtual gzFloat GnWidth();
  virtual gzFloat GnHeight();
  virtual gzFloat GnLength();
  virtual void WnRoll(gzFloat _nVal);
  virtual void WnPitch(gzFloat _nVal);
  virtual void WnYaw(gzFloat _nVal);
  virtual void TnRoll(gzFloat _nVal);
  virtual void TnPitch(gzFloat _nVal);
  virtual void TnYaw(gzFloat _nVal);
  virtual void MnRoll(gzFloat _nVal);
  virtual void MnPitch(gzFloat _nVal);
  virtual void MnYaw(gzFloat _nVal);
  virtual void LnRoll(gzFloat _nVal);
  virtual void LnPitch(gzFloat _nVal);
  virtual void LnYaw(gzFloat _nVal);
  virtual void EnRoll(gzFloat _nSpeed);
  virtual void EnPitch(gzFloat _nSpeed);
  virtual void EnYaw(gzFloat _nSpeed);
  virtual gzFloat GnRoll();
  virtual gzFloat GnPitch();
  virtual gzFloat GnYaw();
  virtual void WnRed(gzFloat _nVal);
  virtual void WnBlue(gzFloat _nVal);
  virtual void WnGreen(gzFloat _nVal);
  virtual void WnAlpha(gzFloat _nVal);
  virtual void TnRed(gzFloat _nVal);
  virtual void TnBlue(gzFloat _nVal);
  virtual void TnGreen(gzFloat _nVal);
  virtual void TnAlpha(gzFloat _nVal);
  virtual void EnRed(gzFloat _nSpeed);
  virtual void EnBlue(gzFloat _nSpeed);
  virtual void EnGreen(gzFloat _nSpeed);
  virtual void EnAlpha(gzFloat _nSpeed);
  virtual gzFloat GnRed();
  virtual gzFloat GnBlue();
  virtual gzFloat GnGreen();
  virtual gzFloat GnAlpha();
  virtual void fApplyColor();
  virtual void fApplyPos();

  inline cAttribute(const cAttribute &_o) : Lib_GZ::Gfx::cRoot(_o), hRotateOrder(), nGAttX(_o.nGAttX), nGAttY(_o.nGAttY), nGAttZ(_o.nGAttZ), oGblPt(_o.oGblPt), nGAttRoll(_o.nGAttRoll), nGAttYaw(_o.nGAttYaw), nGAttPitch(_o.nGAttPitch), nGAttWidth(_o.nGAttWidth), nGAttHeight(_o.nGAttHeight), nGAttLength(_o.nGAttLength), nGAttType(_o.nGAttType), oQuaternion(_o.oQuaternion), nGAttRed(_o.nGAttRed), nGAttGreen(_o.nGAttGreen), nGAttBlue(_o.nGAttBlue), nGAttAlpha(_o.nGAttAlpha), nAttX(_o.nAttX), nAttY(_o.nAttY), nAttZ(_o.nAttZ), nAttRoll(_o.nAttRoll), nAttYaw(_o.nAttYaw), nAttPitch(_o.nAttPitch), nAttWidth(_o.nAttWidth), nAttHeight(_o.nAttHeight), nAttLength(_o.nAttLength), nAttRed(_o.nAttRed), nAttGreen(_o.nAttGreen), nAttBlue(_o.nAttBlue), nAttAlpha(_o.nAttAlpha), nAttWrap(_o.nAttWrap), nAttMove(_o.nAttMove), bUpdateOneTimeColor(_o.bUpdateOneTimeColor), bUpdateEasing(_o.bUpdateEasing), nAlpha(_o.nAlpha), nBrRed(_o.nBrRed), nBrBlue(_o.nBrBlue), nBrGreen(_o.nBrGreen), nRsBrRed(_o.nRsBrRed), nRsBrBlue(_o.nRsBrBlue), nRsBrGreen(_o.nRsBrGreen), nRsAlpha(_o.nRsAlpha), dRotationOrder(){};
  inline cAttribute(const cAttribute &_o, gzBool _b) : Lib_GZ::Gfx::cRoot(_o, _b), hRotateOrder(), nGAttX(_o.nGAttX), nGAttY(_o.nGAttY), nGAttZ(_o.nGAttZ), oGblPt(_o.oGblPt), nGAttRoll(_o.nGAttRoll), nGAttYaw(_o.nGAttYaw), nGAttPitch(_o.nGAttPitch), nGAttWidth(_o.nGAttWidth), nGAttHeight(_o.nGAttHeight), nGAttLength(_o.nGAttLength), nGAttType(_o.nGAttType), oQuaternion(_o.oQuaternion), nGAttRed(_o.nGAttRed), nGAttGreen(_o.nGAttGreen), nGAttBlue(_o.nGAttBlue), nGAttAlpha(_o.nGAttAlpha), nAttX(_o.nAttX), nAttY(_o.nAttY), nAttZ(_o.nAttZ), nAttRoll(_o.nAttRoll), nAttYaw(_o.nAttYaw), nAttPitch(_o.nAttPitch), nAttWidth(_o.nAttWidth), nAttHeight(_o.nAttHeight), nAttLength(_o.nAttLength), nAttRed(_o.nAttRed), nAttGreen(_o.nAttGreen), nAttBlue(_o.nAttBlue), nAttAlpha(_o.nAttAlpha), nAttWrap(_o.nAttWrap), nAttMove(_o.nAttMove), bUpdateOneTimeColor(_o.bUpdateOneTimeColor), bUpdateEasing(_o.bUpdateEasing), nAlpha(_o.nAlpha), nBrRed(_o.nBrRed), nBrBlue(_o.nBrBlue), nBrGreen(_o.nBrGreen), nRsBrRed(_o.nRsBrRed), nRsBrBlue(_o.nRsBrBlue), nRsBrGreen(_o.nRsBrGreen), nRsAlpha(_o.nRsAlpha), dRotationOrder(){};
  virtual ~cAttribute();



  GZ_uEase_gzFloat32 ua_nAttX;
  GZ_uEase_gzFloat32 ua_nAttY;
  GZ_uEase_gzFloat32 ua_nAttZ;
  GZ_uEase_gzFloat32 ua_nAttRoll;
  GZ_uEase_gzFloat32 ua_nAttYaw;
  GZ_uEase_gzFloat32 ua_nAttPitch;
  GZ_uEase_gzFloat32 ua_nAttWidth;
  GZ_uEase_gzFloat32 ua_nAttHeight;
  GZ_uEase_gzFloat32 ua_nAttLength;
  GZ_uEase_gzFloat32 ua_nAttRed;
  GZ_uEase_gzFloat32 ua_nAttGreen;
  GZ_uEase_gzFloat32 ua_nAttBlue;
  GZ_uEase_gzFloat32 ua_nAttAlpha;
  GZ_uEase_gzInt32 ua_nAlpha;
  GZ_uEase_gzInt32 ua_nBrRed;
  GZ_uEase_gzInt32 ua_nBrBlue;
  GZ_uEase_gzInt32 ua_nBrGreen;
 private:


  gzFloat nAttX;
  gzFloat nAttY;
  gzFloat nAttZ;
  gzFloat nAttRoll;
  gzFloat nAttYaw;
  gzFloat nAttPitch;
  gzFloat nAttWidth;
  gzFloat nAttHeight;
  gzFloat nAttLength;
  gzFloat nAttRed;
  gzFloat nAttGreen;
  gzFloat nAttBlue;
  gzFloat nAttAlpha;
  gzUInt nAttWrap;
  gzUInt nAttMove;
  Attribute::Dlg_fRotationOrder1_r_void_p_No::Dlg dRotationOrder;

};
class csAttribute : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cAttribute> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cRoot* _oParent){
   gzSp<cAttribute>_oTemp = gzSp<cAttribute>(new cAttribute(_parent));
   _oTemp->Ini_cAttribute(_oParent);
   return _oTemp;
  }




  inline csAttribute(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csAttribute(){};
};
namespace Attribute{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csAttribute((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csAttribute> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csAttribute*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csAttribute*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csAttribute>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Attribute{
}}}

namespace Lib_GZ{namespace Gfx{namespace Object{



}}}



namespace Lib_GZ{namespace Gfx{class cRoot;}}

namespace Lib_GZ{namespace Gfx{class cAttribute;}}

namespace Lib_GZ{namespace Gfx{class cBuffer;}}


namespace Lib_GZ{namespace Gfx{class cPixel;}}
namespace Lib_GZ{namespace Gfx{class cInterface;}}
namespace Lib_GZ{namespace Gfx{class cObject;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Object{
}
class pObject {

 public:


};

class cObject : public Lib_GZ::Gfx::cAttribute {

 public:



  gzFloat nWidth;
  gzFloat nHeight;
  gzBool bTri;
  gzFloat nShapeWidth;
  gzFloat nShapeHeight;
  gzFloat nDirWidth;
  gzFloat nDirHeight;
  gzFloat nClockwise;
  gzFloat nOriClockwise;
  gzFloat nScaleX;
  gzFloat nScaleY;
  gzInt32** aPixelArray;
  gzInt32** aSourcePixel;
  cObject(Lib_GZ::cBase* _parent);
  virtual void Ini_cObject(Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY);
  virtual void fRender();
  virtual void fDraw();
  virtual gzBool fGpuDraw();
  virtual gzBool fCpuDraw(gzInt nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End);

  inline cObject(const cObject &_o) : Lib_GZ::Gfx::cAttribute(_o), nWidth(_o.nWidth), nHeight(_o.nHeight), bTri(_o.bTri), nShapeWidth(_o.nShapeWidth), nShapeHeight(_o.nShapeHeight), nDirWidth(_o.nDirWidth), nDirHeight(_o.nDirHeight), nClockwise(_o.nClockwise), nOriClockwise(_o.nOriClockwise), nScaleX(_o.nScaleX), nScaleY(_o.nScaleY), aPixelArray(), aSourcePixel(){};
  inline cObject(const cObject &_o, gzBool _b) : Lib_GZ::Gfx::cAttribute(_o, _b), nWidth(_o.nWidth), nHeight(_o.nHeight), bTri(_o.bTri), nShapeWidth(_o.nShapeWidth), nShapeHeight(_o.nShapeHeight), nDirWidth(_o.nDirWidth), nDirHeight(_o.nDirHeight), nClockwise(_o.nClockwise), nOriClockwise(_o.nOriClockwise), nScaleX(_o.nScaleX), nScaleY(_o.nScaleY), aPixelArray(), aSourcePixel(){};
  virtual ~cObject();

 private:



};
class csObject : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cObject> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY){
   gzSp<cObject>_oTemp = gzSp<cObject>(new cObject(_parent));
   _oTemp->Ini_cObject(_oParent, _nX, _nY);
   return _oTemp;
  }




  inline csObject(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csObject(){};
};
namespace Object{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csObject((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csObject> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csObject*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csObject*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csObject>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Object{
}}}

namespace Lib_GZ{namespace Gfx{namespace Buffer{



}}}



namespace Lib_GZ{namespace Gfx{class cRoot;}}

namespace Lib_GZ{namespace Gfx{class cAttribute;}}


namespace Lib_GZ{namespace Gfx{class cPixel;}}
namespace Lib_GZ{namespace Gfx{class cObject;}}
namespace Lib_GZ{namespace Gfx{class cPerspective;}}
namespace Lib_GZ{namespace Gfx{class cInterface;}}
namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuBuffer;}}}

namespace Lib_GZ{namespace Gfx{class cBuffer;}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Buffer{
}
class pBuffer {

 public:


};

class cBuffer : public Lib_GZ::Gfx::cObject {

 public:



  gzUInt nBuffWidth;
  gzUInt nBuffHeight;
  gzSp<Lib_GZ::Gfx::cPerspective> oPerspective;
  gzInt nX;
  gzInt nY;
  gzInt nBuffPLimT;
  gzInt nBuffPLimL;
  gzInt nBuffPLimR;
  gzInt nBuffPLimB;
  gzInt nBuffLimT;
  gzInt nBuffLimL;
  gzInt nBuffLimR;
  gzInt nBuffLimB;
  gzSp<Lib_GZ::Gpu::GpuObj::cGpuBuffer> oGpuObj;
  gzInt32** aBufferArray;
  cBuffer(Lib_GZ::cBase* _parent);
  virtual void Ini_cBuffer(Lib_GZ::Gfx::cRoot* _oParent, gzUInt _nWidth, gzUInt _nHeight, gzBool _bNewPerspective = false);
  virtual void fSetLimit(gzInt _nLimL, gzInt _nLimR, gzInt _nLimT, gzInt _nLimB);

  inline cBuffer(const cBuffer &_o) : Lib_GZ::Gfx::cObject(_o), nBuffWidth(_o.nBuffWidth), nBuffHeight(_o.nBuffHeight), oPerspective(), nX(_o.nX), nY(_o.nY), nBuffPLimT(_o.nBuffPLimT), nBuffPLimL(_o.nBuffPLimL), nBuffPLimR(_o.nBuffPLimR), nBuffPLimB(_o.nBuffPLimB), nBuffLimT(_o.nBuffLimT), nBuffLimL(_o.nBuffLimL), nBuffLimR(_o.nBuffLimR), nBuffLimB(_o.nBuffLimB), oGpuObj(), aBufferArray(){};
  inline cBuffer(const cBuffer &_o, gzBool _b) : Lib_GZ::Gfx::cObject(_o, _b), nBuffWidth(_o.nBuffWidth), nBuffHeight(_o.nBuffHeight), oPerspective(), nX(_o.nX), nY(_o.nY), nBuffPLimT(_o.nBuffPLimT), nBuffPLimL(_o.nBuffPLimL), nBuffPLimR(_o.nBuffPLimR), nBuffPLimB(_o.nBuffPLimB), nBuffLimT(_o.nBuffLimT), nBuffLimL(_o.nBuffLimL), nBuffLimR(_o.nBuffLimR), nBuffLimB(_o.nBuffLimB), oGpuObj(), aBufferArray(){};
  virtual ~cBuffer();

 private:



};
class csBuffer : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cBuffer> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cRoot* _oParent, gzUInt _nWidth, gzUInt _nHeight, gzBool _bNewPerspective = false){
   gzSp<cBuffer>_oTemp = gzSp<cBuffer>(new cBuffer(_parent));
   _oTemp->Ini_cBuffer(_oParent, _nWidth, _nHeight, _bNewPerspective);
   return _oTemp;
  }




  inline csBuffer(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csBuffer(){};
};
namespace Buffer{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csBuffer((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csBuffer> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csBuffer*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csBuffer*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csBuffer>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Buffer{
}}}

namespace Lib_GZ{namespace Sys{namespace FrameRate{



}}}



namespace Lib_GZ{namespace Gfx{class cRoot;}}

namespace Lib_GZ{namespace Gfx{class cGlobalData;}}

namespace Lib_GZ{namespace Gfx{class cBuffer;}}

namespace Lib_GZ{namespace Gfx{class cInterface;}}
namespace Lib_GZ{namespace Sys{class cFrameRate;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace FrameRate{
}
class pFrameRate {

 public:


};

class cFrameRate : public Lib_GZ::Gfx::cBuffer {

 public:



  gzInt nFramePerSecond;
  cFrameRate(Lib_GZ::cBase* _parent);
  virtual void Ini_cFrameRate(Lib_GZ::Gfx::cRoot* _oParent, gzUInt _nWidth, gzUInt _nHeight);
  virtual void fStartProcess();
  virtual void fQuit();
  virtual void ThreadLoop();
  virtual void fBlit();
  virtual void fNewFrame();
  virtual void fIniProcess();

  inline cFrameRate(const cFrameRate &_o) : Lib_GZ::Gfx::cBuffer(_o), nFramePerSecond(_o.nFramePerSecond){};
  inline cFrameRate(const cFrameRate &_o, gzBool _b) : Lib_GZ::Gfx::cBuffer(_o, _b), nFramePerSecond(_o.nFramePerSecond){};
  virtual ~cFrameRate();

 private:



};
class csFrameRate : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cFrameRate> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cRoot* _oParent, gzUInt _nWidth, gzUInt _nHeight){
   gzSp<cFrameRate>_oTemp = gzSp<cFrameRate>(new cFrameRate(_parent));
   _oTemp->Ini_cFrameRate(_oParent, _nWidth, _nHeight);
   return _oTemp;
  }




  inline csFrameRate(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csFrameRate(){};
};
namespace FrameRate{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csFrameRate((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csFrameRate> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csFrameRate*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csFrameRate*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csFrameRate>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace FrameRate{
}}}

namespace Lib_GZ{namespace Gfx{namespace Interface{



}}}







namespace Lib_GZ{namespace Gfx{class cGlobalData;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gfx{namespace GlobalData{



}}}


namespace Lib_GZ{class cLib; namespace Lib {struct uScreen; struct _uScreen; }}
namespace Lib_GZ{namespace Gfx{class cGlobalData;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace GlobalData{
}
class pGlobalData {

 public:


};

class cGlobalData : public Lib_GZ::cClass {

 public:



  cGlobalData(Lib_GZ::cBase* _parent);
  virtual void Ini_cGlobalData();

  inline cGlobalData(const cGlobalData &_o) : Lib_GZ::cClass(_o){};
  inline cGlobalData(const cGlobalData &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cGlobalData();

 private:



};
class csGlobalData : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cGlobalData> New(Lib_GZ::cBase* _parent){
   gzSp<cGlobalData>_oTemp = gzSp<cGlobalData>(new cGlobalData(_parent));
   _oTemp->Ini_cGlobalData();
   return _oTemp;
  }



  virtual void fGetId();
  virtual void fIni();

  gzInt nID;
  gzInt nTotalScreen;
  gzInt nTest;
  inline csGlobalData(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csGlobalData(){};
};
namespace GlobalData{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csGlobalData((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csGlobalData> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGlobalData*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGlobalData*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csGlobalData>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace GlobalData{
}}}





namespace Lib_GZ{class cThread;}




namespace Lib_GZ{namespace Gfx{namespace Clip{class cRectangle;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}





namespace Lib_GZ{namespace Gfx{class cShape;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Gfx{class cShape;}}


namespace Lib_GZ{namespace Gfx{namespace Shape{



}}}



namespace Lib_GZ{namespace Gfx{class cPixel;}}
namespace Lib_GZ{namespace Gfx{class cObject;}}

namespace Lib_GZ{namespace Gfx{class cBuffer;}}

namespace Lib_GZ{namespace Gfx{class cRoot;}}

namespace Lib_GZ{namespace Gfx{class cFace;}}



namespace Lib_GZ{namespace Gfx{namespace Face{


 const gzFloat nFocal = 1.0 / 270.0;
 const gzFloat nBorder = 0.5;



}}}

namespace Lib_GZ{namespace Gfx{class cTriangle; namespace Triangle {struct uPoint3D; struct _uPoint3D; struct uPoint2D; struct _uPoint2D; }}}
namespace Lib_GZ{namespace File{class cRcImg;}}
namespace Lib_GZ{namespace Gfx{class cInterface;}}
namespace Lib_GZ{namespace Base{class cPtA;}}
namespace Lib_GZ{namespace Base{class cPt;}}
namespace Lib_GZ{namespace Base{class cPoly4;}}

namespace Lib_GZ{namespace Gfx{class cShape;}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Shape{
}
class pShape {

 public:


};

class cShape : public Lib_GZ::Gfx::cObject {

 public:



  gzFloat* aPt3dOri;
  gzFloat* aPoint3D;
  gzFloat* aPoint2D;
  gzFloat* aPtSource;
  gzArray<gzSp<Lib_GZ::Base::cPtA>> aNewPt3dOri;
  gzUInt nIndexPt;
  gzUInt nIndexSrc;
  gzSp<Lib_GZ::Gfx::cFace> oFace;
  gzUInt nNbPt;
  gzUInt nNbPt3;
  gzBool bSmoothBorder;
  cShape(Lib_GZ::cBase* _parent);
  virtual void Ini_cShape(Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY, gzUInt _nNbPt = 4, gzBool _bSmoothBorder = true);
  virtual void fAddPt(Lib_GZ::Base::cPtA* _oPt, Lib_GZ::Base::cPt* _oCenter);
  virtual void fCreateFace(Lib_GZ::File::cRcImg* _oRc, Lib_GZ::Base::cPoly4* _oSrc);
  virtual void fFinalUpdate();
  virtual gzBool fGpuDraw();
  virtual gzBool fIsInside();
  virtual gzBool fCpuDraw(gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End);
  virtual void fTransform();
  virtual void fConvertTo2d();
  virtual void fContextResume();

  inline cShape(const cShape &_o) : Lib_GZ::Gfx::cObject(_o), aPt3dOri(), aPoint3D(), aPoint2D(), aPtSource(), aNewPt3dOri(), nIndexPt(_o.nIndexPt), nIndexSrc(_o.nIndexSrc), oFace(), nNbPt(_o.nNbPt), nNbPt3(_o.nNbPt3), bSmoothBorder(_o.bSmoothBorder){};
  inline cShape(const cShape &_o, gzBool _b) : Lib_GZ::Gfx::cObject(_o, _b), aPt3dOri(), aPoint3D(), aPoint2D(), aPtSource(), aNewPt3dOri(), nIndexPt(_o.nIndexPt), nIndexSrc(_o.nIndexSrc), oFace(), nNbPt(_o.nNbPt), nNbPt3(_o.nNbPt3), bSmoothBorder(_o.bSmoothBorder){};
  virtual ~cShape();

 private:



};
class csShape : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cShape> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY, gzUInt _nNbPt = 4, gzBool _bSmoothBorder = true){
   gzSp<cShape>_oTemp = gzSp<cShape>(new cShape(_parent));
   _oTemp->Ini_cShape(_oParent, _nX, _nY, _nNbPt, _bSmoothBorder);
   return _oTemp;
  }




  inline csShape(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csShape(){};
};
namespace Shape{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csShape((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csShape> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csShape*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csShape*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csShape>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Shape{
}}}

namespace Lib_GZ{namespace Gfx{namespace Clip{namespace Rectangle{



}}}}



namespace Lib_GZ{namespace Sys{class cWindow;}}

namespace Lib_GZ{namespace Gfx{class cObject;}}

namespace Lib_GZ{namespace Gfx{class cShape;}}

namespace Lib_GZ{namespace Gfx{class cRoot;}}


namespace Lib_GZ{namespace Gfx{class cPixel;}}

namespace Lib_GZ{namespace Gfx{class cFace;}}

namespace Lib_GZ{namespace Base{class cPtA;}}
namespace Lib_GZ{namespace Base{class cPt;}}
namespace Lib_GZ{namespace Base{class cPoly4;}}
namespace Lib_GZ{namespace Gfx{namespace Clip{class cRectangle;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Clip{namespace Rectangle{
}
class pRectangle {

 public:


};

class cRectangle : public Lib_GZ::Gfx::cShape {

 public:



  gzUInt nSetColor1;
  gzUInt nSetColor2;
  gzUInt nGoColor1;
  gzUInt nGoColor2;
  gzSp<Lib_GZ::Base::cPtA> oPtTL;
  gzSp<Lib_GZ::Base::cPtA> oPtTR;
  gzSp<Lib_GZ::Base::cPtA> oPtBR;
  gzSp<Lib_GZ::Base::cPtA> oPtBL;
  cRectangle(Lib_GZ::cBase* _parent);
  virtual void Ini_cRectangle(Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY, gzFloat _nW, gzFloat _nH, gzUInt _nColor1, gzUInt _nColor2 = 0);
  virtual void fUpdate();
  virtual gzBool fGpuDraw();
  virtual gzBool fCpuDraw(gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End);
  virtual void fSetColor1(gzUInt _nColor);
  virtual void fUpdateLimits();

  inline cRectangle(const cRectangle &_o) : Lib_GZ::Gfx::cShape(_o), nSetColor1(_o.nSetColor1), nSetColor2(_o.nSetColor2), nGoColor1(_o.nGoColor1), nGoColor2(_o.nGoColor2), nS1Red(_o.nS1Red), nS1Blue(_o.nS1Blue), nS1Green(_o.nS1Green), nG1Red(_o.nG1Red), nG1Blue(_o.nG1Blue), nG1Green(_o.nG1Green), nC1Red(_o.nC1Red), nC1Blue(_o.nC1Blue), nC1Green(_o.nC1Green), nC2Red(_o.nC2Red), nC2Blue(_o.nC2Blue), nC2Green(_o.nC2Green), bSolid(_o.bSolid), oPtTL(), oPtTR(), oPtBR(), oPtBL(){};
  inline cRectangle(const cRectangle &_o, gzBool _b) : Lib_GZ::Gfx::cShape(_o, _b), nSetColor1(_o.nSetColor1), nSetColor2(_o.nSetColor2), nGoColor1(_o.nGoColor1), nGoColor2(_o.nGoColor2), nS1Red(_o.nS1Red), nS1Blue(_o.nS1Blue), nS1Green(_o.nS1Green), nG1Red(_o.nG1Red), nG1Blue(_o.nG1Blue), nG1Green(_o.nG1Green), nC1Red(_o.nC1Red), nC1Blue(_o.nC1Blue), nC1Green(_o.nC1Green), nC2Red(_o.nC2Red), nC2Blue(_o.nC2Blue), nC2Green(_o.nC2Green), bSolid(_o.bSolid), oPtTL(), oPtTR(), oPtBR(), oPtBL(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cRectangle();

 private:


  gzInt nS1Red;
  gzInt nS1Blue;
  gzInt nS1Green;
  gzInt nG1Red;
  gzInt nG1Blue;
  gzInt nG1Green;
  gzUInt nC1Red;
  gzUInt nC1Blue;
  gzUInt nC1Green;
  gzUInt nC2Red;
  gzUInt nC2Blue;
  gzUInt nC2Green;
  gzBool bSolid;
  virtual gzUInt fGetPixel(gzInt x, gzInt y);

};
class csRectangle : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cRectangle> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY, gzFloat _nW, gzFloat _nH, gzUInt _nColor1, gzUInt _nColor2 = 0){
   gzSp<cRectangle>_oTemp = gzSp<cRectangle>(new cRectangle(_parent));
   _oTemp->Ini_cRectangle(_oParent, _nX, _nY, _nW, _nH, _nColor1, _nColor2);
   return _oTemp;
  }




  inline csRectangle(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csRectangle(){};
};
namespace Rectangle{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csRectangle((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csRectangle> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csRectangle*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csRectangle*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csRectangle>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Rectangle{
}}}}




namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuBuffer;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}




namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuObject;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuObject{



}}}}


namespace Lib_GZ{namespace Gfx{class cObject;}}
namespace Lib_GZ{namespace Gfx{class cInterface;}}
namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuObject;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuObject{
}
class pGpuObject {

 public:


};

class cGpuObject : public Lib_GZ::cClass {

 public:



  cGpuObject(Lib_GZ::cBase* _parent);
  virtual void Ini_cGpuObject();
  virtual void fIni(Lib_GZ::Gfx::cInterface* _oInterface);
  virtual void fDraw(Lib_GZ::Gfx::cObject* _oSource, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End);

  inline cGpuObject(const cGpuObject &_o) : Lib_GZ::cClass(_o){};
  inline cGpuObject(const cGpuObject &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cGpuObject();

 private:



};
class csGpuObject : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cGpuObject> New(Lib_GZ::cBase* _parent){
   gzSp<cGpuObject>_oTemp = gzSp<cGpuObject>(new cGpuObject(_parent));
   _oTemp->Ini_cGpuObject();
   return _oTemp;
  }




  inline csGpuObject(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csGpuObject(){};
};
namespace GpuObject{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csGpuObject((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csGpuObject> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpuObject*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpuObject*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csGpuObject>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace GpuObject{
}}}}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuBuffer{



}}}}


namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}
namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuObject;}}}
namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuBuffer;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuBuffer{
}
class pGpuBuffer {

 public:


};

class cGpuBuffer : public Lib_GZ::Gpu::GpuObj::cGpuObject {

 public:



  gzInt nId;
  gzWp<Lib_GZ::Gpu::ShaderBase::cProgramShader> oProgram;
  cGpuBuffer(Lib_GZ::cBase* _parent);
  virtual void Ini_cGpuBuffer();

  inline cGpuBuffer(const cGpuBuffer &_o) : Lib_GZ::Gpu::GpuObj::cGpuObject(_o), nId(_o.nId), oProgram(){};
  inline cGpuBuffer(const cGpuBuffer &_o, gzBool _b) : Lib_GZ::Gpu::GpuObj::cGpuObject(_o, _b), nId(_o.nId), oProgram(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cGpuBuffer();

 private:



};
class csGpuBuffer : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cGpuBuffer> New(Lib_GZ::cBase* _parent){
   gzSp<cGpuBuffer>_oTemp = gzSp<cGpuBuffer>(new cGpuBuffer(_parent));
   _oTemp->Ini_cGpuBuffer();
   return _oTemp;
  }




  inline csGpuBuffer(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csGpuBuffer(){};
};
namespace GpuBuffer{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csGpuBuffer((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csGpuBuffer> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpuBuffer*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpuBuffer*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csGpuBuffer>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace GpuBuffer{
}}}}






namespace Lib_GZ{namespace Sys{class cThreadItf;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Sys{namespace ThreadItf{



}}}


namespace Lib_GZ{namespace Sys{class cContext;}}
namespace Lib_GZ{class cThread;}
namespace Lib_GZ{namespace Sys{class cThreadObj;}}
namespace Lib_GZ{namespace Sys{class cThreadItf;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace ThreadItf{
}
class pThreadItf {

 public:


};

class cThreadItf : public Lib_GZ::cThread {

 public:



  gzSp<Lib_GZ::Sys::cContext> oWindow;
  cThreadItf(Lib_GZ::cBase* _parent);
  virtual void Ini_cThreadItf();

  inline cThreadItf(const cThreadItf &_o) : Lib_GZ::cThread(_o), oWindow(){};
  inline cThreadItf(const cThreadItf &_o, gzBool _b) : Lib_GZ::cThread(_o, _b), oWindow(){};
  virtual ~cThreadItf();

 private:



};
class csThreadItf : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cThreadItf> New(Lib_GZ::cBase* _parent){
   gzSp<cThreadItf>_oTemp = gzSp<cThreadItf>(new cThreadItf(_parent));
   _oTemp->Ini_cThreadItf();
   return _oTemp;
  }




  inline csThreadItf(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csThreadItf(){};
};
namespace ThreadItf{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csThreadItf((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csThreadItf> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csThreadItf*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csThreadItf*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csThreadItf>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace ThreadItf{
}}}




namespace Lib_GZ{namespace Input{class cKey;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Input{class cKey;}}


namespace Lib_GZ{namespace Input{namespace Key{



}}}



namespace Lib_GZ{namespace Input{class cKey;}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Input{namespace Key{
}
class pKey {

 public:


};

class cKey : public Lib_GZ::cClass {

 public:



  gzBool* aKeyDown;
  gzBool* aKeyPress;
  gzBool* aKeyRelease;
  cKey(Lib_GZ::cBase* _parent);
  virtual void Ini_cKey();
  virtual gzBool fIsDown(Lib_GZ::Input::Key::eKey _hKey);

  inline cKey(const cKey &_o) : Lib_GZ::cClass(_o), aKeyDown(), aKeyPress(), aKeyRelease(){};
  inline cKey(const cKey &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), aKeyDown(), aKeyPress(), aKeyRelease(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cKey();

 private:



};
class csKey : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cKey> New(Lib_GZ::cBase* _parent){
   gzSp<cKey>_oTemp = gzSp<cKey>(new cKey(_parent));
   _oTemp->Ini_cKey();
   return _oTemp;
  }




  inline csKey(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csKey(){};
};
namespace Key{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csKey((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csKey> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csKey*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csKey*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csKey>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Key{
}}}

namespace Lib_GZ{namespace Gfx{class cInterface;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Interface{
}
class pInterface {

 public:


};

class cInterface : public Lib_GZ::Sys::cFrameRate {

 public:



  gzUInt nTotalFaces;
  gzUInt nTotalBuffers;
  gzSp<Lib_GZ::Sys::cContext> oContext;
  gzFloat nFrameWidth;
  gzFloat nFrameHeight;
  gzFloat nHalfFrameWidth;
  gzFloat nHalfFrameHeight;
  gzEmbed<Lib_GZ::Input::cKey> oKey;
  gzSp<Lib_GZ::Sys::cThreadItf> oThreadItf;
  gzBool bGpuDraw;
  cInterface(Lib_GZ::cBase* _parent);
  virtual void Ini_cInterface(Lib_GZ::Sys::cThreadItf* _oThreadItf, const gzStr& _sWindowName, gzUInt _nWeakWidth, gzUInt _nWeakHeight, gzBool _bTransparent = false, gzInt _nBgColor = gzInt(4294967295));
  virtual void fCreateInterface(gzInt _nPosX = Lib_GZ::Sys::Window::nPosCenter, gzInt _nPosY = Lib_GZ::Sys::Window::nPosCenter, Lib_GZ::Sys::Window::eWinState _hWinState = Lib_GZ::Sys::Window::eWinState::Normal);
  virtual void fNewFrame();
  virtual void fOnClose();
  virtual void fTerminate();
  virtual gzBool fIsWindowReady();
  virtual void fIniProcess();
  virtual void fCpuVSyncOnGpu();
  virtual void fBlit();
  virtual void fWinStart();

  inline cInterface(const cInterface &_o) : Lib_GZ::Sys::cFrameRate(_o), nTotalFaces(_o.nTotalFaces), nTotalBuffers(_o.nTotalBuffers), bSreenCreated(_o.bSreenCreated), nWIntype(_o.nWIntype), sWindowName(_o.sWindowName), oBackground(), oContext(), nFrameWidth(_o.nFrameWidth), nFrameHeight(_o.nFrameHeight), nHalfFrameWidth(_o.nHalfFrameWidth), nHalfFrameHeight(_o.nHalfFrameHeight), oKey(_o.oKey), bWIntransparent(_o.bWIntransparent), nBgColor(_o.nBgColor), oThreadItf(), bGpuDraw(_o.bGpuDraw){};
  inline cInterface(const cInterface &_o, gzBool _b) : Lib_GZ::Sys::cFrameRate(_o, _b), nTotalFaces(_o.nTotalFaces), nTotalBuffers(_o.nTotalBuffers), bSreenCreated(_o.bSreenCreated), nWIntype(_o.nWIntype), sWindowName(_o.sWindowName,_b), oBackground(), oContext(), nFrameWidth(_o.nFrameWidth), nFrameHeight(_o.nFrameHeight), nHalfFrameWidth(_o.nHalfFrameWidth), nHalfFrameHeight(_o.nHalfFrameHeight), oKey(_o.oKey), bWIntransparent(_o.bWIntransparent), nBgColor(_o.nBgColor), oThreadItf(), bGpuDraw(_o.bGpuDraw){};
  virtual ~cInterface();

 private:


  gzBool bSreenCreated;
  gzUInt nWIntype;
  gzStr sWindowName;
  gzSp<Lib_GZ::Gfx::Clip::cRectangle> oBackground;
  gzBool bWIntransparent;
  gzInt nBgColor;

};
class csInterface : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cInterface> New(Lib_GZ::cBase* _parent, Lib_GZ::Sys::cThreadItf* _oThreadItf, const gzStr& _sWindowName, gzUInt _nWeakWidth, gzUInt _nWeakHeight, gzBool _bTransparent = false, gzInt _nBgColor = gzInt(4294967295)){
   gzSp<cInterface>_oTemp = gzSp<cInterface>(new cInterface(_parent));
   _oTemp->Ini_cInterface(_oThreadItf, _sWindowName, _nWeakWidth, _nWeakHeight, _bTransparent, _nBgColor);
   return _oTemp;
  }




  inline csInterface(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csInterface(){};
};
namespace Interface{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csInterface((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csInterface> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csInterface*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csInterface*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csInterface>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Interface{
}}}











namespace Lib_GZ{namespace Gfx{class cPerspective;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gfx{namespace Perspective{



}}}



namespace Lib_GZ{namespace Gfx{class cRoot;}}

namespace Lib_GZ{namespace Gfx{class cAttribute;}}


namespace Lib_GZ{namespace Gfx{class cBuffer;}}

namespace Lib_GZ{namespace Gfx{class cObject;}}
namespace Lib_GZ{namespace Gfx{class cInterface;}}
namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuBuffer;}}}
namespace Lib_GZ{namespace Gfx{class cPerspective;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Perspective{
}
class pPerspective {

 public:


};

class cPerspective : public Lib_GZ::cClass {

 public:



  gzFloat nFocal;
  gzFloat nValue;
  gzFloat nFromX;
  gzFloat nFromY;
  gzInt nType;
  gzWp<Lib_GZ::Gfx::cBuffer> oBuffer;
  cPerspective(Lib_GZ::cBase* _parent);
  virtual void Ini_cPerspective(Lib_GZ::Gfx::cBuffer* _oBuffer, gzFloat _nFocalPc = 50.0, gzBool _bSelf = false);
  virtual void fSetFromPosition(gzFloat _nFromX, gzFloat _nFromY);
  virtual void fSetFromSelf();
  virtual void fSetFromBuffer();
  virtual void fSetFromBufferCenter();
  virtual void fSetFocal(gzFloat _nPcVal);

  inline cPerspective(const cPerspective &_o) : Lib_GZ::cClass(_o), nFocal(_o.nFocal), nValue(_o.nValue), nFromX(_o.nFromX), nFromY(_o.nFromY), nType(_o.nType), oBuffer(){};
  inline cPerspective(const cPerspective &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), nFocal(_o.nFocal), nValue(_o.nValue), nFromX(_o.nFromX), nFromY(_o.nFromY), nType(_o.nType), oBuffer(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cPerspective();

 private:



};
class csPerspective : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cPerspective> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cBuffer* _oBuffer, gzFloat _nFocalPc = 50.0, gzBool _bSelf = false){
   gzSp<cPerspective>_oTemp = gzSp<cPerspective>(new cPerspective(_parent));
   _oTemp->Ini_cPerspective(_oBuffer, _nFocalPc, _bSelf);
   return _oTemp;
  }




  inline csPerspective(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csPerspective(){};
};
namespace Perspective{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csPerspective((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csPerspective> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPerspective*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPerspective*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csPerspective>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Perspective{
}}}





namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace ProgramShader{



}}}}



namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cShaderBase;}}}



namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace ShaderBase{





 struct eGlsl_ES_Version{
  enum Type {
   Auto = 0,
   Custom = 1,
   ES2 = 2,
   ES3 = 3
  };
  Type t_;inline eGlsl_ES_Version(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eGlsl_ES_Version(){};
 };
 struct eType{
  enum Type {
   Vertex = 0,
   Fragment = 1,
   Geometry = 2
  };
  Type t_;inline eType(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eType(){};
 };
}}}}

namespace Lib_GZ{namespace Gpu{namespace Base{class cAttribute;}}}



namespace Lib_GZ{namespace Gpu{namespace Base{namespace Attribute{





 struct eDataType{
  enum Type {
   Float = 0,
   Byte = 1,
   UByte = 2
  };
  Type t_;inline eDataType(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eDataType(){};
 };
}}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cVbo;}}}



namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace Vbo{





 struct eVecType{
  enum Type {
   Vec1 = 0,
   Vec2 = 1,
   Vec3 = 2,
   Vec4 = 3,
   IVec1 = 4,
   IVec2 = 5,
   IVec3 = 6,
   IVec4 = 7
  };
  Type t_;inline eVecType(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eVecType(){};
 };
}}}}

namespace Lib_GZ{namespace Gpu{namespace Base{class cUniform;}}}



namespace Lib_GZ{namespace Gpu{namespace Base{namespace Uniform{





 struct eDataType{
  enum Type {
   Float = 0,
   Byte = 1,
   UByte = 2
  };
  Type t_;inline eDataType(Type t) : t_(t) {}operator Type () const {return t_;}
  inline eDataType(){};
 };
}}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace ProgramShader{
}
class pProgramShader {

 public:


};

class cProgramShader : public Lib_GZ::cClass {

 public:



  gzVal nId;
  gzBool bLinked;
  gzArray<gzSp<Lib_GZ::Gpu::Base::cAttribute>> aAttribute;
  gzArray<gzSp<Lib_GZ::Gpu::Base::cUniform>> aUniform;
  gzArray<gzSp<Lib_GZ::Gpu::ShaderBase::cVbo>> aVbo;
  gzUInt nDefaultAttribDivisor;
  cProgramShader(Lib_GZ::cBase* _parent);
  virtual void Ini_cProgramShader();
  virtual void fLoad();
  virtual void fAttachShader(Lib_GZ::Gpu::ShaderBase::cShaderBase* _oShader);
  virtual gzBool fLink();
  virtual gzBool fUse();
  virtual gzSp<Lib_GZ::Gpu::Base::cAttribute> fAddAttribute(const gzStr& _sName);
  virtual gzSp<Lib_GZ::Gpu::ShaderBase::cVbo> fAddVbo();
  virtual void fSetDefaultAttribDivisor(gzInt _nDefaultAttribDivisor = 0);

  inline cProgramShader(const cProgramShader &_o) : Lib_GZ::cClass(_o), nId(), bLinked(_o.bLinked), aAttribute(), aUniform(), aVbo(), nDefaultAttribDivisor(_o.nDefaultAttribDivisor){};
  inline cProgramShader(const cProgramShader &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), nId(), bLinked(_o.bLinked), aAttribute(), aUniform(), aVbo(), nDefaultAttribDivisor(_o.nDefaultAttribDivisor){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cProgramShader();

 private:



};
class csProgramShader : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cProgramShader> New(Lib_GZ::cBase* _parent){
   gzSp<cProgramShader>_oTemp = gzSp<cProgramShader>(new cProgramShader(_parent));
   _oTemp->Ini_cProgramShader();
   return _oTemp;
  }




  inline csProgramShader(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csProgramShader(){};
};
namespace ProgramShader{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csProgramShader((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csProgramShader> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csProgramShader*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csProgramShader*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csProgramShader>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace ProgramShader{
}}}}





namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cShaderBase;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cShaderBase;}}}


namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace ShaderBase{



}}}}



namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cShaderBase;}}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace ShaderBase{
}
class pShaderBase {

 public:


};

class cShaderBase : public Lib_GZ::cClass {

 public:



  gzStr sSharder;
  gzVal nId;
  gzBool bReady;
  gzUInt nLineError;
  gzUInt nSourceError;
  Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version hGlsl_ES_Version;
  gzStr sLog;
  gzArray<gzStr> aLine;
  Lib_GZ::Gpu::ShaderBase::ShaderBase::eType hType;
  cShaderBase(Lib_GZ::cBase* _parent);
  virtual void Ini_cShaderBase(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version = Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto);
  virtual void fLoad();
  virtual gzBool fSendToGpu(const gzStr& _sShader);
  virtual gzBool fCompile();
  virtual gzStr fGetLog();
  virtual gzStr fGetErrorLine();
  virtual void fAddLine(const gzStr& _sLine);

  inline cShaderBase(const cShaderBase &_o) : Lib_GZ::cClass(_o), sSharder(_o.sSharder), nId(), bReady(_o.bReady), nLineError(_o.nLineError), nSourceError(_o.nSourceError), hGlsl_ES_Version(), sLog(_o.sLog), aLine(), hType(){};
  inline cShaderBase(const cShaderBase &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), sSharder(_o.sSharder,_b), nId(), bReady(_o.bReady), nLineError(_o.nLineError), nSourceError(_o.nSourceError), hGlsl_ES_Version(), sLog(_o.sLog,_b), aLine(), hType(){};
  virtual ~cShaderBase();

 private:



};
class csShaderBase : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cShaderBase> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version = Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto){
   gzSp<cShaderBase>_oTemp = gzSp<cShaderBase>(new cShaderBase(_parent));
   _oTemp->Ini_cShaderBase(_hGlsl_ES_Version);
   return _oTemp;
  }




  inline csShaderBase(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csShaderBase(){};
};
namespace ShaderBase{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csShaderBase((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csShaderBase> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csShaderBase*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csShaderBase*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csShaderBase>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace ShaderBase{
}}}}




namespace Lib_GZ{namespace Gpu{namespace Base{class cAttribute;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Gpu{namespace Base{class cAttribute;}}}


namespace Lib_GZ{namespace Gpu{namespace Base{namespace Attribute{



}}}}



namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cShaderBase;}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}

namespace Lib_GZ{namespace Gpu{namespace Base{class cAttribute;}}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace Base{namespace Attribute{
}
class pAttribute {

 public:


};

class cAttribute : public Lib_GZ::cClass {

 public:



  Lib_GZ::Gpu::Base::Attribute::eDataType hDataType;
  gzVal nId;
  gzStr sName;
  gzBool bValid;
  gzWp<Lib_GZ::Gpu::ShaderBase::cProgramShader> oProgram;
  cAttribute(Lib_GZ::cBase* _parent);
  virtual void Ini_cAttribute(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName);
  virtual void fLoad();
  virtual void fSetOffset();
  virtual void fSetDivisor(gzUInt _nDiv = 1);

  inline cAttribute(const cAttribute &_o) : Lib_GZ::cClass(_o), hDataType(), nId(), sName(_o.sName), bValid(_o.bValid), oProgram(){};
  inline cAttribute(const cAttribute &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), hDataType(), nId(), sName(_o.sName,_b), bValid(_o.bValid), oProgram(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cAttribute();

 private:



};
class csAttribute : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cAttribute> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName){
   gzSp<cAttribute>_oTemp = gzSp<cAttribute>(new cAttribute(_parent));
   _oTemp->Ini_cAttribute(_oProgram, _sName);
   return _oTemp;
  }




  inline csAttribute(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csAttribute(){};
};
namespace Attribute{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csAttribute((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csAttribute> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csAttribute*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csAttribute*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csAttribute>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Attribute{
}}}}




namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cVbo;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cVbo;}}}


namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace Vbo{



}}}}


namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cVbo;}}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace Vbo{
}
class pVbo {

 public:


};

class cVbo : public Lib_GZ::cClass {

 public:



  gzData<gzFloat> aData;
  Lib_GZ::Gpu::ShaderBase::Vbo::eVecType hVecType;
  gzVal nId;
  gzWp<Lib_GZ::Gpu::ShaderBase::cProgramShader> oProgram;
  gzUInt nTotalData;
  cVbo(Lib_GZ::cBase* _parent);
  virtual void Ini_cVbo(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram);
  virtual void fLoad();
  virtual void fSendData();

  inline cVbo(const cVbo &_o) : Lib_GZ::cClass(_o), aData(), hVecType(), nId(), oProgram(), nTotalData(_o.nTotalData){};
  inline cVbo(const cVbo &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), aData(), hVecType(), nId(), oProgram(), nTotalData(_o.nTotalData){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cVbo();

 private:



};
class csVbo : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cVbo> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram){
   gzSp<cVbo>_oTemp = gzSp<cVbo>(new cVbo(_parent));
   _oTemp->Ini_cVbo(_oProgram);
   return _oTemp;
  }




  inline csVbo(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csVbo(){};
};
namespace Vbo{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csVbo((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csVbo> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csVbo*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csVbo*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csVbo>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Vbo{
}}}}





namespace Lib_GZ{namespace Gpu{namespace Base{class cUniform;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Gpu{namespace Base{class cUniform;}}}


namespace Lib_GZ{namespace Gpu{namespace Base{namespace Uniform{



}}}}



namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cShaderBase;}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}

namespace Lib_GZ{namespace Gpu{namespace Base{class cUniform;}}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace Base{namespace Uniform{
}
class pUniform {

 public:


};

class cUniform : public Lib_GZ::cClass {

 public:



  Lib_GZ::Gpu::Base::Uniform::eDataType hDataType;
  gzVal nId;
  gzStr sName;
  gzBool bValid;
  gzWp<Lib_GZ::Gpu::ShaderBase::cProgramShader> oProgram;
  cUniform(Lib_GZ::cBase* _parent);
  virtual void Ini_cUniform(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName);
  virtual void fLoad();
  virtual void fSend();

  inline cUniform(const cUniform &_o) : Lib_GZ::cClass(_o), hDataType(), nId(), sName(_o.sName), bValid(_o.bValid), oProgram(){};
  inline cUniform(const cUniform &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), hDataType(), nId(), sName(_o.sName,_b), bValid(_o.bValid), oProgram(){};
  virtual ~cUniform();

 private:



};
class csUniform : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cUniform> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName){
   gzSp<cUniform>_oTemp = gzSp<cUniform>(new cUniform(_parent));
   _oTemp->Ini_cUniform(_oProgram, _sName);
   return _oTemp;
  }




  inline csUniform(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csUniform(){};
};
namespace Uniform{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csUniform((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csUniform> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csUniform*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csUniform*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csUniform>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Uniform{
}}}}





namespace Lib_GZ{namespace Gfx{class cFace;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Gfx{class cFace;}}


namespace Lib_GZ{namespace Gfx{namespace Face{



}}}



namespace Lib_GZ{namespace Gfx{class cShape;}}

namespace Lib_GZ{namespace Gfx{class cRoot;}}

namespace Lib_GZ{namespace Gfx{class cTriangle; namespace Triangle {struct uPoint3D; struct _uPoint3D; struct uPoint2D; struct _uPoint2D; }}}
namespace Lib_GZ{namespace Gfx{class cObject;}}
namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuFace;}}}

namespace Lib_GZ{namespace File{class cRcImg;}}
namespace Lib_GZ{namespace Base{class cPtA;}}
namespace Lib_GZ{namespace Base{class cPoly4;}}

namespace Lib_GZ{namespace Gfx{class cFace;}}

namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Face{
}
class pFace {

 public:


};

class cFace : public Lib_GZ::cClass {

 public:



  gzSp<Lib_GZ::Base::cPtA> oPt1;
  gzSp<Lib_GZ::Base::cPtA> oPt2;
  gzSp<Lib_GZ::Base::cPtA> oPt3;
  gzSp<Lib_GZ::Base::cPtA> oPt4;
  gzUInt nPt1;
  gzUInt nPt2;
  gzUInt nPt3;
  gzUInt nPt4;
  gzSp<Lib_GZ::Gpu::GpuObj::cGpuFace> oGpuObj;
  gzSp<Lib_GZ::File::cRcImg> oRc;
  gzWp<Lib_GZ::Gfx::cShape> oShape;
  gzFloat* aPtSource;
  gzFloat* aPoint2D;
  Lib_GZ::Gfx::Triangle::_uPoint3D* rPtS1;
  Lib_GZ::Gfx::Triangle::_uPoint3D* rPtS2;
  Lib_GZ::Gfx::Triangle::_uPoint3D* rPtS3;
  Lib_GZ::Gfx::Triangle::_uPoint3D* rPtS4;
  gzInt32** aPixelArray;
  cFace(Lib_GZ::cBase* _parent);
  virtual void Ini_cFace(Lib_GZ::Gfx::cShape* _oShape, Lib_GZ::File::cRcImg* _oRc, Lib_GZ::Base::cPtA* _oPt1, Lib_GZ::Base::cPtA* _oPt2, Lib_GZ::Base::cPtA* _oPt3, Lib_GZ::Base::cPtA* _oPt4, gzFloat* _aPoint2D, Lib_GZ::Base::cPoly4* _oSrc);
  virtual gzBool fGpuDraw();
  virtual gzBool fCpuDraw(Lib_GZ::Gfx::cObject* _oDest, gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End, gzUInt _nRsAlpha, gzUInt _nRsBrRed, gzUInt _nRsBrGreen, gzUInt _nRsBrBlue, gzUInt _nRsRevRed, gzUInt _nRsRevBlue, gzUInt _nRsRevGreen, gzUInt _nOfRevRed, gzUInt _nOfRevBlue, gzUInt _nOfRevGreen);

  inline cFace(const cFace &_o) : Lib_GZ::cClass(_o), oPt1(), oPt2(), oPt3(), oPt4(), nPt1(_o.nPt1), nPt2(_o.nPt2), nPt3(_o.nPt3), nPt4(_o.nPt4), oGpuObj(), oRc(), oShape(), aPtSource(), aPoint2D(), rPtS1(), rPtS2(), rPtS3(), rPtS4(), aPixelArray(){};
  inline cFace(const cFace &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), oPt1(), oPt2(), oPt3(), oPt4(), nPt1(_o.nPt1), nPt2(_o.nPt2), nPt3(_o.nPt3), nPt4(_o.nPt4), oGpuObj(), oRc(), oShape(), aPtSource(), aPoint2D(), rPtS1(), rPtS2(), rPtS3(), rPtS4(), aPixelArray(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cFace();

 private:



};
class csFace : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cFace> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cShape* _oShape, Lib_GZ::File::cRcImg* _oRc, Lib_GZ::Base::cPtA* _oPt1, Lib_GZ::Base::cPtA* _oPt2, Lib_GZ::Base::cPtA* _oPt3, Lib_GZ::Base::cPtA* _oPt4, gzFloat* _aPoint2D, Lib_GZ::Base::cPoly4* _oSrc){
   gzSp<cFace>_oTemp = gzSp<cFace>(new cFace(_parent));
   _oTemp->Ini_cFace(_oShape, _oRc, _oPt1, _oPt2, _oPt3, _oPt4, _aPoint2D, _oSrc);
   return _oTemp;
  }




  inline csFace(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csFace(){};
};
namespace Face{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csFace((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csFace> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csFace*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csFace*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csFace>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Face{
}}}




namespace Lib_GZ{namespace Gfx{class cTriangle;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gfx{namespace Triangle{


struct uPoint3D; struct _uPoint3D; struct uPoint2D; struct _uPoint2D;
}}}



namespace Lib_GZ{namespace Gfx{class cPixel;}}

namespace Lib_GZ{namespace Gfx{class cShape;}}

namespace Lib_GZ{namespace Gfx{class cObject;}}
namespace Lib_GZ{namespace Base{class cPt;}}
namespace Lib_GZ{namespace Gfx{class cTriangle; namespace Triangle {struct uPoint3D; struct _uPoint3D; struct uPoint2D; struct _uPoint2D; }}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Triangle{



 struct uPoint3D { gzUInt nNbIns; gzFloat nX; gzFloat nY; gzFloat nZ; };struct _uPoint3D { gzFloat nX; gzFloat nY; gzFloat nZ; };
 struct uPoint2D { gzUInt nNbIns; gzFloat nX; gzFloat nY; };struct _uPoint2D { gzFloat nX; gzFloat nY; };


 uPoint3D* tNew_uPoint3D();
 uPoint2D* tNew_uPoint2D();

 void tDel_uPoint3D(void* _oRtu);
 void tDel_uPoint2D(void* _oRtu);

 uPoint3D* tAw_uPoint3D(ArrayPtr* _aArray, unsigned int _nIndex);
 uPoint2D* tAw_uPoint2D(ArrayPtr* _aArray, unsigned int _nIndex);

}
class pTriangle {

 public:


};

class cTriangle : public Lib_GZ::cClass {

 public:



  gzInt nLimitSourceWidth;
  gzInt nLimitSourceHeight;
  gzInt nDrawDir;
  gzFloat* aPtA;
  gzFloat* aPtB;
  gzFloat* aPtC;
  gzFloat* aPtT;
  gzFloat* aPtM;
  gzFloat* aPtL;
  gzFloat* aPtSA;
  gzFloat* aPtSB;
  gzFloat* aPtSC;
  gzFloat* aPtST;
  gzFloat* aPtSM;
  gzFloat* aPtSL;
  gzSp<Lib_GZ::Base::cPt> oPtA;
  gzSp<Lib_GZ::Base::cPt> oPtB;
  gzSp<Lib_GZ::Base::cPt> oPtC;
  gzSp<Lib_GZ::Base::cPt> oPtT;
  gzSp<Lib_GZ::Base::cPt> oPtM;
  gzSp<Lib_GZ::Base::cPt> oPtL;
  gzBool bOneSeg;
  cTriangle(Lib_GZ::cBase* _parent);
  virtual void Ini_cTriangle(gzFloat* _oPtA, gzFloat* _oPtB, gzFloat* _oPtC, gzFloat* _aPtSA, gzFloat* _aPtSB, gzFloat* _aPtSC);

  inline cTriangle(const cTriangle &_o) : Lib_GZ::cClass(_o), nLimitSourceWidth(_o.nLimitSourceWidth), nLimitSourceHeight(_o.nLimitSourceHeight), nDrawDir(_o.nDrawDir), aPtA(), aPtB(), aPtC(), aPtT(), aPtM(), aPtL(), aPtSA(), aPtSB(), aPtSC(), aPtST(), aPtSM(), aPtSL(), oPtA(), oPtB(), oPtC(), oPtT(), oPtM(), oPtL(), bOneSeg(_o.bOneSeg){};
  inline cTriangle(const cTriangle &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), nLimitSourceWidth(_o.nLimitSourceWidth), nLimitSourceHeight(_o.nLimitSourceHeight), nDrawDir(_o.nDrawDir), aPtA(), aPtB(), aPtC(), aPtT(), aPtM(), aPtL(), aPtSA(), aPtSB(), aPtSC(), aPtST(), aPtSM(), aPtSL(), oPtA(), oPtB(), oPtC(), oPtT(), oPtM(), oPtL(), bOneSeg(_o.bOneSeg){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cTriangle();

 private:



};
class csTriangle : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cTriangle> New(Lib_GZ::cBase* _parent, gzFloat* _oPtA, gzFloat* _oPtB, gzFloat* _oPtC, gzFloat* _aPtSA, gzFloat* _aPtSB, gzFloat* _aPtSC){
   gzSp<cTriangle>_oTemp = gzSp<cTriangle>(new cTriangle(_parent));
   _oTemp->Ini_cTriangle(_oPtA, _oPtB, _oPtC, _aPtSA, _aPtSB, _aPtSC);
   return _oTemp;
  }



  virtual gzFloat fFindXFromLinePt(Lib_GZ::Base::cPt* _oPt1, Lib_GZ::Base::cPt* _oPt2, gzFloat _nY);
  virtual gzFloat fFindAngle(Lib_GZ::Base::cPt* _oPt1, Lib_GZ::Base::cPt* _oPt2);
  virtual void fDraw(Lib_GZ::Base::cPt* _oPtA, Lib_GZ::Base::cPt* _oPtB, Lib_GZ::Base::cPt* _oPtC, Lib_GZ::Gfx::Triangle::_uPoint3D* _aPtSA, Lib_GZ::Gfx::Triangle::_uPoint3D* _aPtSB, Lib_GZ::Gfx::Triangle::_uPoint3D* _aPtSC, gzInt _nPosX, gzInt _nPosY, gzInt32** _aPixelArray, gzUInt _nSWidth, gzUInt _nSHeight, Lib_GZ::Gfx::cObject* _oSource, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End, gzUInt _nRsAlpha, gzUInt _nRsBrRed, gzUInt _nRsBrGreen, gzUInt _nRsBrBlue, gzUInt _nRsRevRed, gzUInt _nRsRevBlue, gzUInt _nRsRevGreen, gzUInt _nOfRevRed, gzUInt _nOfRevBlue, gzUInt _nOfRevGreen, gzBool _bNothingRight = false);

  inline csTriangle(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csTriangle(){};
};
namespace Triangle{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csTriangle((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csTriangle> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csTriangle*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csTriangle*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csTriangle>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Triangle{
}}}









namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuFace;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuFace{



}}}}



namespace Lib_GZ{namespace Gfx{class cFace;}}

namespace Lib_GZ{namespace Gfx{class cBuffer;}}

namespace Lib_GZ{namespace File{class cRcImg;}}
namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuFace;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuFace{
}
class pGpuFace {

 public:


};

class cGpuFace : public Lib_GZ::cClass {

 public:



  cGpuFace(Lib_GZ::cBase* _parent);
  virtual void Ini_cGpuFace();
  virtual void fIni(Lib_GZ::Gfx::cFace* _oFace);
  virtual void fDraw(Lib_GZ::Gfx::cBuffer* _oSource, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End);
  virtual void fSetImg(Lib_GZ::File::cRcImg* _oRc);

  inline cGpuFace(const cGpuFace &_o) : Lib_GZ::cClass(_o){};
  inline cGpuFace(const cGpuFace &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cGpuFace();

 private:



};
class csGpuFace : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cGpuFace> New(Lib_GZ::cBase* _parent){
   gzSp<cGpuFace>_oTemp = gzSp<cGpuFace>(new cGpuFace(_parent));
   _oTemp->Ini_cGpuFace();
   return _oTemp;
  }




  inline csGpuFace(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csGpuFace(){};
};
namespace GpuFace{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csGpuFace((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csGpuFace> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpuFace*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpuFace*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csGpuFace>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace GpuFace{
}}}}









namespace Lib_GZ{namespace Base{class cPoly4;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Base{namespace Poly4{



}}}


namespace Lib_GZ{namespace Base{class cPt;}}

namespace Lib_GZ{namespace Base{class cPoly4;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Poly4{
}
class pPoly4 {

 public:


};

class cPoly4 : public Lib_GZ::cClass {

 public:



  gzSp<Lib_GZ::Base::cPt> oPt1;
  gzSp<Lib_GZ::Base::cPt> oPt2;
  gzSp<Lib_GZ::Base::cPt> oPt3;
  gzSp<Lib_GZ::Base::cPt> oPt4;
  cPoly4(Lib_GZ::cBase* _parent);
  virtual void Ini_cPoly4(Lib_GZ::Base::cPt* _oPt1, Lib_GZ::Base::cPt* _oPt2, Lib_GZ::Base::cPt* _oPt3, Lib_GZ::Base::cPt* _oPt4);

  inline cPoly4(const cPoly4 &_o) : Lib_GZ::cClass(_o), oPt1(), oPt2(), oPt3(), oPt4(){};
  inline cPoly4(const cPoly4 &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), oPt1(), oPt2(), oPt3(), oPt4(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cPoly4();

 private:



};
class csPoly4 : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cPoly4> New(Lib_GZ::cBase* _parent, Lib_GZ::Base::cPt* _oPt1, Lib_GZ::Base::cPt* _oPt2, Lib_GZ::Base::cPt* _oPt3, Lib_GZ::Base::cPt* _oPt4){
   gzSp<cPoly4>_oTemp = gzSp<cPoly4>(new cPoly4(_parent));
   _oTemp->Ini_cPoly4(_oPt1, _oPt2, _oPt3, _oPt4);
   return _oTemp;
  }




  inline csPoly4(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csPoly4(){};
};
namespace Poly4{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csPoly4((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csPoly4> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPoly4*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPoly4*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csPoly4>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Poly4{
}}}









namespace Lib_GZ{namespace Sys{namespace Message{class cContextCreated;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Sys{namespace Message{namespace ContextCreated{



}}}}


namespace Lib_GZ{namespace Sys{class cContext;}}

namespace Lib_GZ{namespace Sys{class cWindow;}}

namespace Lib_GZ{namespace Sys{class cContextHandle;}}
namespace Lib_GZ{namespace Base{class cDim;}}
namespace Lib_GZ{namespace Base{class cPt;}}
namespace Lib_GZ{namespace Sys{namespace Message{class cContextCreated;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace Message{namespace ContextCreated{
}
class pContextCreated {

 public:


};

class cContextCreated : public Lib_GZ::cThreadMsg {

 public:



  gzUIntX nHandleId;
  gzUIntX nDrawZoneAdr;
  gzBool bGpuDraw;
  gzGate<Lib_GZ::cThreadMsg> gContextHandle;
  cContextCreated(Lib_GZ::cBase* _parent);
  virtual void Ini_cContextCreated(gzUInt _nHandleId, gzGate<Lib_GZ::cThreadMsg> _gContextHandle, gzUIntX _nDrawZoneAdr, gzBool _bGpuDraw = false);
  virtual void fRun();

  inline cContextCreated(const cContextCreated &_o) : Lib_GZ::cThreadMsg(_o), nHandleId(_o.nHandleId), nDrawZoneAdr(_o.nDrawZoneAdr), bGpuDraw(_o.bGpuDraw), gContextHandle(_o.gContextHandle){};
  inline cContextCreated(const cContextCreated &_o, gzBool _b) : Lib_GZ::cThreadMsg(_o, _b), nHandleId(_o.nHandleId), nDrawZoneAdr(_o.nDrawZoneAdr), bGpuDraw(_o.bGpuDraw), gContextHandle(_o.gContextHandle){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cContextCreated();

 private:



};
class csContextCreated : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cContextCreated> New(Lib_GZ::cBase* _parent, gzUInt _nHandleId, gzGate<Lib_GZ::cThreadMsg> _gContextHandle, gzUIntX _nDrawZoneAdr, gzBool _bGpuDraw = false){
   gzSp<cContextCreated>_oTemp = gzSp<cContextCreated>(new cContextCreated(_parent));
   _oTemp->Ini_cContextCreated(_nHandleId, _gContextHandle, _nDrawZoneAdr, _bGpuDraw);
   return _oTemp;
  }




  inline csContextCreated(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csContextCreated(){};
};
namespace ContextCreated{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csContextCreated((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csContextCreated> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csContextCreated*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csContextCreated*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csContextCreated>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace ContextCreated{
}}}}




namespace Lib_GZ{namespace Sys{class cContextHandle;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Sys{namespace ContextHandle{



}}}


namespace Lib_GZ{namespace Sys{namespace Message{class cContextLink;}}}
namespace Lib_GZ{namespace Gpu{class cGpu;}}
namespace Lib_GZ{namespace Sys{class cContextHandle;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace ContextHandle{
}
class pContextHandle {

 public:


};

class cContextHandle : public Lib_GZ::cClass {

 public:



  gzWp<Lib_GZ::Sys::Message::cContextLink> oLink;
  gzInt32* aHandleDrawZone;
  gzGate<Lib_GZ::cThreadMsg> gAction;
  gzUInt nFrameWidth;
  gzUInt nFrameHeight;
  gzUIntX nHandleId;
  gzUIntX nWinHandleId;
  gzSp<Lib_GZ::Gpu::cGpu> oGpu;
  cContextHandle(Lib_GZ::cBase* _parent);
  virtual void Ini_cContextHandle(Lib_GZ::Sys::Message::cContextLink* _oLink);
  virtual void fUpdate();
  virtual gzBool fCreateContextHandle();
  virtual gzInt32* fIniPixelDrawZone();
  virtual gzUIntX fBlit();
  virtual gzUIntX fGpuBlit();

  inline cContextHandle(const cContextHandle &_o) : Lib_GZ::cClass(_o), oLink(), aHandleDrawZone(), gAction(_o.gAction), nFrameWidth(_o.nFrameWidth), nFrameHeight(_o.nFrameHeight), nHandleId(_o.nHandleId), nWinHandleId(_o.nWinHandleId), oGpu(){};
  inline cContextHandle(const cContextHandle &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), oLink(), aHandleDrawZone(), gAction(_o.gAction), nFrameWidth(_o.nFrameWidth), nFrameHeight(_o.nFrameHeight), nHandleId(_o.nHandleId), nWinHandleId(_o.nWinHandleId), oGpu(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cContextHandle();

 private:



};
class csContextHandle : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cContextHandle> New(Lib_GZ::cBase* _parent, Lib_GZ::Sys::Message::cContextLink* _oLink){
   gzSp<cContextHandle>_oTemp = gzSp<cContextHandle>(new cContextHandle(_parent));
   _oTemp->Ini_cContextHandle(_oLink);
   return _oTemp;
  }




  inline csContextHandle(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csContextHandle(){};
};
namespace ContextHandle{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csContextHandle((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csContextHandle> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csContextHandle*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csContextHandle*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csContextHandle>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace ContextHandle{
}}}




namespace Lib_GZ{namespace Sys{namespace Message{class cContextLink;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Sys{namespace Message{namespace ContextLink{



}}}}










namespace Lib_GZ{namespace Base{class cDim;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Base{namespace Dim{



}}}



namespace Lib_GZ{namespace Base{class cVec3;}}
namespace Lib_GZ{namespace Base{class cDim;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Dim{
}
class pDim {

 public:


};

class cDim : public Lib_GZ::Base::cVec3 {

 public:



  gzFloat nWidth;
  gzFloat nHeight;
  gzFloat nLength;
  cDim(Lib_GZ::cBase* _parent);
  virtual void Ini_cDim(gzFloat _nWidth = gzFloat(0), gzFloat _nHeight = gzFloat(0), gzFloat _nLength = gzFloat(0));

  inline cDim(const cDim &_o) : Lib_GZ::Base::cVec3(_o), nWidth(_o.nWidth), nHeight(_o.nHeight), nLength(_o.nLength){};
  inline cDim(const cDim &_o, gzBool _b) : Lib_GZ::Base::cVec3(_o, _b), nWidth(_o.nWidth), nHeight(_o.nHeight), nLength(_o.nLength){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cDim();

 private:



};
class csDim : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cDim> New(Lib_GZ::cBase* _parent, gzFloat _nWidth = gzFloat(0), gzFloat _nHeight = gzFloat(0), gzFloat _nLength = gzFloat(0)){
   gzSp<cDim>_oTemp = gzSp<cDim>(new cDim(_parent));
   _oTemp->Ini_cDim(_nWidth, _nHeight, _nLength);
   return _oTemp;
  }




  inline csDim(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csDim(){};
};
namespace Dim{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csDim((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csDim> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csDim*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csDim*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csDim>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Dim{
}}}


namespace Lib_GZ{namespace Sys{namespace Message{class cContextLink;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace Message{namespace ContextLink{
}
class pContextLink {

 public:


};

class cContextLink : public Lib_GZ::cThreadMsg {

 public:



  gzBool bGpuDraw;
  gzStr sName;
  gzBool bTransparent;
  gzBool bBorder;
  Lib_GZ::Sys::Window::eWinBorder hBorder;
  gzSp<Lib_GZ::Sys::cContextHandle> oHandle;
  gzEmbed<Lib_GZ::Base::cDim> oDim;
  gzEmbed<Lib_GZ::Base::cPt> oPos;
  gzGate<Lib_GZ::cThreadMsg> gFrom;
  gzStr sIcon;
  gzBool bCloseBox;
  gzUIntX nHandleId;
  cContextLink(Lib_GZ::cBase* _parent);
  virtual void Ini_cContextLink(const gzStr& _sName, Lib_GZ::Base::cPt* _oPos, Lib_GZ::Base::cDim* _oDimention, gzBool _bGpuDraw = false);
  virtual void fRun();
  virtual void fCreateContext();
  virtual void fIniDrawZone();
  virtual void fSendMsg(Lib_GZ::cThreadMsg* _oMsg);

  inline cContextLink(const cContextLink &_o) : Lib_GZ::cThreadMsg(_o), bGpuDraw(_o.bGpuDraw), sName(_o.sName), bTransparent(_o.bTransparent), bBorder(_o.bBorder), hBorder(), oHandle(), oDim(_o.oDim), oPos(_o.oPos), gFrom(_o.gFrom), sIcon(_o.sIcon), bCloseBox(_o.bCloseBox), nHandleId(_o.nHandleId){};
  inline cContextLink(const cContextLink &_o, gzBool _b) : Lib_GZ::cThreadMsg(_o, _b), bGpuDraw(_o.bGpuDraw), sName(_o.sName,_b), bTransparent(_o.bTransparent), bBorder(_o.bBorder), hBorder(), oHandle(), oDim(_o.oDim), oPos(_o.oPos), gFrom(_o.gFrom), sIcon(_o.sIcon,_b), bCloseBox(_o.bCloseBox), nHandleId(_o.nHandleId){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cContextLink();

 private:



};
class csContextLink : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cContextLink> New(Lib_GZ::cBase* _parent, const gzStr& _sName, Lib_GZ::Base::cPt* _oPos, Lib_GZ::Base::cDim* _oDimention, gzBool _bGpuDraw = false){
   gzSp<cContextLink>_oTemp = gzSp<cContextLink>(new cContextLink(_parent));
   _oTemp->Ini_cContextLink(_sName, _oPos, _oDimention, _bGpuDraw);
   return _oTemp;
  }




  inline csContextLink(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csContextLink(){};
};
namespace ContextLink{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csContextLink((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csContextLink> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csContextLink*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csContextLink*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csContextLink>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace ContextLink{
}}}}





namespace Lib_GZ{namespace Sys{namespace Message{class cMousePos;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Sys{namespace Message{namespace MousePos{



}}}}


namespace Lib_GZ{namespace Sys{namespace Message{class cMousePos;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace Message{namespace MousePos{
}
class pMousePos {

 public:


};

class cMousePos : public Lib_GZ::cThreadMsg {

 public:



  gzInt nPosX;
  gzInt nPosY;
  cMousePos(Lib_GZ::cBase* _parent);
  virtual void Ini_cMousePos();
  virtual void fRun();

  inline cMousePos(const cMousePos &_o) : Lib_GZ::cThreadMsg(_o), nPosX(_o.nPosX), nPosY(_o.nPosY){};
  inline cMousePos(const cMousePos &_o, gzBool _b) : Lib_GZ::cThreadMsg(_o, _b), nPosX(_o.nPosX), nPosY(_o.nPosY){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cMousePos();

 private:



};
class csMousePos : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cMousePos> New(Lib_GZ::cBase* _parent){
   gzSp<cMousePos>_oTemp = gzSp<cMousePos>(new cMousePos(_parent));
   _oTemp->Ini_cMousePos();
   return _oTemp;
  }




  inline csMousePos(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csMousePos(){};
};
namespace MousePos{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csMousePos((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csMousePos> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMousePos*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMousePos*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csMousePos>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace MousePos{
}}}}




namespace Lib_GZ{namespace Sys{namespace Message{class cBlit;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Sys{namespace Message{namespace Blit{



}}}}


namespace Lib_GZ{namespace Sys{class cContextHandle;}}
namespace Lib_GZ{namespace Sys{namespace Message{class cBlitComplete;}}}
namespace Lib_GZ{namespace Sys{namespace Message{class cBlit;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace Message{namespace Blit{
}
class pBlit {

 public:


};

class cBlit : public Lib_GZ::cThreadMsg {

 public:



  gzInt nPosX;
  gzInt nPosY;
  cBlit(Lib_GZ::cBase* _parent);
  virtual void Ini_cBlit();
  virtual void fRun();

  inline cBlit(const cBlit &_o) : Lib_GZ::cThreadMsg(_o), nPosX(_o.nPosX), nPosY(_o.nPosY){};
  inline cBlit(const cBlit &_o, gzBool _b) : Lib_GZ::cThreadMsg(_o, _b), nPosX(_o.nPosX), nPosY(_o.nPosY){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cBlit();

 private:



};
class csBlit : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cBlit> New(Lib_GZ::cBase* _parent){
   gzSp<cBlit>_oTemp = gzSp<cBlit>(new cBlit(_parent));
   _oTemp->Ini_cBlit();
   return _oTemp;
  }




  inline csBlit(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csBlit(){};
};
namespace Blit{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csBlit((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csBlit> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csBlit*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csBlit*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csBlit>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Blit{
}}}}




namespace Lib_GZ{namespace Sys{namespace Message{class cBlitComplete;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Sys{namespace Message{namespace BlitComplete{



}}}}


namespace Lib_GZ{namespace Sys{class cContextHandle;}}
namespace Lib_GZ{namespace Sys{class cContext;}}
namespace Lib_GZ{namespace Sys{namespace Message{class cBlitComplete;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Sys{namespace Message{namespace BlitComplete{
}
class pBlitComplete {

 public:


};

class cBlitComplete : public Lib_GZ::cThreadMsg {

 public:



  gzUIntX nDrawZoneAdr;
  cBlitComplete(Lib_GZ::cBase* _parent);
  virtual void Ini_cBlitComplete(gzUIntX _nDrawZoneAdr = 0);
  virtual void fRun();

  inline cBlitComplete(const cBlitComplete &_o) : Lib_GZ::cThreadMsg(_o), nDrawZoneAdr(_o.nDrawZoneAdr){};
  inline cBlitComplete(const cBlitComplete &_o, gzBool _b) : Lib_GZ::cThreadMsg(_o, _b), nDrawZoneAdr(_o.nDrawZoneAdr){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cBlitComplete();

 private:



};
class csBlitComplete : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cBlitComplete> New(Lib_GZ::cBase* _parent, gzUIntX _nDrawZoneAdr = 0){
   gzSp<cBlitComplete>_oTemp = gzSp<cBlitComplete>(new cBlitComplete(_parent));
   _oTemp->Ini_cBlitComplete(_nDrawZoneAdr);
   return _oTemp;
  }




  inline csBlitComplete(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csBlitComplete(){};
};
namespace BlitComplete{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csBlitComplete((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csBlitComplete> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csBlitComplete*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csBlitComplete*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csBlitComplete>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace BlitComplete{
}}}}







namespace Lib_GZ{namespace Gpu{namespace Base{class cUnVec2;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gpu{namespace Base{namespace UnVec2{



}}}}






namespace Lib_GZ{namespace Gpu{namespace Base{class cUnVec2;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace Base{namespace UnVec2{
}
class pUnVec2 {

 public:


};

class cUnVec2 : public Lib_GZ::Gpu::Base::cUniform {

 public:



  gzEmbed<Lib_GZ::Base::cVec2> oVal;
  virtual void fLoad();
  cUnVec2(Lib_GZ::cBase* _parent);
  virtual void Ini_cUnVec2(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName);

  inline cUnVec2(const cUnVec2 &_o) : Lib_GZ::Gpu::Base::cUniform(_o), oVal(_o.oVal){};
  inline cUnVec2(const cUnVec2 &_o, gzBool _b) : Lib_GZ::Gpu::Base::cUniform(_o, _b), oVal(_o.oVal){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cUnVec2();

 private:



};
class csUnVec2 : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cUnVec2> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName){
   gzSp<cUnVec2>_oTemp = gzSp<cUnVec2>(new cUnVec2(_parent));
   _oTemp->Ini_cUnVec2(_oProgram, _sName);
   return _oTemp;
  }




  inline csUnVec2(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csUnVec2(){};
};
namespace UnVec2{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csUnVec2((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csUnVec2> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csUnVec2*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csUnVec2*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csUnVec2>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace UnVec2{
}}}}




namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuBatch;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuBatch{



}}}}



namespace Lib_GZ{namespace Gfx{class cFace;}}

namespace Lib_GZ{namespace Gfx{class cBuffer;}}

namespace Lib_GZ{namespace File{class cRcImg;}}
namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuBatch;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuBatch{
}
class pGpuBatch {

 public:


};

class cGpuBatch : public Lib_GZ::cClass {

 public:



  cGpuBatch(Lib_GZ::cBase* _parent);
  virtual void Ini_cGpuBatch();
  virtual void fDraw();

  inline cGpuBatch(const cGpuBatch &_o) : Lib_GZ::cClass(_o){};
  inline cGpuBatch(const cGpuBatch &_o, gzBool _b) : Lib_GZ::cClass(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cGpuBatch();

 private:



};
class csGpuBatch : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cGpuBatch> New(Lib_GZ::cBase* _parent){
   gzSp<cGpuBatch>_oTemp = gzSp<cGpuBatch>(new cGpuBatch(_parent));
   _oTemp->Ini_cGpuBatch();
   return _oTemp;
  }




  inline csGpuBatch(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csGpuBatch(){};
};
namespace GpuBatch{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csGpuBatch((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csGpuBatch> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpuBatch*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGpuBatch*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csGpuBatch>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace GpuBatch{
}}}}




namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cFragmentShader;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace FragmentShader{



}}}}



namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cShaderBase;}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cFragmentShader;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace FragmentShader{
}
class pFragmentShader {

 public:


};

class cFragmentShader : public Lib_GZ::Gpu::ShaderBase::cShaderBase {

 public:



  cFragmentShader(Lib_GZ::cBase* _parent);
  virtual void Ini_cFragmentShader(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version = Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto);

  inline cFragmentShader(const cFragmentShader &_o) : Lib_GZ::Gpu::ShaderBase::cShaderBase(_o){};
  inline cFragmentShader(const cFragmentShader &_o, gzBool _b) : Lib_GZ::Gpu::ShaderBase::cShaderBase(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cFragmentShader();

 private:



};
class csFragmentShader : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cFragmentShader> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version = Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto){
   gzSp<cFragmentShader>_oTemp = gzSp<cFragmentShader>(new cFragmentShader(_parent));
   _oTemp->Ini_cFragmentShader(_hGlsl_ES_Version);
   return _oTemp;
  }




  inline csFragmentShader(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csFragmentShader(){};
};
namespace FragmentShader{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csFragmentShader((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csFragmentShader> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csFragmentShader*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csFragmentShader*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csFragmentShader>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace FragmentShader{
}}}}




namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cVertexShader;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace VertexShader{



}}}}



namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cShaderBase;}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cVertexShader;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace VertexShader{
}
class pVertexShader {

 public:


};

class cVertexShader : public Lib_GZ::Gpu::ShaderBase::cShaderBase {

 public:



  cVertexShader(Lib_GZ::cBase* _parent);
  virtual void Ini_cVertexShader(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version = Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto);

  inline cVertexShader(const cVertexShader &_o) : Lib_GZ::Gpu::ShaderBase::cShaderBase(_o){};
  inline cVertexShader(const cVertexShader &_o, gzBool _b) : Lib_GZ::Gpu::ShaderBase::cShaderBase(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cVertexShader();

 private:



};
class csVertexShader : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cVertexShader> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version = Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto){
   gzSp<cVertexShader>_oTemp = gzSp<cVertexShader>(new cVertexShader(_parent));
   _oTemp->Ini_cVertexShader(_hGlsl_ES_Version);
   return _oTemp;
  }




  inline csVertexShader(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csVertexShader(){};
};
namespace VertexShader{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csVertexShader((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csVertexShader> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csVertexShader*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csVertexShader*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csVertexShader>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace VertexShader{
}}}}




namespace Lib_GZ{namespace Gpu{namespace ShaderModel{namespace GzModel{class cGzShModel;}}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gpu{namespace ShaderModel{namespace GzModel{namespace GzShModel{



}}}}}


namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cFragmentShader;}}}
namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cVertexShader;}}}
namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}

namespace Lib_GZ{namespace Gpu{namespace Base{class cAttribute;}}}

namespace Lib_GZ{namespace Gpu{namespace Base{class cUniform;}}}

namespace Lib_GZ{namespace Gpu{namespace Base{class cUnVec2;}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cVbo;}}}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuBatch;}}}
namespace Lib_GZ{namespace Base{class cPerspective;}}
namespace Lib_GZ{namespace Base{class cTestPod;}}
namespace Lib_GZ{namespace Base{class cTestPod2;}}
namespace Lib_GZ{namespace Gpu{namespace ShaderModel{namespace GzModel{class cGzShModel;}}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gpu{namespace ShaderModel{namespace GzModel{namespace GzShModel{
}
class pGzShModel {

 public:


};

class cGzShModel : public Lib_GZ::cClass {

 public:



  gzSp<Lib_GZ::Gpu::ShaderBase::cVertexShader> oVertex;
  gzSp<Lib_GZ::Gpu::ShaderBase::cFragmentShader> oFragement;
  gzSp<Lib_GZ::Gpu::ShaderBase::cProgramShader> oProgram;
  gzSp<Lib_GZ::Gpu::GpuObj::cGpuBatch> oGpuBatch;
  gzSp<Lib_GZ::Gpu::ShaderBase::cVbo> oVboBatch;
  gzSp<Lib_GZ::Gpu::Base::cUnVec2> oUvMouse;
  cGzShModel(Lib_GZ::cBase* _parent);
  virtual void Ini_cGzShModel();
  virtual gzBool fLoad();
  virtual void fPod(Lib_GZ::Base::cTestPod2* _oPod);
  virtual void fDraw();

  inline cGzShModel(const cGzShModel &_o) : Lib_GZ::cClass(_o), oVertex(), oFragement(), oProgram(), oGpuBatch(), oVboBatch(), oUvMouse(){};
  inline cGzShModel(const cGzShModel &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), oVertex(), oFragement(), oProgram(), oGpuBatch(), oVboBatch(), oUvMouse(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cGzShModel();

 private:



};
class csGzShModel : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cGzShModel> New(Lib_GZ::cBase* _parent){
   gzSp<cGzShModel>_oTemp = gzSp<cGzShModel>(new cGzShModel(_parent));
   _oTemp->Ini_cGzShModel();
   return _oTemp;
  }




  inline csGzShModel(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csGzShModel(){};
};
namespace GzShModel{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csGzShModel((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csGzShModel> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGzShModel*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csGzShModel*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csGzShModel>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace GzShModel{
}}}}}




namespace Lib_GZ{namespace Base{class cPerspective;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Base{namespace Perspective{



}}}








namespace Lib_GZ{namespace Base{class cMat4x4;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}




namespace Lib_GZ{namespace Base{class cMat3x4;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}




namespace Lib_GZ{namespace Base{class cMat2x4;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}




namespace Lib_GZ{namespace Base{class cMat1x4;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Base{namespace Mat1x4{



}}}




namespace Lib_GZ{namespace Base{class cMat1x4;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Mat1x4{
}
class pMat1x4 {

 public:


};

class cMat1x4 : public Lib_GZ::cClass {

 public:



  gzEmbed<Lib_GZ::Base::cVec4> v0;
  cMat1x4(Lib_GZ::cBase* _parent);
  virtual void Ini_cMat1x4(Lib_GZ::Base::cVec4* _v0);

  inline cMat1x4(const cMat1x4 &_o) : Lib_GZ::cClass(_o), v0(_o.v0){};
  inline cMat1x4(const cMat1x4 &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), v0(_o.v0){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cMat1x4();

 private:



};
class csMat1x4 : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cMat1x4> New(Lib_GZ::cBase* _parent, Lib_GZ::Base::cVec4* _v0){
   gzSp<cMat1x4>_oTemp = gzSp<cMat1x4>(new cMat1x4(_parent));
   _oTemp->Ini_cMat1x4(_v0);
   return _oTemp;
  }




  inline csMat1x4(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csMat1x4(){};
};
namespace Mat1x4{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csMat1x4((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csMat1x4> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMat1x4*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMat1x4*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csMat1x4>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Mat1x4{
}}}

namespace Lib_GZ{namespace Base{namespace Mat2x4{



}}}





namespace Lib_GZ{namespace Base{class cMat2x4;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Mat2x4{
}
class pMat2x4 {

 public:


};

class cMat2x4 : public Lib_GZ::Base::cMat1x4 {

 public:



  gzEmbed<Lib_GZ::Base::cVec4> v1;
  cMat2x4(Lib_GZ::cBase* _parent);
  virtual void Ini_cMat2x4(Lib_GZ::Base::cVec4* _v0, Lib_GZ::Base::cVec4* _v1);

  inline cMat2x4(const cMat2x4 &_o) : Lib_GZ::Base::cMat1x4(_o), v1(_o.v1){};
  inline cMat2x4(const cMat2x4 &_o, gzBool _b) : Lib_GZ::Base::cMat1x4(_o, _b), v1(_o.v1){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cMat2x4();

 private:



};
class csMat2x4 : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cMat2x4> New(Lib_GZ::cBase* _parent, Lib_GZ::Base::cVec4* _v0, Lib_GZ::Base::cVec4* _v1){
   gzSp<cMat2x4>_oTemp = gzSp<cMat2x4>(new cMat2x4(_parent));
   _oTemp->Ini_cMat2x4(_v0, _v1);
   return _oTemp;
  }




  inline csMat2x4(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csMat2x4(){};
};
namespace Mat2x4{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csMat2x4((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csMat2x4> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMat2x4*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMat2x4*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csMat2x4>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Mat2x4{
}}}

namespace Lib_GZ{namespace Base{namespace Mat3x4{



}}}





namespace Lib_GZ{namespace Base{class cMat3x4;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Mat3x4{
}
class pMat3x4 {

 public:


};

class cMat3x4 : public Lib_GZ::Base::cMat2x4 {

 public:



  gzEmbed<Lib_GZ::Base::cVec4> v2;
  cMat3x4(Lib_GZ::cBase* _parent);
  virtual void Ini_cMat3x4(Lib_GZ::Base::cVec4* _v0, Lib_GZ::Base::cVec4* _v1, Lib_GZ::Base::cVec4* _v2);

  inline cMat3x4(const cMat3x4 &_o) : Lib_GZ::Base::cMat2x4(_o), v2(_o.v2){};
  inline cMat3x4(const cMat3x4 &_o, gzBool _b) : Lib_GZ::Base::cMat2x4(_o, _b), v2(_o.v2){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cMat3x4();

 private:



};
class csMat3x4 : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cMat3x4> New(Lib_GZ::cBase* _parent, Lib_GZ::Base::cVec4* _v0, Lib_GZ::Base::cVec4* _v1, Lib_GZ::Base::cVec4* _v2){
   gzSp<cMat3x4>_oTemp = gzSp<cMat3x4>(new cMat3x4(_parent));
   _oTemp->Ini_cMat3x4(_v0, _v1, _v2);
   return _oTemp;
  }




  inline csMat3x4(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csMat3x4(){};
};
namespace Mat3x4{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csMat3x4((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csMat3x4> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMat3x4*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMat3x4*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csMat3x4>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Mat3x4{
}}}

namespace Lib_GZ{namespace Base{namespace Mat4x4{



}}}





namespace Lib_GZ{namespace Base{class cMat4x4;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Mat4x4{
}
class pMat4x4 {

 public:


};

class cMat4x4 : public Lib_GZ::Base::cMat3x4 {

 public:



  gzEmbed<Lib_GZ::Base::cVec4> v3;
  cMat4x4(Lib_GZ::cBase* _parent);
  virtual void Ini_cMat4x4(Lib_GZ::Base::cVec4* _v0, Lib_GZ::Base::cVec4* _v1, Lib_GZ::Base::cVec4* _v2, Lib_GZ::Base::cVec4* _v3);

  inline cMat4x4(const cMat4x4 &_o) : Lib_GZ::Base::cMat3x4(_o), v3(_o.v3){};
  inline cMat4x4(const cMat4x4 &_o, gzBool _b) : Lib_GZ::Base::cMat3x4(_o, _b), v3(_o.v3){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cMat4x4();

 private:



};
class csMat4x4 : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cMat4x4> New(Lib_GZ::cBase* _parent, Lib_GZ::Base::cVec4* _v0, Lib_GZ::Base::cVec4* _v1, Lib_GZ::Base::cVec4* _v2, Lib_GZ::Base::cVec4* _v3){
   gzSp<cMat4x4>_oTemp = gzSp<cMat4x4>(new cMat4x4(_parent));
   _oTemp->Ini_cMat4x4(_v0, _v1, _v2, _v3);
   return _oTemp;
  }




  inline csMat4x4(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csMat4x4(){};
};
namespace Mat4x4{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csMat4x4((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csMat4x4> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMat4x4*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMat4x4*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csMat4x4>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Mat4x4{
}}}

namespace Lib_GZ{namespace Base{class cPerspective;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace Perspective{
}
class pPerspective {

 public:


};

class cPerspective : public Lib_GZ::cClass {

 public:



  gzEmbed<Lib_GZ::Base::cMat4x4> mProj;
  gzFloat nWidth;
  gzFloat nHeight;
  gzFloat nRatio;
  gzFloat nNear;
  gzFloat nFar;
  gzFloat nRange;
  gzFloat nFov;
  gzFloat nTanHalfFov;
  cPerspective(Lib_GZ::cBase* _parent);
  virtual void Ini_cPerspective();

  inline cPerspective(const cPerspective &_o) : Lib_GZ::cClass(_o), mProj(_o.mProj), nWidth(_o.nWidth), nHeight(_o.nHeight), nRatio(_o.nRatio), nNear(_o.nNear), nFar(_o.nFar), nRange(_o.nRange), nFov(_o.nFov), nTanHalfFov(_o.nTanHalfFov){};
  inline cPerspective(const cPerspective &_o, gzBool _b) : Lib_GZ::cClass(_o, _b), mProj(_o.mProj), nWidth(_o.nWidth), nHeight(_o.nHeight), nRatio(_o.nRatio), nNear(_o.nNear), nFar(_o.nFar), nRange(_o.nRange), nFov(_o.nFov), nTanHalfFov(_o.nTanHalfFov){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cPerspective();

 private:



};
class csPerspective : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cPerspective> New(Lib_GZ::cBase* _parent){
   gzSp<cPerspective>_oTemp = gzSp<cPerspective>(new cPerspective(_parent));
   _oTemp->Ini_cPerspective();
   return _oTemp;
  }




  inline csPerspective(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csPerspective(){};
};
namespace Perspective{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csPerspective((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csPerspective> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPerspective*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csPerspective*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csPerspective>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Perspective{
}}}








namespace Lib_GZ{namespace Base{class cTestPod;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{namespace Base{namespace TestPod{



}}}



namespace Lib_GZ{namespace Base{class cTestPod;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace TestPod{
}
class pTestPod {

 public:


};

class cTestPod {

 public:



  gzFloat nX;
  gzFloat nY;
  cTestPod();
  void Ini_cTestPod(gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0));


 private:



};
class csTestPod : public Lib_GZ::cStThread {

 public:

  inline virtual gzPod<cTestPod> New(Lib_GZ::cBase* _parent, gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0)){
   gzPod<cTestPod>_oTemp = gzPod<cTestPod>(cTestPod());
   _oTemp->Ini_cTestPod(_nX, _nY);
   return _oTemp;
  }




  inline csTestPod(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csTestPod(){};
};
namespace TestPod{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csTestPod((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csTestPod> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csTestPod*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csTestPod*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csTestPod>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace TestPod{
}}}




namespace Lib_GZ{namespace Base{class cTestPod2;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Base{namespace TestPod2{



}}}



namespace Lib_GZ{namespace Base{class cTestPod;}}
namespace Lib_GZ{namespace Base{class cTestPod2;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Base{namespace TestPod2{
}
class pTestPod2 {

 public:


};

class cTestPod2 {

 public:


  union {
   cTestPod ptrTestPod;
   struct {
   gzFloat nX;
   gzFloat nY;
   };
  };


  gzFloat nZ;
  gzFloat nW;
  cTestPod2();
  void Ini_cTestPod2(gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0), gzFloat _nZ = gzFloat(0), gzFloat _nW = gzFloat(0));


 private:



};
class csTestPod2 : public Lib_GZ::cStThread {

 public:

  inline virtual gzPod<cTestPod2> New(Lib_GZ::cBase* _parent, gzFloat _nX = gzFloat(0), gzFloat _nY = gzFloat(0), gzFloat _nZ = gzFloat(0), gzFloat _nW = gzFloat(0)){
   gzPod<cTestPod2>_oTemp = gzPod<cTestPod2>(cTestPod2());
   _oTemp->Ini_cTestPod2(_nX, _nY, _nZ, _nW);
   return _oTemp;
  }




  inline csTestPod2(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csTestPod2(){};
};
namespace TestPod2{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csTestPod2((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csTestPod2> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csTestPod2*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csTestPod2*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csTestPod2>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace TestPod2{
}}}




namespace Lib_GZ{namespace Gfx{namespace Clip{class cImg;}}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gfx{namespace Clip{namespace Img{



}}}}



namespace Lib_GZ{namespace Sys{class cWindow;}}

namespace Lib_GZ{namespace Gfx{class cShape;}}

namespace Lib_GZ{namespace Gfx{class cFace;}}

namespace Lib_GZ{namespace Gfx{class cRoot;}}


namespace Lib_GZ{namespace Gfx{class cTriangle; namespace Triangle {struct uPoint3D; struct _uPoint3D; struct uPoint2D; struct _uPoint2D; }}}
namespace Lib_GZ{namespace File{class cRcImg;}}
namespace Lib_GZ{namespace Base{class cPtA;}}
namespace Lib_GZ{namespace Base{class cPt;}}
namespace Lib_GZ{namespace Base{class cPoly4;}}
namespace Lib_GZ{namespace Gfx{namespace Clip{class cImg;}}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Clip{namespace Img{
}
class pImg {

 public:


};

class cImg : public Lib_GZ::Gfx::cShape {

 public:



  gzInt* aFile;
  gzInt nTest;
  gzSp<Lib_GZ::File::cRcImg> oRc;
  gzSp<Lib_GZ::Base::cPtA> oPtTL;
  gzSp<Lib_GZ::Base::cPtA> oPtTR;
  gzSp<Lib_GZ::Base::cPtA> oPtBR;
  gzSp<Lib_GZ::Base::cPtA> oPtBL;
  cImg(Lib_GZ::cBase* _parent);
  virtual void Ini_cImg(Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY, Lib_GZ::File::cRcImg* _oRc, gzBool _bCenter = true, gzInt _nCenterX = 0, gzInt _nCenterY = 0, gzBool _bSmoothBorder = true, gzBool _bDrawLine = false, Lib_GZ::Base::cPoly4* _oSrcRegion = (Lib_GZ::Base::cPoly4*)(0), gzUInt _nWidth = 0, gzUInt _nHeight = 0, Lib_GZ::Base::cPoly4* _oPts = (Lib_GZ::Base::cPoly4*)(0));
  virtual void fUpdateChildToParent();

  inline cImg(const cImg &_o) : Lib_GZ::Gfx::cShape(_o), aFile(), nTest(_o.nTest), oRc(), oPtTL(), oPtTR(), oPtBR(), oPtBL(){};
  inline cImg(const cImg &_o, gzBool _b) : Lib_GZ::Gfx::cShape(_o, _b), aFile(), nTest(_o.nTest), oRc(), oPtTL(), oPtTR(), oPtBR(), oPtBL(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cImg();

 private:



};
class csImg : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cImg> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY, Lib_GZ::File::cRcImg* _oRc, gzBool _bCenter = true, gzInt _nCenterX = 0, gzInt _nCenterY = 0, gzBool _bSmoothBorder = true, gzBool _bDrawLine = false, Lib_GZ::Base::cPoly4* _oSrcRegion = (Lib_GZ::Base::cPoly4*)(0), gzUInt _nWidth = 0, gzUInt _nHeight = 0, Lib_GZ::Base::cPoly4* _oPts = (Lib_GZ::Base::cPoly4*)(0)){
   gzSp<cImg>_oTemp = gzSp<cImg>(new cImg(_parent));
   _oTemp->Ini_cImg(_oParent, _nX, _nY, _oRc, _bCenter, _nCenterX, _nCenterY, _bSmoothBorder, _bDrawLine, _oSrcRegion, _nWidth, _nHeight, _oPts);
   return _oTemp;
  }




  inline csImg(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csImg(){};
};
namespace Img{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csImg((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csImg> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csImg*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csImg*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csImg>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Img{
}}}}





namespace Lib_GZ{namespace Gfx{class cClip;}}
template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ{namespace Gfx{namespace Clip{



}}}



namespace Lib_GZ{namespace Gfx{class cAttribute;}}

namespace Lib_GZ{namespace Gfx{class cObject;}}

namespace Lib_GZ{namespace Gfx{class cRoot;}}


namespace Lib_GZ{namespace Gfx{class cClip;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ{namespace Gfx{namespace Clip{
}
class pClip {

 public:


};

class cClip : public Lib_GZ::Gfx::cObject {

 public:



  cClip(Lib_GZ::cBase* _parent);
  virtual void Ini_cClip(Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY);
  virtual void fUpdate();
  virtual void fDraw();
  virtual void fContextResume();
  virtual void fApplyTransform();
  virtual void fAddSequence();
  virtual void fCalculateChildBorder();

  inline cClip(const cClip &_o) : Lib_GZ::Gfx::cObject(_o){};
  inline cClip(const cClip &_o, gzBool _b) : Lib_GZ::Gfx::cObject(_o, _b){};
  virtual ~cClip();

 private:



};
class csClip : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cClip> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY){
   gzSp<cClip>_oTemp = gzSp<cClip>(new cClip(_parent));
   _oTemp->Ini_cClip(_oParent, _nX, _nY);
   return _oTemp;
  }




  inline csClip(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csClip(){};
};
namespace Clip{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csClip((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csClip> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csClip*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csClip*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csClip>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace Clip{
}}}

extern "C" int IniLib_Lib_GZ(){
Lib_GZ::zpLib = Lib_GZ::NewLib();
Lib_GZ::Sys::Debug::NewClass();
Lib_GZ::Class::NewClass();
Lib_GZ::ThreadMsg::NewClass();
Lib_GZ::Gpu::Gpu::NewClass();
Lib_GZ::Gpu::GpuInfo::NewClass();
Lib_GZ::Gfx::Interface::NewClass();
Lib_GZ::Gfx::Root::NewClass();
Lib_GZ::Gfx::Dispacher::NewClass();
Lib_GZ::Gfx::Object::NewClass();
Lib_GZ::Gfx::Attribute::NewClass();
Lib_GZ::Gfx::Pixel::NewClass();
Lib_GZ::Gfx::Shape::NewClass();
Lib_GZ::Gfx::Buffer::NewClass();
Lib_GZ::Gfx::Perspective::NewClass();
Lib_GZ::Gpu::GpuObj::GpuBuffer::NewClass();
Lib_GZ::Gpu::ShaderBase::ProgramShader::NewClass();
Lib_GZ::Gpu::ShaderBase::ShaderBase::NewClass();
Lib_GZ::Gpu::Base::Attribute::NewClass();
Lib_GZ::Gpu::ShaderBase::Vbo::NewClass();
Lib_GZ::Gpu::Base::Uniform::NewClass();
Lib_GZ::Gpu::GpuObj::GpuObject::NewClass();
Lib_GZ::Gfx::Face::NewClass();
Lib_GZ::Gfx::Triangle::NewClass();
Lib_GZ::Base::Pt::NewClass();
Lib_GZ::Base::Vec3::NewClass();
Lib_GZ::Base::Quaternion::NewClass();
Lib_GZ::Base::Vec4::NewClass();
Lib_GZ::Base::Vec2::NewClass();
Lib_GZ::Gpu::GpuObj::GpuFace::NewClass();
Lib_GZ::File::RcImg::NewClass();
Lib_GZ::Sys::System::NewClass();
Lib_GZ::File::Resource::NewClass();
Lib_GZ::Sys::File::NewClass();
Lib_GZ::Base::PtA::NewClass();
Lib_GZ::Base::Poly4::NewClass();
Lib_GZ::Sys::Window::NewClass();
Lib_GZ::Input::Key::NewClass();
Lib_GZ::Gfx::GlobalData::NewClass();
Lib_GZ::Sys::FrameRate::NewClass();
Lib_GZ::Sys::Context::NewClass();
Lib_GZ::Sys::Message::ContextCreated::NewClass();
Lib_GZ::Sys::ContextHandle::NewClass();
Lib_GZ::Sys::Message::ContextLink::NewClass();
Lib_GZ::Base::Dim::NewClass();
Lib_GZ::Sys::Message::MousePos::NewClass();
Lib_GZ::Sys::Message::Blit::NewClass();
Lib_GZ::Sys::Message::BlitComplete::NewClass();
Lib_GZ::Gfx::Clip::Rectangle::NewClass();
Lib_GZ::Sys::ThreadItf::NewClass();
Lib_GZ::Sys::ThreadObj::NewClass();
Lib_GZ::Gpu::Base::UnVec2::NewClass();
Lib_GZ::Gpu::GpuObj::GpuBatch::NewClass();
Lib_GZ::Gpu::ShaderBase::FragmentShader::NewClass();
Lib_GZ::Gpu::ShaderBase::VertexShader::NewClass();
Lib_GZ::Gpu::ShaderModel::GzModel::GzShModel::NewClass();
Lib_GZ::Base::Perspective::NewClass();
Lib_GZ::Base::Mat4x4::NewClass();
Lib_GZ::Base::Mat3x4::NewClass();
Lib_GZ::Base::Mat2x4::NewClass();
Lib_GZ::Base::Mat1x4::NewClass();
Lib_GZ::Base::TestPod::NewClass();
Lib_GZ::Base::TestPod2::NewClass();
Lib_GZ::Gfx::Clip::Img::NewClass();
Lib_GZ::Gfx::Clip::NewClass();
return 1;
}

namespace Lib_GZ{ Lib_GZ::uOverplace* rLastClass = 0; Lib_GZ::uLib zpLib = NewLib(); }

namespace Lib_GZ{namespace Sys{namespace Debug{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Debug"},{0,"fConsole"},{0,"fTrace1"},{0,"fTrace2"},{0,"fTrace3"},{0,"fPass"},{0,"fWarning"},{0,"fError"},{0,"fFatal"}};



}

namespace Debug{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cDebug::cDebug(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cDebug::Ini_cDebug(){ gzStack gz_s( &Debug::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->oInst = gzSCastSelf<Lib_GZ::Sys::cDebug>(this);
}


void pDebug::fConsole(const gzStr& _sValue){ gzStack gz_s( &Debug::zFuncName[1] );

 printf("c:%s\n", (char*)_sValue.fcStr());

}


void csDebug::fTrace1(const gzStr& _sValue){ gzStack gz_s( &Debug::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Debug::fTrace1", (sizeof("\0" "GzNa::Debug::fTrace1")/sizeof(gzUInt8)) - 2, true))); }
}

void csDebug::fTrace2(const gzStr& _sValue){ gzStack gz_s( &Debug::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Debug::fTrace2", (sizeof("\0" "GzNa::Debug::fTrace2")/sizeof(gzUInt8)) - 2, true))); }
}

void csDebug::fTrace3(const gzStr& _sValue){ gzStack gz_s( &Debug::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Debug::fTrace3", (sizeof("\0" "GzNa::Debug::fTrace3")/sizeof(gzUInt8)) - 2, true))); }
}

void csDebug::fPass(const gzStr& _sValue){ gzStack gz_s( &Debug::zFuncName[5] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Debug::fPass", (sizeof("\0" "GzNa::Debug::fPass")/sizeof(gzUInt8)) - 2, true))); }
}

void csDebug::fWarning(const gzStr& _sValue){ gzStack gz_s( &Debug::zFuncName[6] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Debug::fWarning", (sizeof("\0" "GzNa::Debug::fWarning")/sizeof(gzUInt8)) - 2, true))); }
}

void csDebug::fError(const gzStr& _sValue){ gzStack gz_s( &Debug::zFuncName[7] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Debug::fError", (sizeof("\0" "GzNa::Debug::fError")/sizeof(gzUInt8)) - 2, true))); }
}

void csDebug::fFatal(const gzStr& _sValue){ gzStack gz_s( &Debug::zFuncName[8] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Debug::fFatal", (sizeof("\0" "GzNa::Debug::fFatal")/sizeof(gzUInt8)) - 2, true))); }
}

gzAny cDebug::MemCopy(){
return (gzAny)new cDebug(*this);
}
gzAny cDebug::DeepCopy(){
return (gzAny)new cDebug(*this, true);
}
cDebug::~cDebug(){
}



}}

namespace Lib_GZ{namespace Class{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Class"}};




cClass* MemCopy(cClass* _oClass) {
return _oClass;
}


}

namespace Class{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cClass::cClass(Lib_GZ::cBase* _parent) : Lib_GZ::cBase(_parent){

}

void cClass::Ini_cClass(){ gzStack gz_s( &Class::zFuncName[0] );
}

cClass::~cClass(){
}



}

namespace Lib_GZ{namespace ThreadMsg{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"ThreadMsg"},{0,"fRun"}};



}

namespace ThreadMsg{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cThreadMsg::cThreadMsg(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cThreadMsg::Ini_cThreadMsg(){ gzStack gz_s( &ThreadMsg::zFuncName[0] );
}

void cThreadMsg::fRun(){ gzStack gz_s( &ThreadMsg::zFuncName[1] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "Run message not implemented", (sizeof("\0" "Run message not implemented")/sizeof(gzUInt8)) - 2, true)));
}

cThreadMsg::~cThreadMsg(){
}



}

namespace Lib_GZ{namespace Gpu{namespace Gpu{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Gpu"},{0,"fLoadImg"},{0,"fBlit"},{0,"fContextIni"},{0,"fError"},{0,"fFatal"},{0,"fClear"}};



}

namespace Gpu{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cGpu::cGpu(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){


}

void cGpu::Ini_cGpu(gzUIntX _nHandleId, gzBool _bGlobalSharedContext){ gzStack gz_s( &Gpu::zFuncName[0] );
 oGpuInfo = gzSCast<Lib_GZ::Gpu::cGpuInfo>((Lib_GZ::Gpu::GpuInfo::Get(thread)->New(this)));
 fContextIni(_nHandleId, _bGlobalSharedContext);
 fBlit();
}

void cGpu::fLoadImg(gzInt* _aImg, gzInt _nWidth, gzInt _nHeight){ gzStack gz_s( &Gpu::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Gpu::fLoadImg", (sizeof("\0" "GzNa::Gpu::fLoadImg")/sizeof(gzUInt8)) - 2, true))); }
}

void cGpu::fBlit(){ gzStack gz_s( &Gpu::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "Gpu: fBlit: not implemented, unable to draw", (sizeof("\0" "Gpu: fBlit: not implemented, unable to draw")/sizeof(gzUInt8)) - 2, true)));
}

gzBool cGpu::fContextIni(gzUIntX _nHandleId, gzBool _bGlobalSharedContext){ gzStack gz_s( &Gpu::zFuncName[3] );
 Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "fContextIni: not implemented, unable to draw ", (sizeof("\0" "fContextIni: not implemented, unable to draw ")/sizeof(gzUInt8)) - 2, true)));
 return false;
}

gzBool cGpu::fError(const gzStr& _sError){ gzStack gz_s( &Gpu::zFuncName[4] );
 Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "Gpu error : ", (sizeof("\0" "Gpu error : ")/sizeof(gzUInt8)) - 2, true)) + _sError);
 return false;
}

gzBool cGpu::fFatal(const gzStr& _sError){ gzStack gz_s( &Gpu::zFuncName[5] );
 Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "Gpu fatal : ", (sizeof("\0" "Gpu fatal : ")/sizeof(gzUInt8)) - 2, true)) + _sError);
 return false;
}

void cGpu::fClear(){ gzStack gz_s( &Gpu::zFuncName[6] );
 Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "Gpu fClear not implemented ", (sizeof("\0" "Gpu fClear not implemented ")/sizeof(gzUInt8)) - 2, true)));
}

gzAny cGpu::MemCopy(){
return (gzAny)new cGpu(*this);
}
gzAny cGpu::DeepCopy(){
return (gzAny)new cGpu(*this, true);
}
cGpu::~cGpu(){
}



}}

namespace Lib_GZ{namespace Gpu{namespace GpuInfo{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"GpuInfo"},{0,"fIniFunctions"},{0,"fGetVersion"}};



}

namespace GpuInfo{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cGpuInfo::cGpuInfo(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cGpuInfo::Ini_cGpuInfo(){ gzStack gz_s( &GpuInfo::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- GpuInfo Created!! ---", (sizeof("\0" "--- GpuInfo Created!! ---")/sizeof(gzUInt8)) - 2, true)));
}

gzBool cGpuInfo::fIniFunctions(){ gzStack gz_s( &GpuInfo::zFuncName[1] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "fIniFunctions: - fGetVersion Not Implemented -", (sizeof("\0" "fIniFunctions: - fGetVersion Not Implemented -")/sizeof(gzUInt8)) - 2, true)));
 return false;
}

gzBool cGpuInfo::fGetVersion(){ gzStack gz_s( &GpuInfo::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "Gpu: - fGetVersion Not Implemented -", (sizeof("\0" "Gpu: - fGetVersion Not Implemented -")/sizeof(gzUInt8)) - 2, true)));
 return false;
}

gzAny cGpuInfo::MemCopy(){
return (gzAny)new cGpuInfo(*this);
}
gzAny cGpuInfo::DeepCopy(){
return (gzAny)new cGpuInfo(*this, true);
}
cGpuInfo::~cGpuInfo(){
}



}}

namespace Lib_GZ{class cThread;}
namespace Lib_GZ{namespace Gfx{namespace Interface{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Interface"},{0,"fCreateInterface"},{0,"fNewFrame"},{0,"fOnClose"},{0,"fTerminate"},{0,"fIsWindowReady"},{0,"fIniProcess"},{0,"fCpuVSyncOnGpu"},{0,"fBlit"},{0,"fWinStart"}};



}

namespace Interface{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cInterface::cInterface(Lib_GZ::cBase* _parent) : Lib_GZ::Sys::cFrameRate(_parent),oKey(this){
 nFrameWidth=0;nFrameHeight=0;nHalfFrameWidth=0;nHalfFrameHeight=0;bWIntransparent=0;nBgColor=0;
 nTotalFaces = 0;
 nTotalBuffers = 0;
 bSreenCreated = false;
 nWIntype = 20;

 bGpuDraw = true;

}

void cInterface::Ini_cInterface(Lib_GZ::Sys::cThreadItf* _oThreadItf, const gzStr& _sWindowName, gzUInt _nWeakWidth, gzUInt _nWeakHeight, gzBool _bTransparent, gzInt _nBgColor){ gzStack gz_s( &Interface::zFuncName[0] );
 oKey->Ini_cKey();
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "IntefaceCreate", (sizeof("\0" "IntefaceCreate")/sizeof(gzUInt8)) - 2, true)));
 oItf = gzSCastSelf<Lib_GZ::Gfx::cInterface>(this);
 Ini_cFrameRate((Lib_GZ::Gfx::cRoot*)(0), _nWeakWidth, _nWeakHeight);
 oThreadItf = gzSCastSelf<Lib_GZ::Sys::cThreadItf>(_oThreadItf);
 oGpuObj = gzSCast<Lib_GZ::Gpu::GpuObj::cGpuBuffer>((Lib_GZ::Gpu::GpuObj::GpuBuffer::Get(thread)->New(this)));
 sWindowName = _sWindowName;
 nBgColor = _nBgColor;
 oContext = gzSCast<Lib_GZ::Sys::cContext>((Lib_GZ::Sys::Context::Get(thread)->New(this, (Lib_GZ::Gfx::cInterface*)(this), _sWindowName, _nWeakWidth, _nWeakHeight, _bTransparent, _nBgColor)));
 oThreadItf->oWindow = gzSCast<Lib_GZ::Sys::cContext>(oContext);
 bWIntransparent = _bTransparent;
 nFrameWidth = gzFloat(oContext->nFrameWidth);
 nFrameHeight = gzFloat(oContext->nFrameHeight);
 nFrameWidth = gzFloat(_nWeakWidth);
 nFrameHeight = gzFloat(_nWeakHeight);
 nHalfFrameWidth = nFrameWidth / 2.0;
 nHalfFrameHeight = nFrameHeight / 2.0;
}

void cInterface::fCreateInterface(gzInt _nPosX, gzInt _nPosY, Lib_GZ::Sys::Window::eWinState _hWinState){ gzStack gz_s( &Interface::zFuncName[1] );
 oContext->fCreate(_nPosX, _nPosY, gzUInt(nFrameWidth), gzUInt(nFrameHeight), Lib_GZ::Sys::Window::eWinState(_hWinState), bGpuDraw, true);
 if (bWIntransparent == true){
  oContext->bWinGPU = false;
 }
 bSreenCreated = true;
 fStartProcess();
}

void cInterface::fNewFrame(){ gzStack gz_s( &Interface::zFuncName[2] );
 oContext->fFrameStart();
 if (bSreenCreated != 0 && oContext->bBlitInProgress == false){
  aPixelArray = (oContext->aDrawZone2D);
  oContext->fGetMousePosition();
  oContext->fGetKey((Lib_GZ::Input::cKey*)(oKey.get()));
  oContext->fClear();
  fUpdateParentToChild();
  fUpdateChild();
  oContext->fIniRender();
  if (oContext->bIniDrawZone != 0){
   fDispatchRender();
  }
  if (oContext->bWinGPU != 0){
   oGpuObj->fDraw((Lib_GZ::Gfx::cObject*)(0), 0, 0, 0, 0);
  }
  oContext->fFrameEnd();
  fOnClose();
 }
}

void cInterface::fOnClose(){ gzStack gz_s( &Interface::zFuncName[3] );
 if (gzInt(oContext->hWinClick) == Lib_GZ::Sys::Window::eWinClick::Close){
  oThreadItf->bRun = false;
 }
}

void cInterface::fTerminate(){ gzStack gz_s( &Interface::zFuncName[4] );
 oThreadItf->bRun = false;
}

gzBool cInterface::fIsWindowReady(){ gzStack gz_s( &Interface::zFuncName[5] );
 return oContext->fIsWindowReady();
}

void cInterface::fIniProcess(){ gzStack gz_s( &Interface::zFuncName[6] );
 oContext->fIniProcess();
 oGpuObj->fIni((Lib_GZ::Gfx::cInterface*)(this));
 fWinStart();
 if (bWIntransparent != true){
  oBackground = gzSCast<Lib_GZ::Gfx::Clip::cRectangle>((Lib_GZ::Gfx::Clip::Rectangle::Get(thread)->New(this, (Lib_GZ::Gfx::cRoot*)(this), gzFloat(0), gzFloat(0), gzFloat(oContext->nFrameWidth), gzFloat(oContext->nFrameHeight), nBgColor)));
 }
}

void cInterface::fCpuVSyncOnGpu(){ gzStack gz_s( &Interface::zFuncName[7] );
 oContext->fCpuVSyncOnGpu();
}

void cInterface::fBlit(){ gzStack gz_s( &Interface::zFuncName[8] );
 oContext->fBlit();
}

void cInterface::fWinStart(){ gzStack gz_s( &Interface::zFuncName[9] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Interface::fWinStart", (sizeof("\0" "GzNa::Interface::fWinStart")/sizeof(gzUInt8)) - 2, true))); }
}

cInterface::~cInterface(){
}



}}

namespace Lib_GZ{namespace Gfx{namespace Root{
}}}


namespace Lib_GZ{namespace Gfx{namespace Root{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Root"},{0,"fChangeParent"},{0,"fUpdateChild"},{0,"fUpdateRoot"},{0,"fRender"},{0,"fApplyPos"},{0,"tDelete"},{0,"fFinalUpdate"},{0,"fApplyTransform"},{0,"fUpdateChildToParent"},{0,"fUpdateParentToChild"},{0,"fApplyColor"},{0,"fContextResume"}};



}

namespace Root{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cRoot::cRoot(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cDispacher(_parent){
 nEventValue=0;bFirstSetLimit=0;
 bLimitLock = false;
 bDeleteReady = true;
 bToDelete = false;
 bContainer = false;
 nParBrRed = 0;
 nParBrBlue = 0;
 nParBrGreen = 0;
 nParAlpha = 0;
 nParRevRed = 0;
 nParRevBlue = 0;
 nParRevGreen = 0;
 nParRotation = gzFloat(0);
 nParYaw = gzFloat(0);
 nParPitch = gzFloat(0);

}

void cRoot::Ini_cRoot(Lib_GZ::Gfx::cRoot* _oParent){ gzStack gz_s( &Root::zFuncName[0] );
 Ini_cDispacher();
 fChangeParent((Lib_GZ::Gfx::cRoot*)(_oParent));
}

void cRoot::fChangeParent(Lib_GZ::Gfx::cRoot* _oParent, gzBool _bUpdateManually){ gzStack gz_s( &Root::zFuncName[1] );
 if (_oParent != (Lib_GZ::Gfx::cRoot*)(0)){
  oParent = gzSCastSelf<Lib_GZ::Gfx::cObject>(_oParent);
 }
 if (_oParent != (Lib_GZ::Gfx::cRoot*)(0)){
  oItf = _oParent->oItf;
  oDstBuff = _oParent->oDstBuff;
  if (gzInt(_bUpdateManually) == 0){
   _oParent->fAddChild((Lib_GZ::Gfx::cRoot*)(this));
  }
 }
}

void cRoot::fUpdateChild(){ gzStack gz_s( &Root::zFuncName[2] );
 fDispatchUpdate();
}

void cRoot::fUpdateRoot(){ gzStack gz_s( &Root::zFuncName[3] );
 fUpdateParentToChild();
 fApplyPos();
 fApplyColor();
 fApplyTransform();
 fUpdateChild();
}

void cRoot::fRender(){ gzStack gz_s( &Root::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Root::fRender", (sizeof("\0" "GzNa::Root::fRender")/sizeof(gzUInt8)) - 2, true))); }
}

void cRoot::fApplyPos(){ gzStack gz_s( &Root::zFuncName[5] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Root::fApplyPos", (sizeof("\0" "GzNa::Root::fApplyPos")/sizeof(gzUInt8)) - 2, true))); }
}

void cRoot::tDelete(){ gzStack gz_s( &Root::zFuncName[6] );
 if (bDeleteReady != 0){
 }else{
  bToDelete = true;
 }
}

void cRoot::fFinalUpdate(){ gzStack gz_s( &Root::zFuncName[7] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Root::fFinalUpdate", (sizeof("\0" "GzNa::Root::fFinalUpdate")/sizeof(gzUInt8)) - 2, true))); }
}

void cRoot::fApplyTransform(){ gzStack gz_s( &Root::zFuncName[8] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Root::fApplyTransform", (sizeof("\0" "GzNa::Root::fApplyTransform")/sizeof(gzUInt8)) - 2, true))); }
}

void cRoot::fUpdateChildToParent(){ gzStack gz_s( &Root::zFuncName[9] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Root::fUpdateChildToParent", (sizeof("\0" "GzNa::Root::fUpdateChildToParent")/sizeof(gzUInt8)) - 2, true))); }
}

void cRoot::fUpdateParentToChild(){ gzStack gz_s( &Root::zFuncName[10] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Root::fUpdateParentToChild", (sizeof("\0" "GzNa::Root::fUpdateParentToChild")/sizeof(gzUInt8)) - 2, true))); }
}

void cRoot::fApplyColor(){ gzStack gz_s( &Root::zFuncName[11] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Root::fApplyColor", (sizeof("\0" "GzNa::Root::fApplyColor")/sizeof(gzUInt8)) - 2, true))); }
}

void cRoot::fContextResume(){ gzStack gz_s( &Root::zFuncName[12] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Root::fContextResume", (sizeof("\0" "GzNa::Root::fContextResume")/sizeof(gzUInt8)) - 2, true))); }
}

cRoot::~cRoot(){
}



}}

namespace Lib_GZ{namespace Gfx{namespace Dispacher{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Dispacher"},{0,"fAddChild"},{0,"fDispatchUpdate"},{0,"fDispatchRender"},{0,"fDispatchContextResume"}};



}

namespace Dispacher{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cDispacher::cDispacher(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cDispacher::Ini_cDispacher(){ gzStack gz_s( &Dispacher::zFuncName[0] );
}

void cDispacher::fAddChild(Lib_GZ::Gfx::cRoot* _oObj){ gzStack gz_s( &Dispacher::zFuncName[1] );
 qaChild.fPush(gzSCastSelf<Lib_GZ::Gfx::cRoot>(_oObj));
}

void cDispacher::fDispatchUpdate(){ gzStack gz_s( &Dispacher::zFuncName[2] );
 {gzQElement<gzSp<Lib_GZ::Gfx::cRoot> > _qe_oChild = qaChild.GqeFirst();if(_qe_oChild != qaChild.qeEmpty){ gzQElement<gzSp<Lib_GZ::Gfx::cRoot> > _qe_oChildReserved = qaChild.GqeFirst();do{
  Lib_GZ::Gfx::cRoot* _oChild = _qe_oChild.val()->get();
  _oChild->fUpdateRoot();
 _qe_oChild = _qe_oChild.GqeNext();}while(_qe_oChild != _qe_oChildReserved);}}
}

void cDispacher::fDispatchRender(){ gzStack gz_s( &Dispacher::zFuncName[3] );
 {gzQElement<gzSp<Lib_GZ::Gfx::cRoot> > _qe_oChild = qaChild.GqeFirst();if(_qe_oChild != qaChild.qeEmpty){ gzQElement<gzSp<Lib_GZ::Gfx::cRoot> > _qe_oChildReserved = qaChild.GqeFirst();do{
  Lib_GZ::Gfx::cRoot* _oChild = _qe_oChild.val()->get();
  _oChild->fRender();
 _qe_oChild = _qe_oChild.GqeNext();}while(_qe_oChild != _qe_oChildReserved);}}
}

void cDispacher::fDispatchContextResume(){ gzStack gz_s( &Dispacher::zFuncName[4] );
 {gzQElement<gzSp<Lib_GZ::Gfx::cRoot> > _qe_oChild = qaChild.GqeFirst();if(_qe_oChild != qaChild.qeEmpty){ gzQElement<gzSp<Lib_GZ::Gfx::cRoot> > _qe_oChildReserved = qaChild.GqeFirst();do{
  Lib_GZ::Gfx::cRoot* _oChild = _qe_oChild.val()->get();
  _oChild->fContextResume();
 _qe_oChild = _qe_oChild.GqeNext();}while(_qe_oChild != _qe_oChildReserved);}}
}

cDispacher::~cDispacher(){
}



}}

namespace Lib_GZ{namespace Gfx{namespace Object{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Object"},{0,"fRender"},{0,"fDraw"},{0,"fGpuDraw"},{0,"fCpuDraw"}};



}

namespace Object{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cObject::cObject(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cAttribute(_parent){
 nWidth = gzFloat(0);
 nHeight = gzFloat(0);
 bTri = false;
 nShapeWidth = gzFloat(0);
 nShapeHeight = gzFloat(0);
 nDirWidth = gzFloat(1);
 nDirHeight = gzFloat(1);
 nClockwise = gzFloat(1);
 nOriClockwise = gzFloat(1);
 nScaleX = gzFloat(1);
 nScaleY = gzFloat(1);
 aPixelArray = 0;
 aSourcePixel = 0;

}

void cObject::Ini_cObject(Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY){ gzStack gz_s( &Object::zFuncName[0] );
 Ini_cAttribute((Lib_GZ::Gfx::cRoot*)(_oParent));
 WnX(_nX);
 WnY(_nY);
}

void cObject::fRender(){ gzStack gz_s( &Object::zFuncName[1] );
 fDraw();
}

void cObject::fDraw(){ gzStack gz_s( &Object::zFuncName[2] );
 if (oItf->oContext->bWinGPU != 0){
  fGpuDraw();
 }else{
  gzInt _nResL = oDstBuff->nBuffPLimL;
  gzInt _nResR = oDstBuff->nBuffPLimR;
  gzInt _nResT = oDstBuff->nBuffPLimT;
  gzInt _nResB = oDstBuff->nBuffPLimB;
  fCpuDraw(Lib_GZ::Math::nHPrec, Lib_GZ::Math::nHPrec, _nResL, _nResR, _nResT, _nResB);
 }
}

gzBool cObject::fGpuDraw(){ gzStack gz_s( &Object::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Object::fGpuDraw", (sizeof("\0" "GzNa::Object::fGpuDraw")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

gzBool cObject::fCpuDraw(gzInt nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End){ gzStack gz_s( &Object::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Object::fCpuDraw", (sizeof("\0" "GzNa::Object::fCpuDraw")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

cObject::~cObject(){
}



}}

namespace Lib_GZ{namespace Gfx{namespace Attribute{
}}}


namespace Lib_GZ{namespace Gfx{namespace Attribute{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Attribute"},{0,"WnX"},{0,"WnY"},{0,"WnZ"},{0,"TnX"},{0,"TnY"},{0,"TnZ"},{0,"MnX"},{0,"MnY"},{0,"MnZ"},{0,"LnX"},{0,"LnY"},{0,"LnZ"},{0,"EnX"},{0,"EnY"},{0,"EnZ"},{0,"GnX"},{0,"GnY"},{0,"GnZ"},{0,"fRotationOrder1"},{0,"fRotationOrder2"},{0,"fRotationOrder3"},{0,"WnWidth"},{0,"WnHeight"},{0,"WnLength"},{0,"TnWidth"},{0,"TnHeight"},{0,"TnLength"},{0,"MnWidth"},{0,"MnHeight"},{0,"MnLength"},{0,"LnWidth"},{0,"LnHeight"},{0,"LnLength"},{0,"EnWidth"},{0,"EnHeight"},{0,"EnLength"},{0,"GnWidth"},{0,"GnHeight"},{0,"GnLength"},{0,"WnRoll"},{0,"WnPitch"},{0,"WnYaw"},{0,"TnRoll"},{0,"TnPitch"},{0,"TnYaw"},{0,"MnRoll"},{0,"MnPitch"},{0,"MnYaw"},{0,"LnRoll"},{0,"LnPitch"},{0,"LnYaw"},{0,"EnRoll"},{0,"EnPitch"},{0,"EnYaw"},{0,"GnRoll"},{0,"GnPitch"},{0,"GnYaw"},{0,"WnRed"},{0,"WnBlue"},{0,"WnGreen"},{0,"WnAlpha"},{0,"TnRed"},{0,"TnBlue"},{0,"TnGreen"},{0,"TnAlpha"},{0,"EnRed"},{0,"EnBlue"},{0,"EnGreen"},{0,"EnAlpha"},{0,"GnRed"},{0,"GnBlue"},{0,"GnGreen"},{0,"GnAlpha"},{0,"fApplyColor"},{0,"fApplyPos"}};



}

namespace Attribute{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cAttribute::cAttribute(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cRoot(_parent),oGblPt(this),oQuaternion(this)

,dRotationOrder(this, &Lib_GZ::Gfx::cAttribute::wRotationOrder1)

{ gzStack gz_s( &Attribute::zFuncName[0] );
 nGAttX=0;nGAttY=0;nGAttZ=0;nGAttRoll=0;nGAttYaw=0;nGAttPitch=0;nGAttRed=0;nGAttGreen=0;nGAttBlue=0;nAttX=0;nAttY=0;nAttZ=0;nAttRoll=0;nAttYaw=0;nAttPitch=0;nAttRed=0;nAttGreen=0;nAttBlue=0;nAttWrap=0;nAttMove=0;
 nGAttWidth = 1.0;
 nGAttHeight = 1.0;
 nGAttLength = 1.0;
 nGAttType = 1.0;
 nGAttAlpha = 1.0;
 nAttWidth = gzFloat(1);
 nAttHeight = gzFloat(1);
 nAttLength = gzFloat(1);
 nAttAlpha = 1.0;
 bUpdateOneTimeColor = false;
 bUpdateEasing = false;
 nAlpha = 0;
 nBrRed = 0;
 nBrBlue = 0;
 nBrGreen = 0;
 nRsBrRed = 0;
 nRsBrBlue = 0;
 nRsBrGreen = 0;
 nRsAlpha = 256;


  ua_nAttX.nVal = &nAttX;
  ua_nAttX.nFracVal = 0;
  ua_nAttX.nTo = nAttX;
  ua_nAttX.nSpeed = 1;
  ua_nAttX.nLimit = 3.402823466e+38F;
  ua_nAttY.nVal = &nAttY;
  ua_nAttY.nFracVal = 0;
  ua_nAttY.nTo = nAttY;
  ua_nAttY.nSpeed = 1;
  ua_nAttY.nLimit = 3.402823466e+38F;
  ua_nAttZ.nVal = &nAttZ;
  ua_nAttZ.nFracVal = 0;
  ua_nAttZ.nTo = nAttZ;
  ua_nAttZ.nSpeed = 1;
  ua_nAttZ.nLimit = 3.402823466e+38F;
  ua_nAttRoll.nVal = &nAttRoll;
  ua_nAttRoll.nFracVal = 0;
  ua_nAttRoll.nTo = nAttRoll;
  ua_nAttRoll.nSpeed = 1;
  ua_nAttRoll.nLimit = 3.402823466e+38F;
  ua_nAttYaw.nVal = &nAttYaw;
  ua_nAttYaw.nFracVal = 0;
  ua_nAttYaw.nTo = nAttYaw;
  ua_nAttYaw.nSpeed = 1;
  ua_nAttYaw.nLimit = 3.402823466e+38F;
  ua_nAttPitch.nVal = &nAttPitch;
  ua_nAttPitch.nFracVal = 0;
  ua_nAttPitch.nTo = nAttPitch;
  ua_nAttPitch.nSpeed = 1;
  ua_nAttPitch.nLimit = 3.402823466e+38F;
  ua_nAttWidth.nVal = &nAttWidth;
  ua_nAttWidth.nFracVal = 0;
  ua_nAttWidth.nTo = nAttWidth;
  ua_nAttWidth.nSpeed = 1;
  ua_nAttWidth.nLimit = 3.402823466e+38F;
  ua_nAttHeight.nVal = &nAttHeight;
  ua_nAttHeight.nFracVal = 0;
  ua_nAttHeight.nTo = nAttHeight;
  ua_nAttHeight.nSpeed = 1;
  ua_nAttHeight.nLimit = 3.402823466e+38F;
  ua_nAttLength.nVal = &nAttLength;
  ua_nAttLength.nFracVal = 0;
  ua_nAttLength.nTo = nAttLength;
  ua_nAttLength.nSpeed = 1;
  ua_nAttLength.nLimit = 3.402823466e+38F;
  ua_nAttRed.nVal = &nAttRed;
  ua_nAttRed.nFracVal = 0;
  ua_nAttRed.nTo = nAttRed;
  ua_nAttRed.nSpeed = 1;
  ua_nAttRed.nLimit = 3.402823466e+38F;
  ua_nAttGreen.nVal = &nAttGreen;
  ua_nAttGreen.nFracVal = 0;
  ua_nAttGreen.nTo = nAttGreen;
  ua_nAttGreen.nSpeed = 1;
  ua_nAttGreen.nLimit = 3.402823466e+38F;
  ua_nAttBlue.nVal = &nAttBlue;
  ua_nAttBlue.nFracVal = 0;
  ua_nAttBlue.nTo = nAttBlue;
  ua_nAttBlue.nSpeed = 1;
  ua_nAttBlue.nLimit = 3.402823466e+38F;
  ua_nAttAlpha.nVal = &nAttAlpha;
  ua_nAttAlpha.nFracVal = 0;
  ua_nAttAlpha.nTo = nAttAlpha;
  ua_nAttAlpha.nSpeed = 1;
  ua_nAttAlpha.nLimit = 3.402823466e+38F;
  ua_nAlpha.nVal = &nAlpha;
  ua_nAlpha.nFracVal = 0;
  ua_nAlpha.nTo = nAlpha;
  ua_nAlpha.nSpeed = 1;
  ua_nAlpha.nLimit = 3.402823466e+38F;
  ua_nBrRed.nVal = &nBrRed;
  ua_nBrRed.nFracVal = 0;
  ua_nBrRed.nTo = nBrRed;
  ua_nBrRed.nSpeed = 1;
  ua_nBrRed.nLimit = 3.402823466e+38F;
  ua_nBrBlue.nVal = &nBrBlue;
  ua_nBrBlue.nFracVal = 0;
  ua_nBrBlue.nTo = nBrBlue;
  ua_nBrBlue.nSpeed = 1;
  ua_nBrBlue.nLimit = 3.402823466e+38F;
  ua_nBrGreen.nVal = &nBrGreen;
  ua_nBrGreen.nFracVal = 0;
  ua_nBrGreen.nTo = nBrGreen;
  ua_nBrGreen.nSpeed = 1;
  ua_nBrGreen.nLimit = 3.402823466e+38F;

}

void cAttribute::Ini_cAttribute(Lib_GZ::Gfx::cRoot* _oParent){ gzStack gz_s( &Attribute::zFuncName[0] );
 oGblPt->Ini_cPtA(0,0,0);
 oQuaternion->Ini_cQuaternion();
 Ini_cRoot((Lib_GZ::Gfx::cRoot*)(_oParent));
 hRotateOrder = Lib_GZ::Gfx::Attribute::eRotateOrder::YawPitchRoll;
}

void cAttribute::WnX(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[1] );
 nAttX = _nVal;
 ((ua_nAttX).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << 0);
}

void cAttribute::WnY(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[2] );
 nAttY = _nVal;
 ((ua_nAttY).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << 1);
}

void cAttribute::WnZ(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[3] );
 nAttZ = _nVal;
 ((ua_nAttZ).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << 2);
}

void cAttribute::TnX(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[4] );
 ((ua_nAttX).nTo = _nVal);
 nAttMove = nAttMove | (1 << 0);
}

void cAttribute::TnY(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[5] );
 ((ua_nAttY).nTo = _nVal);
 nAttMove = nAttMove | (1 << 1);
}

void cAttribute::TnZ(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[6] );
 ((ua_nAttZ).nTo = _nVal);
 nAttMove = nAttMove | (1 << 2);
}

void cAttribute::MnX(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[7] );
 ((ua_nAttX).nTo = nAttX + _nVal);
 nAttMove = nAttMove | (1 << 0);
}

void cAttribute::MnY(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[8] );
 ((ua_nAttY).nTo = nAttY + _nVal);
 nAttMove = nAttMove | (1 << 1);
}

void cAttribute::MnZ(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[9] );
 ((ua_nAttZ).nTo = nAttZ + _nVal);
 nAttMove = nAttMove | (1 << 2);
}

void cAttribute::LnX(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[10] );
 GZ_uEase_fLimit(&(ua_nAttX), _nVal);
}

void cAttribute::LnY(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[11] );
 GZ_uEase_fLimit(&(ua_nAttY), _nVal);
}

void cAttribute::LnZ(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[12] );
 GZ_uEase_fLimit(&(ua_nAttZ), _nVal);
}

void cAttribute::EnX(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[13] );
 GZ_uEase_fSpeed(&(ua_nAttX), _nSpeed);
}

void cAttribute::EnY(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[14] );
 GZ_uEase_fSpeed(&(ua_nAttY), _nSpeed);
}

void cAttribute::EnZ(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[15] );
 GZ_uEase_fSpeed(&(ua_nAttZ), _nSpeed);
}

gzFloat cAttribute::GnX(){ gzStack gz_s( &Attribute::zFuncName[16] );
 return nAttX;
}

gzFloat cAttribute::GnY(){ gzStack gz_s( &Attribute::zFuncName[17] );
 return nAttY;
}

gzFloat cAttribute::GnZ(){ gzStack gz_s( &Attribute::zFuncName[18] );
 return nAttZ;
}

void cAttribute::fRotationOrder1(){ gzStack gz_s( &Attribute::zFuncName[19] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Attribute::fRotationOrder1", (sizeof("\0" "GzNa::Attribute::fRotationOrder1")/sizeof(gzUInt8)) - 2, true))); }
}

void cAttribute::fRotationOrder2(){ gzStack gz_s( &Attribute::zFuncName[20] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Attribute::fRotationOrder2", (sizeof("\0" "GzNa::Attribute::fRotationOrder2")/sizeof(gzUInt8)) - 2, true))); }
}

void cAttribute::fRotationOrder3(){ gzStack gz_s( &Attribute::zFuncName[21] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Attribute::fRotationOrder3", (sizeof("\0" "GzNa::Attribute::fRotationOrder3")/sizeof(gzUInt8)) - 2, true))); }
}

void cAttribute::WnWidth(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[22] );
 nAttWidth = _nVal;
 ((ua_nAttWidth).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << (0 + 3));
}

void cAttribute::WnHeight(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[23] );
 nAttHeight = _nVal;
 ((ua_nAttHeight).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << (1 + 3));
}

void cAttribute::WnLength(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[24] );
 nAttLength = _nVal;
 ((ua_nAttLength).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << (2 + 3));
}

void cAttribute::TnWidth(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[25] );
 ((ua_nAttWidth).nTo = _nVal);
 nAttMove = nAttMove | (1 << (0 + 3));
}

void cAttribute::TnHeight(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[26] );
 ((ua_nAttHeight).nTo = _nVal);
 nAttMove = nAttMove | (1 << (1 + 3));
}

void cAttribute::TnLength(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[27] );
 ((ua_nAttLength).nTo = _nVal);
 nAttMove = nAttMove | (1 << (2 + 3));
}

void cAttribute::MnWidth(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[28] );
 ((ua_nAttWidth).nTo = nAttWidth + _nVal);
 nAttMove = nAttMove | (1 << 0);
}

void cAttribute::MnHeight(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[29] );
 ((ua_nAttHeight).nTo = nAttHeight + _nVal);
 nAttMove = nAttMove | (1 << 1);
}

void cAttribute::MnLength(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[30] );
 ((ua_nAttLength).nTo = nAttLength + _nVal);
 nAttMove = nAttMove | (1 << 2);
}

void cAttribute::LnWidth(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[31] );
 GZ_uEase_fLimit(&(ua_nAttWidth), _nVal);
}

void cAttribute::LnHeight(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[32] );
 GZ_uEase_fLimit(&(ua_nAttHeight), _nVal);
}

void cAttribute::LnLength(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[33] );
 GZ_uEase_fLimit(&(ua_nAttLength), _nVal);
}

void cAttribute::EnWidth(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[34] );
 GZ_uEase_fSpeed(&(ua_nAttWidth), _nSpeed);
}

void cAttribute::EnHeight(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[35] );
 GZ_uEase_fSpeed(&(ua_nAttHeight), _nSpeed);
}

void cAttribute::EnLength(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[36] );
 GZ_uEase_fSpeed(&(ua_nAttLength), _nSpeed);
}

gzFloat cAttribute::GnWidth(){ gzStack gz_s( &Attribute::zFuncName[37] );
 return nAttWidth;
}

gzFloat cAttribute::GnHeight(){ gzStack gz_s( &Attribute::zFuncName[38] );
 return nAttHeight;
}

gzFloat cAttribute::GnLength(){ gzStack gz_s( &Attribute::zFuncName[39] );
 return nAttLength;
}

void cAttribute::WnRoll(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[40] );
 nAttRoll = _nVal;
 ((ua_nAttRoll).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << (0 + 6));
}

void cAttribute::WnPitch(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[41] );
 nAttPitch = _nVal;
 ((ua_nAttPitch).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << (1 + 6));
}

void cAttribute::WnYaw(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[42] );
 nAttYaw = _nVal;
 ((ua_nAttYaw).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << (2 + 6));
}

void cAttribute::TnRoll(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[43] );
 ((ua_nAttRoll).nTo = _nVal);
 nAttMove = nAttMove | (1 << (0 + 6));
}

void cAttribute::TnPitch(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[44] );
 ((ua_nAttPitch).nTo = _nVal);
 nAttMove = nAttMove | (1 << (1 + 6));
}

void cAttribute::TnYaw(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[45] );
 ((ua_nAttYaw).nTo = _nVal);
 nAttMove = nAttMove | (1 << (2 + 6));
}

void cAttribute::MnRoll(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[46] );
 ((ua_nAttRoll).nTo = nAttRoll + _nVal);
 nAttMove = nAttMove | (1 << 0);
}

void cAttribute::MnPitch(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[47] );
 ((ua_nAttPitch).nTo = nAttPitch + _nVal);
 nAttMove = nAttMove | (1 << 1);
}

void cAttribute::MnYaw(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[48] );
 ((ua_nAttYaw).nTo = nAttYaw + _nVal);
 nAttMove = nAttMove | (1 << 2);
}

void cAttribute::LnRoll(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[49] );
 GZ_uEase_fLimit(&(ua_nAttRoll), _nVal);
}

void cAttribute::LnPitch(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[50] );
 GZ_uEase_fLimit(&(ua_nAttPitch), _nVal);
}

void cAttribute::LnYaw(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[51] );
 GZ_uEase_fLimit(&(ua_nAttYaw), _nVal);
}

void cAttribute::EnRoll(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[52] );
 GZ_uEase_fSpeed(&(ua_nAttRoll), _nSpeed);
}

void cAttribute::EnPitch(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[53] );
 GZ_uEase_fSpeed(&(ua_nAttPitch), _nSpeed);
}

void cAttribute::EnYaw(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[54] );
 GZ_uEase_fSpeed(&(ua_nAttYaw), _nSpeed);
}

gzFloat cAttribute::GnRoll(){ gzStack gz_s( &Attribute::zFuncName[55] );
 return nAttRoll;
}

gzFloat cAttribute::GnPitch(){ gzStack gz_s( &Attribute::zFuncName[56] );
 return nAttPitch;
}

gzFloat cAttribute::GnYaw(){ gzStack gz_s( &Attribute::zFuncName[57] );
 return nAttYaw;
}

void cAttribute::WnRed(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[58] );
 nAttRed = _nVal;
 ((ua_nAttRed).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << (0 + 9));
}

void cAttribute::WnBlue(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[59] );
 nAttBlue = _nVal;
 ((ua_nAttBlue).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << (1 + 9));
}

void cAttribute::WnGreen(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[60] );
 nAttGreen = _nVal;
 ((ua_nAttGreen).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << (2 + 9));
}

void cAttribute::WnAlpha(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[61] );
 nAttAlpha = _nVal;
 ((ua_nAttAlpha).nTo = _nVal);
 nAttWrap = nAttWrap | (1 << (3 + 9));
}

void cAttribute::TnRed(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[62] );
 ((ua_nAttRed).nTo = _nVal);
 nAttMove = nAttMove | (1 << (0 + 9));
}

void cAttribute::TnBlue(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[63] );
 ((ua_nAttBlue).nTo = _nVal);
 nAttMove = nAttMove | (1 << (1 + 9));
}

void cAttribute::TnGreen(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[64] );
 ((ua_nAttGreen).nTo = _nVal);
 nAttMove = nAttMove | (1 << (2 + 9));
}

void cAttribute::TnAlpha(gzFloat _nVal){ gzStack gz_s( &Attribute::zFuncName[65] );
 ((ua_nAttAlpha).nTo = _nVal);
 nAttMove = nAttMove | (1 << (2 + 9));
}

void cAttribute::EnRed(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[66] );
 GZ_uEase_fSpeed(&(ua_nAttRed), _nSpeed);
}

void cAttribute::EnBlue(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[67] );
 GZ_uEase_fSpeed(&(ua_nAttBlue), _nSpeed);
}

void cAttribute::EnGreen(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[68] );
 GZ_uEase_fSpeed(&(ua_nAttGreen), _nSpeed);
}

void cAttribute::EnAlpha(gzFloat _nSpeed){ gzStack gz_s( &Attribute::zFuncName[69] );
 GZ_uEase_fSpeed(&(ua_nAttAlpha), _nSpeed);
}

gzFloat cAttribute::GnRed(){ gzStack gz_s( &Attribute::zFuncName[70] );
 return nAttRed;
}

gzFloat cAttribute::GnBlue(){ gzStack gz_s( &Attribute::zFuncName[71] );
 return nAttBlue;
}

gzFloat cAttribute::GnGreen(){ gzStack gz_s( &Attribute::zFuncName[72] );
 return nAttGreen;
}

gzFloat cAttribute::GnAlpha(){ gzStack gz_s( &Attribute::zFuncName[73] );
 return nAttAlpha;
}

void cAttribute::fApplyColor(){ gzStack gz_s( &Attribute::zFuncName[74] );
 GZ_uEase_fStep(&(ua_nAttX));
 GZ_uEase_fStep(&(ua_nAttY));
 GZ_uEase_fStep(&(ua_nAttZ));
 GZ_uEase_fStep(&(ua_nAttWidth));
 GZ_uEase_fStep(&(ua_nAttHeight));
 GZ_uEase_fStep(&(ua_nAttLength));
 GZ_uEase_fStep(&(ua_nAttRed));
 GZ_uEase_fStep(&(ua_nAttGreen));
 GZ_uEase_fStep(&(ua_nAttBlue));
 GZ_uEase_fStep(&(ua_nAttAlpha));
 GZ_uEase_fStep(&(ua_nAttRoll));
 GZ_uEase_fStep(&(ua_nAttYaw));
 GZ_uEase_fStep(&(ua_nAttPitch));
 oQuaternion->fReset();
 if (gzInt(hRotateOrder) == Lib_GZ::Gfx::Attribute::eRotateOrder::RollYawPitch){
  oQuaternion->fRoll(nAttRoll);
  oQuaternion->fYaw(nAttYaw);
  oQuaternion->fPitch(nAttPitch * gzFloat(-1));
 }else{
  oQuaternion->fYaw(nAttYaw);
  oQuaternion->fPitch(nAttPitch * gzFloat(-1));
  oQuaternion->fRoll(nAttRoll);
 }
 oQuaternion->fCombine((Lib_GZ::Base::cQuaternion*)(oParent->oQuaternion.get()));
}

void cAttribute::fApplyPos(){ gzStack gz_s( &Attribute::zFuncName[75] );
 oGblPt->nX = nAttX * oParent->nGAttWidth;
 oGblPt->nY = nAttY * oParent->nGAttHeight;
 oGblPt->nZ = nAttZ * oParent->nGAttLength;
 oGblPt->fRotate((Lib_GZ::Base::cQuaternion*)(oParent->oQuaternion.get()));
 oGblPt->nX += oParent->oGblPt->nX;
 oGblPt->nY += oParent->oGblPt->nY;
 oGblPt->nZ += oParent->oGblPt->nZ;
 nGAttRoll = nAttRoll + oParent->nGAttRoll;
 nGAttYaw = nAttYaw + oParent->nGAttYaw;
 nGAttPitch = nAttPitch + oParent->nGAttPitch;
 nGAttRed = nAttRed + oParent->nGAttRed;
 nGAttGreen = nAttGreen + oParent->nGAttGreen;
 nGAttBlue = nAttBlue + oParent->nGAttBlue;
 nGAttWidth = nAttWidth * oParent->nGAttWidth;
 nGAttHeight = nAttHeight * oParent->nGAttHeight;
 nGAttLength = nAttLength * oParent->nGAttLength;
 nGAttAlpha = nAttAlpha * oParent->nGAttAlpha;
}

cAttribute::~cAttribute(){
}




Lib_GZ::Gfx::Attribute::uColor* Attribute::tNew_uColor(){
 uColor* _oRtu = (uColor*)calloc(1, sizeof(uColor));

 return _oRtu;
}

Lib_GZ::Gfx::Attribute::uColor* Attribute::tAw_uColor(ArrayPtr* _aArray, unsigned int _nIndex){
 if(_nIndex > _aArray->size){
 }
 if(_aArray->array[_nIndex] == 0){
 uColor* _rNewRtu = tNew_uColor();
 _aArray->array[_nIndex] = (ArrayPtr*)_rNewRtu;
 return _rNewRtu;
 }
 return (uColor*)_aArray->array[_nIndex];
}

void Attribute::tDel_uColor(void* _oRtu){
 free(((uColor*)_oRtu));
}
}}

namespace Lib_GZ{namespace Gfx{namespace Pixel{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fTestShape"},{0,"fCopyPixelToDest"},{0,"fGetSmoothPixel"},{0,"fDrawSegTri"},{0,"fDrawClipSquare"},{0,"Pixel"}};



}

namespace Pixel{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

void csPixel::fTestShape(Lib_GZ::Gfx::cShape* _oShape){ gzStack gz_s( &Pixel::zFuncName[0] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Pixel::fTestShape", (sizeof("\0" "GzNa::Pixel::fTestShape")/sizeof(gzUInt8)) - 2, true))); }
}


void pPixel::fCopyPixelToDest(gzInt32** _aDest, gzUInt _nPixelClip, gzInt _nX, gzInt _nY){ gzStack gz_s( &Pixel::zFuncName[1] );
 gzUInt _nPixelFrame = 0;
 gzUInt _nFrameAlpha = 0;
 gzUInt _nFrameRed = 0;
 gzUInt _nFrameBlue = 0;
 gzUInt _nFrameGreen = 0;
 gzUInt _nClipAlpha = 0;
 gzUInt _nClipRed = 0;
 gzUInt _nClipBlue = 0;
 gzUInt _nClipGreen = 0;
 _nPixelFrame = _aDest[gzUInt(_nY)][gzUInt(_nX)];
 if (_nPixelFrame == 0){
  _aDest[gzUInt(_nY)][gzUInt(_nX)] = _nPixelClip;
 }else{
  _nFrameAlpha = (_nPixelFrame >> 24) & 255;
  if (_nFrameAlpha != 255){
   gzUInt _nRevAlphaDest = 255 - (_nPixelFrame >> 24);
   if (_nRevAlphaDest != 255){
    gzUInt _nResL = (_nPixelClip << 8) & 4278255360;
    gzUInt _nResH = _nPixelClip & 4278255360;
    gzUInt _nFramL = (_nPixelFrame & 16711935) << 8;
    gzUInt _nFramH = _nPixelFrame & 4278255360;
    _nResL = (_nFramL + ((_nResL >> 8) * _nRevAlphaDest)) & 4278255360;
    _nResH = (_nFramH + ((_nResH >> 8) * _nRevAlphaDest)) & 4278255360;
    _aDest[gzUInt(_nY)][gzUInt(_nX)] = _nResH | (_nResL >> 8);
   }
  }
 }
}



void pPixel::fGetSmoothPixel(gzInt32** _aSource, gzUInt32 _nLx, gzUInt32 _nTy, gzInt32** _aDest, gzUInt32 _nDestX, gzUInt32 _nDestY, gzUInt32 _nAlpha, gzUInt32 _nPcBrRed, gzUInt32 _nPcBrGreen, gzUInt32 _nPcBrBlue, gzUInt32 _nPcRevRed, gzUInt32 _nPcRevBlue, gzUInt32 _nPcRevGreen, gzUInt32 _nOfRevRed, gzUInt32 _nOfRevBlue, gzUInt32 _nOfRevGreen){ gzStack gz_s( &Pixel::zFuncName[2] );
 gzUInt32 _nPixelFrame = _aDest[gzUInt(_nDestY)][gzUInt(_nDestX)];
 if ((_nPixelFrame & 4278190080) != gzUInt32(4278190080)){
  gzUInt32 _nRx = ((_nLx + Lib_GZ::Math::nPixPrec) & 0x000000FF);
  gzUInt32 _nBy = ((_nTy + Lib_GZ::Math::nPixPrec) & 0x000000FF);
  gzUInt32 _nRAlphaTR = ((_nRx * (Lib_GZ::Math::nPixPrec - ((_nTy) & 0x000000FF))) + Lib_GZ::Math::nPixHPrec) >> Lib_GZ::Math::nPixSP8;
  gzUInt32 _nRAlphaBR = ((_nRx * _nBy) + (Lib_GZ::Math::nPixHPrec - 1)) >> Lib_GZ::Math::nPixSP8;
  gzUInt32 _nRAlphaBL = (((Lib_GZ::Math::nPixPrec - ((_nLx) & 0x000000FF)) * _nBy) + (Lib_GZ::Math::nPixHPrec - 1)) >> Lib_GZ::Math::nPixSP8;
  gzUInt32 _nRAlphaTL = 257 - (_nRAlphaBR + _nRAlphaTR + _nRAlphaBL);
  _nLx = _nLx >> Lib_GZ::Math::nPixSP;
  _nTy = _nTy >> Lib_GZ::Math::nPixSP;
  gzUInt32 _nPixTL = _aSource[gzUInt(_nTy)][gzUInt(_nLx)];
  gzUInt32 _nPixTR = _aSource[gzUInt(_nTy)][gzUInt(_nLx + 1)];
  gzUInt32 _nPixBL = _aSource[gzUInt(_nTy + 1)][gzUInt(_nLx)];
  gzUInt32 _nPixBR = _aSource[gzUInt(_nTy + 1)][gzUInt(_nLx + 1)];
  gzUInt32 _nResH = (((_nPixTL & 4278255360) >> 8) * _nRAlphaTL);
  _nResH += (((_nPixTR & 4278255360) >> 8) * _nRAlphaTR);
  _nResH += (((_nPixBL & 4278255360) >> 8) * _nRAlphaBL);
  _nResH += (((_nPixBR & 4278255360) >> 8) * _nRAlphaBR);
  gzUInt32 _nResL = (_nPixTL & 16711935) * _nRAlphaTL;
  _nResL += (_nPixTR & 16711935) * _nRAlphaTR;
  _nResL += (_nPixBL & 16711935) * _nRAlphaBL;
  _nResL += (_nPixBR & 16711935) * _nRAlphaBR;
  gzUInt32 _nResHH = _nResH >> 24;
  gzUInt32 _nResLL = _nResL >> 24;
  _nResH = _nResH >> 8 & 255;
  _nResL = _nResL >> 8 & 255;
  _nResLL = (((_nResHH - _nResLL) * (signed(256) ^ ((signed((signed(_nPcBrRed + _nOfRevRed) ^ ((signed(_nPcBrRed + _nOfRevRed) ^ signed(0)) & -(signed(_nPcBrRed + _nOfRevRed) < signed(0))))) ^ signed(256)) & -(signed((signed(_nPcBrRed + _nOfRevRed) ^ ((signed(_nPcBrRed + _nOfRevRed) ^ signed(0)) & -(signed(_nPcBrRed + _nOfRevRed) < signed(0))))) < signed(256))))) + (_nResLL * _nPcRevRed)) * _nAlpha * (signed(256) ^ ((signed((signed(_nPcBrRed + 256) ^ ((signed(_nPcBrRed + 256) ^ signed(0)) & -(signed(_nPcBrRed + 256) < signed(0))))) ^ signed(256)) & -(signed((signed(_nPcBrRed + 256) ^ ((signed(_nPcBrRed + 256) ^ signed(0)) & -(signed(_nPcBrRed + 256) < signed(0))))) < signed(256))));
  _nResH = (((_nResHH - _nResH) * (signed(256) ^ ((signed((signed(_nPcBrGreen + _nOfRevGreen) ^ ((signed(_nPcBrGreen + _nOfRevGreen) ^ signed(0)) & -(signed(_nPcBrGreen + _nOfRevGreen) < signed(0))))) ^ signed(256)) & -(signed((signed(_nPcBrGreen + _nOfRevGreen) ^ ((signed(_nPcBrGreen + _nOfRevGreen) ^ signed(0)) & -(signed(_nPcBrGreen + _nOfRevGreen) < signed(0))))) < signed(256))))) + (_nResH * _nPcRevGreen)) * _nAlpha * (signed(256) ^ ((signed((signed(_nPcBrGreen + 256) ^ ((signed(_nPcBrGreen + 256) ^ signed(0)) & -(signed(_nPcBrGreen + 256) < signed(0))))) ^ signed(256)) & -(signed((signed(_nPcBrGreen + 256) ^ ((signed(_nPcBrGreen + 256) ^ signed(0)) & -(signed(_nPcBrGreen + 256) < signed(0))))) < signed(256))));
  _nResL = (((_nResHH - _nResL) * (signed(256) ^ ((signed((signed(_nPcBrBlue + _nOfRevBlue) ^ ((signed(_nPcBrBlue + _nOfRevBlue) ^ signed(0)) & -(signed(_nPcBrBlue + _nOfRevBlue) < signed(0))))) ^ signed(256)) & -(signed((signed(_nPcBrBlue + _nOfRevBlue) ^ ((signed(_nPcBrBlue + _nOfRevBlue) ^ signed(0)) & -(signed(_nPcBrBlue + _nOfRevBlue) < signed(0))))) < signed(256))))) + (_nResL * _nPcRevBlue)) * _nAlpha * (signed(256) ^ ((signed((signed(_nPcBrBlue + 256) ^ ((signed(_nPcBrBlue + 256) ^ signed(0)) & -(signed(_nPcBrBlue + 256) < signed(0))))) ^ signed(256)) & -(signed((signed(_nPcBrBlue + 256) ^ ((signed(_nPcBrBlue + 256) ^ signed(0)) & -(signed(_nPcBrBlue + 256) < signed(0))))) < signed(256))));
  _nResL = (_nResLL & 4278190080) | (_nResL >> 16);
  _nResH = (_nResHH * _nAlpha << 16) | (_nResH >> 16);
  _nResH = _nResH & 4278255360;
  gzUInt32 _nRevAlphaDest = 255 - (_nPixelFrame >> 24);
  if (_nRevAlphaDest != 255){
   gzUInt32 _nFramL = (_nPixelFrame & 16711935) << 8;
   gzUInt32 _nFramH = _nPixelFrame & 4278255360;
   _nResL = (_nFramL + ((_nResL >> 8) * _nRevAlphaDest)) & 4278255360;
   _nResH = (_nFramH + ((_nResH >> 8) * _nRevAlphaDest)) & 4278255360;
  }
  _aDest[gzUInt(_nDestY)][gzUInt(_nDestX)] = _nResH | (_nResL >> 8);
 }
}



void pPixel::fDrawSegTri(gzInt _nDirX, Lib_GZ::Base::cPt* _oPtT, Lib_GZ::Base::cPt* _oPtL, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtST, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtSL, Lib_GZ::Base::cPt* _oPtSegT, Lib_GZ::Base::cPt* _oPtSegL, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtSegST, Lib_GZ::Gfx::Triangle::_uPoint3D* _rPtSegSL, gzInt32** _aDest, gzInt32** _aSource, gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End, gzUInt _nLimW, gzUInt _nLimH, gzInt _nLast, gzUInt _nAlpha, gzUInt _nPcBrRed, gzUInt _nPcBrGreen, gzUInt _nPcBrBlue, gzUInt _nPcRevRed, gzUInt _nPcRevGreen, gzUInt _nPcRevBlue, gzUInt _nOfRevRed, gzUInt _nOfRevBlue, gzUInt _nOfRevGreen, gzInt _nFirst, gzBool _bNothingRight){ gzStack gz_s( &Pixel::zFuncName[3] );
 gzFloat _nFloatPrec = gzFloat(Lib_GZ::Math::nPrec);
 gzInt _nFL1x = gzInt(_oPtSegT->nX * gzFloat(Lib_GZ::Math::nPrec));
 gzInt _nFL2x = gzInt(_oPtSegL->nX * gzFloat(Lib_GZ::Math::nPrec));
 gzInt _nFTy = gzInt(_oPtSegT->nY * gzFloat(Lib_GZ::Math::nPrec));
 gzInt _nFBy = gzInt(_oPtSegL->nY * gzFloat(Lib_GZ::Math::nPrec));
 gzFloat _nSL1x = ((_rPtSegST->nX * 256.0) + 64.0) / _oPtSegT->nZ;
 gzFloat _nSL1y = ((_rPtSegST->nY * 256.0) - 64.0) / _oPtSegT->nZ;
 gzFloat _nSL1z = gzFloat(1) / _oPtSegT->nZ;
 gzFloat _nSL2x = ((_rPtSegSL->nX * 256.0) + 64.0) / _oPtSegL->nZ;
 gzFloat _nSL2y = ((_rPtSegSL->nY * 256.0) - 64.0) / _oPtSegL->nZ;
 gzFloat _nSL2z = gzFloat(1) / _oPtSegL->nZ;
 gzInt _nSlopeTy = gzInt(_oPtT->nY * gzFloat(Lib_GZ::Math::nPrec));
 gzInt _nSlopeTx = gzInt(_oPtT->nX * gzFloat(Lib_GZ::Math::nPrec));
 gzInt _nSlopeLy = gzInt(_oPtL->nY * gzFloat(Lib_GZ::Math::nPrec));
 gzInt _nSlopeLx = gzInt(_oPtL->nX * gzFloat(Lib_GZ::Math::nPrec));
 gzFloat _nSlopeSTx = ((_rPtST->nX * 256.0) + 64.0) / _oPtT->nZ;
 gzFloat _nSlopeSTy = ((_rPtST->nY * 256.0) - 64.0) / _oPtT->nZ;
 gzFloat _nSlopeSTz = gzFloat(1) / _oPtT->nZ;
 gzFloat _nSlopeSLx = ((_rPtSL->nX * 256.0) + 64.0) / _oPtL->nZ;
 gzFloat _nSlopeSLy = ((_rPtSL->nY * 256.0) - 64.0) / _oPtL->nZ;
 gzFloat _nSlopeSLz = gzFloat(1) / _oPtL->nZ;
 gzInt _nIPosX = _nPosX - Lib_GZ::Math::nPrec;
 gzInt _nIPosY = _nPosY - Lib_GZ::Math::nPrec;
 gzFloat _nSLx;
 gzFloat _nSLy;
 gzFloat _nSLz;
 gzFloat _nSRx;
 gzFloat _nSRy;
 gzFloat _nSRz;
 gzUInt _nGetX = 0;
 gzUInt _nGetY = 0;
 gzInt _nX = 0;
 gzInt _nY = 0;
 gzUInt _nPixelFrame = 0;
 gzUInt _nPixelClip = 0;
 gzInt _nXStart = 0;
 gzInt _nXEnd = 0;
 gzInt _nXDist = 0;
 gzInt _nOffX = 0;
 gzInt _nOffY = 0;
 gzInt _nIntOffX = (((_nIPosX + Lib_GZ::Math::nHPrec) >> Lib_GZ::Math::nIPrecision) << Lib_GZ::Math::nIPrecision);
 gzInt _nIntOffY = (((_nIPosY + Lib_GZ::Math::nHPrec) >> Lib_GZ::Math::nIPrecision) << Lib_GZ::Math::nIPrecision);
 gzInt _nLimXTOffset = (Lib_GZ::Math::nPrec + Lib_GZ::Math::nHPrec) - (_nIPosX + Lib_GZ::Math::nHPrec - _nIntOffX) - Lib_GZ::Math::nPrec;
 gzInt _nFHeight = (_nFBy - _nFTy) + 1;
 gzInt _nFHeightSlope = (_nSlopeLy - _nSlopeTy) + 1;
 gzInt _nDif_FLx = (tLS(_nFL2x - _nFL1x) << Lib_GZ::Math::nDivPrec) / _nFHeight;
 gzInt _nDif_FRx = (tLS(_nSlopeLx - _nSlopeTx) << Lib_GZ::Math::nDivPrec) / _nFHeightSlope;
 gzFloat _nFHeightFloat = gzFloat(_nFHeight) / _nFloatPrec;
 gzFloat _nDif_SLx = (_nSL2x - _nSL1x) / _nFHeightFloat;
 gzFloat _nDif_SLy = (_nSL2y - _nSL1y) / _nFHeightFloat;
 gzFloat _nDif_SLz = (_nSL2z - _nSL1z) / _nFHeightFloat;
 gzFloat _nFHeightFloatSlope = gzFloat(_nFHeightSlope) / _nFloatPrec;
 gzFloat _nDif_SRx = (_nSlopeSLx - _nSlopeSTx) / _nFHeightFloatSlope;
 gzFloat _nDif_SRy = (_nSlopeSLy - _nSlopeSTy) / _nFHeightFloatSlope;
 gzFloat _nDif_SRz = (_nSlopeSLz - _nSlopeSTz) / _nFHeightFloatSlope;
 gzInt _nTopY = _nIPosY + _nFTy;
 gzInt _nRealY = (signed((((_nIPosY + _nFTy) >> Lib_GZ::Math::nIPrecision) << Lib_GZ::Math::nIPrecision) + _nFirst) ^ ((signed((((_nIPosY + _nFTy) >> Lib_GZ::Math::nIPrecision) << Lib_GZ::Math::nIPrecision) + _nFirst) ^ signed(_nIntOffY + _nY_Start)) & -(signed((((_nIPosY + _nFTy) >> Lib_GZ::Math::nIPrecision) << Lib_GZ::Math::nIPrecision) + _nFirst) < signed(_nIntOffY + _nY_Start))));
 gzInt _nRealYPix = _nRealY >> Lib_GZ::Math::nSP;
 gzInt _nToY = (signed(_nIntOffY + _nY_End) ^ ((signed((((_nIPosY + _nFBy) >> Lib_GZ::Math::nIPrecision) << Lib_GZ::Math::nIPrecision) + Lib_GZ::Math::nPrec) ^ signed(_nIntOffY + _nY_End)) & -(signed((((_nIPosY + _nFBy) >> Lib_GZ::Math::nIPrecision) << Lib_GZ::Math::nIPrecision) + Lib_GZ::Math::nPrec) < signed(_nIntOffY + _nY_End))));
 gzInt y = (((_nIPosY + _nFTy) & 0x000003FF) * -1) - ((((_nIPosY + _nFTy) >> Lib_GZ::Math::nIPrecision) << Lib_GZ::Math::nIPrecision) - _nRealY);
 gzFloat _nYFloat = gzFloat(y) / _nFloatPrec;
 gzFloat _nFTyFloat = gzFloat(_nFTy) / _nFloatPrec;
 gzFloat _nSlopeTyFloat = gzFloat(_nSlopeTy) / _nFloatPrec;
 gzInt _nAliL = 0;
 gzInt _nAliR = 0;
 if (_nDirX < 0){
 }else{
 }
 gzInt _nXAdd = Lib_GZ::Math::nPrec * _nDirX;
 gzFloat _nXAddFloat = gzFloat(_nDirX);
 gzInt _nDirEndX = _nAliR + Lib_GZ::Math::nPrec;
 gzInt _nDirBegX = Lib_GZ::Math::nPrec - _nAliL;
 if (_nDirX == -1){
  _nDirEndX = _nAliR;
  _nDirBegX = 0 - _nAliL;
 }
 gzInt _nIncY;
 gzInt x;
 gzInt _nXLimit;
 _nLimW -= 128;
 _nLimH -= 128;
 while(_nRealY < _nToY){
  _nSLx = _nSL1x + (_nYFloat * _nDif_SLx);
  _nSLy = _nSL1y + (_nYFloat * _nDif_SLy);
  _nSLz = _nSL1z + (_nYFloat * _nDif_SLz);
  _nSRx = _nSlopeSTx + ((_nYFloat + (_nFTyFloat - _nSlopeTyFloat)) * _nDif_SRx);
  _nSRy = _nSlopeSTy + ((_nYFloat + (_nFTyFloat - _nSlopeTyFloat)) * _nDif_SRy);
  _nSRz = _nSlopeSTz + ((_nYFloat + (_nFTyFloat - _nSlopeTyFloat)) * _nDif_SRz);
  _nXStart = _nFL1x + ((tLS(y) * _nDif_FLx) >> Lib_GZ::Math::nDivPrec);
  _nXEnd = _nSlopeTx + ((tLS(y + (_nFTy - _nSlopeTy)) * _nDif_FRx) >> Lib_GZ::Math::nDivPrec);
  if (_nDirX == 1){
   _nXDist = (signed(_nXEnd - _nXStart) ^ ((signed(_nXEnd - _nXStart) ^ signed(1)) & -(signed(_nXEnd - _nXStart) < signed(1))));
   x = (signed(_nDirBegX) ^ ((signed(_nDirBegX) ^ signed(_nX_Start - _nXStart + _nLimXTOffset)) & -(signed(_nDirBegX) < signed(_nX_Start - _nXStart + _nLimXTOffset))));
   _nXLimit = (signed(_nX_End - _nXStart + _nLimXTOffset + Lib_GZ::Math::nPrec) ^ ((signed(_nXDist + _nDirEndX) ^ signed(_nX_End - _nXStart + _nLimXTOffset + Lib_GZ::Math::nPrec)) & -(signed(_nXDist + _nDirEndX) < signed(_nX_End - _nXStart + _nLimXTOffset + Lib_GZ::Math::nPrec))));
  }else{
   _nXDist = (signed(-1) ^ ((signed(_nXEnd - _nXStart) ^ signed(-1)) & -(signed(_nXEnd - _nXStart) < signed(-1))));
   x = (signed(_nX_End - _nXStart + _nLimXTOffset) ^ ((signed(_nDirBegX) ^ signed(_nX_End - _nXStart + _nLimXTOffset)) & -(signed(_nDirBegX) < signed(_nX_End - _nXStart + _nLimXTOffset))));
   _nXLimit = (signed(_nXDist + _nDirEndX) ^ ((signed(_nXDist + _nDirEndX) ^ signed(_nX_Start - _nXStart + _nLimXTOffset - Lib_GZ::Math::nPrec)) & -(signed(_nXDist + _nDirEndX) < signed(_nX_Start - _nXStart + _nLimXTOffset - Lib_GZ::Math::nPrec))));
  }
  gzFloat _nXDistFloat = gzFloat(_nXDist) / _nFloatPrec;
  gzFloat _nDif_SLRx = (_nSRx - _nSLx) / _nXDistFloat;
  gzFloat _nDif_SLRy = (_nSRy - _nSLy) / _nXDistFloat;
  gzFloat _nDif_SLRz = (_nSRz - _nSLz) / _nXDistFloat;
  gzInt _nXFrac = ((_nIPosX + _nXStart + x) & 0x000003FF);
  x -= _nXFrac;
  _nX = _nIPosX + _nXStart + _nXFrac;
  gzInt _nRealXPix = (_nX + x) >> Lib_GZ::Math::nSP;
  gzFloat _nXFloat = gzFloat(x) / _nFloatPrec;
  _nXLimit = (((_nXLimit - x) >> Lib_GZ::Math::nIPrecision) << Lib_GZ::Math::nIPrecision) + x;
  if ((_nDirX == 1 && x < _nXLimit) || (_nDirX == -1 && x > _nXLimit)){
   for(; x != _nXLimit; x += _nXAdd){
    gzFloat _n1OnZ = _nSLz + (_nXFloat * _nDif_SLRz);
    _nGetX = Lib_GZ::pMath::fFloatToInt((_nSLx + (_nXFloat * _nDif_SLRx)) / _n1OnZ);
    _nGetY = Lib_GZ::pMath::fFloatToInt((_nSLy + (_nXFloat * _nDif_SLRy)) / _n1OnZ);
    if (_nGetX > _nLimW || _nGetY > _nLimH){
     _nGetX = 0;
     _nGetY = 0;
    }
    Lib_GZ::Gfx::pPixel::fGetSmoothPixel((gzInt32**)(_aSource), _nGetX, _nGetY, (gzInt32**)(_aDest), _nRealXPix, _nRealYPix, _nAlpha, _nPcBrRed, _nPcBrGreen, _nPcBrBlue, _nPcRevRed, _nPcRevGreen, _nPcRevBlue, _nOfRevRed, _nOfRevBlue, _nOfRevGreen);
    _nRealXPix += _nDirX;
    _nXFloat += _nXAddFloat;
   }
  }
  _nYFloat += gzFloat(1);
  y += Lib_GZ::Math::nPrec;
  _nRealY += Lib_GZ::Math::nPrec;
  _nRealYPix++;
 }
}


void csPixel::fDrawClipSquare(gzInt32** _aDest, gzInt32** _aSource, gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End){ gzStack gz_s( &Pixel::zFuncName[4] );
 gzUInt _nPixelClip = 0;
 gzInt _nX = 0;
 gzInt _nY = 0;
 for(gzInt y = _nY_Start; y <= _nY_End; y++){
  _nY = y + _nPosY;
  for(gzInt x = _nX_Start; x <= _nX_End; x++){
   _nX = x + _nPosX;
   _nPixelClip = _aSource[gzUInt(y)][gzUInt(x)];
   Lib_GZ::Gfx::pPixel::fCopyPixelToDest((gzInt32**)(_aDest), _nPixelClip, _nX, _nY);
  }
 }
}

cPixel::cPixel(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cPixel::Ini_cPixel(){ gzStack gz_s( &Pixel::zFuncName[5] );
 Ini_cClass();
}

gzAny cPixel::MemCopy(){
return (gzAny)new cPixel(*this);
}
gzAny cPixel::DeepCopy(){
return (gzAny)new cPixel(*this, true);
}
cPixel::~cPixel(){
}



}}

namespace Lib_GZ{namespace Gfx{namespace Shape{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Shape"},{0,"fAddPt"},{0,"fCreateFace"},{0,"fFinalUpdate"},{0,"fGpuDraw"},{0,"fIsInside"},{0,"fCpuDraw"},{0,"fTransform"},{0,"fConvertTo2d"},{0,"fContextResume"}};



}

namespace Shape{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cShape::cShape(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cObject(_parent){

 aPt3dOri = (gzFloat*)malloc((12) * (sizeof(gzFloat)));
 aPoint3D = (gzFloat*)malloc((12) * (sizeof(gzFloat)));
 aPoint2D = (gzFloat*)malloc((12) * (sizeof(gzFloat)));
 aPtSource = (gzFloat*)malloc((10) * (sizeof(gzFloat)));
 nIndexPt = 0;
 nIndexSrc = 0;
 nNbPt = 0;
 nNbPt3 = 0;
 bSmoothBorder = true;

}

void cShape::Ini_cShape(Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY, gzUInt _nNbPt, gzBool _bSmoothBorder){ gzStack gz_s( &Shape::zFuncName[0] );
 Ini_cObject((Lib_GZ::Gfx::cRoot*)(_oParent), _nX, _nY);
 nNbPt = _nNbPt;
 nNbPt3 = _nNbPt * 3;
 bSmoothBorder = _bSmoothBorder;
}

void cShape::fAddPt(Lib_GZ::Base::cPtA* _oPt, Lib_GZ::Base::cPt* _oCenter){ gzStack gz_s( &Shape::zFuncName[1] );
 _oPt->nX = _oPt->nX - _oCenter->nX;
 _oPt->nY = _oPt->nY - _oCenter->nY;
 _oPt->nZ = _oPt->nZ - _oCenter->nZ;
 aNewPt3dOri.fPush(gzSCastSelf<Lib_GZ::Base::cPtA>(_oPt));
}

void cShape::fCreateFace(Lib_GZ::File::cRcImg* _oRc, Lib_GZ::Base::cPoly4* _oSrc){ gzStack gz_s( &Shape::zFuncName[2] );
 oFace = gzSCast<Lib_GZ::Gfx::cFace>((Lib_GZ::Gfx::Face::Get(thread)->New(this, (Lib_GZ::Gfx::cShape*)(this), (Lib_GZ::File::cRcImg*)(_oRc), (Lib_GZ::Base::cPtA*)(aNewPt3dOri[gzUInt(0)].get()), (Lib_GZ::Base::cPtA*)(aNewPt3dOri[gzUInt(1)].get()), (Lib_GZ::Base::cPtA*)(aNewPt3dOri[gzUInt(2)].get()), (Lib_GZ::Base::cPtA*)(aNewPt3dOri[gzUInt(3)].get()), (gzFloat*)(aPoint2D), (Lib_GZ::Base::cPoly4*)(_oSrc))));
}

void cShape::fFinalUpdate(){ gzStack gz_s( &Shape::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Shape::fFinalUpdate", (sizeof("\0" "GzNa::Shape::fFinalUpdate")/sizeof(gzUInt8)) - 2, true))); }
}

gzBool cShape::fGpuDraw(){ gzStack gz_s( &Shape::zFuncName[4] );
 oFace->fGpuDraw();
 return true;
}

gzBool cShape::fIsInside(){ gzStack gz_s( &Shape::zFuncName[5] );
 gzFloat _nL;
 gzFloat _nR;
 gzFloat _nT;
 gzFloat _nB;
 if (aPoint2D[gzUInt(0)] < aPoint2D[gzUInt(3)]){
  _nL = aPoint2D[gzUInt(0)];
  _nR = aPoint2D[gzUInt(3)];
 }else{
  _nL = aPoint2D[gzUInt(3)];
  _nR = aPoint2D[gzUInt(0)];
 }
 if (aPoint2D[gzUInt(1)] < aPoint2D[gzUInt(7)]){
  _nT = aPoint2D[gzUInt(1)];
  _nB = aPoint2D[gzUInt(7)];
 }else{
  _nT = aPoint2D[gzUInt(7)];
  _nB = aPoint2D[gzUInt(1)];
 }
 gzFloat _nBuffL = gzFloat(0);
 gzFloat _nBuffR = gzFloat(1024);
 gzFloat _nBuffT = gzFloat(0);
 gzFloat _nBuffB = gzFloat(800);
 if (_nR < _nBuffL || _nL > _nBuffR || _nB < _nBuffT || _nT > _nBuffB){
  return false;
 }else{
  return true;
 }
 return false;
}

gzBool cShape::fCpuDraw(gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End){ gzStack gz_s( &Shape::zFuncName[6] );
 if (oGblPt->nZ < (oItf->nHalfFrameHeight * gzFloat(-1))){
  return false;
 }
 fTransform();
 fConvertTo2d();
 gzInt _nRsBrRed = gzInt(nGAttRed * gzFloat(255));
 gzInt _nRsBrGreen = gzInt(nGAttGreen * gzFloat(255));
 gzInt _nRsBrBlue = gzInt(nGAttBlue * gzFloat(255));
 gzInt _nRsAlpha = gzInt((nGAttAlpha * gzFloat(255)));
 if (_nRsAlpha > 256){
  _nRsAlpha = 256;
 }
 if (_nRsAlpha < 0){
  _nRsAlpha = 0;
 }
 _nX_Start = oDstBuff->nBuffPLimL;
 _nX_End = oDstBuff->nBuffPLimR;
 _nY_Start = oDstBuff->nBuffPLimT;
 _nY_End = oDstBuff->nBuffPLimB;
 oFace->fCpuDraw((Lib_GZ::Gfx::cObject*)(oDstBuff.get()), Lib_GZ::Math::nHPrec, Lib_GZ::Math::nHPrec, _nX_Start, _nX_End, _nY_Start, _nY_End, _nRsAlpha, _nRsBrRed, _nRsBrGreen, _nRsBrBlue, 256, 256, 256, 0, 0, 0);
 return true;
}

void cShape::fTransform(){ gzStack gz_s( &Shape::zFuncName[7] );
 gzFloat _nRoll = nGAttRoll;
 gzFloat _nPitch = nGAttPitch;
 gzFloat _nYaw = nGAttYaw;
 gzFloat _nWidth = nGAttWidth;
 gzFloat _nHeight = nGAttHeight;
 gzFloat _nLength = nGAttLength;
 gzFloat _nFocal = 1.0 / 270.0;
 for(gzUInt i = 0; i < nNbPt3; i += 3){
  Lib_GZ::Gfx::Triangle::_uPoint3D* _rPt = (Lib_GZ::Gfx::Triangle::_uPoint3D*)&(aPt3dOri[gzUInt(i)]);
  gzFloat x = _rPt->nX * _nWidth;
  gzFloat y = _rPt->nY * _nHeight;
  gzFloat z = _rPt->nZ * _nLength;
  gzFloat _nTx = (x * Lib_GZ::pMath::fCos(_nYaw)) - (z * Lib_GZ::pMath::fSin(_nYaw));
  gzFloat _nTz = (x * Lib_GZ::pMath::fSin(_nYaw)) + (z * Lib_GZ::pMath::fCos(_nYaw));
  gzFloat _nTy = (y * Lib_GZ::pMath::fCos(_nPitch)) - (_nTz * Lib_GZ::pMath::fSin(_nPitch));
  z = (y * Lib_GZ::pMath::fSin(_nPitch) * gzFloat(-1)) - (_nTz * Lib_GZ::pMath::fCos(_nPitch));
  x = (_nTx * Lib_GZ::pMath::fCos(_nRoll)) - (_nTy * Lib_GZ::pMath::fSin(_nRoll));
  y = (_nTx * Lib_GZ::pMath::fSin(_nRoll)) + (_nTy * Lib_GZ::pMath::fCos(_nRoll));
  aPoint3D[gzUInt(i)] = x;
  aPoint3D[gzUInt(i + 1)] = y;
  aPoint3D[gzUInt(i + 2)] = z;
 }
 for(gzUInt i = 0; i < aNewPt3dOri->nSize; i++){
  gzSp<Lib_GZ::Base::cPtA> _oPt = gzSCast<Lib_GZ::Base::cPtA>(aNewPt3dOri[gzUInt(i)]);
  _oPt->fCopyToTf();
  _oPt->oTf->nX *= nGAttWidth;
  _oPt->oTf->nY *= nGAttHeight;
  _oPt->oTf->nZ *= nGAttLength;
  _oPt->oTf->fRotate((Lib_GZ::Base::cQuaternion*)(oQuaternion.get()));
 }
}

void cShape::fConvertTo2d(){ gzStack gz_s( &Shape::zFuncName[8] );
 gzFloat _nFocal = oDstBuff->oPerspective->nValue;
 gzFloat _nX = oGblPt->nX + 0.25;
 gzFloat _nY = oGblPt->nY - 0.25;
 if (oDstBuff->oPerspective->nType == 1){
  for(gzUInt i = 0; i < aNewPt3dOri->nSize; i++){
   gzSp<Lib_GZ::Base::cPtA> _oPt = gzSCast<Lib_GZ::Base::cPtA>(aNewPt3dOri[gzUInt(i)]);
   gzFloat _nZ = ((_oPt->oTf->nZ + oGblPt->nZ) * _nFocal) + gzFloat(1);
   _oPt->o2d->nX = (_oPt->oTf->nX / _nZ) + _nX;
   _oPt->o2d->nY = (_oPt->oTf->nY / _nZ) + _nY;
   _oPt->o2d->nZ = _nZ;
  }
 }else{
  gzFloat _nFromX = oDstBuff->oPerspective->nFromX;
  gzFloat _nFromY = oDstBuff->oPerspective->nFromY;
  for(gzUInt i = 0; i < aNewPt3dOri->nSize; i++){
   gzSp<Lib_GZ::Base::cPtA> _oPt = gzSCast<Lib_GZ::Base::cPtA>(aNewPt3dOri[gzUInt(i)]);
   gzFloat _nZ = ((_oPt->oTf->nZ + oGblPt->nZ) * _nFocal) + gzFloat(1);
   _oPt->o2d->nX = ((_oPt->oTf->nX + (_nX - _nFromX)) / _nZ) - (_nX - _nFromX) + _nX;
   _oPt->o2d->nY = ((_oPt->oTf->nY + (_nY - _nFromY)) / _nZ) - (_nY - _nFromY) + _nY;
   _oPt->o2d->nZ = _nZ;
  }
 }
}

void cShape::fContextResume(){ gzStack gz_s( &Shape::zFuncName[9] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Shape::fContextResume", (sizeof("\0" "GzNa::Shape::fContextResume")/sizeof(gzUInt8)) - 2, true))); }
}

cShape::~cShape(){
 free(aPt3dOri);
 free(aPoint3D);
 free(aPoint2D);
 free(aPtSource);
}



}}

namespace Lib_GZ{namespace Gfx{namespace Buffer{
}}}


namespace Lib_GZ{namespace Gfx{namespace Buffer{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Buffer"},{0,"fSetLimit"}};



}

namespace Buffer{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cBuffer::cBuffer(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cObject(_parent){
 nX=0;nY=0;nBuffPLimT=0;nBuffPLimL=0;nBuffPLimR=0;nBuffPLimB=0;nBuffLimT=0;nBuffLimL=0;nBuffLimR=0;nBuffLimB=0;
 nBuffWidth = 0;
 nBuffHeight = 0;
 aBufferArray = 0;

}

void cBuffer::Ini_cBuffer(Lib_GZ::Gfx::cRoot* _oParent, gzUInt _nWidth, gzUInt _nHeight, gzBool _bNewPerspective){ gzStack gz_s( &Buffer::zFuncName[0] );
 Ini_cObject((Lib_GZ::Gfx::cRoot*)(_oParent), gzFloat(0), gzFloat(0));
 oItf->nTotalBuffers++;
 oDstBuff = gzSCastSelf<Lib_GZ::Gfx::cBuffer>(this);
 nBuffWidth = _nWidth;
 nBuffHeight = _nHeight;
 if (_bNewPerspective != 0){
  oPerspective = gzSCast<Lib_GZ::Gfx::cPerspective>((Lib_GZ::Gfx::Perspective::Get(thread)->New(this, (Lib_GZ::Gfx::cBuffer*)(this))));
 }else{
 }
 fSetLimit(0, 0, _nWidth - 1, _nHeight - 1);
}

void cBuffer::fSetLimit(gzInt _nLimL, gzInt _nLimR, gzInt _nLimT, gzInt _nLimB){ gzStack gz_s( &Buffer::zFuncName[1] );
 nBuffLimT = _nLimL;
 nBuffLimL = _nLimR;
 nBuffLimR = _nLimT;
 nBuffLimB = _nLimB;
 nBuffPLimT = _nLimL * Lib_GZ::Math::nPrec;
 nBuffPLimL = _nLimR * Lib_GZ::Math::nPrec;
 nBuffPLimR = _nLimT * Lib_GZ::Math::nPrec;
 nBuffPLimB = _nLimB * Lib_GZ::Math::nPrec;
}

cBuffer::~cBuffer(){
oItf->nTotalBuffers--;
}



}}

namespace Lib_GZ{namespace Gfx{namespace Perspective{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Perspective"},{0,"fSetFromPosition"},{0,"fSetFromSelf"},{0,"fSetFromBuffer"},{0,"fSetFromBufferCenter"},{0,"fSetFocal"}};



}

namespace Perspective{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cPerspective::cPerspective(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){
 nFocal=0;nValue=0;nFromX=0;nFromY=0;nType=0;

}

void cPerspective::Ini_cPerspective(Lib_GZ::Gfx::cBuffer* _oBuffer, gzFloat _nFocalPc, gzBool _bSelf){ gzStack gz_s( &Perspective::zFuncName[0] );
 oBuffer = gzSCastSelf<Lib_GZ::Gfx::cBuffer>(_oBuffer);
 if (_bSelf != 0){
  fSetFromSelf();
 }else{
  fSetFromBufferCenter();
 }
 fSetFocal(_nFocalPc);
}

void cPerspective::fSetFromPosition(gzFloat _nFromX, gzFloat _nFromY){ gzStack gz_s( &Perspective::zFuncName[1] );
 nFromX = _nFromX;
 nFromY = _nFromY;
 nType = 0;
}

void cPerspective::fSetFromSelf(){ gzStack gz_s( &Perspective::zFuncName[2] );
 nType = 1;
}

void cPerspective::fSetFromBuffer(){ gzStack gz_s( &Perspective::zFuncName[3] );
 nType = 2;
 nFromX = gzFloat(oBuffer->nX);
 nFromY = gzFloat(oBuffer->nY);
}

void cPerspective::fSetFromBufferCenter(){ gzStack gz_s( &Perspective::zFuncName[4] );
 nType = 2;
 nFromX = gzFloat(oBuffer->nX + (oBuffer->nBuffWidth / 2));
 nFromY = gzFloat(oBuffer->nY + (oBuffer->nBuffHeight / 2));
}

void cPerspective::fSetFocal(gzFloat _nPcVal){ gzStack gz_s( &Perspective::zFuncName[5] );
 if (_nPcVal > gzFloat(400)){
  _nPcVal = gzFloat(400);
 }
 if (_nPcVal < gzFloat(0)){
  _nPcVal = gzFloat(0);
 }
 nFocal = _nPcVal;
 _nPcVal += gzFloat(10);
 nValue = 8.0 / (_nPcVal * _nPcVal);
}

gzAny cPerspective::MemCopy(){
return (gzAny)new cPerspective(*this);
}
gzAny cPerspective::DeepCopy(){
return (gzAny)new cPerspective(*this, true);
}
cPerspective::~cPerspective(){
}



}}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuBuffer{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"GpuBuffer"}};



}

namespace GpuBuffer{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cGpuBuffer::cGpuBuffer(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::GpuObj::cGpuObject(_parent){
 nId=0;

}

void cGpuBuffer::Ini_cGpuBuffer(){ gzStack gz_s( &GpuBuffer::zFuncName[0] );
}

gzAny cGpuBuffer::MemCopy(){
return (gzAny)new cGpuBuffer(*this);
}
gzAny cGpuBuffer::DeepCopy(){
return (gzAny)new cGpuBuffer(*this, true);
}
cGpuBuffer::~cGpuBuffer(){
}



}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace ProgramShader{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"ProgramShader"},{0,"fLoad"},{0,"fAttachShader"},{0,"fLink"},{0,"fUse"},{0,"fAddAttribute"},{0,"fAddVbo"},{0,"fSetDefaultAttribDivisor"}};



}

namespace ProgramShader{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cProgramShader::cProgramShader(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){
 bLinked=0;
 nDefaultAttribDivisor = 0;

}

void cProgramShader::Ini_cProgramShader(){ gzStack gz_s( &ProgramShader::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- ProgramShader Created!! ---", (sizeof("\0" "--- ProgramShader Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 fLoad();
}

void cProgramShader::fLoad(){ gzStack gz_s( &ProgramShader::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ProgramShader::fLoad", (sizeof("\0" "GzNa::ProgramShader::fLoad")/sizeof(gzUInt8)) - 2, true))); }
}

void cProgramShader::fAttachShader(Lib_GZ::Gpu::ShaderBase::cShaderBase* _oShader){ gzStack gz_s( &ProgramShader::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ProgramShader::fAttachShader", (sizeof("\0" "GzNa::ProgramShader::fAttachShader")/sizeof(gzUInt8)) - 2, true))); }
}

gzBool cProgramShader::fLink(){ gzStack gz_s( &ProgramShader::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ProgramShader::fLink", (sizeof("\0" "GzNa::ProgramShader::fLink")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

gzBool cProgramShader::fUse(){ gzStack gz_s( &ProgramShader::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ProgramShader::fUse", (sizeof("\0" "GzNa::ProgramShader::fUse")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

gzSp<Lib_GZ::Gpu::Base::cAttribute> cProgramShader::fAddAttribute(const gzStr& _sName){ gzStack gz_s( &ProgramShader::zFuncName[5] );
 gzSp<Lib_GZ::Gpu::Base::cAttribute> _oAttrib = gzSCast<Lib_GZ::Gpu::Base::cAttribute>((Lib_GZ::Gpu::Base::Attribute::Get(thread)->New(this, (Lib_GZ::Gpu::ShaderBase::cProgramShader*)(this), _sName)));
 if (nDefaultAttribDivisor != 0){
  _oAttrib->fSetDivisor(nDefaultAttribDivisor);
 }
 return gzSCast<Lib_GZ::Gpu::Base::cAttribute>(_oAttrib);
}

gzSp<Lib_GZ::Gpu::ShaderBase::cVbo> cProgramShader::fAddVbo(){ gzStack gz_s( &ProgramShader::zFuncName[6] );
 gzSp<Lib_GZ::Gpu::ShaderBase::cVbo> _oVbo = gzSCast<Lib_GZ::Gpu::ShaderBase::cVbo>((Lib_GZ::Gpu::ShaderBase::Vbo::Get(thread)->New(this, (Lib_GZ::Gpu::ShaderBase::cProgramShader*)(this))));
 return gzSCast<Lib_GZ::Gpu::ShaderBase::cVbo>(_oVbo);
}

void cProgramShader::fSetDefaultAttribDivisor(gzInt _nDefaultAttribDivisor){ gzStack gz_s( &ProgramShader::zFuncName[7] );
 nDefaultAttribDivisor = _nDefaultAttribDivisor;
}

gzAny cProgramShader::MemCopy(){
return (gzAny)new cProgramShader(*this);
}
gzAny cProgramShader::DeepCopy(){
return (gzAny)new cProgramShader(*this, true);
}
cProgramShader::~cProgramShader(){
}



}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace ShaderBase{
}}}}


namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace ShaderBase{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"ShaderBase"},{0,"fLoad"},{0,"fSendToGpu"},{0,"fCompile"},{0,"fGetLog"},{0,"fGetErrorLine"},{0,"fAddLine"}};



}

namespace ShaderBase{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cShaderBase::cShaderBase(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){
 bReady=0;nLineError=0;nSourceError=0;



}

void cShaderBase::Ini_cShaderBase(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version){ gzStack gz_s( &ShaderBase::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- BaseShader Created!! ---", (sizeof("\0" "--- BaseShader Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 hGlsl_ES_Version = _hGlsl_ES_Version;
}

void cShaderBase::fLoad(){ gzStack gz_s( &ShaderBase::zFuncName[1] );
 gzStr _sResult = (gzStr((gzUInt8*)"\0" "", (sizeof("\0" "")/sizeof(gzUInt8)) - 2, true));
 for(gzUInt i = 0; i < aLine->nSize; i++){
  _sResult += aLine[gzUInt(i)] + (gzStr((gzUInt8*)"\0" "\n", (sizeof("\0" "\n")/sizeof(gzUInt8)) - 2, true));
 }
 fSendToGpu(_sResult);
}

gzBool cShaderBase::fSendToGpu(const gzStr& _sShader){ gzStack gz_s( &ShaderBase::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ShaderBase::fSendToGpu", (sizeof("\0" "GzNa::ShaderBase::fSendToGpu")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

gzBool cShaderBase::fCompile(){ gzStack gz_s( &ShaderBase::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ShaderBase::fCompile", (sizeof("\0" "GzNa::ShaderBase::fCompile")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

gzStr cShaderBase::fGetLog(){ gzStack gz_s( &ShaderBase::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ShaderBase::fGetLog", (sizeof("\0" "GzNa::ShaderBase::fGetLog")/sizeof(gzUInt8)) - 2, true))); }
 return (gzStr((gzUInt8*)"\0" "", (sizeof("\0" "")/sizeof(gzUInt8)) - 2, true));
}

gzStr cShaderBase::fGetErrorLine(){ gzStack gz_s( &ShaderBase::zFuncName[5] );
 if (sLog.GnSize() == 0){
  fGetLog();
 }
 return aLine[gzUInt(nLineError)];
}

void cShaderBase::fAddLine(const gzStr& _sLine){ gzStack gz_s( &ShaderBase::zFuncName[6] );
 sSharder += _sLine + (gzStr((gzUInt8*)"\0" "\n", (sizeof("\0" "\n")/sizeof(gzUInt8)) - 2, true));
 aLine.fPush((_sLine));
}

cShaderBase::~cShaderBase(){
}



}}}

namespace Lib_GZ{namespace Gpu{namespace Base{namespace Attribute{
}}}}


namespace Lib_GZ{namespace Gpu{namespace Base{namespace Attribute{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Attribute"},{0,"fLoad"},{0,"fSetOffset"},{0,"fSetDivisor"}};



}

namespace Attribute{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cAttribute::cAttribute(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

 hDataType = Lib_GZ::Gpu::Base::Attribute::eDataType::Float;

 bValid = false;

}

void cAttribute::Ini_cAttribute(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName){ gzStack gz_s( &Attribute::zFuncName[0] );
 sName = _sName;
 oProgram = gzSCastSelf<Lib_GZ::Gpu::ShaderBase::cProgramShader>(_oProgram);
 oProgram->aAttribute.fPush(gzSCastSelf<Lib_GZ::Gpu::Base::cAttribute>(this));
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- Attribute Created!! ---", (sizeof("\0" "--- Attribute Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 fLoad();
}

void cAttribute::fLoad(){ gzStack gz_s( &Attribute::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Attribute::fLoad", (sizeof("\0" "GzNa::Attribute::fLoad")/sizeof(gzUInt8)) - 2, true))); }
}

void cAttribute::fSetOffset(){ gzStack gz_s( &Attribute::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Attribute::fSetOffset", (sizeof("\0" "GzNa::Attribute::fSetOffset")/sizeof(gzUInt8)) - 2, true))); }
}

void cAttribute::fSetDivisor(gzUInt _nDiv){ gzStack gz_s( &Attribute::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Attribute::fSetDivisor", (sizeof("\0" "GzNa::Attribute::fSetDivisor")/sizeof(gzUInt8)) - 2, true))); }
}

gzAny cAttribute::MemCopy(){
return (gzAny)new cAttribute(*this);
}
gzAny cAttribute::DeepCopy(){
return (gzAny)new cAttribute(*this, true);
}
cAttribute::~cAttribute(){
}



}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace Vbo{
}}}}


namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace Vbo{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Vbo"},{0,"fLoad"},{0,"fSendData"}};



}

namespace Vbo{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cVbo::cVbo(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

 hVecType = Lib_GZ::Gpu::ShaderBase::Vbo::eVecType::Vec4;
 nTotalData = 10;

}

void cVbo::Ini_cVbo(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram){ gzStack gz_s( &Vbo::zFuncName[0] );
 oProgram = gzSCastSelf<Lib_GZ::Gpu::ShaderBase::cProgramShader>(_oProgram);
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- Vbo Created!! ---", (sizeof("\0" "--- Vbo Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 oProgram->aVbo.fPush(gzSCastSelf<Lib_GZ::Gpu::ShaderBase::cVbo>(this));
 fLoad();
}

void cVbo::fLoad(){ gzStack gz_s( &Vbo::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Vbo::fLoad", (sizeof("\0" "GzNa::Vbo::fLoad")/sizeof(gzUInt8)) - 2, true))); }
}

void cVbo::fSendData(){ gzStack gz_s( &Vbo::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "---fSendData not implemented ---", (sizeof("\0" "---fSendData not implemented ---")/sizeof(gzUInt8)) - 2, true)));
}

gzAny cVbo::MemCopy(){
return (gzAny)new cVbo(*this);
}
gzAny cVbo::DeepCopy(){
return (gzAny)new cVbo(*this, true);
}
cVbo::~cVbo(){
}



}}}

namespace Lib_GZ{namespace Gpu{namespace Base{namespace Uniform{
}}}}


namespace Lib_GZ{namespace Gpu{namespace Base{namespace Uniform{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Uniform"},{0,"fLoad"},{0,"fSend"}};



}

namespace Uniform{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cUniform::cUniform(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

 hDataType = Lib_GZ::Gpu::Base::Uniform::eDataType::Float;

 bValid = false;

}

void cUniform::Ini_cUniform(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName){ gzStack gz_s( &Uniform::zFuncName[0] );
 sName = _sName;
 oProgram = gzSCastSelf<Lib_GZ::Gpu::ShaderBase::cProgramShader>(_oProgram);
 oProgram->aUniform.fPush(gzSCastSelf<Lib_GZ::Gpu::Base::cUniform>(this));
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- Unifrom Created!! ---", (sizeof("\0" "--- Unifrom Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 fLoad();
}

void cUniform::fLoad(){ gzStack gz_s( &Uniform::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Uniform::fLoad", (sizeof("\0" "GzNa::Uniform::fLoad")/sizeof(gzUInt8)) - 2, true))); }
}

void cUniform::fSend(){ gzStack gz_s( &Uniform::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Uniform::fSend", (sizeof("\0" "GzNa::Uniform::fSend")/sizeof(gzUInt8)) - 2, true))); }
}

cUniform::~cUniform(){
}



}}}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuObject{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"GpuObject"},{0,"fIni"},{0,"fDraw"}};



}

namespace GpuObject{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cGpuObject::cGpuObject(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cGpuObject::Ini_cGpuObject(){ gzStack gz_s( &GpuObject::zFuncName[0] );
}

void cGpuObject::fIni(Lib_GZ::Gfx::cInterface* _oInterface){ gzStack gz_s( &GpuObject::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::GpuObject::fIni", (sizeof("\0" "GzNa::GpuObject::fIni")/sizeof(gzUInt8)) - 2, true))); }
}

void cGpuObject::fDraw(Lib_GZ::Gfx::cObject* _oSource, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End){ gzStack gz_s( &GpuObject::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::GpuObject::fDraw", (sizeof("\0" "GzNa::GpuObject::fDraw")/sizeof(gzUInt8)) - 2, true))); }
}

gzAny cGpuObject::MemCopy(){
return (gzAny)new cGpuObject(*this);
}
gzAny cGpuObject::DeepCopy(){
return (gzAny)new cGpuObject(*this, true);
}
cGpuObject::~cGpuObject(){
}



}}}

namespace Lib_GZ{namespace Gfx{namespace Face{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Face"},{0,"fGpuDraw"},{0,"fCpuDraw"}};



}

namespace Face{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cFace::cFace(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){
 nPt1=0;nPt2=0;nPt3=0;nPt4=0;
 aPtSource = (gzFloat*)malloc((8) * (sizeof(gzFloat)));
 aPoint2D = 0;
 aPixelArray = 0;

}

void cFace::Ini_cFace(Lib_GZ::Gfx::cShape* _oShape, Lib_GZ::File::cRcImg* _oRc, Lib_GZ::Base::cPtA* _oPt1, Lib_GZ::Base::cPtA* _oPt2, Lib_GZ::Base::cPtA* _oPt3, Lib_GZ::Base::cPtA* _oPt4, gzFloat* _aPoint2D, Lib_GZ::Base::cPoly4* _oSrc){ gzStack gz_s( &Face::zFuncName[0] );
 oShape = gzSCastSelf<Lib_GZ::Gfx::cShape>(_oShape);
 oRc = gzSCastSelf<Lib_GZ::File::cRcImg>(_oRc);
 aPoint2D = (_aPoint2D);
 oPt1 = gzSCastSelf<Lib_GZ::Base::cPtA>(_oPt1);
 oPt2 = gzSCastSelf<Lib_GZ::Base::cPtA>(_oPt2);
 oPt3 = gzSCastSelf<Lib_GZ::Base::cPtA>(_oPt3);
 oPt4 = gzSCastSelf<Lib_GZ::Base::cPtA>(_oPt4);
 oShape->oItf->nTotalFaces++;
 nPt1 = 0;
 nPt2 = 3;
 nPt3 = 6;
 nPt4 = 9;
 aPtSource[gzUInt(0)] = _oSrc->oPt1->nX + Face::nBorder;
 aPtSource[gzUInt(1)] = _oSrc->oPt1->nY + Face::nBorder;
 aPtSource[gzUInt(2)] = _oSrc->oPt2->nX + Face::nBorder;
 aPtSource[gzUInt(3)] = _oSrc->oPt2->nY + Face::nBorder;
 aPtSource[gzUInt(4)] = _oSrc->oPt3->nX + Face::nBorder;
 aPtSource[gzUInt(5)] = _oSrc->oPt3->nY + Face::nBorder;
 aPtSource[gzUInt(6)] = _oSrc->oPt4->nX + Face::nBorder;
 aPtSource[gzUInt(7)] = _oSrc->oPt4->nY + Face::nBorder;
 rPtS1 = (Lib_GZ::Gfx::Triangle::_uPoint3D*)&(aPtSource[gzUInt(0)]);
 rPtS2 = (Lib_GZ::Gfx::Triangle::_uPoint3D*)&(aPtSource[gzUInt(2)]);
 rPtS3 = (Lib_GZ::Gfx::Triangle::_uPoint3D*)&(aPtSource[gzUInt(4)]);
 rPtS4 = (Lib_GZ::Gfx::Triangle::_uPoint3D*)&(aPtSource[gzUInt(6)]);
 oGpuObj = gzSCast<Lib_GZ::Gpu::GpuObj::cGpuFace>((Lib_GZ::Gpu::GpuObj::GpuFace::Get(thread)->New(this)));
 oGpuObj->fIni((Lib_GZ::Gfx::cFace*)(this));
}

gzBool cFace::fGpuDraw(){ gzStack gz_s( &Face::zFuncName[1] );
 oGpuObj->fDraw((Lib_GZ::Gfx::cBuffer*)(oShape->oDstBuff.get()), 0, 0, 0, 0);
 return false;
}

gzBool cFace::fCpuDraw(Lib_GZ::Gfx::cObject* _oDest, gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End, gzUInt _nRsAlpha, gzUInt _nRsBrRed, gzUInt _nRsBrGreen, gzUInt _nRsBrBlue, gzUInt _nRsRevRed, gzUInt _nRsRevBlue, gzUInt _nRsRevGreen, gzUInt _nOfRevRed, gzUInt _nOfRevBlue, gzUInt _nOfRevGreen){ gzStack gz_s( &Face::zFuncName[2] );
 Lib_GZ::Gfx::Triangle::Get(thread)->fDraw((Lib_GZ::Base::cPt*)(oPt1->o2d.get()), (Lib_GZ::Base::cPt*)(oPt2->o2d.get()), (Lib_GZ::Base::cPt*)(oPt4->o2d.get()), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(rPtS1), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(rPtS2), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(rPtS4), _nPosX, _nPosY, (gzInt32**)(oRc->aImg), oRc->nWidth, oRc->nHeight, (Lib_GZ::Gfx::cObject*)(_oDest), _nX_Start, _nX_End, _nY_Start, _nY_End, _nRsAlpha, _nRsBrRed, _nRsBrGreen, _nRsBrBlue, _nRsRevRed, _nRsRevBlue, _nRsRevGreen, _nOfRevRed, _nOfRevBlue, _nOfRevGreen);
 Lib_GZ::Gfx::Triangle::Get(thread)->fDraw((Lib_GZ::Base::cPt*)(oPt4->o2d.get()), (Lib_GZ::Base::cPt*)(oPt2->o2d.get()), (Lib_GZ::Base::cPt*)(oPt3->o2d.get()), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(rPtS4), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(rPtS2), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(rPtS3), _nPosX, _nPosY, (gzInt32**)(oRc->aImg), oRc->nWidth, oRc->nHeight, (Lib_GZ::Gfx::cObject*)(_oDest), _nX_Start, _nX_End, _nY_Start, _nY_End, _nRsAlpha, _nRsBrRed, _nRsBrGreen, _nRsBrBlue, _nRsRevRed, _nRsRevBlue, _nRsRevGreen, _nOfRevRed, _nOfRevBlue, _nOfRevGreen, true);
 return false;
}

gzAny cFace::MemCopy(){
return (gzAny)new cFace(*this);
}
gzAny cFace::DeepCopy(){
return (gzAny)new cFace(*this, true);
}
cFace::~cFace(){
oShape->oItf->nTotalFaces--;
 free(aPtSource);
}



}}

namespace Lib_GZ{namespace Gfx{namespace Triangle{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Triangle"},{0,"fFindXFromLinePt"},{0,"fFindAngle"},{0,"fDraw"}};



}

namespace Triangle{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cTriangle::cTriangle(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

 nLimitSourceWidth = 0;
 nLimitSourceHeight = 0;
 nDrawDir = 1;
 aPtA = 0;
 aPtB = 0;
 aPtC = 0;
 aPtT = 0;
 aPtM = 0;
 aPtL = 0;
 aPtSA = 0;
 aPtSB = 0;
 aPtSC = 0;
 aPtST = 0;
 aPtSM = 0;
 aPtSL = 0;
 bOneSeg = false;

}

void cTriangle::Ini_cTriangle(gzFloat* _oPtA, gzFloat* _oPtB, gzFloat* _oPtC, gzFloat* _aPtSA, gzFloat* _aPtSB, gzFloat* _aPtSC){ gzStack gz_s( &Triangle::zFuncName[0] );
}

gzFloat csTriangle::fFindXFromLinePt(Lib_GZ::Base::cPt* _oPt1, Lib_GZ::Base::cPt* _oPt2, gzFloat _nY){ gzStack gz_s( &Triangle::zFuncName[1] );
 gzFloat _nRelY = _oPt1->nY - _nY;
 return _oPt1->nX - (_nRelY / Lib_GZ::pMath::fTan(Lib_GZ::Gfx::Triangle::Get(thread)->fFindAngle((Lib_GZ::Base::cPt*)(_oPt1), (Lib_GZ::Base::cPt*)(_oPt2))));
}

gzFloat csTriangle::fFindAngle(Lib_GZ::Base::cPt* _oPt1, Lib_GZ::Base::cPt* _oPt2){ gzStack gz_s( &Triangle::zFuncName[2] );
 return Lib_GZ::pMath::fATan2(_oPt1->nY - _oPt2->nY, _oPt1->nX - _oPt2->nX);
}

void csTriangle::fDraw(Lib_GZ::Base::cPt* _oPtA, Lib_GZ::Base::cPt* _oPtB, Lib_GZ::Base::cPt* _oPtC, Lib_GZ::Gfx::Triangle::_uPoint3D* _aPtSA, Lib_GZ::Gfx::Triangle::_uPoint3D* _aPtSB, Lib_GZ::Gfx::Triangle::_uPoint3D* _aPtSC, gzInt _nPosX, gzInt _nPosY, gzInt32** _aPixelArray, gzUInt _nSWidth, gzUInt _nSHeight, Lib_GZ::Gfx::cObject* _oSource, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End, gzUInt _nRsAlpha, gzUInt _nRsBrRed, gzUInt _nRsBrGreen, gzUInt _nRsBrBlue, gzUInt _nRsRevRed, gzUInt _nRsRevBlue, gzUInt _nRsRevGreen, gzUInt _nOfRevRed, gzUInt _nOfRevBlue, gzUInt _nOfRevGreen, gzBool _bNothingRight){ gzStack gz_s( &Triangle::zFuncName[3] );
 gzSp<Lib_GZ::Base::cPt> _oPtT;
 gzSp<Lib_GZ::Base::cPt> _oPtM;
 gzSp<Lib_GZ::Base::cPt> _oPtL;
 Lib_GZ::Gfx::Triangle::_uPoint3D* _aPtST;
 Lib_GZ::Gfx::Triangle::_uPoint3D* _aPtSM;
 Lib_GZ::Gfx::Triangle::_uPoint3D* _aPtSL;
 if (_oPtA->nY <= _oPtB->nY && _oPtA->nY < _oPtC->nY){
  _oPtT = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtA);
  _aPtST = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSA);
  if (_oPtB->nY < _oPtC->nY){
   _oPtM = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtB);
   _oPtL = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtC);
   _aPtSM = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSB);
   _aPtSL = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSC);
  }else{
   _oPtM = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtC);
   _oPtL = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtB);
   _aPtSM = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSC);
   _aPtSL = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSB);
  }
 }else if (_oPtB->nY < _oPtA->nY && _oPtB->nY < _oPtC->nY){
  _oPtT = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtB);
  _aPtST = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSB);
  if (_oPtA->nY < _oPtC->nY){
   _oPtM = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtA);
   _oPtL = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtC);
   _aPtSM = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSA);
   _aPtSL = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSC);
  }else{
   _oPtM = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtC);
   _oPtL = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtA);
   _aPtSM = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSC);
   _aPtSL = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSA);
  }
 }else{
  _oPtT = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtC);
  _aPtST = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSC);
  if (_oPtA->nY < _oPtB->nY){
   _oPtM = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtA);
   _oPtL = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtB);
   _aPtSM = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSA);
   _aPtSL = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSB);
  }else{
   _oPtM = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtB);
   _oPtL = gzSCastSelf<Lib_GZ::Base::cPt>(_oPtA);
   _aPtSM = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSB);
   _aPtSL = (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSA);
  }
 }
 gzInt _nDrawDir = 1;
 gzFloat _nCutLineX = Lib_GZ::Gfx::Triangle::Get(thread)->fFindXFromLinePt((Lib_GZ::Base::cPt*)(_oPtT.get()), (Lib_GZ::Base::cPt*)(_oPtL.get()), _oPtM->nY);
 if (_nCutLineX < _oPtM->nX){
  _nDrawDir = -1;
 }else{
  _nDrawDir = 1;
 }
 _nSWidth = gzUInt(((gzFloat(_nSWidth) + (gzFloat(2) * 1.0)) * 256.0) - gzFloat(129));
 _nSHeight = gzUInt(((gzFloat(_nSHeight) + (gzFloat(2) * 1.0)) * 256.0) - gzFloat(129));
 gzInt _nFirst = 0;
 Lib_GZ::Gfx::pPixel::fDrawSegTri(_nDrawDir, (Lib_GZ::Base::cPt*)(_oPtT.get()), (Lib_GZ::Base::cPt*)(_oPtL.get()), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtST), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSL), (Lib_GZ::Base::cPt*)(_oPtT.get()), (Lib_GZ::Base::cPt*)(_oPtM.get()), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtST), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSM), (gzInt32**)(_oSource->aPixelArray), (gzInt32**)(_aPixelArray), _nPosX, _nPosY, _nX_Start, _nX_End, _nY_Start, _nY_End, _nSWidth, _nSHeight, 0, _nRsAlpha, _nRsBrRed, _nRsBrGreen, _nRsBrBlue, _nRsRevRed, _nRsRevBlue, _nRsRevGreen, _nOfRevRed, _nOfRevBlue, _nOfRevGreen, _nFirst, _bNothingRight);
 _nFirst = Lib_GZ::Math::nPrec;
 Lib_GZ::Gfx::pPixel::fDrawSegTri(_nDrawDir, (Lib_GZ::Base::cPt*)(_oPtT.get()), (Lib_GZ::Base::cPt*)(_oPtL.get()), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtST), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSL), (Lib_GZ::Base::cPt*)(_oPtM.get()), (Lib_GZ::Base::cPt*)(_oPtL.get()), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSM), (Lib_GZ::Gfx::Triangle::_uPoint3D*)(_aPtSL), (gzInt32**)(_oSource->aPixelArray), (gzInt32**)(_aPixelArray), _nPosX, _nPosY, _nX_Start, _nX_End, _nY_Start, _nY_End, _nSWidth, _nSHeight, 0, _nRsAlpha, _nRsBrRed, _nRsBrGreen, _nRsBrBlue, _nRsRevRed, _nRsRevBlue, _nRsRevGreen, _nOfRevRed, _nOfRevBlue, _nOfRevGreen, _nFirst, _bNothingRight);
}

gzAny cTriangle::MemCopy(){
return (gzAny)new cTriangle(*this);
}
gzAny cTriangle::DeepCopy(){
return (gzAny)new cTriangle(*this, true);
}
cTriangle::~cTriangle(){
}




Lib_GZ::Gfx::Triangle::uPoint3D* Triangle::tNew_uPoint3D(){
 uPoint3D* _oRtu = (uPoint3D*)calloc(1, sizeof(uPoint3D));

 return _oRtu;
}
Lib_GZ::Gfx::Triangle::uPoint2D* Triangle::tNew_uPoint2D(){
 uPoint2D* _oRtu = (uPoint2D*)calloc(1, sizeof(uPoint2D));

 return _oRtu;
}

Lib_GZ::Gfx::Triangle::uPoint3D* Triangle::tAw_uPoint3D(ArrayPtr* _aArray, unsigned int _nIndex){
 if(_nIndex > _aArray->size){
 }
 if(_aArray->array[_nIndex] == 0){
 uPoint3D* _rNewRtu = tNew_uPoint3D();
 _aArray->array[_nIndex] = (ArrayPtr*)_rNewRtu;
 return _rNewRtu;
 }
 return (uPoint3D*)_aArray->array[_nIndex];
}
Lib_GZ::Gfx::Triangle::uPoint2D* Triangle::tAw_uPoint2D(ArrayPtr* _aArray, unsigned int _nIndex){
 if(_nIndex > _aArray->size){
 }
 if(_aArray->array[_nIndex] == 0){
 uPoint2D* _rNewRtu = tNew_uPoint2D();
 _aArray->array[_nIndex] = (ArrayPtr*)_rNewRtu;
 return _rNewRtu;
 }
 return (uPoint2D*)_aArray->array[_nIndex];
}

void Triangle::tDel_uPoint3D(void* _oRtu){
 free(((uPoint3D*)_oRtu));
}
void Triangle::tDel_uPoint2D(void* _oRtu){
 free(((uPoint2D*)_oRtu));
}
}}

namespace Lib_GZ{namespace Base{namespace Pt{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Pt"}};



}

namespace Pt{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cPt::cPt(Lib_GZ::cBase* _parent) : Lib_GZ::Base::cVec3(_parent){

}

void cPt::Ini_cPt(gzFloat _nX, gzFloat _nY, gzFloat _nZ){ gzStack gz_s( &Pt::zFuncName[0] );
 Ini_cVec3(_nX, _nY, _nZ);
}

gzAny cPt::MemCopy(){
return (gzAny)new cPt(*this);
}
gzAny cPt::DeepCopy(){
return (gzAny)new cPt(*this, true);
}
cPt::~cPt(){
}



}}

namespace Lib_GZ{namespace Base{namespace Vec3{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Vec3"},{0,"fCross"},{0,"fRevCross"},{0,"fRotate"}};



}

namespace Vec3{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cVec3::cVec3(Lib_GZ::cBase* _parent) : Lib_GZ::Base::cVec2(_parent){
 nZ=0;

}

void cVec3::Ini_cVec3(gzFloat _nX, gzFloat _nY, gzFloat _nZ){ gzStack gz_s( &Vec3::zFuncName[0] );
 Ini_cVec2(_nX, _nY);
 nZ = _nZ;
}

void cVec3::fCross(Lib_GZ::Base::cVec3* _oOther){ gzStack gz_s( &Vec3::zFuncName[1] );
 gzFloat _nTempX = (nZ * _oOther->nY) - (nY * _oOther->nZ);
 gzFloat _nTempY = (nX * _oOther->nZ) - (nZ * _oOther->nX);
 nZ = (nY * _oOther->nX) - (nX * _oOther->nY);
 nX = _nTempX;
 nY = _nTempY;
}

void cVec3::fRevCross(Lib_GZ::Base::cVec3* _oOther){ gzStack gz_s( &Vec3::zFuncName[2] );
 gzFloat _nTempX = (_oOther->nZ * nY) - (_oOther->nY * nZ);
 gzFloat _nTempY = (_oOther->nX * nZ) - (_oOther->nZ * nX);
 nZ = (_oOther->nY * nX) - (_oOther->nX * nY);
 nX = _nTempX;
 nY = _nTempY;
}

void cVec3::fRotate(Lib_GZ::Base::cQuaternion* _oQuat){ gzStack gz_s( &Vec3::zFuncName[3] );
 gzFloat _nTempX = nX;
 gzFloat _nTempY = nY;
 gzFloat _nTempZ = nZ;
 fCross((Lib_GZ::Base::cVec3*)(_oQuat));
 nX += _nTempX * _oQuat->nW;
 nY += _nTempY * _oQuat->nW;
 nZ += _nTempZ * _oQuat->nW;
 fCross((Lib_GZ::Base::cVec3*)(_oQuat));
 nX = (gzFloat(2) * nX) + _nTempX;
 nY = (gzFloat(2) * nY) + _nTempY;
 nZ = (gzFloat(2) * nZ) + _nTempZ;
}

gzAny cVec3::MemCopy(){
return (gzAny)new cVec3(*this);
}
gzAny cVec3::DeepCopy(){
return (gzAny)new cVec3(*this, true);
}
cVec3::~cVec3(){
}



}}

namespace Lib_GZ{namespace Base{namespace Quaternion{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Quaternion"},{0,"fReset"},{0,"fRoll"},{0,"fYaw"},{0,"fPitch"},{0,"fCombine"}};



}

namespace Quaternion{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cQuaternion::cQuaternion(Lib_GZ::cBase* _parent) : Lib_GZ::Base::cVec4(_parent){

}

void cQuaternion::Ini_cQuaternion(){ gzStack gz_s( &Quaternion::zFuncName[0] );
 Ini_cVec4(gzFloat(0), gzFloat(0), gzFloat(0), gzFloat(1));
}

void cQuaternion::fReset(){ gzStack gz_s( &Quaternion::zFuncName[1] );
 nX = gzFloat(0);
 nY = gzFloat(0);
 nZ = gzFloat(0);
 nW = gzFloat(1);
}

void cQuaternion::fRoll(gzFloat _nAngle){ gzStack gz_s( &Quaternion::zFuncName[2] );
 gzFloat _nResW = Lib_GZ::pMath::fCos(0.5 * _nAngle);
 gzFloat _nResZ = Lib_GZ::pMath::fSin(0.5 * _nAngle);
 gzFloat _nTempX = (nX * _nResW) - (nY * _nResZ);
 gzFloat _nTempZ = (nZ * _nResW) + (nW * _nResZ);
 nY = (nY * _nResW) + (nX * _nResZ);
 nW = (nW * _nResW) - (nZ * _nResZ);
 nX = _nTempX;
 nZ = _nTempZ;
}

void cQuaternion::fYaw(gzFloat _nAngle){ gzStack gz_s( &Quaternion::zFuncName[3] );
 gzFloat _nResW = Lib_GZ::pMath::fCos(0.5 * _nAngle);
 gzFloat _nResY = Lib_GZ::pMath::fSin(0.5 * _nAngle);
 gzFloat _nTempX = (nX * _nResW) + (nZ * _nResY);
 gzFloat _nTempY = (nY * _nResW) + (nW * _nResY);
 nZ = (nZ * _nResW) - (nX * _nResY);
 nW = (nW * _nResW) - (nY * _nResY);
 nX = _nTempX;
 nY = _nTempY;
}

void cQuaternion::fPitch(gzFloat _nAngle){ gzStack gz_s( &Quaternion::zFuncName[4] );
 gzFloat _nResW = Lib_GZ::pMath::fCos(0.5 * _nAngle);
 gzFloat _nResX = Lib_GZ::pMath::fSin(0.5 * _nAngle);
 gzFloat _nTempX = (nX * _nResW) + (nW * _nResX);
 gzFloat _nTempY = (nY * _nResW) - (nZ * _nResX);
 nZ = (nZ * _nResW) + (nY * _nResX);
 nW = (nW * _nResW) - (nX * _nResX);
 nX = _nTempX;
 nY = _nTempY;
}

void cQuaternion::fCombine(Lib_GZ::Base::cQuaternion* _oOther){ gzStack gz_s( &Quaternion::zFuncName[5] );
 gzFloat _nTempX = (nX * _oOther->nW) + (nW * _oOther->nX) + (nZ * _oOther->nY) - (nY * _oOther->nZ);
 gzFloat _nTempY = (nY * _oOther->nW) + (nW * _oOther->nY) + (nX * _oOther->nZ) - (nZ * _oOther->nX);
 gzFloat _nTempZ = (nZ * _oOther->nW) + (nW * _oOther->nZ) + (nY * _oOther->nX) - (nX * _oOther->nY);
 nW = (nW * _oOther->nW) - (nX * _oOther->nX) - (nY * _oOther->nY) - (nZ * _oOther->nZ);
 nX = _nTempX;
 nY = _nTempY;
 nZ = _nTempZ;
}

gzAny cQuaternion::MemCopy(){
return (gzAny)new cQuaternion(*this);
}
gzAny cQuaternion::DeepCopy(){
return (gzAny)new cQuaternion(*this, true);
}
cQuaternion::~cQuaternion(){
}



}}

namespace Lib_GZ{namespace Base{namespace Vec4{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Vec4"}};



}

namespace Vec4{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cVec4::cVec4(Lib_GZ::cBase* _parent) : Lib_GZ::Base::cVec3(_parent){
 nW=0;

}

void cVec4::Ini_cVec4(gzFloat _nX, gzFloat _nY, gzFloat _nZ, gzFloat _nW){ gzStack gz_s( &Vec4::zFuncName[0] );
 Ini_cVec3(_nX, _nY, _nZ);
 nW = _nW;
}

gzAny cVec4::MemCopy(){
return (gzAny)new cVec4(*this);
}
gzAny cVec4::DeepCopy(){
return (gzAny)new cVec4(*this, true);
}
cVec4::~cVec4(){
}



}}

namespace Lib_GZ{namespace Base{namespace Vec2{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Vec2"}};



}

namespace Vec2{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cVec2::cVec2(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){
 nX=0;nY=0;

}

void cVec2::Ini_cVec2(gzFloat _nX, gzFloat _nY){ gzStack gz_s( &Vec2::zFuncName[0] );
 nX = _nX;
 nY = _nY;
}

gzAny cVec2::MemCopy(){
return (gzAny)new cVec2(*this);
}
gzAny cVec2::DeepCopy(){
return (gzAny)new cVec2(*this, true);
}
cVec2::~cVec2(){
}



}}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuFace{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"GpuFace"},{0,"fIni"},{0,"fDraw"},{0,"fSetImg"}};



}

namespace GpuFace{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cGpuFace::cGpuFace(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cGpuFace::Ini_cGpuFace(){ gzStack gz_s( &GpuFace::zFuncName[0] );
}

void cGpuFace::fIni(Lib_GZ::Gfx::cFace* _oFace){ gzStack gz_s( &GpuFace::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::GpuFace::fIni", (sizeof("\0" "GzNa::GpuFace::fIni")/sizeof(gzUInt8)) - 2, true))); }
}

void cGpuFace::fDraw(Lib_GZ::Gfx::cBuffer* _oSource, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End){ gzStack gz_s( &GpuFace::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::GpuFace::fDraw", (sizeof("\0" "GzNa::GpuFace::fDraw")/sizeof(gzUInt8)) - 2, true))); }
}

void cGpuFace::fSetImg(Lib_GZ::File::cRcImg* _oRc){ gzStack gz_s( &GpuFace::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::GpuFace::fSetImg", (sizeof("\0" "GzNa::GpuFace::fSetImg")/sizeof(gzUInt8)) - 2, true))); }
}

gzAny cGpuFace::MemCopy(){
return (gzAny)new cGpuFace(*this);
}
gzAny cGpuFace::DeepCopy(){
return (gzAny)new cGpuFace(*this, true);
}
cGpuFace::~cGpuFace(){
}



}}}

namespace Lib_GZ{namespace File{namespace RcImg{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"RcImg"},{0,"fCpuLoad"},{0,"fGpuLoad"}};



}

namespace RcImg{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cRcImg::cRcImg(Lib_GZ::cBase* _parent) : Lib_GZ::File::cResource(_parent){
 nGpuTexId = 0;
 nWidth = 0;
 nHeight = 0;
 aImg = 0;

}

void cRcImg::Ini_cRcImg(const gzStr& _sPath){ gzStack gz_s( &RcImg::zFuncName[0] );
 Ini_cResource(_sPath);
}

gzBool cRcImg::fCpuLoad(){ gzStack gz_s( &RcImg::zFuncName[1] );
 Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "LoadRessource", (sizeof("\0" "LoadRessource")/sizeof(gzUInt8)) - 2, true)));
 if (bRcLoaded == false){
  bRcLoaded = true;
  fLoadFile();
  Lib_GZ::Wrap::pImage::fOpen((Lib_GZ::File::cRcImg*)(this));
  Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "Finish", (sizeof("\0" "Finish")/sizeof(gzUInt8)) - 2, true)));
 }
 return true;
}

gzBool cRcImg::fGpuLoad(){ gzStack gz_s( &RcImg::zFuncName[2] );
 return true;
}

gzAny cRcImg::MemCopy(){
return (gzAny)this;
}
gzAny cRcImg::DeepCopy(){
return (gzAny)new cRcImg(*this, true);
}
cRcImg::~cRcImg(){
Lib_GZ::Wrap::pImage::fDelete((Lib_GZ::File::cRcImg*)(this));
}



}}

namespace Lib_GZ{namespace Sys{namespace System{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"System"},{0,"fSleep"},{0,"fIni"},{0,"fDetectGpu"},{0,"fSleep"},{0,"fExit"},{0,"GbAnyResolutionAvailable"},{0,"GnForceWidth"},{0,"GnForceHeight"}};



}

namespace System{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cSystem::cSystem(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cSystem::Ini_cSystem(){ gzStack gz_s( &System::zFuncName[0] );
 Lib_GZ::Sys::System::Get(thread)->oInst = gzSCastSelf<Lib_GZ::Sys::cSystem>(this);
}

void csSystem::fSleep(gzUInt _nMilliseconds){ gzStack gz_s( &System::zFuncName[1] );
 if (oInst != 0){
 }else{
  oInst = gzSCast<Lib_GZ::Sys::cSystem>((Lib_GZ::Sys::System::Get(thread)->New(this)));
 }
 oInst->fSleep(_nMilliseconds);
}

void csSystem::fIni(gzUIntX _nInstance, const gzStr& _sCommandLine, gzUInt _nShowCmd){ gzStack gz_s( &System::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "nInstance-: ", (sizeof("\0" "nInstance-: ")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nInstance));
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "Tread-: ", (sizeof("\0" "Tread-: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(thread->nId));
 System::Get(thread)->nInstance = _nInstance;
}

gzBool csSystem::fDetectGpu(){ gzStack gz_s( &System::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::System::fDetectGpu", (sizeof("\0" "GzNa::System::fDetectGpu")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

void cSystem::fSleep(gzUInt _nMilliseconds){ gzStack gz_s( &System::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::System::fSleep", (sizeof("\0" "GzNa::System::fSleep")/sizeof(gzUInt8)) - 2, true))); }
}

void csSystem::fExit(){ gzStack gz_s( &System::zFuncName[5] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::System::fExit", (sizeof("\0" "GzNa::System::fExit")/sizeof(gzUInt8)) - 2, true))); }
}

gzBool csSystem::GbAnyResolutionAvailable(){ gzStack gz_s( &System::zFuncName[6] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::System::GbAnyResolutionAvailable", (sizeof("\0" "GzNa::System::GbAnyResolutionAvailable")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

gzUInt csSystem::GnForceWidth(){ gzStack gz_s( &System::zFuncName[7] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::System::GnForceWidth", (sizeof("\0" "GzNa::System::GnForceWidth")/sizeof(gzUInt8)) - 2, true))); }
 return 0;
}

gzUInt csSystem::GnForceHeight(){ gzStack gz_s( &System::zFuncName[8] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::System::GnForceHeight", (sizeof("\0" "GzNa::System::GnForceHeight")/sizeof(gzUInt8)) - 2, true))); }
 return 0;
}

gzAny cSystem::MemCopy(){
return (gzAny)new cSystem(*this);
}
gzAny cSystem::DeepCopy(){
return (gzAny)new cSystem(*this, true);
}
cSystem::~cSystem(){
}



}}

namespace Lib_GZ{namespace File{namespace Resource{
}}}


namespace Lib_GZ{namespace File{namespace Resource{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Resource"},{0,"fLoadFile"},{0,"fSetDynamicMemData"},{0,"fSetStaticMemData"}};



}

namespace Resource{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cResource::cResource(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){
 nSize=0;

 aSrcMemData = 0;


 bReadOnly = true;
 bRcLoaded = false;
 bGpuLoaded = false;
 hLocation = Lib_GZ::File::Resource::eLocation::Unknow;

}

void cResource::Ini_cResource(const gzStr& _sPath, Lib_GZ::File::Resource::eLocation _hLocation){ gzStack gz_s( &Resource::zFuncName[0] );
 hLocation = _hLocation;
 Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "AAAAAA Path string: ", (sizeof("\0" "AAAAAA Path string: ")/sizeof(gzUInt8)) - 2, true)) + _sPath);
 gzArray<gzStr> _aPath = (_sPath.fSplit((gzStr((gzUInt8*)"\0" ":/", (sizeof("\0" ":/")/sizeof(gzUInt8)) - 2, true))));
 sVDrive = _aPath[gzUInt(0)];
 sPath = _aPath[gzUInt(1)];
 sPath.fNext();
 sPath.fNext();
 sPath = sPath.fSubStr();
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "***sVDrive Path : ", (sizeof("\0" "***sVDrive Path : ")/sizeof(gzUInt8)) - 2, true)) + sVDrive);
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "***sVDrive Path : ", (sizeof("\0" "***sVDrive Path : ")/sizeof(gzUInt8)) - 2, true)) + sPath);
}

void cResource::fLoadFile(){ gzStack gz_s( &Resource::zFuncName[1] );
 if (gzInt(hLocation) == Lib_GZ::File::Resource::eLocation::Unknow || gzInt(hLocation) == Lib_GZ::File::Resource::eLocation::Drive){
  Lib_GZ::Sys::File::Get(thread)->fLoadFileFromVDrive((Lib_GZ::File::cResource*)(this));
 }
}

void cResource::fSetDynamicMemData(gzUInt8* _aSrcMemData, gzUIntX _nSize){ gzStack gz_s( &Resource::zFuncName[2] );
 aSrcMemData = (_aSrcMemData);
 nSize = _nSize;
}

void cResource::fSetStaticMemData(gzUInt8* _aSrcMemData, gzUIntX _nSize){ gzStack gz_s( &Resource::zFuncName[3] );
 aSrcMemData = (_aSrcMemData);
 nSize = _nSize;
}

cResource::~cResource(){
}



}}

namespace Lib_GZ{namespace Sys{namespace File{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"File"},{0,"fCreateDirectory"},{0,"fIsFileExist"},{0,"fLauch"},{0,"fGetExePath"},{0,"fGetFullPath"},{0,"fLoadFileFromVDrive"},{0,"fLoadFile"}};



}

namespace File{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cFile::cFile(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cFile::Ini_cFile(){ gzStack gz_s( &File::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "New File!", (sizeof("\0" "New File!")/sizeof(gzUInt8)) - 2, true)));
}

gzInt csFile::fCreateDirectory(const gzStr& _sFolder){ gzStack gz_s( &File::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::File::fCreateDirectory", (sizeof("\0" "GzNa::File::fCreateDirectory")/sizeof(gzUInt8)) - 2, true))); }
 return 0;
}

gzBool csFile::fIsFileExist(const gzStr& _sFile){ gzStack gz_s( &File::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::File::fIsFileExist", (sizeof("\0" "GzNa::File::fIsFileExist")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

void csFile::fLauch(const gzStr& _sFile, const gzStr& _sArguments){ gzStack gz_s( &File::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::File::fLauch", (sizeof("\0" "GzNa::File::fLauch")/sizeof(gzUInt8)) - 2, true))); }
}

gzStr csFile::fGetExePath(){ gzStack gz_s( &File::zFuncName[4] );
 Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "fGetExePath not impletmented", (sizeof("\0" "fGetExePath not impletmented")/sizeof(gzUInt8)) - 2, true)));
 return (gzStr((gzUInt8*)"\0" "", (sizeof("\0" "")/sizeof(gzUInt8)) - 2, true));
}

gzStr csFile::fGetFullPath(const gzStr& _sDrive, const gzStr& _sPath){ gzStack gz_s( &File::zFuncName[5] );
 gzStr _sRealDrive = _sDrive;
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "fGetFullPath: ", (sizeof("\0" "fGetFullPath: ")/sizeof(gzUInt8)) - 2, true)) + _sPath);
 if (_sDrive == (gzStr((gzUInt8*)"\0" "Exe", (sizeof("\0" "Exe")/sizeof(gzUInt8)) - 2, true))){

  _sRealDrive = Lib_GZ::Lib::sDirExe;
  Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "_sRealDrivePath: ", (sizeof("\0" "_sRealDrivePath: ")/sizeof(gzUInt8)) - 2, true)) + _sRealDrive);
 }
 return _sRealDrive + _sPath;
}

gzBool csFile::fLoadFileFromVDrive(Lib_GZ::File::cResource* _oRc){ gzStack gz_s( &File::zFuncName[6] );
 Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "AfLoadFile not impletmented", (sizeof("\0" "AfLoadFile not impletmented")/sizeof(gzUInt8)) - 2, true)));
 return Lib_GZ::Sys::File::Get(thread)->fLoadFile((Lib_GZ::File::cResource*)(_oRc), Lib_GZ::Sys::File::Get(thread)->fGetFullPath(_oRc->sVDrive, _oRc->sPath));
}

gzBool csFile::fLoadFile(Lib_GZ::File::cResource* _oRc, const gzStr& _sFullPath){ gzStack gz_s( &File::zFuncName[7] );
 Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "AAAAAfLoadFile not impletmented", (sizeof("\0" "AAAAAfLoadFile not impletmented")/sizeof(gzUInt8)) - 2, true)));
 return false;
}

gzAny cFile::MemCopy(){
return (gzAny)new cFile(*this);
}
gzAny cFile::DeepCopy(){
return (gzAny)new cFile(*this, true);
}
cFile::~cFile(){
}



}}

namespace Lib_GZ{namespace Base{namespace PtA{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"PtA"},{0,"fCopyToTf"}};



}

namespace PtA{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cPtA::cPtA(Lib_GZ::cBase* _parent) : Lib_GZ::Base::cPt(_parent),oTf(this),o2d(this){


}

void cPtA::Ini_cPtA(gzFloat _nX, gzFloat _nY, gzFloat _nZ){ gzStack gz_s( &PtA::zFuncName[0] );
 oTf->Ini_cPt(0,0,0);
 o2d->Ini_cPt(0,0,0);
 Ini_cPt(_nX, _nY, _nZ);
}

void cPtA::fCopyToTf(){ gzStack gz_s( &PtA::zFuncName[1] );
 oTf->nX = nX;
 oTf->nY = nY;
 oTf->nZ = nZ;
}

gzAny cPtA::MemCopy(){
return (gzAny)new cPtA(*this);
}
gzAny cPtA::DeepCopy(){
return (gzAny)new cPtA(*this, true);
}
cPtA::~cPtA(){
}



}}

namespace Lib_GZ{namespace Base{namespace Poly4{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Poly4"}};



}

namespace Poly4{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cPoly4::cPoly4(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){


}

void cPoly4::Ini_cPoly4(Lib_GZ::Base::cPt* _oPt1, Lib_GZ::Base::cPt* _oPt2, Lib_GZ::Base::cPt* _oPt3, Lib_GZ::Base::cPt* _oPt4){ gzStack gz_s( &Poly4::zFuncName[0] );
 oPt1 = gzSCastSelf<Lib_GZ::Base::cPt>(_oPt1);
 oPt2 = gzSCastSelf<Lib_GZ::Base::cPt>(_oPt2);
 oPt3 = gzSCastSelf<Lib_GZ::Base::cPt>(_oPt3);
 oPt4 = gzSCastSelf<Lib_GZ::Base::cPt>(_oPt4);
}

gzAny cPoly4::MemCopy(){
return (gzAny)new cPoly4(*this);
}
gzAny cPoly4::DeepCopy(){
return (gzAny)new cPoly4(*this, true);
}
cPoly4::~cPoly4(){
}



}}

namespace Lib_GZ{namespace Sys{namespace Window{
}}}


namespace Lib_GZ{namespace Sys{namespace Window{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Window"},{0,"fReceiveMessage"},{0,"fCreate"},{0,"fFrameStart"},{0,"fMove"},{0,"fMoveAndSize"},{0,"fShow"},{0,"fHide"},{0,"fIniProcess"},{0,"fMinimize"},{0,"fMaximize"},{0,"fRestore"},{0,"fDisable"},{0,"fSendData"},{0,"fIniPixelZone"},{0,"drawPixel"},{0,"fBlit"},{0,"fKeyIsDown"},{0,"fClear"},{0,"fCpuVSyncOnGpu"},{0,"fIsWindowReady"},{0,"fIniRender"},{0,"fGetMousePosition"},{0,"fStartCaptureOutside"},{0,"fStopCaptureOutside"},{0,"fFrameEnd"},{0,"fGetPixelArray"},{0,"fTest"},{0,"fGetKey"}};



}

namespace Window{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cWindow::cWindow(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){
 bGlobalSharedContext=0;bReady=0;bWinGPU=0;nMouseX=0;nMouseY=0;nHandleId=0;nLastMouseX=0;nLastMouseY=0;nPosX=0;nPosY=0;nFrameWidth=0;nFrameHeight=0;


}

void cWindow::Ini_cWindow(Lib_GZ::Gfx::cInterface* _oInterface, const gzStr& _sWindowName, gzUInt _nFrameWidth, gzUInt _nFrameHeight, gzBool _bTransparent, gzInt _nBgColor){ gzStack gz_s( &Window::zFuncName[0] );
}

void cWindow::fReceiveMessage(const gzStr& _sMessage){ gzStack gz_s( &Window::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fReceiveMessage", (sizeof("\0" "GzNa::Window::fReceiveMessage")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fCreate(gzInt _nPosX, gzInt _nPosY, gzUInt _nWinWidth, gzUInt _nWinHeight, Lib_GZ::Sys::Window::eWinState _nStart, gzBool _bResizable, gzBool _bDragAndDrop, gzBool _bVisible){ gzStack gz_s( &Window::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "---fCreate Not Implemented--", (sizeof("\0" "---fCreate Not Implemented--")/sizeof(gzUInt8)) - 2, true)));
 if (gzInt(hBorder) == Lib_GZ::Sys::Window::eWinBorder::Normal){
 }
}

void cWindow::fFrameStart(){ gzStack gz_s( &Window::zFuncName[3] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "fFrameStart", (sizeof("\0" "fFrameStart")/sizeof(gzUInt8)) - 2, true)));
}

void cWindow::fMove(gzInt _nPosX, gzInt _nPosY){ gzStack gz_s( &Window::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fMove", (sizeof("\0" "GzNa::Window::fMove")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fMoveAndSize(gzInt _nPosX, gzInt _nPosY, gzInt _nWidth, gzInt _nHeight){ gzStack gz_s( &Window::zFuncName[5] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fMoveAndSize", (sizeof("\0" "GzNa::Window::fMoveAndSize")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fShow(gzBool _bActive){ gzStack gz_s( &Window::zFuncName[6] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fShow", (sizeof("\0" "GzNa::Window::fShow")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fHide(){ gzStack gz_s( &Window::zFuncName[7] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fHide", (sizeof("\0" "GzNa::Window::fHide")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fIniProcess(){ gzStack gz_s( &Window::zFuncName[8] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fIniProcess", (sizeof("\0" "GzNa::Window::fIniProcess")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fMinimize(){ gzStack gz_s( &Window::zFuncName[9] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fMinimize", (sizeof("\0" "GzNa::Window::fMinimize")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fMaximize(){ gzStack gz_s( &Window::zFuncName[10] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fMaximize", (sizeof("\0" "GzNa::Window::fMaximize")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fRestore(){ gzStack gz_s( &Window::zFuncName[11] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fRestore", (sizeof("\0" "GzNa::Window::fRestore")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fDisable(){ gzStack gz_s( &Window::zFuncName[12] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fDisable", (sizeof("\0" "GzNa::Window::fDisable")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fSendData(gzUInt _nOtherWinId){ gzStack gz_s( &Window::zFuncName[13] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fSendData", (sizeof("\0" "GzNa::Window::fSendData")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fIniPixelZone(){ gzStack gz_s( &Window::zFuncName[14] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fIniPixelZone", (sizeof("\0" "GzNa::Window::fIniPixelZone")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::drawPixel(){ gzStack gz_s( &Window::zFuncName[15] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::drawPixel", (sizeof("\0" "GzNa::Window::drawPixel")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fBlit(){ gzStack gz_s( &Window::zFuncName[16] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fBlit", (sizeof("\0" "GzNa::Window::fBlit")/sizeof(gzUInt8)) - 2, true))); }
}

gzInt cWindow::fKeyIsDown(gzInt _nKeyVal){ gzStack gz_s( &Window::zFuncName[17] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fKeyIsDown", (sizeof("\0" "GzNa::Window::fKeyIsDown")/sizeof(gzUInt8)) - 2, true))); }
 return 0;
}

void cWindow::fClear(){ gzStack gz_s( &Window::zFuncName[18] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fClear", (sizeof("\0" "GzNa::Window::fClear")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fCpuVSyncOnGpu(){ gzStack gz_s( &Window::zFuncName[19] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fCpuVSyncOnGpu", (sizeof("\0" "GzNa::Window::fCpuVSyncOnGpu")/sizeof(gzUInt8)) - 2, true))); }
}

gzBool cWindow::fIsWindowReady(){ gzStack gz_s( &Window::zFuncName[20] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fIsWindowReady", (sizeof("\0" "GzNa::Window::fIsWindowReady")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

void cWindow::fIniRender(){ gzStack gz_s( &Window::zFuncName[21] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fIniRender", (sizeof("\0" "GzNa::Window::fIniRender")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fGetMousePosition(){ gzStack gz_s( &Window::zFuncName[22] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fGetMousePosition", (sizeof("\0" "GzNa::Window::fGetMousePosition")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fStartCaptureOutside(){ gzStack gz_s( &Window::zFuncName[23] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fStartCaptureOutside", (sizeof("\0" "GzNa::Window::fStartCaptureOutside")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fStopCaptureOutside(){ gzStack gz_s( &Window::zFuncName[24] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fStopCaptureOutside", (sizeof("\0" "GzNa::Window::fStopCaptureOutside")/sizeof(gzUInt8)) - 2, true))); }
}

void cWindow::fFrameEnd(){ gzStack gz_s( &Window::zFuncName[25] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fFrameEnd", (sizeof("\0" "GzNa::Window::fFrameEnd")/sizeof(gzUInt8)) - 2, true))); }
}

gzInt** cWindow::fGetPixelArray(){ gzStack gz_s( &Window::zFuncName[26] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "ss", (sizeof("\0" "ss")/sizeof(gzUInt8)) - 2, true)));
 return 0;
}

void cWindow::fTest(){ gzStack gz_s( &Window::zFuncName[27] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "TEST!", (sizeof("\0" "TEST!")/sizeof(gzUInt8)) - 2, true)));
}

void cWindow::fGetKey(Lib_GZ::Input::cKey* _oKey){ gzStack gz_s( &Window::zFuncName[28] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Window::fGetKey", (sizeof("\0" "GzNa::Window::fGetKey")/sizeof(gzUInt8)) - 2, true))); }
}

cWindow::~cWindow(){
}



}}

namespace Lib_GZ{namespace Input{namespace Key{
}}}


namespace Lib_GZ{namespace Input{namespace Key{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Key"},{0,"fIsDown"}};



}

namespace Key{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cKey::cKey(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){
 aKeyDown = (gzBool*)malloc((256) * (sizeof(gzBool)));
 aKeyPress = (gzBool*)malloc((256) * (sizeof(gzBool)));
 aKeyRelease = (gzBool*)malloc((256) * (sizeof(gzBool)));

}

void cKey::Ini_cKey(){ gzStack gz_s( &Key::zFuncName[0] );
}

gzBool cKey::fIsDown(Lib_GZ::Input::Key::eKey _hKey){ gzStack gz_s( &Key::zFuncName[1] );
 return aKeyDown[gzUInt(_hKey)];
}

gzAny cKey::MemCopy(){
return (gzAny)new cKey(*this);
}
gzAny cKey::DeepCopy(){
return (gzAny)new cKey(*this, true);
}
cKey::~cKey(){
 free(aKeyDown);
 free(aKeyPress);
 free(aKeyRelease);
}



}}

namespace Lib_GZ{namespace Gfx{namespace GlobalData{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"GlobalData"},{0,"fGetId"},{0,"fIni"}};



}

namespace GlobalData{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cGlobalData::cGlobalData(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cGlobalData::Ini_cGlobalData(){ gzStack gz_s( &GlobalData::zFuncName[0] );
}

void csGlobalData::fGetId(){ gzStack gz_s( &GlobalData::zFuncName[1] );
 GlobalData::Get(thread)->nID++;
}

void csGlobalData::fIni(){ gzStack gz_s( &GlobalData::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::GlobalData::fIni", (sizeof("\0" "GzNa::GlobalData::fIni")/sizeof(gzUInt8)) - 2, true))); }
}

gzAny cGlobalData::MemCopy(){
return (gzAny)new cGlobalData(*this);
}
gzAny cGlobalData::DeepCopy(){
return (gzAny)new cGlobalData(*this, true);
}
cGlobalData::~cGlobalData(){
}



}}

namespace Lib_GZ{namespace Sys{namespace FrameRate{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"FrameRate"},{0,"fStartProcess"},{0,"fQuit"},{0,"ThreadLoop"},{0,"fBlit"},{0,"fNewFrame"},{0,"fIniProcess"}};



}

namespace FrameRate{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cFrameRate::cFrameRate(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cBuffer(_parent){
 nFramePerSecond = 30;

}

void cFrameRate::Ini_cFrameRate(Lib_GZ::Gfx::cRoot* _oParent, gzUInt _nWidth, gzUInt _nHeight){ gzStack gz_s( &FrameRate::zFuncName[0] );
 Ini_cBuffer((Lib_GZ::Gfx::cRoot*)(_oParent), _nWidth, _nHeight, true);
}

void cFrameRate::fStartProcess(){ gzStack gz_s( &FrameRate::zFuncName[1] );
 fIniProcess();
}

void cFrameRate::fQuit(){ gzStack gz_s( &FrameRate::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::FrameRate::fQuit", (sizeof("\0" "GzNa::FrameRate::fQuit")/sizeof(gzUInt8)) - 2, true))); }
}

void cFrameRate::ThreadLoop(){ gzStack gz_s( &FrameRate::zFuncName[3] );
 fNewFrame();
 fBlit();
}

void cFrameRate::fBlit(){ gzStack gz_s( &FrameRate::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::FrameRate::fBlit", (sizeof("\0" "GzNa::FrameRate::fBlit")/sizeof(gzUInt8)) - 2, true))); }
}

void cFrameRate::fNewFrame(){ gzStack gz_s( &FrameRate::zFuncName[5] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::FrameRate::fNewFrame", (sizeof("\0" "GzNa::FrameRate::fNewFrame")/sizeof(gzUInt8)) - 2, true))); }
}

void cFrameRate::fIniProcess(){ gzStack gz_s( &FrameRate::zFuncName[6] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::FrameRate::fIniProcess", (sizeof("\0" "GzNa::FrameRate::fIniProcess")/sizeof(gzUInt8)) - 2, true))); }
}

cFrameRate::~cFrameRate(){
}



}}

namespace Lib_GZ{namespace Sys{namespace Context{
gzGate<Lib_GZ::cThreadMsg> gMainThreadGate;




void Ini_Class(){
gMainThreadGate.Ini();
}

gzFuncStack zFuncName[] = {{0,"Context"},{0,"fCreate"},{0,"fCreateNow"},{0,"fReceiveMessage"},{0,"fFrameStart"},{0,"fAddLink"},{0,"fManageMessage"},{0,"fManageMessageOp"},{0,"fSendData"},{0,"fIniPixelZone"},{0,"drawPixel"},{0,"fBlit"},{0,"fKeyIsDown"},{0,"fClear"},{0,"fCpuVSyncOnGpu"},{0,"fIsWindowReady"},{0,"fIniRender"},{0,"fGetMousePosition"},{0,"fStartCaptureOutside"},{0,"fStopCaptureOutside"},{0,"fFrameEnd"},{0,"fGetPixelArray"},{0,"fGetKey"},{0,"fCompleteContext"},{0,"fBlitComplete"}};



}

namespace Context{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cContext::cContext(Lib_GZ::cBase* _parent) : Lib_GZ::Sys::cWindow(_parent){

 aDrawZone2D = 0;
 aDrawZone1D = 0;
 bBlitInProgress = false;
 bLibSharedContext = false;
 bIniDrawZone = false;

}

void cContext::Ini_cContext(Lib_GZ::Gfx::cInterface* _oInterface, const gzStr& _sWindowName, gzUInt _nFrameWidth, gzUInt _nFrameHeight, gzBool _bTransparent, gzInt _nBgColor){ gzStack gz_s( &Context::zFuncName[0] );
 Ini_cWindow((Lib_GZ::Gfx::cInterface*)(_oInterface), _sWindowName, _nFrameWidth, _nFrameHeight, _bTransparent, _nBgColor);
}

void cContext::fCreate(gzInt _nPosX, gzInt _nPosY, gzUInt _nWinWidth, gzUInt _nWinHeight, Lib_GZ::Sys::Window::eWinState _nStart, gzBool _bGpuDraw, gzBool _bResizable, gzBool _bDragAndDrop, gzBool _bVisible){ gzStack gz_s( &Context::zFuncName[1] );
 gzSp<Lib_GZ::Base::cPt> _oPt = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, gzFloat(_nPosX), gzFloat(_nPosY))));
 gzSp<Lib_GZ::Base::cDim> _oDim = gzSCast<Lib_GZ::Base::cDim>((Lib_GZ::Base::Dim::Get(thread)->New(this, gzFloat(_nWinWidth), gzFloat(_nWinHeight))));
 bWinGPU = _bGpuDraw;
 nFrameWidth = _nWinWidth;
 nFrameHeight = _nWinHeight;
 gzSp<Lib_GZ::Sys::Message::cContextLink> _oMsg = gzSCast<Lib_GZ::Sys::Message::cContextLink>((Lib_GZ::Sys::Message::ContextLink::Get(thread)->New(this, (gzStr((gzUInt8*)"\0" "MonMessage!", (sizeof("\0" "MonMessage!")/sizeof(gzUInt8)) - 2, true)), (Lib_GZ::Base::cPt*)(_oPt.get()), (Lib_GZ::Base::cDim*)(_oDim.get()), bWinGPU)));
 _oMsg->gFrom = gContextGate;
 Context::gMainThreadGate.fSend((Lib_GZ::cThreadMsg*)(_oMsg.get()));
}

void cContext::fCreateNow(){ gzStack gz_s( &Context::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "Create Now Not implemented", (sizeof("\0" "Create Now Not implemented")/sizeof(gzUInt8)) - 2, true)));
}

void cContext::fReceiveMessage(const gzStr& _sMessage){ gzStack gz_s( &Context::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fReceiveMessage", (sizeof("\0" "GzNa::Context::fReceiveMessage")/sizeof(gzUInt8)) - 2, true))); }
}

void cContext::fFrameStart(){ gzStack gz_s( &Context::zFuncName[4] );
 gzSp<Lib_GZ::cThreadMsg> _oMsg = gzSCast<Lib_GZ::cThreadMsg>(gContextGate.fReceive(this));
 if (_oMsg != 0){
  _oMsg->fRun();
 }
}

void csContext::fAddLink(Lib_GZ::Sys::Message::cContextLink* _oLink){ gzStack gz_s( &Context::zFuncName[5] );
 Context::Get(thread)->qaLinks.fPush(gzSCastSelf<Lib_GZ::Sys::Message::cContextLink>(_oLink));
}

void csContext::fManageMessage(){ gzStack gz_s( &Context::zFuncName[6] );
 gzSp<Lib_GZ::cThreadMsg> _oMsg = gzSCast<Lib_GZ::cThreadMsg>(Context::gMainThreadGate.fReceive(this));
 if (_oMsg != 0){
  _oMsg->fRun();
 }
 {gzQElement<gzSp<Lib_GZ::Sys::Message::cContextLink> > _qe_oLink = Context::Get(thread)->qaLinks.GqeFirst();if(_qe_oLink != Context::Get(thread)->qaLinks.qeEmpty){ gzQElement<gzSp<Lib_GZ::Sys::Message::cContextLink> > _qe_oLinkReserved = Context::Get(thread)->qaLinks.GqeFirst();do{
  Lib_GZ::Sys::Message::cContextLink* _oLink = _qe_oLink.val()->get();
  _oLink->oHandle->fUpdate();
  gzSp<Lib_GZ::Sys::Message::cMousePos> _oMsg = gzSCast<Lib_GZ::Sys::Message::cMousePos>((Lib_GZ::Sys::Message::MousePos::Get(thread)->New(this)));
 _qe_oLink = _qe_oLink.GqeNext();}while(_qe_oLink != _qe_oLinkReserved);}}
 Lib_GZ::Sys::Context::Get(thread)->fManageMessageOp();
}

void csContext::fManageMessageOp(){ gzStack gz_s( &Context::zFuncName[7] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fManageMessageOp", (sizeof("\0" "GzNa::Context::fManageMessageOp")/sizeof(gzUInt8)) - 2, true))); }
}

void cContext::fSendData(gzUInt _nOtherWinId){ gzStack gz_s( &Context::zFuncName[8] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fSendData", (sizeof("\0" "GzNa::Context::fSendData")/sizeof(gzUInt8)) - 2, true))); }
}

void cContext::fIniPixelZone(){ gzStack gz_s( &Context::zFuncName[9] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fIniPixelZone", (sizeof("\0" "GzNa::Context::fIniPixelZone")/sizeof(gzUInt8)) - 2, true))); }
}

void cContext::drawPixel(){ gzStack gz_s( &Context::zFuncName[10] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::drawPixel", (sizeof("\0" "GzNa::Context::drawPixel")/sizeof(gzUInt8)) - 2, true))); }
}

void cContext::fBlit(){ gzStack gz_s( &Context::zFuncName[11] );
 if (bIniDrawZone != 0 || bWinGPU != 0){
  bBlitInProgress = true;
  gzSp<Lib_GZ::Sys::Message::cBlit> _oMsgBlit = gzSCast<Lib_GZ::Sys::Message::cBlit>((Lib_GZ::Sys::Message::Blit::Get(thread)->New(this)));
  gHandleGate.fSend((Lib_GZ::cThreadMsg*)(_oMsgBlit.get()));
 }
}

gzInt cContext::fKeyIsDown(gzInt _nKeyVal){ gzStack gz_s( &Context::zFuncName[12] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fKeyIsDown", (sizeof("\0" "GzNa::Context::fKeyIsDown")/sizeof(gzUInt8)) - 2, true))); }
 return 0;
}

void cContext::fClear(){ gzStack gz_s( &Context::zFuncName[13] );
 if (bIniDrawZone != 0){

  int _nLength = nFrameHeight * nFrameWidth;
#pragma unroll 8
 for(gzUInt i = 0; i < _nLength; i++){
  aDrawZone1D[i] = 0;
  }
 }
}

void cContext::fCpuVSyncOnGpu(){ gzStack gz_s( &Context::zFuncName[14] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fCpuVSyncOnGpu", (sizeof("\0" "GzNa::Context::fCpuVSyncOnGpu")/sizeof(gzUInt8)) - 2, true))); }
}

gzBool cContext::fIsWindowReady(){ gzStack gz_s( &Context::zFuncName[15] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fIsWindowReady", (sizeof("\0" "GzNa::Context::fIsWindowReady")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

void cContext::fIniRender(){ gzStack gz_s( &Context::zFuncName[16] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fIniRender", (sizeof("\0" "GzNa::Context::fIniRender")/sizeof(gzUInt8)) - 2, true))); }
}

void cContext::fGetMousePosition(){ gzStack gz_s( &Context::zFuncName[17] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fGetMousePosition", (sizeof("\0" "GzNa::Context::fGetMousePosition")/sizeof(gzUInt8)) - 2, true))); }
}

void cContext::fStartCaptureOutside(){ gzStack gz_s( &Context::zFuncName[18] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fStartCaptureOutside", (sizeof("\0" "GzNa::Context::fStartCaptureOutside")/sizeof(gzUInt8)) - 2, true))); }
}

void cContext::fStopCaptureOutside(){ gzStack gz_s( &Context::zFuncName[19] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fStopCaptureOutside", (sizeof("\0" "GzNa::Context::fStopCaptureOutside")/sizeof(gzUInt8)) - 2, true))); }
}

void cContext::fFrameEnd(){ gzStack gz_s( &Context::zFuncName[20] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fFrameEnd", (sizeof("\0" "GzNa::Context::fFrameEnd")/sizeof(gzUInt8)) - 2, true))); }
}

gzInt** cContext::fGetPixelArray(){ gzStack gz_s( &Context::zFuncName[21] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fGetPixelArray", (sizeof("\0" "GzNa::Context::fGetPixelArray")/sizeof(gzUInt8)) - 2, true))); }
 return 0;
}

void cContext::fGetKey(Lib_GZ::Input::cKey* _oKey){ gzStack gz_s( &Context::zFuncName[22] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Context::fGetKey", (sizeof("\0" "GzNa::Context::fGetKey")/sizeof(gzUInt8)) - 2, true))); }
}

void cContext::fCompleteContext(Lib_GZ::Sys::Message::cContextCreated* _oInfo){ gzStack gz_s( &Context::zFuncName[23] );
 gHandleGate = _oInfo->gContextHandle;

 aDrawZone1D = (gzInt32*)(_oInfo->nDrawZoneAdr);

 if (_oInfo->bGpuDraw == false){
  if (aDrawZone1D == (0)){
   Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "Error, no valid draw zone (pixel array of 1D) returned by fIniPixelDrawZone", (sizeof("\0" "Error, no valid draw zone (pixel array of 1D) returned by fIniPixelDrawZone")/sizeof(gzUInt8)) - 2, true)));
  }else{
   bIniDrawZone = true;

   aDrawZone2D = new gzInt*[nFrameHeight];
   for (gzInt y = 0; y < nFrameHeight; ++y){
   aDrawZone2D[y] = (gzInt*)&aDrawZone1D[y * nFrameWidth];
   }
  }
 }
}

void cContext::fBlitComplete(gzUIntX _nDrawZoneAdr){ gzStack gz_s( &Context::zFuncName[24] );
 if (_nDrawZoneAdr != 0){
  aDrawZone2D = (gzInt32**)(&_nDrawZoneAdr);
 }
 bBlitInProgress = false;
}

gzAny cContext::MemCopy(){
return (gzAny)new cContext(*this);
}
gzAny cContext::DeepCopy(){
return (gzAny)new cContext(*this, true);
}
cContext::~cContext(){
}



}}

namespace Lib_GZ{namespace Sys{namespace Message{namespace ContextCreated{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"ContextCreated"},{0,"fRun"}};



}

namespace ContextCreated{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cContextCreated::cContextCreated(Lib_GZ::cBase* _parent) : Lib_GZ::cThreadMsg(_parent){
 nHandleId=0;nDrawZoneAdr=0;bGpuDraw=0;

}

void cContextCreated::Ini_cContextCreated(gzUInt _nHandleId, gzGate<Lib_GZ::cThreadMsg> _gContextHandle, gzUIntX _nDrawZoneAdr, gzBool _bGpuDraw){ gzStack gz_s( &ContextCreated::zFuncName[0] );
 nHandleId = _nHandleId;
 gContextHandle = _gContextHandle;
 nDrawZoneAdr = _nDrawZoneAdr;
 bGpuDraw = _bGpuDraw;
}

void cContextCreated::fRun(){ gzStack gz_s( &ContextCreated::zFuncName[1] );
 gzSp<Lib_GZ::Sys::cContext> _oContext = gzSCastSelf<Lib_GZ::Sys::cContext>(parent.get());
 _oContext->fCompleteContext((Lib_GZ::Sys::Message::cContextCreated*)(this));
}

gzAny cContextCreated::MemCopy(){
return (gzAny)new cContextCreated(*this);
}
gzAny cContextCreated::DeepCopy(){
return (gzAny)new cContextCreated(*this, true);
}
cContextCreated::~cContextCreated(){
}



}}}

namespace Lib_GZ{namespace Sys{namespace ContextHandle{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"ContextHandle"},{0,"fUpdate"},{0,"fCreateContextHandle"},{0,"fIniPixelDrawZone"},{0,"fBlit"},{0,"fGpuBlit"}};



}

namespace ContextHandle{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cContextHandle::cContextHandle(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){
 nFrameWidth=0;nFrameHeight=0;nHandleId=0;nWinHandleId=0;
 aHandleDrawZone = 0;

}

void cContextHandle::Ini_cContextHandle(Lib_GZ::Sys::Message::cContextLink* _oLink){ gzStack gz_s( &ContextHandle::zFuncName[0] );
 oLink = gzSCastSelf<Lib_GZ::Sys::Message::cContextLink>(_oLink);
 nFrameWidth = gzUInt(oLink->oDim->nWidth);
 nFrameHeight = gzUInt(oLink->oDim->nHeight);
 fCreateContextHandle();
 aHandleDrawZone = (fIniPixelDrawZone());
 if (nHandleId == 0){
  Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "Error, ContextHandle ID not initialised", (sizeof("\0" "Error, ContextHandle ID not initialised")/sizeof(gzUInt8)) - 2, true)));
 }
 if (oLink->bGpuDraw != 0){
  Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- bGpuDraw--", (sizeof("\0" "--- bGpuDraw--")/sizeof(gzUInt8)) - 2, true)));
  oGpu = gzSCast<Lib_GZ::Gpu::cGpu>((Lib_GZ::Gpu::Gpu::Get(thread)->New(this, nHandleId, false)));
 }
}

void cContextHandle::fUpdate(){ gzStack gz_s( &ContextHandle::zFuncName[1] );
 gzSp<Lib_GZ::cThreadMsg> _oMsg = gzSCast<Lib_GZ::cThreadMsg>(gAction.fReceive(this));
 if (_oMsg != 0){
  _oMsg->fRun();
 }
}

gzBool cContextHandle::fCreateContextHandle(){ gzStack gz_s( &ContextHandle::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "fCreateContextHandle: not implemented ", (sizeof("\0" "fCreateContextHandle: not implemented ")/sizeof(gzUInt8)) - 2, true)));
 return false;
}

gzInt32* cContextHandle::fIniPixelDrawZone(){ gzStack gz_s( &ContextHandle::zFuncName[3] );
 Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "fIniPixelDrawZone: not implemented, it require an initialised 1D pixel array", (sizeof("\0" "fIniPixelDrawZone: not implemented, it require an initialised 1D pixel array")/sizeof(gzUInt8)) - 2, true)));
 return 0;
}

gzUIntX cContextHandle::fBlit(){ gzStack gz_s( &ContextHandle::zFuncName[4] );
 Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "fBlit: not implemented, unable to draw", (sizeof("\0" "fBlit: not implemented, unable to draw")/sizeof(gzUInt8)) - 2, true)));
 return 0;
}

gzUIntX cContextHandle::fGpuBlit(){ gzStack gz_s( &ContextHandle::zFuncName[5] );
 oGpu->fBlit();
 return 0;
}

gzAny cContextHandle::MemCopy(){
return (gzAny)new cContextHandle(*this);
}
gzAny cContextHandle::DeepCopy(){
return (gzAny)new cContextHandle(*this, true);
}
cContextHandle::~cContextHandle(){
}



}}

namespace Lib_GZ{namespace Sys{namespace Message{namespace ContextLink{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"ContextLink"},{0,"fRun"},{0,"fCreateContext"},{0,"fIniDrawZone"},{0,"fSendMsg"}};



}

namespace ContextLink{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cContextLink::cContextLink(Lib_GZ::cBase* _parent) : Lib_GZ::cThreadMsg(_parent),oDim(this),oPos(this){
 nHandleId=0;
 bGpuDraw = false;

 bTransparent = false;
 bBorder = false;
 sIcon = (gzStr((gzUInt8*)"\0" "Test", (sizeof("\0" "Test")/sizeof(gzUInt8)) - 2, true));
 bCloseBox = true;

}

void cContextLink::Ini_cContextLink(const gzStr& _sName, Lib_GZ::Base::cPt* _oPos, Lib_GZ::Base::cDim* _oDimention, gzBool _bGpuDraw){ gzStack gz_s( &ContextLink::zFuncName[0] );
 oDim->Ini_cDim(0,0,0);
 oPos->Ini_cPt(0,0,0);
 sName = _sName;
 oPos = gzSCastSelf<Lib_GZ::Base::cPt>(_oPos);
 oDim = gzSCastSelf<Lib_GZ::Base::cDim>(_oDimention);
 bGpuDraw = _bGpuDraw;
}

void cContextLink::fRun(){ gzStack gz_s( &ContextLink::zFuncName[1] );
 Lib_GZ::Sys::Context::Get(thread)->fAddLink((Lib_GZ::Sys::Message::cContextLink*)(this));
 oHandle = gzSCast<Lib_GZ::Sys::cContextHandle>((Lib_GZ::Sys::ContextHandle::Get(thread)->New(this, (Lib_GZ::Sys::Message::cContextLink*)(this))));
 gzSp<Lib_GZ::Sys::Message::cContextCreated> _oContextCreated = gzSCast<Lib_GZ::Sys::Message::cContextCreated>((Lib_GZ::Sys::Message::ContextCreated::Get(thread)->New(this, nHandleId, gzGate<Lib_GZ::cThreadMsg>(oHandle->gAction), gzUIntX(oHandle->aHandleDrawZone), bGpuDraw)));
 fSendMsg((Lib_GZ::cThreadMsg*)(_oContextCreated.get()));
}

void cContextLink::fCreateContext(){ gzStack gz_s( &ContextLink::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "Not Implemented!!! : ", (sizeof("\0" "Not Implemented!!! : ")/sizeof(gzUInt8)) - 2, true)));
}

void cContextLink::fIniDrawZone(){ gzStack gz_s( &ContextLink::zFuncName[3] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "fIniDrawZone Implemented!!! : ", (sizeof("\0" "fIniDrawZone Implemented!!! : ")/sizeof(gzUInt8)) - 2, true)));
}

void cContextLink::fSendMsg(Lib_GZ::cThreadMsg* _oMsg){ gzStack gz_s( &ContextLink::zFuncName[4] );
 gFrom.fSend((Lib_GZ::cThreadMsg*)(_oMsg));
}

gzAny cContextLink::MemCopy(){
return (gzAny)new cContextLink(*this);
}
gzAny cContextLink::DeepCopy(){
return (gzAny)new cContextLink(*this, true);
}
cContextLink::~cContextLink(){
}



}}}

namespace Lib_GZ{namespace Base{namespace Dim{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Dim"}};



}

namespace Dim{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cDim::cDim(Lib_GZ::cBase* _parent) : Lib_GZ::Base::cVec3(_parent){
 nWidth=0;nHeight=0;nLength=0;

}

void cDim::Ini_cDim(gzFloat _nWidth, gzFloat _nHeight, gzFloat _nLength){ gzStack gz_s( &Dim::zFuncName[0] );
 nWidth = _nWidth;
 nHeight = _nHeight;
 nLength = _nLength;
}

gzAny cDim::MemCopy(){
return (gzAny)new cDim(*this);
}
gzAny cDim::DeepCopy(){
return (gzAny)new cDim(*this, true);
}
cDim::~cDim(){
}



}}

namespace Lib_GZ{namespace Sys{namespace Message{namespace MousePos{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"MousePos"},{0,"fRun"}};



}

namespace MousePos{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cMousePos::cMousePos(Lib_GZ::cBase* _parent) : Lib_GZ::cThreadMsg(_parent){
 nPosX = 4;
 nPosY = 3;

}

void cMousePos::Ini_cMousePos(){ gzStack gz_s( &MousePos::zFuncName[0] );
}

void cMousePos::fRun(){ gzStack gz_s( &MousePos::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::MousePos::fRun", (sizeof("\0" "GzNa::MousePos::fRun")/sizeof(gzUInt8)) - 2, true))); }
}

gzAny cMousePos::MemCopy(){
return (gzAny)new cMousePos(*this);
}
gzAny cMousePos::DeepCopy(){
return (gzAny)new cMousePos(*this, true);
}
cMousePos::~cMousePos(){
}



}}}

namespace Lib_GZ{namespace Sys{namespace Message{namespace Blit{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Blit"},{0,"fRun"}};



}

namespace Blit{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cBlit::cBlit(Lib_GZ::cBase* _parent) : Lib_GZ::cThreadMsg(_parent){
 nPosX = 4;
 nPosY = 3;

}

void cBlit::Ini_cBlit(){ gzStack gz_s( &Blit::zFuncName[0] );
}

void cBlit::fRun(){ gzStack gz_s( &Blit::zFuncName[1] );
 gzSp<Lib_GZ::Sys::cContextHandle> _oHandle = gzSCastSelf<Lib_GZ::Sys::cContextHandle>(parent.get());
 if (_oHandle->oLink->bGpuDraw != 0){
  _oHandle->fGpuBlit();
 }else{
  _oHandle->fBlit();
 }
 gzSp<Lib_GZ::Sys::Message::cBlitComplete> _oBlitComplete = gzSCast<Lib_GZ::Sys::Message::cBlitComplete>((Lib_GZ::Sys::Message::BlitComplete::Get(thread)->New(this)));
 _oHandle->oLink->gFrom.fSend((Lib_GZ::cThreadMsg*)(_oBlitComplete.get()));
}

gzAny cBlit::MemCopy(){
return (gzAny)new cBlit(*this);
}
gzAny cBlit::DeepCopy(){
return (gzAny)new cBlit(*this, true);
}
cBlit::~cBlit(){
}



}}}

namespace Lib_GZ{namespace Sys{namespace Message{namespace BlitComplete{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"BlitComplete"},{0,"fRun"}};



}

namespace BlitComplete{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cBlitComplete::cBlitComplete(Lib_GZ::cBase* _parent) : Lib_GZ::cThreadMsg(_parent){
 nDrawZoneAdr=0;

}

void cBlitComplete::Ini_cBlitComplete(gzUIntX _nDrawZoneAdr){ gzStack gz_s( &BlitComplete::zFuncName[0] );
 nDrawZoneAdr = _nDrawZoneAdr;
}

void cBlitComplete::fRun(){ gzStack gz_s( &BlitComplete::zFuncName[1] );
 gzSp<Lib_GZ::Sys::cContext> _oContext = gzSCastSelf<Lib_GZ::Sys::cContext>(parent.get());
 _oContext->fBlitComplete(nDrawZoneAdr);
}

gzAny cBlitComplete::MemCopy(){
return (gzAny)new cBlitComplete(*this);
}
gzAny cBlitComplete::DeepCopy(){
return (gzAny)new cBlitComplete(*this, true);
}
cBlitComplete::~cBlitComplete(){
}



}}}

namespace Lib_GZ{namespace Gfx{namespace Clip{namespace Rectangle{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Rectangle"},{0,"fUpdate"},{0,"fGpuDraw"},{0,"fCpuDraw"},{0,"fGetPixel"},{0,"fSetColor1"},{0,"fUpdateLimits"}};



}

namespace Rectangle{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cRectangle::cRectangle(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cShape(_parent){
 nSetColor1=0;nSetColor2=0;nGoColor1=0;nGoColor2=0;nS1Red=0;nS1Blue=0;nS1Green=0;nG1Red=0;nG1Blue=0;nG1Green=0;nC1Red=0;nC1Blue=0;nC1Green=0;nC2Red=0;nC2Blue=0;nC2Green=0;bSolid=0;

}

void cRectangle::Ini_cRectangle(Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY, gzFloat _nW, gzFloat _nH, gzUInt _nColor1, gzUInt _nColor2){ gzStack gz_s( &Rectangle::zFuncName[0] );
 Ini_cShape((Lib_GZ::Gfx::cRoot*)(_oParent), _nX, _nY, 4, false);
 nGAttType = 2.0;
 gzInt _nCenterX = 0;
 gzInt _nCenterY = 0;
 nWidth = _nW;
 nHeight = _nH;
 gzFloat _nBorder = gzFloat(0);
 gzSp<Lib_GZ::Base::cPt> _oCenter = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, gzFloat(_nCenterX), gzFloat(_nCenterY))));
 oPtTL = gzSCast<Lib_GZ::Base::cPtA>((Lib_GZ::Base::PtA::Get(thread)->New(this, gzFloat(0) - _nBorder, gzFloat(0) - _nBorder)));
 oPtTR = gzSCast<Lib_GZ::Base::cPtA>((Lib_GZ::Base::PtA::Get(thread)->New(this, nWidth + _nBorder, gzFloat(0) - _nBorder)));
 oPtBR = gzSCast<Lib_GZ::Base::cPtA>((Lib_GZ::Base::PtA::Get(thread)->New(this, nWidth + _nBorder, nHeight + _nBorder)));
 oPtBL = gzSCast<Lib_GZ::Base::cPtA>((Lib_GZ::Base::PtA::Get(thread)->New(this, gzFloat(0) - _nBorder, nHeight + _nBorder)));
 fAddPt((Lib_GZ::Base::cPtA*)(oPtTL.get()), (Lib_GZ::Base::cPt*)(_oCenter.get()));
 fAddPt((Lib_GZ::Base::cPtA*)(oPtTR.get()), (Lib_GZ::Base::cPt*)(_oCenter.get()));
 fAddPt((Lib_GZ::Base::cPtA*)(oPtBR.get()), (Lib_GZ::Base::cPt*)(_oCenter.get()));
 fAddPt((Lib_GZ::Base::cPtA*)(oPtBL.get()), (Lib_GZ::Base::cPt*)(_oCenter.get()));
 gzSp<Lib_GZ::Base::cPt> _oPtSrc1 = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, gzFloat(0), gzFloat(0))));
 gzSp<Lib_GZ::Base::cPt> _oPtSrc2 = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, nWidth, gzFloat(0))));
 gzSp<Lib_GZ::Base::cPt> _oPtSrc3 = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, nWidth, nHeight)));
 gzSp<Lib_GZ::Base::cPt> _oPtSrc4 = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, gzFloat(0), nHeight)));
 gzSp<Lib_GZ::Base::cPoly4> _oSrc = gzSCast<Lib_GZ::Base::cPoly4>((Lib_GZ::Base::Poly4::Get(thread)->New(this, (Lib_GZ::Base::cPt*)(_oPtSrc1.get()), (Lib_GZ::Base::cPt*)(_oPtSrc2.get()), (Lib_GZ::Base::cPt*)(_oPtSrc3.get()), (Lib_GZ::Base::cPt*)(_oPtSrc4.get()))));
 fCreateFace((Lib_GZ::File::cRcImg*)(0), (Lib_GZ::Base::cPoly4*)(_oSrc.get()));
 nSetColor1 = _nColor1;
 nSetColor2 = _nColor2;
 nGoColor1 = _nColor1;
 nGoColor2 = _nColor2;
 if (nSetColor2 == 0){
  bSolid = true;
 }else{
  bSolid = false;
 }
 nC1Red = (nSetColor1 >> 16) & 255;
 nC1Blue = (nSetColor1 >> 8) & 255;
 nC1Green = nSetColor1 & 255;
 nC2Red = (nSetColor2 >> 16) & 255;
 nC2Blue = (nSetColor2 >> 8) & 255;
 nC2Green = nSetColor2 & 255;
 fSetColor1(nSetColor1);
 nG1Red = nS1Red;
 nG1Blue = nS1Blue;
 nG1Green = nS1Green;
}

void cRectangle::fUpdate(){ gzStack gz_s( &Rectangle::zFuncName[1] );
 nG1Red += (nS1Red - nG1Red) / 6;
 nG1Blue += (nS1Blue - nG1Blue) / 6;
 nG1Green += (nS1Green - nG1Green) / 6;
 nGoColor1 = (gzInt(255) << 24) | (nG1Red & gzInt(16711680)) | ((nG1Blue & gzInt(16711680)) >> 8) | ((nG1Green & gzInt(16711680)) >> 16);
}

gzBool cRectangle::fGpuDraw(){ gzStack gz_s( &Rectangle::zFuncName[2] );
 gzFloat _nRed = (gzFloat((nGoColor1 >> 16) & 255)) / 255.0;
 gzFloat _nGreen = (gzFloat((nGoColor1 >> 8) & 255)) / 255.0;
 gzFloat _nBlue = (gzFloat(nGoColor1 & 255)) / 255.0;
 nGAttRed += _nRed;
 nGAttGreen += _nGreen;
 nGAttBlue += _nBlue;
 oFace->fGpuDraw();
 return false;
}

gzBool cRectangle::fCpuDraw(gzInt _nPosX, gzInt _nPosY, gzInt _nX_Start, gzInt _nX_End, gzInt _nY_Start, gzInt _nY_End){ gzStack gz_s( &Rectangle::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Rectangle::fCpuDraw", (sizeof("\0" "GzNa::Rectangle::fCpuDraw")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

gzUInt cRectangle::fGetPixel(gzInt x, gzInt y){ gzStack gz_s( &Rectangle::zFuncName[4] );
 gzUInt _nCRed;
 gzUInt _nCBlue;
 gzUInt _nCGreen;
 _nCRed = gzUInt(gzFloat(nC1Red) + ((gzFloat(nC2Red - nC1Red)) * gzFloat(x) / nWidth));
 _nCBlue = 25;
 _nCGreen = 55;
 return (gzInt(255) << 24) | (_nCRed << 16) | (_nCBlue << 8) | _nCGreen;
}

void cRectangle::fSetColor1(gzUInt _nColor){ gzStack gz_s( &Rectangle::zFuncName[5] );
 nS1Red = _nColor & 16711680;
 nS1Blue = (_nColor & 65280) << 8;
 nS1Green = (_nColor & 255) << 16;
}

void cRectangle::fUpdateLimits(){ gzStack gz_s( &Rectangle::zFuncName[6] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Rectangle::fUpdateLimits", (sizeof("\0" "GzNa::Rectangle::fUpdateLimits")/sizeof(gzUInt8)) - 2, true))); }
}

gzAny cRectangle::MemCopy(){
return (gzAny)new cRectangle(*this);
}
gzAny cRectangle::DeepCopy(){
return (gzAny)new cRectangle(*this, true);
}
cRectangle::~cRectangle(){
}



}}}

namespace Lib_GZ{class cThread;}







namespace Lib_GZ{namespace Sys{namespace ThreadItf{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"ThreadItf"}};



}

namespace ThreadItf{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cThreadItf::cThreadItf(Lib_GZ::cBase* _parent) : Lib_GZ::cThread(_parent){


}

void cThreadItf::Ini_cThreadItf(){ gzStack gz_s( &ThreadItf::zFuncName[0] );
}

cThreadItf::~cThreadItf(){
}



}}

namespace Lib_GZ{class cThread;}

namespace Lib_GZ{class cThreadExt;}







namespace Lib_GZ{namespace Sys{namespace ThreadObj{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"ThreadObj"},{0,"fSetPriority"},{0,"fThreadCallBack"},{0,"fStart"},{0,"fJoin"},{0,"fCancel"},{0,"fClose"}};



}

namespace ThreadObj{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cThreadObj::cThreadObj(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){
 bStarted=0;bCreated=0;

}

void cThreadObj::Ini_cThreadObj(Lib_GZ::cThreadExt* _oThreadEx, ThreadObj::Dlg_fThreadCallBack_r_void_p_gzPtr::Dlg _dCallBack){ gzStack gz_s( &ThreadObj::zFuncName[0] );
 oThreadExt = gzSCastSelf<Lib_GZ::cThreadExt>(_oThreadEx);
 dCallBack = _dCallBack.get();
}

void cThreadObj::fSetPriority(gzUInt _nPriority){ gzStack gz_s( &ThreadObj::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ThreadObj::fSetPriority", (sizeof("\0" "GzNa::ThreadObj::fSetPriority")/sizeof(gzUInt8)) - 2, true))); }
}

void cThreadObj::fThreadCallBack(Lib_GZ::cThreadExt* _oThreadEx){ gzStack gz_s( &ThreadObj::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ThreadObj::fThreadCallBack", (sizeof("\0" "GzNa::ThreadObj::fThreadCallBack")/sizeof(gzUInt8)) - 2, true))); }
}

void cThreadObj::fStart(){ gzStack gz_s( &ThreadObj::zFuncName[3] );
 Lib_GZ::Sys::Debug::Get(thread)->fWarning((gzStr((gzUInt8*)"\0" "fStart not implemented in ThreadObj", (sizeof("\0" "fStart not implemented in ThreadObj")/sizeof(gzUInt8)) - 2, true)));
}

void cThreadObj::fJoin(){ gzStack gz_s( &ThreadObj::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ThreadObj::fJoin", (sizeof("\0" "GzNa::ThreadObj::fJoin")/sizeof(gzUInt8)) - 2, true))); }
}

void cThreadObj::fCancel(){ gzStack gz_s( &ThreadObj::zFuncName[5] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ThreadObj::fCancel", (sizeof("\0" "GzNa::ThreadObj::fCancel")/sizeof(gzUInt8)) - 2, true))); }
}

void cThreadObj::fClose(){ gzStack gz_s( &ThreadObj::zFuncName[6] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::ThreadObj::fClose", (sizeof("\0" "GzNa::ThreadObj::fClose")/sizeof(gzUInt8)) - 2, true))); }
}

cThreadObj::~cThreadObj(){
}



}}

namespace Lib_GZ{namespace Gpu{namespace Base{namespace UnVec2{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fLoad"},{0,"UnVec2"}};



}

namespace UnVec2{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

void cUnVec2::fLoad(){ gzStack gz_s( &UnVec2::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "aa", (sizeof("\0" "aa")/sizeof(gzUInt8)) - 2, true)));
}

cUnVec2::cUnVec2(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::Base::cUniform(_parent),oVal(this){


}

void cUnVec2::Ini_cUnVec2(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName){ gzStack gz_s( &UnVec2::zFuncName[1] );
 oVal->Ini_cVec2(0,0);
 Ini_cUniform((Lib_GZ::Gpu::ShaderBase::cProgramShader*)(_oProgram), _sName);
}

gzAny cUnVec2::MemCopy(){
return (gzAny)new cUnVec2(*this);
}
gzAny cUnVec2::DeepCopy(){
return (gzAny)new cUnVec2(*this, true);
}
cUnVec2::~cUnVec2(){
}



}}}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{namespace GpuBatch{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"GpuBatch"},{0,"fDraw"}};



}

namespace GpuBatch{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cGpuBatch::cGpuBatch(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cGpuBatch::Ini_cGpuBatch(){ gzStack gz_s( &GpuBatch::zFuncName[0] );
}

void cGpuBatch::fDraw(){ gzStack gz_s( &GpuBatch::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::GpuBatch::fDraw", (sizeof("\0" "GzNa::GpuBatch::fDraw")/sizeof(gzUInt8)) - 2, true))); }
}

gzAny cGpuBatch::MemCopy(){
return (gzAny)new cGpuBatch(*this);
}
gzAny cGpuBatch::DeepCopy(){
return (gzAny)new cGpuBatch(*this, true);
}
cGpuBatch::~cGpuBatch(){
}



}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace FragmentShader{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"FragmentShader"}};



}

namespace FragmentShader{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cFragmentShader::cFragmentShader(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::ShaderBase::cShaderBase(_parent){

}

void cFragmentShader::Ini_cFragmentShader(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version){ gzStack gz_s( &FragmentShader::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- FragmentShader Created!! ---", (sizeof("\0" "--- FragmentShader Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 hType = Lib_GZ::Gpu::ShaderBase::ShaderBase::eType::Vertex;
 Ini_cShaderBase(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version(_hGlsl_ES_Version));
}

gzAny cFragmentShader::MemCopy(){
return (gzAny)new cFragmentShader(*this);
}
gzAny cFragmentShader::DeepCopy(){
return (gzAny)new cFragmentShader(*this, true);
}
cFragmentShader::~cFragmentShader(){
}



}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{namespace VertexShader{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"VertexShader"}};



}

namespace VertexShader{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cVertexShader::cVertexShader(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::ShaderBase::cShaderBase(_parent){

}

void cVertexShader::Ini_cVertexShader(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version){ gzStack gz_s( &VertexShader::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- VextexShader Created!! ---", (sizeof("\0" "--- VextexShader Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 hType = Lib_GZ::Gpu::ShaderBase::ShaderBase::eType::Vertex;
 Ini_cShaderBase(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version(_hGlsl_ES_Version));
}

gzAny cVertexShader::MemCopy(){
return (gzAny)new cVertexShader(*this);
}
gzAny cVertexShader::DeepCopy(){
return (gzAny)new cVertexShader(*this, true);
}
cVertexShader::~cVertexShader(){
}



}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderModel{namespace GzModel{namespace GzShModel{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"GzShModel"},{0,"fLoad"},{0,"fPod"},{0,"fDraw"}};



}

namespace GzShModel{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cGzShModel::cGzShModel(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){


}

void cGzShModel::Ini_cGzShModel(){ gzStack gz_s( &GzShModel::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- GzShModel Created!! ---", (sizeof("\0" "--- GzShModel Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 fLoad();
}

gzBool cGzShModel::fLoad(){ gzStack gz_s( &GzShModel::zFuncName[1] );
 oVertex = gzSCast<Lib_GZ::Gpu::ShaderBase::cVertexShader>((Lib_GZ::Gpu::ShaderBase::VertexShader::Get(thread)->New(this)));
 oFragement = gzSCast<Lib_GZ::Gpu::ShaderBase::cFragmentShader>((Lib_GZ::Gpu::ShaderBase::FragmentShader::Get(thread)->New(this)));
 oProgram = gzSCast<Lib_GZ::Gpu::ShaderBase::cProgramShader>((Lib_GZ::Gpu::ShaderBase::ProgramShader::Get(thread)->New(this)));

  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "in vec4 atObjPos;", (sizeof("\0" "in vec4 atObjPos;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "xflat out vec4 vColor;", (sizeof("\0" "xflat out vec4 vColor;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "out vec2 ioTexture;", (sizeof("\0" "out vec2 ioTexture;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "void main(){", (sizeof("\0" "void main(){")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "if (nVertexID < 2){", (sizeof("\0" "if (nVertexID < 2){")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "if(nVertexID == 0){", (sizeof("\0" "if(nVertexID == 0){")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "gl_Position.x = -1.0;", (sizeof("\0" "gl_Position.x = -1.0;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "gl_Position.y = -1.0;", (sizeof("\0" "gl_Position.y = -1.0;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "}else{", (sizeof("\0" "}else{")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "gl_Position.x = 1.0;", (sizeof("\0" "gl_Position.x = 1.0;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "gl_Position.y = -1.0;", (sizeof("\0" "gl_Position.y = -1.0;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "}else{", (sizeof("\0" "}else{")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "if(nVertexID == 2){", (sizeof("\0" "if(nVertexID == 2){")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "gl_Position.x = 1.0;", (sizeof("\0" "gl_Position.x = 1.0;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "gl_Position.y = 1.0;", (sizeof("\0" "gl_Position.y = 1.0;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "}else{", (sizeof("\0" "}else{")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "gl_Position.x = -1.0;", (sizeof("\0" "gl_Position.x = -1.0;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "gl_Position.y = 1.0;", (sizeof("\0" "gl_Position.y = 1.0;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "gl_Position.z = 0.5;", (sizeof("\0" "gl_Position.z = 0.5;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "gl_Position.w = 1.0;", (sizeof("\0" "gl_Position.w = 1.0;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "//gl_Position.xy = atObjPos.xy; //Temp", (sizeof("\0" "//gl_Position.xy = atObjPos.xy; //Temp")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "vColor = atObjPos;", (sizeof("\0" "vColor = atObjPos;")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "//vColor = vec4(atObjPos.y, 0.0,1.0,1.0 );", (sizeof("\0" "//vColor = vec4(atObjPos.y, 0.0,1.0,1.0 );")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "// vColor = vec4(1.0,0.0,0.0,1.0);", (sizeof("\0" "// vColor = vec4(1.0,0.0,0.0,1.0);")/sizeof(gzUInt8)) - 2, true)));
  oVertex->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));

 oVertex->fLoad();
 if (oVertex->fCompile() == false){
  Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "Vertex Shader:  ", (sizeof("\0" "Vertex Shader:  ")/sizeof(gzUInt8)) - 2, true)) + oVertex->fGetErrorLine());
  Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" " -->", (sizeof("\0" " -->")/sizeof(gzUInt8)) - 2, true)) + oVertex->fGetLog());
 }else{
  Lib_GZ::Sys::Debug::Get(thread)->fPass((gzStr((gzUInt8*)"\0" "Vertex Success", (sizeof("\0" "Vertex Success")/sizeof(gzUInt8)) - 2, true)));
 }

  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "uniform vec2 vTexDim;", (sizeof("\0" "uniform vec2 vTexDim;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "uniform vec2 vWinDim;", (sizeof("\0" "uniform vec2 vWinDim;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "uniform vec2 vMouse;", (sizeof("\0" "uniform vec2 vMouse;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "xflat in vec4 vColor;", (sizeof("\0" "xflat in vec4 vColor;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "xflat in vec2 ioTexture;", (sizeof("\0" "xflat in vec2 ioTexture;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 cam_pos = vec3(0,0,0);", (sizeof("\0" "vec3 cam_pos = vec3(0,0,0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float PI=3.14159265;", (sizeof("\0" "float PI=3.14159265;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "///////////////////////// OBJ /////////////////", (sizeof("\0" "///////////////////////// OBJ /////////////////")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//Sol", (sizeof("\0" "//Sol")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 obj_floor( vec3 p){", (sizeof("\0" "vec2 obj_floor( vec3 p){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec2(p.y+10.0,0);", (sizeof("\0" "return vec2(p.y+10.0,0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//Sphere", (sizeof("\0" "//Sphere")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 obj_sphere( vec3 p){", (sizeof("\0" "vec2 obj_sphere( vec3 p){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float d = length(p)-1.9;", (sizeof("\0" "float d = length(p)-1.9;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec2(d,1);", (sizeof("\0" "return vec2(d,1);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//Tore", (sizeof("\0" "//Tore")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 obj_torus( vec3 p){", (sizeof("\0" "vec2 obj_torus( vec3 p){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 r = vec2(1.4,1.2);", (sizeof("\0" "vec2 r = vec2(1.4,1.2);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 q = vec2(length(p.xz)-r.x,p.y);", (sizeof("\0" "vec2 q = vec2(length(p.xz)-r.x,p.y);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float d = length(q)-r.y;", (sizeof("\0" "float d = length(q)-r.y;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec2(d,1);", (sizeof("\0" "return vec2(d,1);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//Box", (sizeof("\0" "//Box")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 obj_round_box(vec3 p){", (sizeof("\0" "vec2 obj_round_box(vec3 p){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float d = length(max(abs(p)-vec3(0.3,0.15,1.0),0.0))-0.2;", (sizeof("\0" "float d = length(max(abs(p)-vec3(0.3,0.15,1.0),0.0))-0.2;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec2(d,1);", (sizeof("\0" "return vec2(d,1);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "/*", (sizeof("\0" "/*")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 obj_round_box(vec3 p){", (sizeof("\0" "vec2 obj_round_box(vec3 p){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float d= length(max(abs(p)-vec3(1.0,0.5,2.0),0.0))-0.08;", (sizeof("\0" "float d= length(max(abs(p)-vec3(1.0,0.5,2.0),0.0))-0.08;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//  float d = length(max(abs(p)-vec3(2.0,0.5,2.0),0.0))-0.2;", (sizeof("\0" "//  float d = length(max(abs(p)-vec3(2.0,0.5,2.0),0.0))-0.2;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec2(d,1);", (sizeof("\0" "return vec2(d,1);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}*/", (sizeof("\0" "}*/")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "///////////////////////////////////////////////////////", (sizeof("\0" "///////////////////////////////////////////////////////")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "/// Operator ////////", (sizeof("\0" "/// Operator ////////")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 op_union(vec2 a, vec2 b){", (sizeof("\0" "vec2 op_union(vec2 a, vec2 b){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float d = min(a.x, b.x);", (sizeof("\0" "float d = min(a.x, b.x);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec2(d,1);", (sizeof("\0" "return vec2(d,1);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 op_rep(vec3 p, vec3 c){", (sizeof("\0" "vec2 op_rep(vec3 p, vec3 c){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 q = mod(p,c)-0.5*c;", (sizeof("\0" "vec3 q = mod(p,c)-0.5*c;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return obj_round_box(q);", (sizeof("\0" "return obj_round_box(q);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 op_sub(vec2 a, vec2 b)	{", (sizeof("\0" "vec2 op_sub(vec2 a, vec2 b)	{")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float d = max(a.x, -b.x);", (sizeof("\0" "float d = max(a.x, -b.x);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec2(d,1);", (sizeof("\0" "return vec2(d,1);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 op_blend(vec3 p, vec2 a, vec2 b){", (sizeof("\0" "vec2 op_blend(vec3 p, vec2 a, vec2 b){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float s = smoothstep(length(p), 0.0, 1.0);", (sizeof("\0" "float s = smoothstep(length(p), 0.0, 1.0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float d = mix(a.x, b.x, s);", (sizeof("\0" "float d = mix(a.x, b.x, s);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec2(d,1);", (sizeof("\0" "return vec2(d,1);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "///////////   Union  ////////////////////", (sizeof("\0" "///////////   Union  ////////////////////")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 obj_union( vec2 obj0,  vec2 obj1){", (sizeof("\0" "vec2 obj_union( vec2 obj0,  vec2 obj1){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "if (obj0.x < obj1.x){", (sizeof("\0" "if (obj0.x < obj1.x){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return obj0;", (sizeof("\0" "return obj0;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}else{", (sizeof("\0" "}else{")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return obj1;", (sizeof("\0" "return obj1;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "// Union d'objets", (sizeof("\0" "// Union d'objets")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 distance_to_obj( vec3 p){", (sizeof("\0" "vec2 distance_to_obj( vec3 p){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//return obj_floor(p);", (sizeof("\0" "//return obj_floor(p);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//return obj_union(obj_floor(p), obj_round_box(p));", (sizeof("\0" "//return obj_union(obj_floor(p), obj_round_box(p));")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//return obj_union(obj_floor(p), op_union(obj_round_box(p), obj_sphere(p)));", (sizeof("\0" "//return obj_union(obj_floor(p), op_union(obj_round_box(p), obj_sphere(p)));")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//return obj_union(obj_floor(p), op_sub(obj_round_box(p), obj_sphere(p)));", (sizeof("\0" "//return obj_union(obj_floor(p), op_sub(obj_round_box(p), obj_sphere(p)));")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//return obj_union(obj_floor(p), op_blend(p, obj_round_box(p), obj_torus(p))   )  ;", (sizeof("\0" "//return obj_union(obj_floor(p), op_blend(p, obj_round_box(p), obj_torus(p))   )  ;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//return obj_union(obj_floor(p), op_blend(p, obj_round_box(p), obj_torus(p))   )  ;", (sizeof("\0" "//return obj_union(obj_floor(p), op_blend(p, obj_round_box(p), obj_torus(p))   )  ;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return obj_union(obj_floor(p), op_rep(p , vec3(3.0, 2.0, 6.0)));", (sizeof("\0" "return obj_union(obj_floor(p), op_rep(p , vec3(3.0, 2.0, 6.0)));")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//// Couleur du sol (damier)", (sizeof("\0" "//// Couleur du sol (damier)")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 floor_color( vec3 p){", (sizeof("\0" "vec3 floor_color( vec3 p){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 c = vec3(8.0, 5.0, 9.0);", (sizeof("\0" "vec3 c = vec3(8.0, 5.0, 9.0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 q = mod(p,c) - 0.5 * c;", (sizeof("\0" "vec3 q = mod(p,c) - 0.5 * c;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return  q ;", (sizeof("\0" "return  q ;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "// return  vec3( smoothstep(length(p), fract(p.x*0.2), fract(p.y*0.2)),1,1);", (sizeof("\0" "// return  vec3( smoothstep(length(p), fract(p.x*0.2), fract(p.y*0.2)),1,1);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "/*", (sizeof("\0" "/*")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "if (fract(p.x*0.2)>0.2){", (sizeof("\0" "if (fract(p.x*0.2)>0.2){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "if (fract(p.z*0.2)>0.2){", (sizeof("\0" "if (fract(p.z*0.2)>0.2){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec3(0,0.1,0.2);", (sizeof("\0" "return vec3(0,0.1,0.2);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}else{", (sizeof("\0" "}else{")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec3(1,1,1);", (sizeof("\0" "return vec3(1,1,1);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}else{", (sizeof("\0" "}else{")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "if (fract(p.z*.2)>.2){", (sizeof("\0" "if (fract(p.z*.2)>.2){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec3(1,1,1);", (sizeof("\0" "return vec3(1,1,1);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}else{", (sizeof("\0" "}else{")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec3(0.3,0,0);", (sizeof("\0" "return vec3(0.3,0,0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}*/", (sizeof("\0" "}*/")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//// Couleur de la primitive", (sizeof("\0" "//// Couleur de la primitive")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 prim_c( vec3 p){", (sizeof("\0" "vec3 prim_c( vec3 p){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "return vec3(0.9137,0.83,0.70);", (sizeof("\0" "return vec3(0.9137,0.83,0.70);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "void main(){", (sizeof("\0" "void main(){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 q = ( gl_FragCoord.xy / vec2(800.0,800.0) );", (sizeof("\0" "vec2 q = ( gl_FragCoord.xy / vec2(800.0,800.0) );")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//FragColor = vec4(0,q.y,0,1.0);", (sizeof("\0" "//FragColor = vec4(0,q.y,0,1.0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//return;", (sizeof("\0" "//return;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float _nMove = 2.5 * vMouse.x;", (sizeof("\0" "float _nMove = 2.5 * vMouse.x;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//vec2 q = vec2(1.0, 0.5);", (sizeof("\0" "//vec2 q = vec2(1.0, 0.5);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 vPos = -1.0 + 2.0 * q;", (sizeof("\0" "vec2 vPos = -1.0 + 2.0 * q;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "// Inclinaison de la caméra.", (sizeof("\0" "// Inclinaison de la caméra.")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 vuv = vec3(0,1.5,0.0);", (sizeof("\0" "vec3 vuv = vec3(0,1.5,0.0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "// Direction de la caméra.", (sizeof("\0" "// Direction de la caméra.")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 vrp = vec3(0.5,0.5,1.0);", (sizeof("\0" "vec3 vrp = vec3(0.5,0.5,1.0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//vec3 vrp = vec3(0.0, _nMove,  0.0) * 6.0;", (sizeof("\0" "//vec3 vrp = vec3(0.0, _nMove,  0.0) * 6.0;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "// Position de la caméra.", (sizeof("\0" "// Position de la caméra.")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 mouse = vec2(0.5, 0.5);", (sizeof("\0" "vec2 mouse = vec2(0.5, 0.5);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float mx = mouse.x* PI * 2.0;", (sizeof("\0" "float mx = mouse.x* PI * 2.0;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float my = mouse.y* PI / 2.01;", (sizeof("\0" "float my = mouse.y* PI / 2.01;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//vec3 prp = vec3(  cos(my)*cos(mx),  sin(my),   cos(my)*sin(mx)  ) * 6.0;", (sizeof("\0" "//vec3 prp = vec3(  cos(my)*cos(mx),  sin(my),   cos(my)*sin(mx)  ) * 6.0;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 prp = vec3(  _nMove * 1.5 - 0.2 , _nMove - 0.3- 1.0,   -0.6 ) * 6.0 ;", (sizeof("\0" "vec3 prp = vec3(  _nMove * 1.5 - 0.2 , _nMove - 0.3- 1.0,   -0.6 ) * 6.0 ;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//vec3 prp = cam_pos;", (sizeof("\0" "//vec3 prp = cam_pos;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 vpn = normalize(vrp-prp);", (sizeof("\0" "vec3 vpn = normalize(vrp-prp);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 u = normalize(cross(vuv , vpn));", (sizeof("\0" "vec3 u = normalize(cross(vuv , vpn));")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 v = cross(vpn , u);", (sizeof("\0" "vec3 v = cross(vpn , u);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 vcv = (prp + vpn);", (sizeof("\0" "vec3 vcv = (prp + vpn);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//vec3 scrCoord=vcv+vPos.x*u*resolution.x/resolution.y+vPos.y*v;", (sizeof("\0" "//vec3 scrCoord=vcv+vPos.x*u*resolution.x/resolution.y+vPos.y*v;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 scrCoord = vcv + vPos.x * u * 0.8 + vPos.y * v * 0.8;", (sizeof("\0" "vec3 scrCoord = vcv + vPos.x * u * 0.8 + vPos.y * v * 0.8;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 scp = normalize(scrCoord - prp);", (sizeof("\0" "vec3 scp = normalize(scrCoord - prp);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "// Raymarching.", (sizeof("\0" "// Raymarching.")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "const vec3 e = vec3(0.02, 0, 0);", (sizeof("\0" "const vec3 e = vec3(0.02, 0, 0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "const float maxd = 100.0;", (sizeof("\0" "const float maxd = 100.0;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec2 d = vec2(0.02,0.0);", (sizeof("\0" "vec2 d = vec2(0.02,0.0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 c,p,N;", (sizeof("\0" "vec3 c,p,N;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float f = 1.0;", (sizeof("\0" "float f = 1.0;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "for(int i = 0; i< 260; i++){", (sizeof("\0" "for(int i = 0; i< 260; i++){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "if ((abs(d.x) < .001) || (f > maxd)) {", (sizeof("\0" "if ((abs(d.x) < .001) || (f > maxd)) {")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "break;", (sizeof("\0" "break;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "f += d.x;", (sizeof("\0" "f += d.x;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "p = prp + scp * f;", (sizeof("\0" "p = prp + scp * f;")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "d = distance_to_obj(p);", (sizeof("\0" "d = distance_to_obj(p);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "if (f < maxd){", (sizeof("\0" "if (f < maxd){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "if (d.y==0.0){", (sizeof("\0" "if (d.y==0.0){")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "c=floor_color(p);", (sizeof("\0" "c=floor_color(p);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}else{", (sizeof("\0" "}else{")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "c=prim_c(p);", (sizeof("\0" "c=prim_c(p);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "vec3 n = vec3(d.x-distance_to_obj(p-e.xyy).x, d.x-distance_to_obj(p-e.yxy).x,  d.x-distance_to_obj(p-e.yyx).x);", (sizeof("\0" "vec3 n = vec3(d.x-distance_to_obj(p-e.xyy).x, d.x-distance_to_obj(p-e.yxy).x,  d.x-distance_to_obj(p-e.yyx).x);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "N = normalize(n);", (sizeof("\0" "N = normalize(n);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "float b=dot(N,normalize(prp-p));", (sizeof("\0" "float b=dot(N,normalize(prp-p));")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "// Simple éclairage Phong, LightPosition = CameraPosition", (sizeof("\0" "// Simple éclairage Phong, LightPosition = CameraPosition")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "FragColor = vec4((b*c+pow(b,16.0))*(1.0-f*.01),1.0);", (sizeof("\0" "FragColor = vec4((b*c+pow(b,16.0))*(1.0-f*.01),1.0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}else{", (sizeof("\0" "}else{")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "FragColor = vec4(0.0 + vColor.x,0,0,1.0);", (sizeof("\0" "FragColor = vec4(0.0 + vColor.x,0,0,1.0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "//FragColor = vec4(0 ,0,0,1.0);", (sizeof("\0" "//FragColor = vec4(0 ,0,0,1.0);")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));
  oFragement->fAddLine((gzStr((gzUInt8*)"\0" "}", (sizeof("\0" "}")/sizeof(gzUInt8)) - 2, true)));

 oFragement->fLoad();
 if (oFragement->fCompile() == false){
  Lib_GZ::Sys::Debug::Get(thread)->fError((gzStr((gzUInt8*)"\0" "Fragment Shader: ", (sizeof("\0" "Fragment Shader: ")/sizeof(gzUInt8)) - 2, true)) + oFragement->fGetErrorLine());
  Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" " -->", (sizeof("\0" " -->")/sizeof(gzUInt8)) - 2, true)) + oFragement->fGetLog());
 }else{
  Lib_GZ::Sys::Debug::Get(thread)->fPass((gzStr((gzUInt8*)"\0" "Fragement Shader Success", (sizeof("\0" "Fragement Shader Success")/sizeof(gzUInt8)) - 2, true)));
 }
 oProgram->fAttachShader((Lib_GZ::Gpu::ShaderBase::cShaderBase*)(oVertex.get()));
 oProgram->fAttachShader((Lib_GZ::Gpu::ShaderBase::cShaderBase*)(oFragement.get()));
 if (oProgram->fLink() != 0){
  Lib_GZ::Sys::Debug::Get(thread)->fPass((gzStr((gzUInt8*)"\0" "Link Success", (sizeof("\0" "Link Success")/sizeof(gzUInt8)) - 2, true)));
 }
 oProgram->fUse();
 oProgram->fSetDefaultAttribDivisor(1);
 oVboBatch = gzSCast<Lib_GZ::Gpu::ShaderBase::cVbo>(oProgram->fAddVbo());
 oGpuBatch = gzSCast<Lib_GZ::Gpu::GpuObj::cGpuBatch>((Lib_GZ::Gpu::GpuObj::GpuBatch::Get(thread)->New(this)));
 gzSp<Lib_GZ::Gpu::Base::cAttribute> _oAtObjPos = gzSCast<Lib_GZ::Gpu::Base::cAttribute>(oProgram->fAddAttribute((gzStr((gzUInt8*)"\0" "atObjPos", (sizeof("\0" "atObjPos")/sizeof(gzUInt8)) - 2, true))));
 gzSp<Lib_GZ::Gpu::Base::cAttribute> _oAtVertexID = gzSCast<Lib_GZ::Gpu::Base::cAttribute>(oProgram->fAddAttribute((gzStr((gzUInt8*)"\0" "atVertexID", (sizeof("\0" "atVertexID")/sizeof(gzUInt8)) - 2, true))));
 oUvMouse = gzSCast<Lib_GZ::Gpu::Base::cUnVec2>((Lib_GZ::Gpu::Base::UnVec2::Get(thread)->New(this, (Lib_GZ::Gpu::ShaderBase::cProgramShader*)(oProgram.get()), (gzStr((gzUInt8*)"\0" "vMouse", (sizeof("\0" "vMouse")/sizeof(gzUInt8)) - 2, true)))));
 gzSp<Lib_GZ::Base::cPerspective> _oPersv = gzSCast<Lib_GZ::Base::cPerspective>((Lib_GZ::Base::Perspective::Get(thread)->New(this)));
 gzPod<Lib_GZ::Base::cTestPod> _oPod = (Lib_GZ::Base::TestPod::Get(thread)->New(this, gzFloat(5), gzFloat(5)));
 gzPod<Lib_GZ::Base::cTestPod2> _oPod2 = (Lib_GZ::Base::TestPod2::Get(thread)->New(this, gzFloat(1), 2.5, gzFloat(3), gzFloat(4)));
 fPod((Lib_GZ::Base::cTestPod2*)(_oPod2.get()));
 return false;
}

void cGzShModel::fPod(Lib_GZ::Base::cTestPod2* _oPod){ gzStack gz_s( &GzShModel::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "PodsX:", (sizeof("\0" "PodsX:")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_oPod->nW));
}

void cGzShModel::fDraw(){ gzStack gz_s( &GzShModel::zFuncName[3] );
 oUvMouse->oVal->nX += 0.01;
 oUvMouse->fSend();
 oVboBatch->fSendData();
 oGpuBatch->fDraw();
}

gzAny cGzShModel::MemCopy(){
return (gzAny)new cGzShModel(*this);
}
gzAny cGzShModel::DeepCopy(){
return (gzAny)new cGzShModel(*this, true);
}
cGzShModel::~cGzShModel(){
}



}}}}

namespace Lib_GZ{namespace Base{namespace Perspective{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Perspective"}};



}

namespace Perspective{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cPerspective::cPerspective(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent),mProj(this){
 nRatio=0;nNear=0;nFar=0;nRange=0;nTanHalfFov=0;
 nWidth = gzFloat(800);
 nHeight = gzFloat(600);
 nFov = gzFloat(90);

}

void cPerspective::Ini_cPerspective(){ gzStack gz_s( &Perspective::zFuncName[0] );
 mProj->Ini_cMat4x4(0,0,0,0);
 nRatio = nWidth / nHeight;
 nNear = gzFloat(1);
 nFar = gzFloat(1000);
 nRange = nNear - nFar;
 nTanHalfFov = Lib_GZ::pMath::fTan(((nFov / 2.0) * 3.1415926535897932384626433832795028841971693993751058209749445923078164062 / 180.0f));
 mProj->v0 = gzSCast<Lib_GZ::Base::cVec4>((Lib_GZ::Base::Vec4::Get(thread)->New(this, 1.0 / (nTanHalfFov * nRatio), 0.0, 0.0, 0.0)));
 mProj->v1 = gzSCast<Lib_GZ::Base::cVec4>((Lib_GZ::Base::Vec4::Get(thread)->New(this, 0.0, 1.0 / nTanHalfFov, 0.0, 0.0)));
 mProj->v2 = gzSCast<Lib_GZ::Base::cVec4>((Lib_GZ::Base::Vec4::Get(thread)->New(this, 0.0, 0.0, ((nNear * gzFloat(-1)) - nFar) / nRange, gzFloat(2) * nFar * nNear / nRange)));
 mProj->v3 = gzSCast<Lib_GZ::Base::cVec4>((Lib_GZ::Base::Vec4::Get(thread)->New(this, 0.0, 0.0, 1.0, 0.0)));
}

gzAny cPerspective::MemCopy(){
return (gzAny)new cPerspective(*this);
}
gzAny cPerspective::DeepCopy(){
return (gzAny)new cPerspective(*this, true);
}
cPerspective::~cPerspective(){
}



}}

namespace Lib_GZ{namespace Base{namespace Mat4x4{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Mat4x4"}};



}

namespace Mat4x4{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cMat4x4::cMat4x4(Lib_GZ::cBase* _parent) : Lib_GZ::Base::cMat3x4(_parent),v3(this){


}

void cMat4x4::Ini_cMat4x4(Lib_GZ::Base::cVec4* _v0, Lib_GZ::Base::cVec4* _v1, Lib_GZ::Base::cVec4* _v2, Lib_GZ::Base::cVec4* _v3){ gzStack gz_s( &Mat4x4::zFuncName[0] );
 v3->Ini_cVec4(0,0,0,0);
 v0 = gzSCastSelf<Lib_GZ::Base::cVec4>(_v0);
 v1 = gzSCastSelf<Lib_GZ::Base::cVec4>(_v1);
 v2 = gzSCastSelf<Lib_GZ::Base::cVec4>(_v2);
 v3 = gzSCastSelf<Lib_GZ::Base::cVec4>(_v3);
}

gzAny cMat4x4::MemCopy(){
return (gzAny)new cMat4x4(*this);
}
gzAny cMat4x4::DeepCopy(){
return (gzAny)new cMat4x4(*this, true);
}
cMat4x4::~cMat4x4(){
}



}}

namespace Lib_GZ{namespace Base{namespace Mat3x4{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Mat3x4"}};



}

namespace Mat3x4{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cMat3x4::cMat3x4(Lib_GZ::cBase* _parent) : Lib_GZ::Base::cMat2x4(_parent),v2(this){


}

void cMat3x4::Ini_cMat3x4(Lib_GZ::Base::cVec4* _v0, Lib_GZ::Base::cVec4* _v1, Lib_GZ::Base::cVec4* _v2){ gzStack gz_s( &Mat3x4::zFuncName[0] );
 v2->Ini_cVec4(0,0,0,0);
 v0 = gzSCastSelf<Lib_GZ::Base::cVec4>(_v0);
 v1 = gzSCastSelf<Lib_GZ::Base::cVec4>(_v1);
 v2 = gzSCastSelf<Lib_GZ::Base::cVec4>(_v2);
}

gzAny cMat3x4::MemCopy(){
return (gzAny)new cMat3x4(*this);
}
gzAny cMat3x4::DeepCopy(){
return (gzAny)new cMat3x4(*this, true);
}
cMat3x4::~cMat3x4(){
}



}}

namespace Lib_GZ{namespace Base{namespace Mat2x4{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Mat2x4"}};



}

namespace Mat2x4{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cMat2x4::cMat2x4(Lib_GZ::cBase* _parent) : Lib_GZ::Base::cMat1x4(_parent),v1(this){


}

void cMat2x4::Ini_cMat2x4(Lib_GZ::Base::cVec4* _v0, Lib_GZ::Base::cVec4* _v1){ gzStack gz_s( &Mat2x4::zFuncName[0] );
 v1->Ini_cVec4(0,0,0,0);
 v0 = gzSCastSelf<Lib_GZ::Base::cVec4>(_v0);
 v1 = gzSCastSelf<Lib_GZ::Base::cVec4>(_v1);
}

gzAny cMat2x4::MemCopy(){
return (gzAny)new cMat2x4(*this);
}
gzAny cMat2x4::DeepCopy(){
return (gzAny)new cMat2x4(*this, true);
}
cMat2x4::~cMat2x4(){
}



}}

namespace Lib_GZ{namespace Base{namespace Mat1x4{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Mat1x4"}};



}

namespace Mat1x4{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cMat1x4::cMat1x4(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent),v0(this){


}

void cMat1x4::Ini_cMat1x4(Lib_GZ::Base::cVec4* _v0){ gzStack gz_s( &Mat1x4::zFuncName[0] );
 v0->Ini_cVec4(0,0,0,0);
 v0 = gzSCastSelf<Lib_GZ::Base::cVec4>(_v0);
}

gzAny cMat1x4::MemCopy(){
return (gzAny)new cMat1x4(*this);
}
gzAny cMat1x4::DeepCopy(){
return (gzAny)new cMat1x4(*this, true);
}
cMat1x4::~cMat1x4(){
}



}}

namespace Lib_GZ{namespace Base{namespace TestPod{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"TestPod"}};



}

namespace TestPod{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cTestPod::cTestPod()
{ gzStack gz_s( &TestPod::zFuncName[0] );
 nX=0;nY=0;

}

void cTestPod::Ini_cTestPod(gzFloat _nX, gzFloat _nY){ gzStack gz_s( &TestPod::zFuncName[0] );
 nX = _nX;
 nY = _nY;
}




}}

namespace Lib_GZ{namespace Base{namespace TestPod2{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"TestPod2"}};



}

namespace TestPod2{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cTestPod2::cTestPod2()
{ gzStack gz_s( &TestPod2::zFuncName[0] );
 nZ=0;nW=0;

}

void cTestPod2::Ini_cTestPod2(gzFloat _nX, gzFloat _nY, gzFloat _nZ, gzFloat _nW){ gzStack gz_s( &TestPod2::zFuncName[0] );
 nX = _nX;
 nY = _nY;
 nZ = _nZ;
 nW = _nW;
}




}}

namespace Lib_GZ{namespace Gfx{namespace Clip{namespace Img{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Img"},{0,"fUpdateChildToParent"}};



}

namespace Img{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cImg::cImg(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cShape(_parent){
 nTest=0;
 aFile = 0;

}

void cImg::Ini_cImg(Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY, Lib_GZ::File::cRcImg* _oRc, gzBool _bCenter, gzInt _nCenterX, gzInt _nCenterY, gzBool _bSmoothBorder, gzBool _bDrawLine, Lib_GZ::Base::cPoly4* _oSrcRegion, gzUInt _nWidth, gzUInt _nHeight, Lib_GZ::Base::cPoly4* _oPts){ gzStack gz_s( &Img::zFuncName[0] );
 Ini_cShape((Lib_GZ::Gfx::cRoot*)(_oParent), _nX, _nY, 4, _bSmoothBorder);
 _oRc->fCpuLoad();
 aPixelArray = (_oRc->aImg);
 nWidth = gzFloat(_oRc->nWidth);
 nHeight = gzFloat(_oRc->nHeight);
 oRc = gzSCastSelf<Lib_GZ::File::cRcImg>(_oRc);
 if (_nWidth != 0){
  nWidth = gzFloat(_nWidth);
 }
 if (_nHeight != 0){
  nHeight = gzFloat(_nHeight);
 }
 if (oItf->bGpuDraw != 0){
  _oRc->fGpuLoad();
 }
 gzFloat _nBorder = gzFloat(0);
 if (_bSmoothBorder != 0){
  _nBorder = gzFloat(1);
 }
 if (_bCenter != 0){
  _nCenterX = gzInt(nWidth / gzFloat(2));
  _nCenterY = gzInt(nHeight / gzFloat(2));
 }
 gzSp<Lib_GZ::Base::cPt> _oCenter = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, gzFloat(_nCenterX), gzFloat(_nCenterY))));
 oPtTL = gzSCast<Lib_GZ::Base::cPtA>((Lib_GZ::Base::PtA::Get(thread)->New(this, gzFloat(0) - _nBorder, gzFloat(0) - _nBorder)));
 oPtTR = gzSCast<Lib_GZ::Base::cPtA>((Lib_GZ::Base::PtA::Get(thread)->New(this, nWidth + _nBorder, gzFloat(0) - _nBorder)));
 oPtBR = gzSCast<Lib_GZ::Base::cPtA>((Lib_GZ::Base::PtA::Get(thread)->New(this, nWidth + _nBorder, nHeight + _nBorder)));
 oPtBL = gzSCast<Lib_GZ::Base::cPtA>((Lib_GZ::Base::PtA::Get(thread)->New(this, gzFloat(0) - _nBorder, nHeight + _nBorder)));
 if (_oPts != (Lib_GZ::Base::cPoly4*)(0)){
  oPtTL->nX = _oPts->oPt1->nX;
  oPtTL->nY = _oPts->oPt1->nY;
  oPtTR->nX = _oPts->oPt2->nX;
  oPtTR->nY = _oPts->oPt2->nY;
  oPtBR->nX = _oPts->oPt3->nX;
  oPtBR->nY = _oPts->oPt3->nY;
  oPtBL->nX = _oPts->oPt4->nX;
  oPtBL->nY = _oPts->oPt4->nY;
 }
 fAddPt((Lib_GZ::Base::cPtA*)(oPtTL.get()), (Lib_GZ::Base::cPt*)(_oCenter.get()));
 fAddPt((Lib_GZ::Base::cPtA*)(oPtTR.get()), (Lib_GZ::Base::cPt*)(_oCenter.get()));
 fAddPt((Lib_GZ::Base::cPtA*)(oPtBR.get()), (Lib_GZ::Base::cPt*)(_oCenter.get()));
 fAddPt((Lib_GZ::Base::cPtA*)(oPtBL.get()), (Lib_GZ::Base::cPt*)(_oCenter.get()));
 gzSp<Lib_GZ::Base::cPoly4> _oSrc;
 if (_oSrcRegion == (Lib_GZ::Base::cPoly4*)(0)){
  gzSp<Lib_GZ::Base::cPt> _oPtSrc1 = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, gzFloat(0) - _nBorder, gzFloat(0) - _nBorder)));
  gzSp<Lib_GZ::Base::cPt> _oPtSrc2 = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, nWidth + _nBorder, gzFloat(0) - _nBorder)));
  gzSp<Lib_GZ::Base::cPt> _oPtSrc3 = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, nWidth + _nBorder, nHeight + _nBorder)));
  gzSp<Lib_GZ::Base::cPt> _oPtSrc4 = gzSCast<Lib_GZ::Base::cPt>((Lib_GZ::Base::Pt::Get(thread)->New(this, gzFloat(0) - _nBorder, nHeight + _nBorder)));
  _oSrc = gzSCast<Lib_GZ::Base::cPoly4>((Lib_GZ::Base::Poly4::Get(thread)->New(this, (Lib_GZ::Base::cPt*)(_oPtSrc1.get()), (Lib_GZ::Base::cPt*)(_oPtSrc2.get()), (Lib_GZ::Base::cPt*)(_oPtSrc3.get()), (Lib_GZ::Base::cPt*)(_oPtSrc4.get()))));
 }else{
  _oSrc = gzSCastSelf<Lib_GZ::Base::cPoly4>(_oSrcRegion);
 }
 fCreateFace((Lib_GZ::File::cRcImg*)(_oRc), (Lib_GZ::Base::cPoly4*)(_oSrc.get()));
 oFace->oGpuObj->fSetImg((Lib_GZ::File::cRcImg*)(_oRc));
}

void cImg::fUpdateChildToParent(){ gzStack gz_s( &Img::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Img::fUpdateChildToParent", (sizeof("\0" "GzNa::Img::fUpdateChildToParent")/sizeof(gzUInt8)) - 2, true))); }
}

gzAny cImg::MemCopy(){
return (gzAny)new cImg(*this);
}
gzAny cImg::DeepCopy(){
return (gzAny)new cImg(*this, true);
}
cImg::~cImg(){
}



}}}

namespace Lib_GZ{namespace Gfx{namespace Clip{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"Clip"},{0,"fUpdate"},{0,"fDraw"},{0,"fContextResume"},{0,"fApplyTransform"},{0,"fAddSequence"},{0,"fCalculateChildBorder"}};



}

namespace Clip{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cClip::cClip(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cObject(_parent){

}

void cClip::Ini_cClip(Lib_GZ::Gfx::cRoot* _oParent, gzFloat _nX, gzFloat _nY){ gzStack gz_s( &Clip::zFuncName[0] );
 Ini_cObject((Lib_GZ::Gfx::cRoot*)(_oParent), _nX, _nY);
}

void cClip::fUpdate(){ gzStack gz_s( &Clip::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Clip::fUpdate", (sizeof("\0" "GzNa::Clip::fUpdate")/sizeof(gzUInt8)) - 2, true))); }
}

void cClip::fDraw(){ gzStack gz_s( &Clip::zFuncName[2] );
 fDispatchRender();
}

void cClip::fContextResume(){ gzStack gz_s( &Clip::zFuncName[3] );
 fDispatchContextResume();
}

void cClip::fApplyTransform(){ gzStack gz_s( &Clip::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Clip::fApplyTransform", (sizeof("\0" "GzNa::Clip::fApplyTransform")/sizeof(gzUInt8)) - 2, true))); }
}

void cClip::fAddSequence(){ gzStack gz_s( &Clip::zFuncName[5] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Clip::fAddSequence", (sizeof("\0" "GzNa::Clip::fAddSequence")/sizeof(gzUInt8)) - 2, true))); }
}

void cClip::fCalculateChildBorder(){ gzStack gz_s( &Clip::zFuncName[6] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzNa::Clip::fCalculateChildBorder", (sizeof("\0" "GzNa::Clip::fCalculateChildBorder")/sizeof(gzUInt8)) - 2, true))); }
}

cClip::~cClip(){
}



}}

template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}




extern gzRcFolder RcFolder_Rc_GZ_RcEngine_Slider_More[];
extern gzRcFolder RcFolder_Rc_GZ_RcEngine_Slider[];
extern gzRcFolder RcFolder_Rc_GZ_RcEngine[];
extern const unsigned char Rc_GZ_RcEngine_Slider_AlphaMenu_png[];
extern const int Rc_GZ_RcEngine_Slider_AlphaMenu_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_AlphaMenu_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_Border_png[];
extern const int Rc_GZ_RcEngine_Slider_Border_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_Border_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_BrightnessMenu_png[];
extern const int Rc_GZ_RcEngine_Slider_BrightnessMenu_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_BrightnessMenu_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_Corner_png[];
extern const int Rc_GZ_RcEngine_Slider_Corner_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_Corner_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_ReverseMenu_png[];
extern const int Rc_GZ_RcEngine_Slider_ReverseMenu_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_ReverseMenu_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_Skew_png[];
extern const int Rc_GZ_RcEngine_Slider_Skew_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_Skew_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_Slider_png[];
extern const int Rc_GZ_RcEngine_Slider_Slider_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_Slider_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_SliderBack_png[];
extern const int Rc_GZ_RcEngine_Slider_SliderBack_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_SliderBack_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_SliderBackNP_png[];
extern const int Rc_GZ_RcEngine_Slider_SliderBackNP_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_SliderBackNP_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_SliderBackP_png[];
extern const int Rc_GZ_RcEngine_Slider_SliderBackP_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_SliderBackP_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_SliderBack_2_png[];
extern const int Rc_GZ_RcEngine_Slider_SliderBack_2_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_SliderBack_2_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_SliderFill_png[];
extern const int Rc_GZ_RcEngine_Slider_SliderFill_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_SliderFill_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_More_AlphaMenu_png[];
extern const int Rc_GZ_RcEngine_Slider_More_AlphaMenu_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_More_AlphaMenu_png(0);
extern const unsigned char Rc_GZ_RcEngine_Slider_More_Border_png[];
extern const int Rc_GZ_RcEngine_Slider_More_Border_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Slider_More_Border_png(0);
extern const unsigned char Rc_GZ_RcEngine_Arrow_png[];
extern const int Rc_GZ_RcEngine_Arrow_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Arrow_png(0);
extern const unsigned char Rc_GZ_RcEngine_Transform_png[];
extern const int Rc_GZ_RcEngine_Transform_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Transform_png(0);
extern const unsigned char Rc_GZ_RcEngine_Transform2_png[];
extern const int Rc_GZ_RcEngine_Transform2_png_size;
gzEmbed<::Lib_GZ::File::cRcImg> oRcObj_Rc_GZ_RcEngine_Transform2_png(0);


gzRcFile RcFile_Rc_GZ_RcEngine[]= {
  oRcObj_Rc_GZ_RcEngine_Arrow_png->fSet(RcFolder_Rc_GZ_RcEngine, (gzStr((gzUInt8*)"\0" "Arrow.png", (sizeof("\0" "Arrow.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Arrow_png,Rc_GZ_RcEngine_Arrow_png_size)
, oRcObj_Rc_GZ_RcEngine_Transform_png->fSet(RcFolder_Rc_GZ_RcEngine, (gzStr((gzUInt8*)"\0" "Transform.png", (sizeof("\0" "Transform.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Transform_png,Rc_GZ_RcEngine_Transform_png_size)
, oRcObj_Rc_GZ_RcEngine_Transform2_png->fSet(RcFolder_Rc_GZ_RcEngine, (gzStr((gzUInt8*)"\0" "Transform2.png", (sizeof("\0" "Transform2.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Transform2_png,Rc_GZ_RcEngine_Transform2_png_size)
};
gzRcFile RcFile_Rc_GZ_RcEngine_Slider[]= {
  oRcObj_Rc_GZ_RcEngine_Slider_AlphaMenu_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "AlphaMenu.png", (sizeof("\0" "AlphaMenu.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_AlphaMenu_png,Rc_GZ_RcEngine_Slider_AlphaMenu_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_Border_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "Border.png", (sizeof("\0" "Border.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_Border_png,Rc_GZ_RcEngine_Slider_Border_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_BrightnessMenu_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "BrightnessMenu.png", (sizeof("\0" "BrightnessMenu.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_BrightnessMenu_png,Rc_GZ_RcEngine_Slider_BrightnessMenu_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_Corner_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "Corner.png", (sizeof("\0" "Corner.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_Corner_png,Rc_GZ_RcEngine_Slider_Corner_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_ReverseMenu_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "ReverseMenu.png", (sizeof("\0" "ReverseMenu.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_ReverseMenu_png,Rc_GZ_RcEngine_Slider_ReverseMenu_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_Skew_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "Skew.png", (sizeof("\0" "Skew.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_Skew_png,Rc_GZ_RcEngine_Slider_Skew_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_Slider_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "Slider.png", (sizeof("\0" "Slider.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_Slider_png,Rc_GZ_RcEngine_Slider_Slider_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_SliderBack_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "SliderBack.png", (sizeof("\0" "SliderBack.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_SliderBack_png,Rc_GZ_RcEngine_Slider_SliderBack_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_SliderBackNP_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "SliderBackNP.png", (sizeof("\0" "SliderBackNP.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_SliderBackNP_png,Rc_GZ_RcEngine_Slider_SliderBackNP_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_SliderBackP_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "SliderBackP.png", (sizeof("\0" "SliderBackP.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_SliderBackP_png,Rc_GZ_RcEngine_Slider_SliderBackP_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_SliderBack_2_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "SliderBack_2.png", (sizeof("\0" "SliderBack_2.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_SliderBack_2_png,Rc_GZ_RcEngine_Slider_SliderBack_2_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_SliderFill_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider, (gzStr((gzUInt8*)"\0" "SliderFill.png", (sizeof("\0" "SliderFill.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_SliderFill_png,Rc_GZ_RcEngine_Slider_SliderFill_png_size)
};
gzRcFile RcFile_Rc_GZ_RcEngine_Slider_More[]= {
  oRcObj_Rc_GZ_RcEngine_Slider_More_AlphaMenu_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider_More, (gzStr((gzUInt8*)"\0" "AlphaMenu.png", (sizeof("\0" "AlphaMenu.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_More_AlphaMenu_png,Rc_GZ_RcEngine_Slider_More_AlphaMenu_png_size)
, oRcObj_Rc_GZ_RcEngine_Slider_More_Border_png->fSet(RcFolder_Rc_GZ_RcEngine_Slider_More, (gzStr((gzUInt8*)"\0" "Border.png", (sizeof("\0" "Border.png")/sizeof(gzUInt8)) - 2, true)),Rc_GZ_RcEngine_Slider_More_Border_png,Rc_GZ_RcEngine_Slider_More_Border_png_size)
};


gzRcFolder RcFolder_Rc_GZ_RcEngine_Slider_More[]= {
};
gzRcFolder RcFolder_Rc_GZ_RcEngine_Slider[]= {
 {0,2, (gzStr((gzUInt8*)"\0" "More/", (sizeof("\0" "More/")/sizeof(gzUInt8)) - 2, true)), RcFolder_Rc_GZ_RcEngine_Slider_More, RcFile_Rc_GZ_RcEngine_Slider_More}
};
gzRcFolder RcFolder_Rc_GZ_RcEngine[]= {
 {1,12, (gzStr((gzUInt8*)"\0" "Slider/", (sizeof("\0" "Slider/")/sizeof(gzUInt8)) - 2, true)), RcFolder_Rc_GZ_RcEngine_Slider, RcFile_Rc_GZ_RcEngine_Slider}
};


extern const unsigned char Rc_GZ_RcEngine_Slider_AlphaMenu_png[3815] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,167,0,0,0,85,8,6,0,0,0,44,76,244,254,0,0,14,174,73,68,65,84,120,156,237,221,123,80,84,245,255,199,241,231,89,193,245,18,138,64,133,41,227,173,208,202,73,188,140,137,87,50,102,210,41,4,38,111,228,5,73,192,188,76,242,69,133,26,148,4,155,193,52,19,201,75,2,246,213,114,204,81,83,4,28,126,93,16,4,99,117,116,5,52,49,119,76,20,212,196,184,11,187,130,192,249,253,129,123,190,160,139,74,42,187,233,231,241,15,203,249,124,246,156,247,178,175,61,231,115,206,178,159,149,120,8,115,231,206,237,213,174,93,59,55,160,183,44,203,110,77,219,36,73,114,51,117,31,65,144,101,57,189,233,239,146,36,165,3,151,234,235,235,211,183,109,219,118,249,65,247,151,238,215,24,24,24,232,43,203,114,144,36,73,46,143,84,165,32,220,69,150,229,28,73,146,162,99,99,99,119,180,212,199,100,56,253,253,253,61,85,42,85,52,208,219,184,204,217,217,25,103,103,103,156,156,156,232,216,177,163,210,183,127,255,254,143,177,100,225,105,114,254,252,121,229,182,193,96,160,176,176,16,157,78,135,78,167,107,218,237,82,67,67,67,80,124,124,252,193,187,239,127,79,56,3,3,3,215,3,65,0,246,246,246,188,253,246,219,184,186,186,210,169,83,167,199,95,189,240,76,210,235,245,104,52,26,82,83,83,41,41,41,49,46,142,142,141,141,253,79,211,126,205,194,25,16,16,240,95,73,146,230,0,140,31,63,30,15,15,15,17,74,225,137,209,235,245,36,37,37,113,248,240,97,0,100,89,222,30,23,23,231,103,108,111,103,188,17,24,24,232,43,73,210,74,0,95,95,95,38,78,156,136,181,181,117,91,215,43,60,67,172,173,173,25,56,112,32,246,246,246,228,230,230,34,73,146,203,208,161,67,47,105,181,218,92,184,19,206,192,192,192,174,178,44,255,159,36,73,29,222,123,239,61,220,221,221,205,91,181,240,76,113,114,114,2,64,167,211,33,203,178,219,176,97,195,190,209,106,181,53,170,59,237,65,146,36,217,246,236,217,19,15,15,15,243,85,41,60,179,60,60,60,232,217,179,39,146,36,217,114,231,156,71,5,32,203,114,144,177,131,32,152,139,49,127,198,60,170,252,253,253,61,37,73,178,181,183,183,199,197,197,60,151,51,245,122,61,217,217,217,38,219,178,179,179,41,45,45,109,227,138,4,115,112,113,113,193,222,222,30,73,146,108,253,253,253,61,173,84,42,149,27,192,160,65,131,204,86,84,106,106,42,145,145,145,216,217,217,221,211,86,90,90,202,178,101,203,152,58,117,170,25,42,19,218,218,160,65,131,56,124,248,48,42,149,202,77,37,203,178,11,152,247,98,122,90,90,26,0,238,238,238,12,31,62,156,210,210,82,6,14,28,200,196,137,19,1,148,75,13,194,211,207,152,67,89,150,93,84,128,11,64,207,158,61,205,82,76,85,85,21,153,153,153,44,89,178,132,101,203,150,241,220,115,207,1,208,165,75,23,130,130,130,8,9,9,65,171,213,82,84,84,164,220,167,184,184,24,128,155,55,111,222,179,190,138,138,10,234,234,234,76,110,171,178,178,146,234,234,106,0,110,221,186,213,98,77,198,245,155,82,86,86,166,220,54,181,125,83,253,76,213,81,91,91,219,98,123,121,121,249,67,213,118,191,58,235,234,234,168,170,170,106,177,221,82,53,201,161,139,213,157,179,35,28,28,28,204,82,76,125,125,61,75,151,46,101,218,180,105,38,219,167,76,153,66,93,93,29,86,86,86,68,69,69,241,251,239,191,83,89,89,137,155,155,27,187,119,239,198,203,203,139,176,176,48,98,98,98,248,233,167,159,184,113,227,6,208,56,184,14,15,15,7,96,253,250,245,104,181,90,206,159,63,207,87,95,125,69,124,124,60,121,121,121,116,238,220,153,133,11,23,50,101,202,20,0,18,18,18,216,178,101,11,165,165,165,216,217,217,225,228,228,132,167,167,39,30,30,30,196,196,196,112,225,194,5,52,26,13,11,23,46,100,251,246,237,84,87,87,227,234,234,202,202,149,43,177,179,179,227,218,181,107,124,249,229,151,156,60,121,18,131,193,128,157,157,29,115,230,204,193,199,199,7,128,152,152,24,242,243,243,57,122,244,40,81,81,81,172,90,181,10,7,7,7,126,252,241,71,26,26,26,248,252,243,207,73,74,74,2,26,159,143,5,11,22,40,39,9,225,225,225,104,181,90,106,106,106,152,57,115,38,59,119,238,164,162,162,130,30,61,122,176,118,237,90,94,121,229,21,160,241,114,76,116,116,52,39,78,156,0,192,209,209,145,25,51,102,48,125,250,116,222,121,231,29,106,106,106,148,191,237,166,77,155,88,184,112,161,242,123,64,64,0,51,102,204,120,108,207,237,63,97,204,161,36,73,182,170,7,244,125,226,186,118,237,218,98,48,141,124,124,124,176,183,183,167,184,184,24,157,78,199,245,235,215,217,189,123,183,210,126,248,240,97,190,255,254,123,94,125,245,85,146,146,146,112,119,119,39,41,41,137,212,212,84,160,113,220,106,124,167,43,56,56,152,215,95,127,157,41,83,166,80,93,93,205,134,13,27,148,245,172,89,179,6,39,39,39,146,147,147,153,55,111,30,185,185,185,28,59,118,12,128,146,146,18,101,79,148,144,144,128,159,159,31,253,251,247,71,163,209,16,23,23,7,192,150,45,91,200,204,204,36,56,56,152,157,59,119,82,94,94,222,108,253,149,149,149,202,30,251,211,79,63,69,175,215,83,89,89,9,64,88,88,24,73,73,73,204,157,59,151,125,251,246,209,183,111,95,34,35,35,57,119,238,156,114,223,27,55,110,80,81,81,193,174,93,187,152,60,121,50,174,174,174,92,189,122,149,93,187,118,1,141,123,235,197,139,23,115,226,196,9,22,45,90,196,23,95,124,193,245,235,215,89,183,110,29,121,121,121,132,133,133,81,93,93,77,117,117,53,65,65,65,116,234,212,137,136,136,8,170,171,171,25,51,102,12,253,250,245,251,135,207,226,147,97,246,112,182,198,186,117,235,176,177,177,1,32,37,37,133,131,7,15,18,22,22,198,128,1,3,152,48,97,2,139,23,47,198,214,214,86,121,245,25,15,187,171,86,173,162,79,159,62,0,248,249,249,17,18,18,194,135,31,126,8,208,108,79,34,203,50,185,185,185,172,88,177,2,89,150,137,140,140,100,249,242,229,0,68,68,68,208,171,87,47,0,102,206,156,137,175,175,175,178,215,249,245,215,95,1,24,50,100,8,62,62,62,120,121,121,225,224,224,64,183,110,221,168,175,175,87,134,18,203,151,47,87,46,56,7,7,7,147,153,153,201,190,125,251,200,207,207,87,214,97,48,24,216,191,127,63,47,191,252,50,0,25,25,25,0,68,71,71,43,143,125,211,166,77,124,244,209,71,184,186,186,2,40,235,63,120,240,32,197,197,197,56,59,59,227,235,235,203,248,241,227,153,60,121,50,142,142,142,88,89,89,49,118,236,88,188,189,189,1,200,202,202,162,79,159,62,92,186,116,9,128,217,179,103,51,98,196,136,71,126,142,30,39,43,115,23,240,40,94,122,233,37,229,167,141,141,13,243,231,207,167,168,168,72,89,222,90,171,87,175,102,243,230,205,100,103,103,147,157,157,141,181,181,53,101,101,101,124,240,193,7,38,251,119,239,222,29,104,28,35,214,214,214,210,171,87,47,50,51,51,25,63,126,60,178,44,63,112,204,215,161,67,7,58,116,232,160,236,29,1,108,109,109,149,219,11,22,44,104,85,253,5,5,5,0,244,232,209,67,89,22,26,26,74,104,104,168,242,251,180,105,211,56,112,224,0,105,105,105,252,245,215,95,36,36,36,224,238,238,174,12,11,44,201,191,106,207,217,146,85,171,86,177,119,239,94,60,60,60,56,118,236,24,99,199,142,109,245,58,116,58,29,89,89,89,44,89,178,132,77,155,54,225,229,229,197,237,219,183,89,191,126,253,61,33,187,125,251,54,0,133,133,133,64,227,127,111,181,111,223,158,144,144,16,50,51,51,249,236,179,207,72,75,75,195,222,222,254,161,182,237,236,236,172,220,30,60,120,48,126,126,126,248,249,249,49,96,192,0,102,205,154,245,208,143,193,24,176,179,103,207,54,59,41,52,14,59,0,250,245,235,167,188,61,157,152,152,200,149,43,87,148,49,177,165,177,168,112,30,57,114,132,235,215,175,3,80,84,84,196,145,35,71,154,181,31,61,122,20,189,94,15,192,153,51,103,148,127,183,50,254,172,170,170,226,208,161,67,156,58,117,10,128,203,151,47,147,146,146,130,70,163,81,14,241,165,165,165,156,58,117,138,188,188,60,101,189,25,25,25,116,239,222,157,196,196,68,130,130,130,40,42,42,98,214,172,89,12,30,60,24,0,181,90,221,172,142,159,127,254,153,95,126,249,133,111,190,249,6,0,47,47,47,12,6,3,21,21,21,74,237,241,241,241,74,93,199,142,29,35,63,63,31,141,70,163,212,95,94,94,142,70,163,1,192,206,206,78,57,41,91,177,98,5,63,252,240,3,107,215,174,229,227,143,63,102,243,230,205,74,141,198,23,201,133,11,23,56,119,238,156,50,94,173,170,170,66,163,209,224,237,237,141,163,163,35,55,110,220,32,52,52,148,3,7,14,176,124,249,114,98,99,99,249,237,183,223,148,250,141,99,252,248,248,120,70,141,26,197,27,111,188,209,138,103,169,237,180,27,58,116,232,74,176,140,183,46,215,172,89,195,217,179,103,81,171,213,20,23,23,115,249,242,101,60,61,61,149,246,57,115,230,96,109,109,141,90,173,38,35,35,3,79,79,79,108,108,108,120,225,133,23,200,206,206,70,163,209,80,89,89,73,64,64,0,23,47,94,36,45,45,141,190,125,251,114,234,212,41,52,26,13,106,181,154,252,252,124,134,15,31,78,100,100,36,106,181,26,181,90,77,122,122,58,83,167,78,165,164,164,4,23,23,23,118,236,216,193,206,157,59,169,175,175,39,56,56,152,215,94,123,13,104,124,241,232,116,58,198,140,25,195,198,141,27,41,43,43,99,210,164,73,4,7,7,99,109,109,77,67,67,3,121,121,121,156,60,121,18,71,71,71,166,79,159,206,233,211,167,73,73,73,193,219,219,155,196,196,68,50,50,50,80,171,213,228,229,229,225,228,228,164,188,43,55,106,212,40,106,107,107,57,125,250,52,71,142,28,225,239,191,255,102,222,188,121,248,251,251,3,141,99,229,246,237,219,163,86,171,201,202,202,194,205,205,141,232,232,104,229,111,85,80,80,128,183,183,55,35,70,140,160,160,160,128,172,172,44,50,51,51,177,177,177,33,34,34,130,55,223,124,83,249,59,58,58,58,146,155,155,203,213,171,87,9,9,9,49,219,101,196,150,36,39,39,3,32,5,6,6,202,0,91,183,110,53,107,65,143,67,67,67,3,42,213,255,14,6,53,53,53,247,236,245,30,86,89,89,25,221,186,117,107,182,44,34,34,130,228,228,100,66,67,67,241,242,242,194,202,234,201,12,217,43,42,42,232,218,181,235,35,175,199,212,227,55,94,150,91,180,104,17,181,181,181,196,198,198,62,242,118,30,183,121,243,230,1,22,118,88,127,84,77,131,9,247,30,142,91,227,238,96,22,20,20,96,48,24,128,198,39,253,218,181,107,255,120,221,15,242,56,130,9,247,62,254,175,191,254,154,209,163,71,179,99,199,14,142,31,63,110,177,99,77,163,167,42,156,79,210,182,109,219,148,235,166,209,209,209,247,140,135,255,13,186,116,233,66,125,125,61,27,55,110,100,234,212,169,188,245,214,91,230,46,233,190,158,170,195,250,147,100,188,150,216,84,231,206,157,205,80,201,163,49,190,13,252,226,139,47,154,185,146,150,25,15,235,255,234,235,156,109,233,223,24,68,83,44,57,148,119,19,135,117,193,98,137,112,10,22,75,132,83,176,88,202,9,145,32,88,26,229,132,72,156,173,11,150,226,169,188,8,47,60,93,68,56,5,139,37,194,41,88,44,17,78,193,98,137,112,10,22,75,132,83,176,88,34,156,130,197,18,225,20,44,150,8,167,96,177,68,56,5,139,37,194,41,88,44,17,78,193,98,137,112,10,22,75,132,83,120,160,63,255,252,83,153,168,162,37,90,173,246,177,111,87,132,83,184,175,213,171,87,51,125,250,116,101,118,17,83,222,127,255,125,150,44,89,242,216,183,45,194,41,40,110,221,186,133,187,187,59,81,81,81,202,178,79,62,249,196,228,135,251,154,78,190,107,156,137,15,48,57,113,239,253,38,234,189,31,17,78,65,145,148,148,132,151,151,23,201,201,201,38,103,94,142,138,138,98,194,132,9,172,92,185,146,49,99,198,16,25,25,169,180,53,52,52,48,127,254,124,70,142,28,201,161,67,135,0,184,114,229,10,115,231,206,101,193,130,5,204,158,61,187,233,87,9,62,20,17,78,65,145,156,156,204,164,73,147,168,173,173,85,230,43,106,202,219,219,27,131,193,192,184,113,227,216,184,113,35,73,73,73,92,188,120,17,104,156,109,101,233,210,165,188,251,238,187,202,36,105,249,249,249,60,255,252,243,124,251,237,183,92,187,118,237,238,47,100,125,32,17,78,1,128,211,167,79,83,88,88,200,134,13,27,112,116,116,52,25,206,1,3,6,0,141,65,52,222,110,58,87,127,191,126,253,154,205,31,213,191,127,127,212,106,53,147,39,79,166,162,162,130,250,250,250,86,213,36,194,41,0,141,135,244,224,224,96,214,174,93,75,80,80,16,103,206,156,225,236,217,179,38,251,234,245,122,254,248,227,15,128,251,78,212,187,99,199,14,110,222,188,201,222,189,123,233,214,173,27,13,13,13,173,170,73,132,83,224,208,161,67,164,166,166,178,127,255,126,84,42,21,223,125,247,29,54,54,54,132,135,135,179,122,245,106,84,42,85,179,241,101,74,74,10,139,22,45,194,215,215,151,94,189,122,241,249,231,159,163,82,169,216,183,111,31,169,169,169,164,164,164,112,238,220,57,6,14,28,200,241,227,199,9,8,8,96,244,232,209,132,135,135,35,203,15,255,97,95,49,87,146,208,42,227,198,141,35,50,50,146,145,35,71,62,177,111,149,22,159,190,20,90,45,42,42,10,189,94,79,98,98,98,155,124,221,185,152,200,75,120,104,62,62,62,109,58,167,167,8,167,240,208,122,247,238,221,166,219,19,135,117,193,98,137,112,10,22,75,132,83,176,88,34,156,130,197,18,225,20,44,150,8,167,96,177,68,56,5,139,37,194,41,88,44,17,78,193,98,137,112,10,22,75,132,83,176,88,34,156,130,197,18,225,20,44,150,18,206,194,194,66,115,214,33,8,64,243,28,42,225,212,235,245,102,41,70,16,154,50,230,80,150,229,28,149,44,203,233,208,248,25,99,65,48,183,38,57,204,81,1,9,32,14,235,130,101,104,146,195,28,149,74,165,74,7,90,253,129,119,65,120,18,140,57,84,169,84,233,170,173,91,183,230,2,151,74,74,74,200,201,201,49,111,101,194,51,45,39,39,199,56,101,205,165,173,91,183,230,26,79,136,182,3,164,166,166,154,171,46,65,104,154,191,237,240,191,179,245,104,89,150,203,117,58,29,89,89,89,230,168,75,120,198,101,101,101,161,211,233,144,101,185,28,136,134,59,225,140,141,141,173,144,36,41,8,96,207,158,61,226,228,72,104,83,133,133,133,236,217,179,7,0,73,146,130,98,99,99,43,0,218,25,59,104,181,218,220,33,67,134,244,174,171,171,115,57,113,226,4,125,250,244,193,193,193,193,76,229,10,207,138,243,231,207,19,19,19,131,193,96,64,150,229,237,113,113,113,17,198,182,118,77,59,14,27,54,44,93,150,229,17,117,117,117,189,53,26,13,122,189,158,190,125,251,182,201,236,14,194,179,69,175,215,179,127,255,126,118,237,218,69,93,93,29,178,44,167,75,146,52,71,171,213,214,24,251,72,166,238,24,24,24,184,30,8,2,232,216,177,35,174,174,174,140,28,57,18,39,39,167,54,42,93,120,90,21,22,22,146,149,149,133,70,163,193,96,48,24,23,71,199,198,198,254,231,238,190,38,195,9,16,16,16,48,14,136,150,36,201,165,233,114,103,103,231,102,253,196,245,81,161,37,15,202,138,44,203,57,64,80,92,92,220,17,83,247,111,49,156,70,1,1,1,227,36,73,242,2,188,128,222,255,180,80,65,184,227,18,144,32,203,114,66,75,161,52,122,96,56,155,10,12,12,236,42,203,114,179,61,233,131,54,32,60,187,238,28,125,21,146,36,229,24,207,196,5,65,16,132,39,225,255,1,178,131,211,108,234,51,220,169,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_AlphaMenu_png_size = 3815;

extern const unsigned char Rc_GZ_RcEngine_Slider_Border_png[196] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,7,0,0,0,8,8,6,0,0,0,53,4,229,6,0,0,0,139,73,68,65,84,8,153,125,207,177,106,194,80,0,64,209,243,202,27,146,31,136,10,150,254,131,16,12,56,136,139,159,94,91,148,182,20,220,21,5,53,63,240,50,60,146,14,233,236,93,239,114,111,48,50,64,89,150,32,165,4,63,1,66,8,67,189,92,89,212,13,195,224,176,223,57,124,190,139,80,20,133,69,221,88,111,182,250,190,7,199,223,239,81,198,24,85,213,212,252,245,13,84,147,153,24,163,23,79,136,144,115,214,182,119,215,203,25,180,143,155,156,243,40,187,174,243,181,255,248,239,30,131,82,74,194,147,149,211,31,71,168,53,58,186,216,63,155,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_Border_png_size = 196;

extern const unsigned char Rc_GZ_RcEngine_Slider_BrightnessMenu_png[4772] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,167,0,0,0,235,8,6,0,0,0,12,140,134,251,0,0,18,107,73,68,65,84,120,156,237,221,127,84,214,245,253,255,241,251,251,66,49,81,166,238,170,230,65,68,143,155,162,50,212,68,49,33,59,136,229,156,162,33,233,166,53,15,249,131,139,117,220,202,98,51,106,141,204,102,250,161,52,92,185,243,5,212,204,113,200,206,206,172,14,56,221,49,80,209,0,119,134,40,202,41,104,66,205,180,144,232,8,10,40,2,239,239,31,202,149,132,191,90,40,47,244,113,59,199,115,46,222,191,174,39,158,59,239,247,117,189,21,176,184,14,11,23,46,28,224,225,225,17,6,12,180,109,59,236,210,117,150,101,133,93,110,31,17,219,182,119,95,250,177,101,89,187,129,79,155,154,154,118,111,216,176,225,179,107,237,111,93,109,165,203,229,138,182,109,123,137,101,89,163,190,215,148,34,223,98,219,246,65,203,178,146,82,82,82,222,186,210,54,151,141,115,209,162,69,15,57,28,142,36,96,96,203,178,33,67,134,48,100,200,16,250,247,239,79,247,238,221,221,219,250,251,251,183,227,200,114,43,41,41,41,113,63,174,175,175,231,216,177,99,148,150,150,82,90,90,122,233,102,159,54,55,55,47,89,191,126,253,251,223,222,191,77,156,46,151,235,53,96,9,128,211,233,100,210,164,73,140,31,63,30,47,47,175,246,159,94,110,75,117,117,117,228,229,229,145,149,149,69,85,85,85,203,226,164,148,148,148,167,46,221,174,85,156,49,49,49,111,90,150,245,24,64,120,120,56,211,167,79,87,148,114,195,212,213,213,145,145,145,65,118,118,54,0,182,109,111,74,77,77,157,223,178,222,163,229,129,203,229,138,182,44,107,25,64,116,116,52,63,255,249,207,233,218,181,235,205,158,87,110,35,93,187,118,229,167,63,253,41,78,167,147,67,135,14,97,89,214,168,160,160,160,79,11,10,10,14,193,197,56,93,46,87,47,219,182,119,88,150,117,71,68,68,4,15,60,240,64,199,78,45,183,149,254,253,251,3,80,90,90,138,109,219,97,99,198,140,249,127,5,5,5,231,28,23,215,47,177,44,171,183,175,175,47,211,167,79,239,184,41,229,182,53,125,250,116,124,125,125,177,44,171,55,23,223,243,56,0,108,219,94,210,178,129,72,71,105,233,175,165,71,199,162,69,139,30,178,44,171,183,211,233,100,212,168,219,231,118,102,73,73,9,141,141,141,223,105,159,198,198,70,14,29,58,116,131,38,146,81,163,70,225,116,58,177,44,171,247,162,69,139,30,234,226,112,56,194,0,70,142,28,217,177,147,93,135,250,250,122,34,35,35,219,44,239,210,165,11,125,251,246,37,34,34,130,153,51,103,94,243,56,219,183,111,39,33,33,129,9,19,38,176,102,205,154,107,110,95,92,92,204,218,181,107,41,42,42,98,232,208,161,108,218,180,233,170,219,239,220,185,19,128,7,31,124,240,154,199,150,214,70,142,28,73,118,118,54,14,135,35,204,97,219,246,40,232,28,55,211,61,60,60,120,242,201,39,249,250,235,175,249,250,235,175,249,217,207,126,198,228,201,147,25,57,114,36,69,69,69,188,252,242,203,252,251,223,255,190,230,113,44,203,114,31,239,122,13,25,50,132,166,166,166,235,218,246,197,23,95,228,171,175,190,186,238,99,203,55,90,58,180,109,123,84,23,96,20,128,175,175,111,71,206,116,93,60,61,61,153,58,117,42,137,137,137,212,214,214,18,22,22,198,232,209,163,129,11,151,220,93,187,118,145,159,159,207,152,49,99,220,251,124,245,213,87,220,121,231,157,156,62,125,26,111,111,111,0,166,76,153,194,176,97,195,232,209,163,71,155,231,56,117,234,20,189,123,247,6,32,39,39,135,211,167,79,51,109,218,52,154,154,154,120,231,157,119,220,219,53,55,55,227,112,56,218,236,191,102,205,26,206,157,59,119,197,207,161,101,158,111,63,254,182,179,103,207,226,225,225,113,197,219,121,181,181,181,151,157,255,90,235,76,119,73,135,163,186,92,124,119,116,197,191,164,206,160,174,174,142,202,202,74,0,119,172,43,87,174,228,200,145,35,212,212,212,16,22,22,198,150,45,91,136,140,140,100,226,196,137,236,221,187,151,35,71,142,208,173,91,55,214,175,95,15,192,123,239,189,71,74,74,10,149,149,149,88,150,197,204,153,51,217,186,117,43,253,251,247,103,218,180,105,173,158,47,33,33,129,237,219,183,211,181,107,87,92,46,23,143,61,246,24,112,225,140,153,153,153,9,64,114,114,50,201,201,201,76,152,48,129,151,94,122,137,132,132,4,10,10,10,56,119,238,28,191,250,213,175,72,75,75,163,186,186,154,126,253,250,241,202,43,175,48,120,240,96,224,155,151,16,133,133,133,0,220,123,239,189,60,245,212,83,12,26,52,8,128,87,95,125,213,253,69,18,24,24,72,89,89,25,255,248,199,63,240,242,242,186,234,186,206,162,165,67,203,178,122,183,253,210,239,68,94,124,241,69,102,204,152,193,196,137,19,57,125,250,52,171,87,175,38,36,36,4,184,112,86,42,45,45,229,203,47,191,100,203,150,45,173,246,59,121,242,36,31,127,252,177,251,227,47,190,248,130,21,43,86,208,208,208,192,198,141,27,137,137,137,97,235,214,173,60,245,212,83,108,221,186,181,213,190,197,197,197,52,54,54,242,248,227,143,115,254,252,121,119,220,0,195,135,15,119,191,230,141,141,141,101,241,226,197,140,24,49,2,128,154,154,26,78,158,60,73,117,117,53,233,233,233,204,154,53,139,241,227,199,115,252,248,113,210,211,211,1,168,168,168,224,137,39,158,160,176,176,144,181,107,215,242,151,191,252,133,252,252,124,86,172,88,1,192,158,61,123,120,231,157,119,248,205,111,126,195,230,205,155,241,247,247,167,182,182,150,252,252,252,171,174,235,172,186,116,244,0,223,199,236,217,179,1,168,172,172,36,61,61,157,63,253,233,79,172,94,189,154,192,192,64,86,175,94,77,120,120,56,167,79,159,102,251,246,237,52,52,52,224,227,227,3,92,120,173,153,147,147,227,62,78,121,121,57,112,225,172,27,24,24,72,109,109,45,0,255,250,215,191,120,228,145,71,90,61,103,64,64,0,47,191,252,50,0,155,55,111,166,182,182,214,125,25,157,61,123,182,123,221,165,243,1,36,37,37,185,231,89,183,110,29,131,7,15,230,237,183,223,38,47,47,207,253,124,25,25,25,212,212,212,48,124,248,112,246,239,223,15,192,208,161,67,41,42,42,226,147,79,62,113,223,93,120,227,141,55,152,50,101,10,83,166,76,97,252,248,241,220,127,255,253,100,101,101,93,113,93,103,213,169,227,28,62,124,184,251,50,126,199,29,119,176,113,227,70,82,83,83,249,243,159,255,220,102,219,150,48,47,103,204,152,49,244,238,221,155,93,187,118,177,113,227,70,247,37,245,190,251,238,187,49,131,95,65,69,69,5,112,97,214,150,215,189,225,225,225,132,135,135,83,83,83,195,164,73,147,88,176,96,1,105,105,105,236,216,177,131,29,59,118,48,104,208,32,247,127,208,185,210,186,128,128,128,155,250,121,180,151,78,125,89,191,84,117,117,53,0,95,126,249,229,119,222,215,211,211,147,200,200,72,2,3,3,217,179,103,15,231,207,159,39,62,62,158,89,179,102,253,207,243,124,215,123,168,112,225,142,0,92,56,147,207,159,63,223,253,167,169,169,137,160,160,32,178,179,179,41,46,46,38,43,43,139,132,132,4,238,185,231,30,202,202,202,72,78,78,190,234,186,206,170,83,157,57,207,159,63,207,238,221,187,221,151,193,61,123,246,144,151,151,71,101,101,37,219,182,109,3,96,242,228,201,0,236,219,183,143,186,186,58,0,14,31,62,204,136,17,35,112,58,157,28,62,124,216,253,230,169,190,190,158,188,188,60,142,31,63,206,166,77,155,152,55,111,30,254,254,254,248,249,249,225,231,231,231,126,222,178,178,50,78,156,56,209,106,159,166,166,38,247,241,11,10,10,8,10,10,162,71,143,30,56,157,78,0,50,51,51,233,217,179,39,229,229,229,60,253,244,211,228,228,228,112,230,204,25,0,254,243,159,255,208,216,216,72,77,77,13,0,103,206,156,33,47,47,143,168,168,40,210,211,211,57,122,244,40,75,151,46,37,36,36,132,252,252,124,178,178,178,220,183,178,246,239,223,79,92,92,28,46,151,139,199,31,127,28,151,203,133,167,167,231,85,215,117,86,150,203,229,178,129,78,241,21,86,95,95,223,230,157,51,64,247,238,221,233,215,175,31,15,62,248,160,251,117,94,120,120,120,171,109,210,210,210,240,241,241,33,55,55,151,231,159,127,222,189,220,215,215,151,69,139,22,241,204,51,207,180,57,219,13,30,60,152,133,11,23,210,183,111,95,126,251,219,223,186,151,207,152,49,131,79,62,249,132,143,62,250,200,189,236,239,127,255,59,125,250,244,161,174,174,142,23,94,120,129,189,123,247,2,16,18,18,194,154,53,107,218,204,147,152,152,200,210,165,75,221,31,255,228,39,63,33,37,37,133,207,62,251,140,87,95,125,213,253,70,102,196,136,17,44,94,188,216,253,242,37,60,60,156,208,208,80,118,236,216,1,192,184,113,227,120,246,217,103,233,215,175,223,85,215,117,38,177,177,177,64,39,139,243,70,57,120,240,32,73,73,73,140,24,49,130,31,254,240,135,124,241,197,23,148,151,151,83,88,88,136,143,143,15,239,191,223,230,63,105,223,20,103,207,158,229,142,59,238,184,236,186,230,230,102,26,27,27,47,123,102,188,218,186,206,160,37,206,78,117,89,191,81,94,127,253,117,138,139,139,153,63,127,62,65,65,65,120,121,121,81,92,92,204,130,5,11,232,219,183,111,135,205,117,165,48,1,28,14,199,21,227,187,218,186,206,68,113,2,11,22,44,32,37,37,133,223,253,238,119,238,101,221,187,119,103,234,212,169,173,46,231,114,115,41,78,32,52,52,148,208,208,80,106,107,107,57,115,230,12,158,158,158,244,233,211,167,163,199,186,237,41,206,75,244,232,209,163,211,254,155,244,173,232,150,185,207,41,183,30,197,41,198,82,156,98,44,247,125,78,17,211,184,223,16,221,206,55,225,197,44,45,55,225,117,89,23,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,148,107,58,122,244,40,7,14,28,104,243,248,70,83,156,114,85,171,86,173,98,206,156,57,212,212,212,180,122,124,51,40,78,113,59,123,246,44,15,60,240,0,43,87,174,116,47,139,143,143,119,127,71,234,165,143,111,6,197,41,110,25,25,25,68,70,70,146,153,153,73,67,67,67,71,143,163,56,229,27,153,153,153,204,152,49,131,134,134,6,247,143,15,239,72,138,83,0,40,42,42,226,216,177,99,172,93,187,150,190,125,251,42,78,49,71,70,70,6,79,63,253,52,175,188,242,10,75,150,44,225,240,225,195,20,23,23,119,232,76,250,113,52,194,182,109,219,200,202,202,226,232,209,163,68,68,68,176,121,243,102,188,189,189,73,72,72,96,236,216,177,56,28,14,150,47,95,78,126,126,190,251,113,88,88,216,13,159,75,63,159,83,140,163,111,13,22,227,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,105,23,185,185,185,237,126,76,197,41,223,75,113,113,49,227,198,141,227,221,119,223,109,247,99,235,23,179,10,0,191,252,229,47,169,170,170,114,127,236,116,58,137,142,142,102,234,212,169,238,101,13,13,13,120,122,122,182,218,111,232,208,161,60,252,240,195,84,86,86,182,251,76,58,115,10,0,113,113,113,84,87,87,243,246,219,111,243,193,7,31,16,28,28,204,186,117,235,0,56,126,252,56,243,230,205,35,38,38,134,63,252,225,15,0,52,55,55,51,111,222,60,38,79,158,76,121,121,249,13,153,73,113,74,43,249,249,249,108,217,178,133,130,130,2,238,189,247,94,0,18,19,19,9,8,8,32,46,46,142,35,71,142,176,111,223,62,210,210,210,168,171,171,35,43,43,11,31,31,159,27,50,139,226,148,86,186,117,235,198,234,213,171,153,57,115,38,127,252,227,31,1,40,42,42,226,238,187,239,166,176,176,144,168,168,40,78,156,56,193,71,31,125,132,159,159,159,123,159,27,65,113,74,43,247,220,115,15,75,151,46,37,49,49,145,172,172,44,0,2,3,3,201,203,203,35,58,58,26,167,211,201,192,129,3,25,58,116,40,7,15,30,228,228,201,147,55,108,22,197,41,0,188,254,250,235,120,123,123,243,204,51,207,48,123,246,108,34,35,35,89,177,98,5,73,73,73,44,94,188,152,186,186,58,130,131,131,201,201,201,33,56,56,152,71,31,125,20,31,31,31,30,122,232,33,156,78,39,185,185,185,236,220,185,179,93,103,178,92,46,151,13,144,156,156,220,174,7,150,91,79,99,99,35,93,186,220,248,27,60,177,177,177,128,206,156,242,29,220,140,48,47,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,165,56,197,88,138,83,140,117,115,127,95,156,24,171,161,161,129,151,94,122,137,93,187,118,113,215,93,119,49,108,216,48,34,34,34,8,9,9,1,160,190,190,158,238,221,187,183,217,199,211,211,243,154,203,254,87,138,83,0,88,182,108,25,37,37,37,108,219,182,141,94,189,122,177,97,195,6,246,239,223,79,72,72,8,46,151,139,170,170,42,156,78,39,63,250,209,143,248,245,175,127,77,124,124,60,14,135,3,95,95,95,86,172,88,193,241,227,199,219,44,91,185,114,37,255,252,231,63,153,51,103,14,111,189,245,22,126,126,126,188,249,230,155,120,121,121,93,215,76,186,172,11,0,217,217,217,140,29,59,150,94,189,122,81,81,81,65,68,68,4,143,60,242,8,21,21,21,196,196,196,240,223,255,254,151,25,51,102,16,30,30,78,98,98,34,1,1,1,196,197,197,113,228,200,17,246,237,219,119,217,101,81,81,81,56,28,14,122,246,236,73,70,70,6,101,101,101,148,149,149,93,247,76,138,83,0,176,44,139,250,250,122,0,246,238,221,75,124,124,60,209,209,209,100,103,103,187,183,137,136,136,96,226,196,137,20,21,21,113,247,221,119,83,88,88,72,84,84,20,39,78,156,184,236,50,127,127,127,0,156,78,39,221,186,117,251,206,51,41,78,1,96,210,164,73,124,248,225,135,156,56,113,130,89,179,102,49,96,192,0,252,252,252,152,59,119,110,155,109,3,3,3,201,203,203,35,58,58,26,167,211,201,192,129,3,47,187,236,251,82,156,2,192,243,207,63,207,216,177,99,137,138,138,98,214,172,89,244,236,217,211,189,238,185,231,158,195,219,219,155,231,158,123,14,128,197,139,23,83,87,87,71,112,112,48,57,57,57,4,7,7,95,118,217,202,149,43,1,88,183,110,29,111,188,241,6,222,222,222,196,197,197,93,247,76,150,203,229,178,1,146,147,147,219,243,115,149,219,64,99,99,35,93,186,116,185,230,178,239,42,54,54,22,208,153,83,190,135,203,69,248,125,195,188,148,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,20,99,41,78,49,150,226,148,107,58,122,244,40,7,14,28,184,233,207,171,56,229,170,86,173,90,197,156,57,115,168,169,169,185,233,207,221,126,191,11,78,58,181,71,31,125,148,138,138,10,60,60,60,232,218,181,43,195,135,15,103,249,242,229,196,199,199,179,99,199,142,14,153,73,103,78,1,224,201,39,159,164,186,186,154,247,223,127,159,119,223,125,151,15,63,252,144,156,156,156,86,219,36,37,37,113,223,125,247,81,80,80,192,180,105,211,8,15,15,119,175,75,72,72,96,238,220,185,204,158,61,155,242,242,242,118,153,73,113,74,43,105,105,105,36,37,37,17,30,30,206,228,201,147,91,173,91,178,100,9,158,158,158,0,188,240,194,11,238,229,25,25,25,228,231,231,243,236,179,207,18,26,26,202,95,255,250,215,118,153,69,113,74,43,65,65,65,4,5,5,241,193,7,31,176,115,231,206,235,218,167,168,168,136,187,238,186,139,194,194,66,250,244,233,195,128,1,3,218,101,22,197,41,173,12,27,54,140,251,239,191,159,31,252,224,7,87,188,60,55,52,52,112,242,228,73,247,199,63,254,241,143,41,45,45,37,52,52,148,137,19,39,82,87,87,215,46,179,40,78,1,96,221,186,117,120,123,123,243,240,195,15,19,17,17,65,64,64,0,191,248,197,47,88,181,106,21,14,135,131,229,203,151,3,48,110,220,56,158,120,226,9,74,74,74,56,119,238,28,175,189,246,26,115,230,204,33,50,50,146,185,115,231,242,251,223,255,158,9,19,38,180,203,76,150,203,229,178,1,146,147,147,219,229,128,114,235,107,110,110,198,225,104,123,94,187,210,242,239,42,54,54,22,208,153,83,254,7,87,10,176,61,194,108,117,188,118,61,154,72,59,82,156,98,44,197,41,198,82,156,98,44,197,41,198,82,156,98,44,197,41,198,82,156,98,44,197,41,198,82,156,98,44,197,41,198,82,156,98,44,197,41,198,82,156,98,44,197,41,198,82,156,98,44,197,41,198,114,216,182,125,10,104,183,111,74,18,249,62,90,58,180,109,251,148,3,56,8,112,236,216,177,142,156,73,4,104,213,225,65,135,101,89,167,0,62,255,252,243,142,155,72,228,162,150,14,45,203,58,229,176,109,123,55,232,204,41,102,104,233,208,182,237,221,14,135,195,177,27,224,224,193,131,29,57,147,8,240,77,135,14,135,99,183,35,57,57,249,16,240,105,125,125,61,185,185,185,29,59,153,220,214,114,115,115,169,175,175,7,248,52,57,57,249,80,203,173,164,77,0,153,153,153,29,53,151,200,165,253,109,130,111,238,115,38,217,182,125,170,170,170,138,140,140,140,142,152,75,110,115,25,25,25,84,85,85,113,241,214,102,18,128,7,64,65,65,193,185,209,163,71,127,108,89,214,156,210,210,82,156,78,39,253,251,247,239,208,97,229,246,145,155,155,203,223,254,246,55,0,108,219,158,147,154,154,122,8,46,198,9,112,224,192,129,146,209,163,71,15,180,44,107,212,161,67,135,240,242,242,98,208,160,65,29,52,174,220,46,178,178,178,72,79,79,7,192,182,237,77,235,215,175,255,191,150,117,30,151,110,120,224,192,129,247,91,2,45,46,46,166,229,44,122,231,157,119,222,228,145,229,86,87,82,82,194,91,111,189,229,254,233,201,182,109,111,74,77,77,157,127,233,54,214,229,118,140,137,137,121,18,88,102,89,86,111,0,95,95,95,66,66,66,240,245,245,197,223,223,255,70,207,45,183,168,146,146,18,62,255,252,115,114,115,115,221,55,219,47,190,198,92,150,154,154,186,246,219,219,95,54,78,128,133,11,23,14,112,56,28,203,44,203,122,236,134,77,43,183,53,219,182,55,53,55,55,47,219,176,97,195,103,151,91,127,197,56,91,184,92,174,94,64,164,109,219,97,150,101,133,1,3,219,119,68,185,141,124,106,219,246,110,203,178,118,3,239,165,164,164,84,95,109,227,255,15,52,193,95,196,155,110,227,164,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_BrightnessMenu_png_size = 4772;

extern const unsigned char Rc_GZ_RcEngine_Slider_Corner_png[247] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,8,0,0,0,8,8,6,0,0,0,196,15,190,139,0,0,0,190,73,68,65,84,24,149,109,207,189,74,195,96,0,70,225,39,63,83,211,38,189,131,86,17,17,68,16,28,4,7,173,32,20,116,17,193,201,155,242,14,4,65,80,220,93,68,112,209,189,130,174,185,132,196,102,240,167,144,207,161,216,65,60,112,166,23,14,188,17,6,24,154,83,99,226,15,85,146,36,161,40,250,33,203,186,1,37,246,126,199,8,225,228,244,204,193,248,72,93,85,222,94,95,220,92,93,212,179,217,247,8,147,20,182,119,118,141,15,143,53,205,212,234,218,186,175,207,143,254,237,245,229,57,246,227,69,42,138,228,121,97,105,121,197,198,230,150,78,39,27,97,16,67,104,91,33,4,208,237,229,122,221,92,146,166,48,76,225,225,254,110,94,137,99,161,109,61,63,61,106,166,239,139,23,37,194,63,150,240,3,120,250,58,45,215,222,102,103,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_Corner_png_size = 247;

extern const unsigned char Rc_GZ_RcEngine_Slider_ReverseMenu_png[4845] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,167,0,0,0,185,8,6,0,0,0,77,202,47,7,0,0,18,180,73,68,65,84,120,156,237,221,125,80,85,117,254,192,241,247,185,136,68,66,168,87,106,215,5,161,220,16,197,198,7,20,67,211,8,29,211,13,66,17,93,216,116,88,71,184,52,52,171,184,152,97,109,91,11,57,181,236,86,184,173,245,19,100,179,100,166,28,53,117,201,130,137,7,37,144,72,89,30,124,132,84,68,196,13,21,31,80,65,89,188,231,247,7,221,27,40,168,37,194,87,253,188,102,154,129,243,196,231,92,222,222,123,56,218,69,227,38,44,88,176,192,205,198,198,198,15,112,215,117,221,175,237,58,77,211,252,58,218,71,8,93,215,183,181,253,92,211,180,109,192,145,43,87,174,108,75,77,77,173,190,209,254,218,245,86,154,76,166,112,93,215,99,52,77,27,121,75,83,10,113,21,93,215,75,53,77,75,74,78,78,254,168,179,109,58,140,51,34,34,34,200,96,48,36,1,238,150,101,30,30,30,120,120,120,224,234,234,138,189,189,189,117,219,33,67,134,116,225,200,226,110,82,81,81,97,253,184,169,169,137,154,154,26,42,43,43,169,172,172,108,187,217,17,179,217,28,179,122,245,234,45,87,239,127,77,156,38,147,233,93,32,6,192,104,52,50,121,242,100,124,125,125,185,255,254,251,187,126,122,113,79,106,108,108,164,176,176,144,236,236,108,234,235,235,45,139,147,146,147,147,23,183,221,174,93,156,145,145,145,31,106,154,246,123,0,127,127,127,2,3,3,37,74,113,219,52,54,54,146,158,158,78,78,78,14,0,186,174,175,73,73,73,153,111,89,111,99,249,192,100,50,133,107,154,246,58,64,120,120,56,211,167,79,199,214,214,182,187,231,21,247,16,91,91,91,134,15,31,142,209,104,164,172,172,12,77,211,70,122,123,123,31,41,46,46,46,131,31,226,52,153,76,78,186,174,103,104,154,118,95,64,64,0,83,166,76,233,217,169,197,61,197,213,213,21,128,202,202,74,116,93,247,27,51,102,204,255,21,23,23,95,54,252,176,62,70,211,180,190,46,46,46,4,6,6,246,220,148,226,158,21,24,24,136,139,139,11,154,166,245,229,135,159,121,12,0,186,174,199,88,54,16,162,167,88,250,179,244,104,136,136,136,8,210,52,173,175,209,104,100,228,72,185,157,217,83,154,154,154,110,249,24,199,142,29,163,172,172,172,11,166,233,25,35,71,142,196,104,52,162,105,90,223,136,136,136,160,94,6,131,193,15,96,196,136,17,221,62,204,233,211,167,9,11,11,235,112,221,3,15,60,192,216,177,99,9,15,15,231,161,135,30,234,230,201,186,79,74,74,10,159,125,246,25,167,78,157,194,96,48,224,235,235,107,125,92,166,79,159,126,83,199,248,203,95,254,194,129,3,7,56,120,240,32,47,190,248,98,143,124,47,187,202,136,17,35,200,201,201,193,96,48,248,25,116,93,31,9,61,115,51,93,211,52,162,163,163,57,125,250,52,167,79,159,198,223,223,31,127,127,127,158,120,226,9,26,26,26,88,191,126,61,75,150,44,233,246,185,186,203,146,37,75,72,78,78,198,108,54,51,119,238,92,254,240,135,63,240,223,255,254,151,253,251,247,179,115,231,206,155,62,78,159,62,125,112,119,119,191,125,131,118,35,75,135,186,174,143,52,0,35,1,92,92,92,186,125,144,126,253,250,17,20,20,100,189,151,58,105,210,36,94,122,233,37,94,125,245,85,254,241,143,127,0,112,224,192,129,171,255,70,1,128,179,103,207,222,242,215,191,222,49,78,157,58,5,192,249,243,231,219,45,191,120,241,34,87,174,92,233,116,191,75,151,46,241,191,255,253,239,134,95,123,227,198,141,108,223,190,29,128,149,43,87,178,104,209,34,230,206,157,203,186,117,235,24,54,108,24,187,118,237,186,238,92,109,45,89,178,228,186,247,163,47,92,184,192,229,203,151,59,93,223,217,185,246,132,54,29,142,236,245,195,79,71,12,24,48,160,231,38,234,64,219,7,202,201,201,201,250,241,250,245,235,249,248,227,143,249,254,251,239,177,181,181,101,206,156,57,196,196,196,144,147,147,67,124,124,188,117,187,199,30,123,12,23,23,23,190,252,242,75,0,236,236,236,200,204,204,196,108,54,243,198,27,111,144,158,158,14,180,158,119,116,116,52,129,129,129,20,21,21,145,158,158,78,81,81,17,129,129,129,148,149,149,81,94,94,78,82,82,18,143,60,242,8,9,9,9,214,103,180,233,211,167,115,225,194,5,222,121,231,29,0,246,238,221,203,138,21,43,40,41,41,1,224,241,199,31,103,241,226,197,60,242,200,35,29,158,223,23,95,124,1,128,159,159,31,191,254,245,175,219,173,91,184,112,33,41,41,41,84,87,87,227,230,230,134,217,108,230,175,127,253,43,233,233,233,214,240,167,76,153,194,210,165,75,233,215,175,95,167,143,225,166,77,155,72,75,75,227,232,209,163,0,12,31,62,28,147,201,132,175,175,239,117,207,117,194,132,9,55,250,246,220,54,150,14,53,77,235,219,171,199,166,232,192,198,141,27,217,184,113,35,151,46,93,162,168,168,8,128,185,115,231,90,175,57,55,111,222,76,98,98,34,222,222,222,172,88,177,130,236,236,108,146,147,147,233,211,167,15,99,198,140,33,32,32,128,117,235,214,225,236,236,76,88,88,24,54,54,54,156,61,123,150,172,172,44,18,18,18,0,120,229,149,87,200,202,202,98,193,130,5,76,159,62,157,196,196,68,226,227,227,173,129,52,53,53,113,246,236,89,214,174,93,75,159,62,125,128,214,203,143,247,223,127,159,157,59,119,146,150,150,70,93,93,29,239,191,255,62,213,213,173,255,176,166,174,174,142,133,11,23,210,208,208,192,138,21,43,176,181,181,37,58,58,154,229,203,151,147,154,154,218,225,185,30,57,114,4,248,241,30,95,91,222,222,222,120,123,123,91,63,143,139,139,35,55,55,151,177,99,199,50,103,206,28,50,51,51,201,202,202,226,196,137,19,157,30,127,253,250,245,36,38,38,2,176,116,233,82,90,90,90,120,231,157,119,172,225,95,239,92,85,97,184,241,38,221,199,193,193,129,163,71,143,82,84,84,196,180,105,211,88,179,102,13,139,22,45,178,174,223,176,97,3,208,122,93,178,101,203,22,46,92,184,0,64,118,118,54,163,70,141,34,60,60,28,128,147,39,79,50,96,192,0,198,141,27,71,113,113,49,207,62,251,44,19,39,78,164,170,170,138,172,172,44,160,245,27,243,217,103,159,89,163,204,203,203,99,220,184,113,132,134,134,2,173,207,188,219,182,109,99,211,166,77,140,31,63,158,150,150,22,0,254,248,199,63,178,123,247,110,150,47,95,78,90,90,26,0,233,233,233,52,52,52,48,108,216,48,138,138,138,200,207,207,199,211,211,147,242,242,114,190,251,238,187,14,207,213,96,104,125,232,207,156,57,115,221,199,228,208,161,67,228,230,230,2,173,47,223,126,126,126,44,91,182,12,128,242,242,114,118,236,216,209,225,126,150,199,42,50,50,146,217,179,103,19,22,22,198,147,79,62,9,192,191,255,253,239,235,158,171,42,148,138,243,233,167,159,38,46,46,14,128,140,140,12,246,238,221,219,110,253,177,99,199,0,232,219,183,175,245,191,232,232,104,158,126,250,105,0,156,157,157,9,10,10,2,90,95,54,191,252,242,75,206,156,57,195,172,89,179,128,214,103,56,139,171,143,209,187,119,239,14,103,178,92,3,45,94,188,152,73,147,38,113,226,196,9,214,172,89,67,104,104,40,171,86,173,106,119,220,129,3,7,90,143,233,239,239,79,116,116,52,13,13,13,29,30,247,209,71,31,5,96,247,238,221,29,174,255,248,227,143,175,153,249,225,135,31,6,90,239,100,244,239,223,255,154,245,109,125,255,253,247,237,246,1,172,175,64,39,78,156,184,238,185,170,66,169,56,1,70,143,30,205,243,207,63,15,192,223,254,246,183,118,207,12,30,30,30,64,235,15,37,243,231,207,103,254,252,249,132,132,132,224,229,229,101,221,38,36,36,4,128,173,91,183,146,158,158,142,175,175,47,195,134,13,107,183,63,192,168,81,163,172,199,240,244,244,100,222,188,121,215,157,43,51,51,147,71,31,125,148,13,27,54,16,21,21,69,255,254,253,201,205,205,101,203,150,45,214,227,86,85,85,89,143,57,127,254,124,174,92,185,210,238,229,185,173,223,252,230,55,0,84,87,87,243,201,39,159,180,91,183,121,243,102,222,123,239,61,178,179,179,25,60,120,176,117,185,229,82,160,161,161,129,211,167,79,3,63,70,126,53,203,126,150,75,15,248,49,228,171,175,113,85,101,227,237,237,253,58,244,204,223,14,157,63,127,158,188,188,60,50,50,50,128,214,7,250,220,185,115,204,156,57,147,221,187,119,115,236,216,49,10,10,10,248,229,47,127,137,141,141,13,238,238,238,100,102,102,82,86,86,134,217,108,166,172,172,140,196,196,68,118,239,222,77,64,64,0,6,131,129,1,3,6,176,111,223,62,190,251,238,59,142,31,63,78,76,76,140,245,54,139,189,189,61,103,207,158,101,223,190,125,236,220,185,19,77,211,200,200,200,224,239,127,255,59,205,205,205,56,56,56,112,236,216,49,182,111,223,78,159,62,125,248,213,175,126,101,189,38,92,183,110,29,27,54,108,192,222,222,158,169,83,167,226,228,228,196,183,223,126,203,148,41,83,8,8,8,32,35,35,131,234,234,106,14,30,60,200,197,139,23,89,179,102,13,235,215,175,199,211,211,19,55,55,183,107,206,221,195,195,131,234,234,106,14,29,58,68,97,97,33,85,85,85,212,214,214,178,118,237,90,210,210,210,136,142,142,38,56,56,216,58,211,193,131,7,169,173,173,197,201,201,137,212,212,84,14,31,62,140,175,175,47,225,225,225,20,22,22,82,86,86,198,145,35,71,24,50,100,8,45,45,45,12,30,60,152,220,220,92,74,75,75,113,118,118,102,215,174,93,172,91,183,14,128,215,94,123,141,218,218,218,78,207,181,167,125,254,249,231,64,15,199,121,241,226,69,22,46,92,136,157,157,29,118,118,118,148,150,150,226,225,225,193,240,225,195,25,49,98,4,91,183,110,5,32,63,63,159,105,211,166,49,122,244,104,30,126,248,97,246,239,223,79,94,94,30,187,118,237,98,210,164,73,36,36,36,112,223,125,247,89,143,235,232,232,72,65,65,1,174,174,174,215,220,39,157,48,97,2,205,205,205,148,151,151,179,125,251,118,78,158,60,73,84,84,20,17,17,17,84,85,85,241,198,27,111,96,103,103,71,99,99,35,21,21,21,4,7,7,3,208,171,87,47,14,28,56,192,169,83,167,248,224,131,15,40,46,46,38,44,44,140,121,243,230,89,111,158,31,61,122,148,252,252,124,190,254,250,107,28,29,29,137,143,143,231,241,199,31,239,244,252,39,79,158,140,193,96,160,186,186,154,61,123,246,240,237,183,223,210,191,127,127,98,99,99,153,57,115,166,117,187,137,19,39,114,233,210,37,10,10,10,216,188,121,51,117,117,117,60,243,204,51,44,91,182,12,59,59,59,254,245,175,127,81,88,88,136,157,157,29,251,246,237,99,208,160,65,132,132,132,48,112,224,64,14,28,56,192,23,95,124,65,81,81,17,195,135,15,39,33,33,129,161,67,135,94,247,92,123,154,37,78,205,100,50,233,128,245,250,233,78,113,254,252,121,28,29,29,111,233,24,231,206,157,107,119,155,234,102,93,184,112,1,7,7,135,78,215,95,186,116,169,221,31,150,174,56,166,197,153,51,103,174,123,251,168,35,205,205,205,157,94,83,171,40,42,42,10,80,240,154,243,102,221,106,152,192,207,10,19,184,97,68,63,53,204,155,57,166,197,79,13,19,184,163,194,108,235,142,141,83,220,253,36,78,161,44,137,83,40,75,226,20,202,146,56,133,178,36,78,161,44,235,125,78,33,84,99,253,39,115,119,218,77,120,113,247,186,227,111,194,139,187,159,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,138,46,209,217,27,138,221,10,137,83,220,146,189,123,247,50,110,220,56,54,109,218,212,229,199,86,234,253,57,69,207,249,237,111,127,219,246,87,253,97,52,26,9,15,15,183,190,225,24,116,252,206,33,158,158,158,204,154,53,139,147,39,79,118,249,76,242,204,41,0,136,141,141,229,220,185,115,124,242,201,39,100,101,101,225,227,227,195,202,149,43,1,168,173,173,101,222,188,121,68,70,70,242,202,43,175,0,96,54,155,153,55,111,30,83,167,78,165,170,170,234,182,204,36,113,138,118,190,249,230,27,62,253,244,83,138,139,139,173,111,66,150,152,152,136,151,151,23,177,177,177,236,217,179,135,252,252,124,210,210,210,104,108,108,36,59,59,155,129,3,7,222,150,89,36,78,209,142,157,157,29,111,191,253,54,51,103,206,228,213,87,95,5,90,223,65,249,193,7,31,164,164,164,132,224,224,96,142,31,63,206,254,253,251,25,52,104,144,117,159,219,65,226,20,237,140,26,53,138,165,75,151,146,152,152,72,118,118,54,208,250,182,220,133,133,133,132,135,135,99,52,26,113,119,119,199,211,211,147,210,210,210,78,223,37,185,43,72,156,2,128,247,222,123,15,71,71,71,94,122,233,37,102,207,158,205,140,25,51,88,190,124,57,73,73,73,188,240,194,11,52,54,54,226,227,227,67,94,94,30,62,62,62,60,247,220,115,12,28,56,144,160,160,32,140,70,35,59,118,236,224,171,175,190,234,210,153,238,216,247,231,20,221,175,165,165,133,94,189,110,255,13,30,249,95,131,197,79,214,29,97,182,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,221,251,251,226,132,178,154,155,155,73,72,72,32,55,55,23,103,103,103,134,14,29,74,64,64,0,227,199,143,7,160,169,169,9,123,123,251,107,246,233,221,187,247,13,151,253,92,18,167,0,224,245,215,95,167,162,162,130,173,91,183,226,228,228,68,106,106,42,69,69,69,140,31,63,30,147,201,68,125,125,61,70,163,145,135,30,122,136,231,159,127,158,184,184,56,12,6,3,46,46,46,44,95,190,156,218,218,218,107,150,189,249,230,155,100,102,102,18,26,26,202,71,31,125,196,160,65,131,248,240,195,15,185,255,254,251,111,106,38,121,89,23,0,228,228,228,48,118,236,88,156,156,156,168,171,171,35,32,32,128,223,253,238,119,212,213,213,17,25,25,201,209,163,71,121,246,217,103,241,247,247,39,49,49,17,47,47,47,98,99,99,217,179,103,15,249,249,249,29,46,11,14,14,198,96,48,224,224,224,64,122,122,58,135,15,31,230,240,225,195,55,61,147,196,41,0,208,52,141,166,166,38,0,190,254,250,107,226,226,226,8,15,15,39,39,39,199,186,77,64,64,0,79,61,245,20,229,229,229,60,248,224,131,148,148,148,16,28,28,204,241,227,199,59,92,54,100,200,16,0,140,70,35,118,118,118,63,121,38,137,83,0,48,121,242,100,10,10,10,56,126,252,56,33,33,33,184,185,185,49,104,208,32,194,194,194,174,217,246,177,199,30,163,176,176,144,240,240,112,140,70,35,238,238,238,29,46,187,85,18,167,0,224,79,127,250,19,99,199,142,37,56,56,152,144,144,16,28,28,28,172,235,94,126,249,101,28,29,29,121,249,229,151,1,120,225,133,23,104,108,108,196,199,199,135,188,188,60,124,124,124,58,92,246,230,155,111,2,176,114,229,74,254,249,207,127,226,232,232,72,108,108,236,77,207,164,153,76,38,29,96,213,170,85,93,121,174,226,30,208,210,210,66,175,94,189,110,184,236,167,138,138,138,2,228,153,83,220,130,142,34,188,213,48,219,146,56,133,178,36,78,161,44,137,83,40,75,226,20,202,146,56,133,178,36,78,161,44,137,83,40,75,226,20,202,146,56,133,178,36,78,161,44,137,83,40,75,226,20,202,146,56,133,178,36,78,161,44,137,83,40,75,226,20,202,146,56,133,178,36,78,161,44,137,83,40,75,226,20,202,146,56,133,178,36,78,161,44,137,83,40,75,226,20,202,146,56,133,178,36,78,161,44,137,83,40,75,226,20,202,146,56,133,178,36,78,161,44,137,83,40,75,226,20,202,146,56,133,178,36,78,161,44,137,83,40,75,226,20,202,146,56,133,178,36,78,161,44,137,83,40,75,226,20,202,146,56,197,13,29,58,116,136,255,252,231,63,221,254,117,37,78,113,93,111,189,245,22,161,161,161,52,52,52,116,251,215,238,186,223,5,39,238,104,207,61,247,28,117,117,117,216,216,216,96,107,107,203,176,97,195,136,143,143,39,46,46,142,140,140,140,30,153,73,158,57,5,0,139,22,45,226,220,185,115,108,217,178,133,77,155,54,81,80,80,64,94,94,94,187,109,146,146,146,120,226,137,39,40,46,46,230,153,103,158,193,223,223,223,186,238,207,127,254,51,97,97,97,204,158,61,155,170,170,170,46,153,73,226,20,237,164,165,165,145,148,148,132,191,191,63,83,167,78,109,183,46,38,38,134,222,189,123,3,240,218,107,175,89,151,167,167,167,243,205,55,223,176,108,217,50,38,76,152,192,218,181,107,187,100,22,137,83,180,227,237,237,141,183,183,55,89,89,89,124,245,213,87,55,181,79,121,121,57,206,206,206,148,148,148,208,175,95,63,220,220,220,186,100,22,137,83,180,51,116,232,80,38,77,154,196,3,15,60,208,233,203,115,115,115,51,39,78,156,176,126,62,120,240,96,42,43,43,153,48,97,2,79,61,245,20,141,141,141,93,50,139,196,41,0,88,185,114,37,142,142,142,204,154,53,139,128,128,0,188,188,188,152,51,103,14,111,189,245,22,6,131,129,248,248,120,0,198,141,27,199,194,133,11,169,168,168,224,242,229,203,188,251,238,187,132,134,134,50,99,198,12,194,194,194,120,241,197,23,153,56,113,98,151,204,164,153,76,38,29,96,213,170,85,93,114,64,113,247,51,155,205,24,12,215,62,175,117,182,252,167,138,138,138,2,228,153,83,252,12,157,5,216,21,97,182,59,94,151,30,77,136,46,36,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,37,113,10,101,73,156,66,89,18,167,80,150,196,41,148,101,208,117,125,27,64,69,69,69,15,143,34,196,143,29,234,186,190,205,250,204,89,95,95,223,99,3,9,97,209,182,67,131,166,105,219,0,106,106,106,122,106,30,33,172,44,29,106,154,182,205,250,178,94,86,86,214,147,51,9,1,252,216,161,174,235,219,12,41,41,41,219,117,93,63,91,95,95,47,215,157,162,71,85,84,84,80,95,95,143,174,235,103,83,82,82,182,91,174,57,55,3,124,254,249,231,61,56,154,184,215,181,233,111,51,252,112,43,201,108,54,191,14,80,89,89,73,105,105,105,143,12,38,238,109,165,165,165,84,86,86,2,63,246,104,3,80,82,82,114,206,219,219,27,192,111,239,222,189,120,121,121,225,228,228,212,83,115,138,123,76,77,77,13,31,124,240,1,45,45,45,0,175,175,94,189,122,11,252,16,39,64,113,113,241,246,209,163,71,207,104,105,105,249,197,206,157,59,37,80,209,45,106,106,106,120,251,237,183,105,106,106,66,215,245,210,148,148,148,48,203,58,155,182,27,142,25,51,230,83,93,215,167,181,180,180,252,194,242,198,161,174,174,174,216,218,218,118,243,200,226,110,215,216,216,72,70,70,6,171,87,175,166,165,165,5,93,215,75,53,77,243,43,46,46,190,108,217,70,187,122,39,147,201,228,4,172,1,102,0,216,219,219,227,235,235,203,248,241,227,113,117,117,237,182,225,197,221,169,166,166,134,29,59,118,80,88,88,72,83,83,147,101,241,102,224,247,201,201,201,231,218,110,123,77,156,22,17,17,17,65,6,131,33,9,112,111,187,220,195,195,163,221,118,150,139,88,33,174,118,19,173,28,49,155,205,49,150,107,204,171,117,26,167,69,68,68,68,144,166,105,51,52,77,243,227,170,80,133,248,25,142,232,186,190,77,215,245,205,157,69,105,113,195,56,219,90,176,96,129,155,193,96,112,111,187,44,37,37,101,251,207,24,80,220,3,34,35,35,159,108,251,185,217,108,62,146,154,154,90,125,179,251,255,63,156,23,170,136,165,154,254,252,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_ReverseMenu_png_size = 4845;

extern const unsigned char Rc_GZ_RcEngine_Slider_Skew_png[296] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,7,0,0,0,23,8,6,0,0,0,199,132,85,72,0,0,0,239,73,68,65,84,40,145,99,96,160,22,224,135,98,76,192,205,205,221,207,205,205,221,143,77,78,223,216,216,248,191,173,157,253,127,6,6,6,123,6,6,6,6,22,152,140,140,140,204,132,208,168,36,6,110,110,30,134,87,47,95,44,184,121,243,166,1,76,50,73,83,75,199,193,201,213,155,129,155,155,135,225,216,225,189,10,79,159,62,109,102,100,96,96,96,80,80,80,56,255,234,213,171,141,223,190,125,187,5,85,204,163,163,163,211,73,37,79,210,9,48,50,48,48,48,8,10,10,46,122,255,254,253,17,6,6,134,47,48,9,113,113,241,8,6,6,6,6,6,22,22,150,250,200,232,184,255,87,239,190,249,127,245,238,155,255,229,85,13,255,101,100,100,246,51,51,48,48,48,252,251,247,239,194,239,95,63,34,228,21,85,4,126,253,250,197,48,125,82,231,135,59,119,238,120,32,91,225,111,107,103,255,223,195,211,251,63,3,3,67,62,134,3,100,100,100,246,203,200,200,236,199,229,64,121,40,166,37,0,0,105,250,72,141,90,2,92,80,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_Skew_png_size = 296;

extern const unsigned char Rc_GZ_RcEngine_Slider_Slider_png[430] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,13,0,0,0,15,8,6,0,0,0,63,35,69,119,0,0,0,6,98,75,71,68,0,255,0,255,0,255,160,189,167,147,0,0,0,9,112,72,89,115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,0,7,116,73,77,69,7,222,2,15,19,42,42,108,243,140,30,0,0,0,29,105,84,88,116,67,111,109,109,101,110,116,0,0,0,0,0,67,114,101,97,116,101,100,32,119,105,116,104,32,71,73,77,80,100,46,101,7,0,0,1,18,73,68,65,84,40,207,141,210,191,75,195,64,20,192,241,111,48,67,81,40,34,34,138,34,10,66,42,20,71,7,7,103,157,110,15,46,221,157,242,135,116,108,151,82,23,237,210,46,25,252,177,234,162,184,137,131,232,146,82,10,74,65,212,82,37,144,59,207,193,36,42,230,52,15,30,119,28,239,195,29,247,158,197,103,20,128,201,120,53,69,8,60,3,161,21,23,46,9,215,187,225,159,240,91,213,85,160,107,1,179,194,245,238,23,151,23,168,236,8,35,216,219,247,233,5,125,252,86,117,206,78,158,228,148,29,6,143,47,70,228,148,29,122,65,31,160,96,39,135,82,42,134,163,55,35,146,82,165,251,47,164,20,79,195,145,25,169,12,20,73,197,107,24,26,81,148,117,211,252,204,20,121,195,142,255,159,238,93,192,246,214,166,177,240,248,228,44,237,215,24,32,111,175,207,15,138,211,43,187,188,107,54,214,215,40,78,140,255,200,195,163,83,46,46,175,146,62,61,240,109,34,74,194,245,116,173,209,214,81,36,211,172,53,218,90,184,158,6,74,89,19,147,194,122,179,163,181,214,186,222,236,252,9,50,97,30,240,11,230,5,228,153,250,15,34,93,120,191,122,80,19,245,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_Slider_png_size = 430;

extern const unsigned char Rc_GZ_RcEngine_Slider_SliderBack_png[643] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,101,0,0,0,26,8,6,0,0,0,174,8,146,219,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,9,112,72,89,115,0,0,14,196,0,0,14,196,1,149,43,14,27,0,0,2,24,73,68,65,84,104,67,237,153,49,142,226,48,20,134,127,178,52,75,195,58,21,205,142,4,145,232,104,208,20,244,204,17,22,142,144,43,32,78,128,56,194,230,8,97,110,0,244,72,32,26,58,20,64,154,109,104,136,135,134,45,54,147,140,109,162,236,100,240,108,197,72,143,149,63,9,201,249,76,241,172,159,103,27,40,36,2,8,86,171,21,124,223,199,126,191,71,177,248,69,152,130,212,134,43,19,69,17,42,149,10,186,221,46,26,141,70,106,243,100,161,244,251,125,216,54,67,185,92,22,161,20,229,148,212,134,43,19,69,127,112,60,30,17,134,28,131,193,32,181,121,178,80,134,195,33,238,238,190,163,84,42,193,178,44,57,37,181,225,202,196,241,11,78,167,19,158,158,126,161,215,235,165,54,79,22,138,231,121,96,140,137,80,190,162,80,40,168,151,225,250,196,113,44,66,249,13,206,57,92,215,77,109,158,44,148,245,122,141,217,108,166,206,147,115,167,24,62,3,25,74,20,189,160,213,106,161,94,175,167,54,79,22,138,129,14,166,37,8,98,66,33,136,9,133,32,89,40,242,246,117,139,252,143,117,155,78,33,136,9,133,32,38,20,130,152,80,8,98,190,60,18,196,116,10,65,76,40,4,49,161,16,196,156,41,159,76,184,24,97,201,58,120,112,212,19,22,163,71,44,185,24,214,218,112,149,188,116,34,148,67,114,249,70,170,188,89,0,24,154,63,58,184,183,117,11,165,193,102,226,97,186,149,101,185,231,80,54,19,140,120,19,157,123,91,205,237,170,194,227,210,33,9,198,137,63,63,200,134,17,195,159,201,56,80,67,162,4,201,248,125,129,100,235,15,146,64,212,114,152,251,89,77,135,249,56,73,75,205,234,214,57,43,20,159,176,106,205,86,201,58,213,26,56,15,213,152,36,162,88,190,157,170,223,141,188,209,66,244,141,82,68,235,119,224,188,107,90,254,172,90,60,135,206,89,58,73,22,254,12,177,103,169,191,81,221,54,176,92,132,218,69,81,133,125,99,233,232,47,58,103,233,36,89,156,7,181,247,42,68,64,50,142,91,170,223,22,165,238,182,231,78,222,236,182,96,204,214,58,75,39,169,34,111,50,147,77,250,32,248,104,81,100,113,154,168,238,30,213,246,59,69,251,124,248,107,220,237,222,190,254,113,165,188,109,128,87,223,87,135,80,217,246,154,56,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_SliderBack_png_size = 643;

extern const unsigned char Rc_GZ_RcEngine_Slider_SliderBackNP_png[569] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,110,0,0,0,25,8,6,0,0,0,208,124,27,130,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,9,112,72,89,115,0,0,14,196,0,0,14,196,1,149,43,14,27,0,0,1,206,73,68,65,84,104,67,237,151,77,106,194,64,24,134,223,164,110,234,198,78,86,110,42,168,224,206,77,87,238,237,17,90,143,144,43,136,39,16,143,160,71,136,189,129,23,16,42,110,220,137,63,96,55,110,234,212,141,93,52,38,29,147,41,54,146,66,34,10,51,229,123,96,116,230,13,129,143,239,113,146,209,240,5,72,200,100,50,129,227,56,88,175,215,200,100,110,68,98,132,23,136,139,226,186,46,242,249,60,26,141,6,170,213,170,76,163,164,18,215,106,181,96,89,12,185,92,78,136,203,136,132,196,93,3,215,253,194,118,187,197,102,195,209,110,183,101,26,37,149,184,78,167,131,66,225,30,217,108,22,166,105,138,132,196,93,3,207,219,99,183,219,97,181,122,67,179,217,148,105,148,84,226,122,189,30,24,99,66,220,45,12,195,8,6,113,121,60,207,19,226,62,193,57,135,109,219,50,141,146,74,220,116,58,197,112,56,12,222,111,225,142,35,174,193,65,156,235,238,81,171,213,80,169,84,100,26,37,149,56,66,29,104,219,104,10,137,211,20,18,167,41,169,196,29,78,149,58,242,31,235,166,29,167,41,36,78,83,72,156,166,144,56,77,161,63,224,154,66,59,78,83,72,156,166,144,56,77,249,243,29,183,25,245,49,102,207,120,44,7,43,140,250,47,24,115,49,45,213,97,7,97,92,166,26,58,212,120,102,175,103,51,223,239,118,187,193,56,204,15,204,6,225,122,32,215,34,240,157,215,119,57,149,121,92,166,26,26,212,120,110,175,131,71,101,189,110,7,35,100,14,20,109,60,61,48,185,22,190,133,233,98,201,10,230,229,98,9,156,111,98,51,213,80,191,198,243,123,109,150,197,174,251,61,196,167,252,62,194,63,196,157,39,196,101,170,161,126,141,231,247,58,209,225,132,221,29,127,17,63,196,101,170,161,67,141,167,36,237,117,34,113,150,184,111,185,8,31,51,243,229,2,140,89,177,153,106,232,80,227,41,73,123,77,167,74,5,72,223,235,50,190,1,187,3,162,194,240,53,233,95,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_SliderBackNP_png_size = 569;

extern const unsigned char Rc_GZ_RcEngine_Slider_SliderBackP_png[616] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,110,0,0,0,25,8,6,0,0,0,208,124,27,130,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,9,112,72,89,115,0,0,14,196,0,0,14,196,1,149,43,14,27,0,0,1,253,73,68,65,84,104,67,237,153,177,78,194,64,28,198,191,34,139,44,120,157,88,52,145,38,108,44,134,129,93,31,65,120,132,190,2,225,9,8,143,0,143,0,190,1,186,147,72,88,216,8,98,162,11,139,61,89,112,176,22,239,218,26,169,185,104,155,64,114,103,254,191,132,228,248,8,201,7,191,187,235,21,172,173,0,41,153,205,102,24,12,6,88,173,86,200,231,143,68,98,69,47,16,123,197,247,125,148,74,37,52,155,77,84,171,213,56,77,146,73,92,187,221,134,109,51,20,139,69,33,46,47,18,18,119,8,124,255,29,235,245,26,158,199,209,233,116,226,52,73,38,113,221,110,23,103,103,167,40,20,10,200,229,114,34,33,113,135,32,8,62,176,217,108,240,244,244,140,86,171,21,167,73,50,137,235,247,251,96,140,9,113,199,176,44,43,124,16,251,39,8,2,33,238,13,156,115,184,174,27,167,73,50,137,155,207,231,24,143,199,225,245,45,90,113,196,33,144,226,124,255,3,245,122,29,149,74,37,78,147,100,18,71,232,3,45,27,67,33,113,134,66,226,12,37,147,56,121,170,52,145,255,216,155,86,156,161,144,56,67,33,113,134,66,226,12,133,110,192,13,133,86,156,161,144,56,67,33,113,134,146,242,26,231,97,50,188,193,148,139,97,249,18,238,149,19,197,90,178,211,21,12,23,215,13,212,108,189,251,123,147,33,166,172,129,168,150,170,171,34,147,226,254,100,49,218,14,238,95,226,97,111,59,90,132,67,77,89,108,71,63,11,106,220,95,246,233,245,118,58,169,186,42,178,84,91,165,39,76,159,151,237,112,236,156,151,193,185,23,142,181,68,148,229,203,187,240,231,162,254,112,34,230,170,206,253,31,68,49,23,215,23,44,126,174,238,170,202,82,137,227,175,114,141,26,2,127,133,216,31,195,127,142,221,75,96,58,241,52,238,239,192,249,177,107,171,186,170,178,84,226,216,201,247,140,208,30,231,10,141,90,52,59,165,68,249,145,77,234,175,234,170,202,82,137,179,197,251,30,151,209,246,242,240,184,4,99,241,23,163,33,242,66,127,43,118,160,47,100,87,147,250,171,186,170,178,255,125,170,252,237,84,166,17,217,79,149,14,62,1,74,184,166,42,205,163,206,190,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_SliderBackP_png_size = 616;

extern const unsigned char Rc_GZ_RcEngine_Slider_SliderBack_2_png[656] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,195,0,0,0,26,8,6,0,0,0,10,78,232,77,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,9,112,72,89,115,0,0,14,194,0,0,14,194,1,21,40,74,128,0,0,2,37,73,68,65,84,120,94,237,219,177,110,218,64,28,6,240,207,46,75,89,232,121,98,105,164,96,137,141,37,202,192,158,60,66,224,17,252,10,136,39,64,60,2,60,2,244,13,104,119,164,34,22,54,68,136,148,46,44,241,133,197,93,40,206,157,125,117,163,248,164,182,146,65,114,251,253,36,36,243,247,98,125,240,113,248,18,156,88,129,178,90,173,48,153,76,176,219,237,80,169,188,83,19,71,143,137,74,46,198,225,240,3,245,122,29,221,110,23,173,86,203,204,243,178,50,244,251,125,120,158,64,173,86,83,101,168,232,83,122,76,84,114,186,12,7,236,247,123,132,161,196,96,48,48,243,188,172,12,195,225,16,23,23,31,81,173,86,225,186,174,62,165,199,68,37,23,227,120,60,34,138,34,60,62,126,67,175,215,51,243,188,172,12,227,241,24,66,8,85,134,247,112,28,39,121,16,149,157,126,123,235,71,20,125,135,148,18,65,16,152,51,121,89,25,214,235,53,230,243,121,114,191,144,174,12,68,255,6,189,50,232,251,134,118,187,141,102,179,105,166,121,89,25,136,254,119,92,2,136,12,150,129,200,96,25,136,140,172,12,122,55,169,140,120,221,231,85,214,235,214,126,119,237,92,25,136,12,150,129,200,96,25,136,12,150,129,200,224,31,221,136,12,174,12,68,6,203,64,100,176,12,68,6,203,64,100,168,27,232,167,120,49,253,132,165,84,207,26,55,8,110,253,244,12,21,44,68,150,51,4,174,238,58,184,246,94,205,152,125,161,194,197,20,75,209,65,26,169,45,103,203,44,222,204,226,201,215,39,189,169,164,14,71,241,108,147,28,82,225,54,241,236,109,184,204,254,36,116,150,163,209,171,60,109,57,91,102,110,168,154,113,217,240,116,125,224,95,54,32,101,152,28,83,193,84,208,114,251,37,249,255,152,241,116,161,62,151,146,17,179,47,220,189,10,53,192,221,149,48,207,237,57,219,102,174,124,214,235,4,157,156,124,134,250,110,148,252,236,48,184,1,150,139,80,141,152,125,241,124,248,111,190,109,218,114,182,205,92,241,225,87,131,232,132,252,91,116,174,211,79,34,93,12,253,82,48,251,243,176,229,108,155,185,158,154,61,108,211,229,249,254,97,11,33,204,11,70,133,210,55,116,159,213,10,254,147,206,153,217,159,135,45,103,219,140,187,73,103,243,135,59,26,84,136,191,223,77,242,241,2,80,252,0,146,178,231,43,70,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_SliderBack_2_png_size = 656;

extern const unsigned char Rc_GZ_RcEngine_Slider_SliderFill_png[227] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,11,0,0,0,5,8,6,0,0,0,147,166,22,86,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,9,112,72,89,115,0,0,14,196,0,0,14,196,1,149,43,14,27,0,0,0,6,98,75,71,68,0,255,0,255,0,255,160,189,167,147,0,0,0,7,116,73,77,69,7,222,2,15,19,45,8,246,210,91,61,0,0,0,29,105,84,88,116,67,111,109,109,101,110,116,0,0,0,0,0,67,114,101,97,116,101,100,32,119,105,116,104,32,71,73,77,80,100,46,101,7,0,0,0,42,73,68,65,84,24,87,99,244,242,242,250,207,64,36,96,44,46,46,38,94,241,156,57,115,136,87,188,126,253,122,162,21,51,177,176,176,48,16,135,89,24,0,204,82,10,159,157,80,224,218,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_SliderFill_png_size = 227;

extern const unsigned char Rc_GZ_RcEngine_Slider_More_AlphaMenu_png[3815] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,167,0,0,0,85,8,6,0,0,0,44,76,244,254,0,0,14,174,73,68,65,84,120,156,237,221,123,80,84,245,255,199,241,231,89,193,245,18,138,64,133,41,227,173,208,202,73,188,140,137,87,50,102,210,41,4,38,111,228,5,73,192,188,76,242,69,133,26,148,4,155,193,52,19,201,75,2,246,213,114,204,81,83,4,28,126,93,16,4,99,117,116,5,52,49,119,76,20,212,196,184,11,187,130,192,249,253,129,123,190,160,139,74,42,187,233,231,241,15,203,249,124,246,156,247,178,175,61,231,115,206,178,159,149,120,8,115,231,206,237,213,174,93,59,55,160,183,44,203,110,77,219,36,73,114,51,117,31,65,144,101,57,189,233,239,146,36,165,3,151,234,235,235,211,183,109,219,118,249,65,247,151,238,215,24,24,24,232,43,203,114,144,36,73,46,143,84,165,32,220,69,150,229,28,73,146,162,99,99,99,119,180,212,199,100,56,253,253,253,61,85,42,85,52,208,219,184,204,217,217,25,103,103,103,156,156,156,232,216,177,163,210,183,127,255,254,143,177,100,225,105,114,254,252,121,229,182,193,96,160,176,176,16,157,78,135,78,167,107,218,237,82,67,67,67,80,124,124,252,193,187,239,127,79,56,3,3,3,215,3,65,0,246,246,246,188,253,246,219,184,186,186,210,169,83,167,199,95,189,240,76,210,235,245,104,52,26,82,83,83,41,41,41,49,46,142,142,141,141,253,79,211,126,205,194,25,16,16,240,95,73,146,230,0,140,31,63,30,15,15,15,17,74,225,137,209,235,245,36,37,37,113,248,240,97,0,100,89,222,30,23,23,231,103,108,111,103,188,17,24,24,232,43,73,210,74,0,95,95,95,38,78,156,136,181,181,117,91,215,43,60,67,172,173,173,25,56,112,32,246,246,246,228,230,230,34,73,146,203,208,161,67,47,105,181,218,92,184,19,206,192,192,192,174,178,44,255,159,36,73,29,222,123,239,61,220,221,221,205,91,181,240,76,113,114,114,2,64,167,211,33,203,178,219,176,97,195,190,209,106,181,53,170,59,237,65,146,36,217,246,236,217,19,15,15,15,243,85,41,60,179,60,60,60,232,217,179,39,146,36,217,114,231,156,71,5,32,203,114,144,177,131,32,152,139,49,127,198,60,170,252,253,253,61,37,73,178,181,183,183,199,197,197,60,151,51,245,122,61,217,217,217,38,219,178,179,179,41,45,45,109,227,138,4,115,112,113,113,193,222,222,30,73,146,108,253,253,253,61,173,84,42,149,27,192,160,65,131,204,86,84,106,106,42,145,145,145,216,217,217,221,211,86,90,90,202,178,101,203,152,58,117,170,25,42,19,218,218,160,65,131,56,124,248,48,42,149,202,77,37,203,178,11,152,247,98,122,90,90,26,0,238,238,238,12,31,62,156,210,210,82,6,14,28,200,196,137,19,1,148,75,13,194,211,207,152,67,89,150,93,84,128,11,64,207,158,61,205,82,76,85,85,21,153,153,153,44,89,178,132,101,203,150,241,220,115,207,1,208,165,75,23,130,130,130,8,9,9,65,171,213,82,84,84,164,220,167,184,184,24,128,155,55,111,222,179,190,138,138,10,234,234,234,76,110,171,178,178,146,234,234,106,0,110,221,186,213,98,77,198,245,155,82,86,86,166,220,54,181,125,83,253,76,213,81,91,91,219,98,123,121,121,249,67,213,118,191,58,235,234,234,168,170,170,106,177,221,82,53,201,161,139,213,157,179,35,28,28,28,204,82,76,125,125,61,75,151,46,101,218,180,105,38,219,167,76,153,66,93,93,29,86,86,86,68,69,69,241,251,239,191,83,89,89,137,155,155,27,187,119,239,198,203,203,139,176,176,48,98,98,98,248,233,167,159,184,113,227,6,208,56,184,14,15,15,7,96,253,250,245,104,181,90,206,159,63,207,87,95,125,69,124,124,60,121,121,121,116,238,220,153,133,11,23,50,101,202,20,0,18,18,18,216,178,101,11,165,165,165,216,217,217,225,228,228,132,167,167,39,30,30,30,196,196,196,112,225,194,5,52,26,13,11,23,46,100,251,246,237,84,87,87,227,234,234,202,202,149,43,177,179,179,227,218,181,107,124,249,229,151,156,60,121,18,131,193,128,157,157,29,115,230,204,193,199,199,7,128,152,152,24,242,243,243,57,122,244,40,81,81,81,172,90,181,10,7,7,7,126,252,241,71,26,26,26,248,252,243,207,73,74,74,2,26,159,143,5,11,22,40,39,9,225,225,225,104,181,90,106,106,106,152,57,115,38,59,119,238,164,162,162,130,30,61,122,176,118,237,90,94,121,229,21,160,241,114,76,116,116,52,39,78,156,0,192,209,209,145,25,51,102,48,125,250,116,222,121,231,29,106,106,106,148,191,237,166,77,155,88,184,112,161,242,123,64,64,0,51,102,204,120,108,207,237,63,97,204,161,36,73,182,170,7,244,125,226,186,118,237,218,98,48,141,124,124,124,176,183,183,167,184,184,24,157,78,199,245,235,215,217,189,123,183,210,126,248,240,97,190,255,254,123,94,125,245,85,146,146,146,112,119,119,39,41,41,137,212,212,84,160,113,220,106,124,167,43,56,56,152,215,95,127,157,41,83,166,80,93,93,205,134,13,27,148,245,172,89,179,6,39,39,39,146,147,147,153,55,111,30,185,185,185,28,59,118,12,128,146,146,18,101,79,148,144,144,128,159,159,31,253,251,247,71,163,209,16,23,23,7,192,150,45,91,200,204,204,36,56,56,152,157,59,119,82,94,94,222,108,253,149,149,149,202,30,251,211,79,63,69,175,215,83,89,89,9,64,88,88,24,73,73,73,204,157,59,151,125,251,246,209,183,111,95,34,35,35,57,119,238,156,114,223,27,55,110,80,81,81,193,174,93,187,152,60,121,50,174,174,174,92,189,122,149,93,187,118,1,141,123,235,197,139,23,115,226,196,9,22,45,90,196,23,95,124,193,245,235,215,89,183,110,29,121,121,121,132,133,133,81,93,93,77,117,117,53,65,65,65,116,234,212,137,136,136,8,170,171,171,25,51,102,12,253,250,245,251,135,207,226,147,97,246,112,182,198,186,117,235,176,177,177,1,32,37,37,133,131,7,15,18,22,22,198,128,1,3,152,48,97,2,139,23,47,198,214,214,86,121,245,25,15,187,171,86,173,162,79,159,62,0,248,249,249,17,18,18,194,135,31,126,8,208,108,79,34,203,50,185,185,185,172,88,177,2,89,150,137,140,140,100,249,242,229,0,68,68,68,208,171,87,47,0,102,206,156,137,175,175,175,178,215,249,245,215,95,1,24,50,100,8,62,62,62,120,121,121,225,224,224,64,183,110,221,168,175,175,87,134,18,203,151,47,87,46,56,7,7,7,147,153,153,201,190,125,251,200,207,207,87,214,97,48,24,216,191,127,63,47,191,252,50,0,25,25,25,0,68,71,71,43,143,125,211,166,77,124,244,209,71,184,186,186,2,40,235,63,120,240,32,197,197,197,56,59,59,227,235,235,203,248,241,227,153,60,121,50,142,142,142,88,89,89,49,118,236,88,188,189,189,1,200,202,202,162,79,159,62,92,186,116,9,128,217,179,103,51,98,196,136,71,126,142,30,39,43,115,23,240,40,94,122,233,37,229,167,141,141,13,243,231,207,167,168,168,72,89,222,90,171,87,175,102,243,230,205,100,103,103,147,157,157,141,181,181,53,101,101,101,124,240,193,7,38,251,119,239,222,29,104,28,35,214,214,214,210,171,87,47,50,51,51,25,63,126,60,178,44,63,112,204,215,161,67,7,58,116,232,160,236,29,1,108,109,109,149,219,11,22,44,104,85,253,5,5,5,0,244,232,209,67,89,22,26,26,74,104,104,168,242,251,180,105,211,56,112,224,0,105,105,105,252,245,215,95,36,36,36,224,238,238,174,12,11,44,201,191,106,207,217,146,85,171,86,177,119,239,94,60,60,60,56,118,236,24,99,199,142,109,245,58,116,58,29,89,89,89,44,89,178,132,77,155,54,225,229,229,197,237,219,183,89,191,126,253,61,33,187,125,251,54,0,133,133,133,64,227,127,111,181,111,223,158,144,144,16,50,51,51,249,236,179,207,72,75,75,195,222,222,254,161,182,237,236,236,172,220,30,60,120,48,126,126,126,248,249,249,49,96,192,0,102,205,154,245,208,143,193,24,176,179,103,207,54,59,41,52,14,59,0,250,245,235,167,188,61,157,152,152,200,149,43,87,148,49,177,165,177,168,112,30,57,114,132,235,215,175,3,80,84,84,196,145,35,71,154,181,31,61,122,20,189,94,15,192,153,51,103,148,127,183,50,254,172,170,170,226,208,161,67,156,58,117,10,128,203,151,47,147,146,146,130,70,163,81,14,241,165,165,165,156,58,117,138,188,188,60,101,189,25,25,25,116,239,222,157,196,196,68,130,130,130,40,42,42,98,214,172,89,12,30,60,24,0,181,90,221,172,142,159,127,254,153,95,126,249,133,111,190,249,6,0,47,47,47,12,6,3,21,21,21,74,237,241,241,241,74,93,199,142,29,35,63,63,31,141,70,163,212,95,94,94,142,70,163,1,192,206,206,78,57,41,91,177,98,5,63,252,240,3,107,215,174,229,227,143,63,102,243,230,205,74,141,198,23,201,133,11,23,56,119,238,156,50,94,173,170,170,66,163,209,224,237,237,141,163,163,35,55,110,220,32,52,52,148,3,7,14,176,124,249,114,98,99,99,249,237,183,223,148,250,141,99,252,248,248,120,70,141,26,197,27,111,188,209,138,103,169,237,180,27,58,116,232,74,176,140,183,46,215,172,89,195,217,179,103,81,171,213,20,23,23,115,249,242,101,60,61,61,149,246,57,115,230,96,109,109,141,90,173,38,35,35,3,79,79,79,108,108,108,120,225,133,23,200,206,206,70,163,209,80,89,89,73,64,64,0,23,47,94,36,45,45,141,190,125,251,114,234,212,41,52,26,13,106,181,154,252,252,124,134,15,31,78,100,100,36,106,181,26,181,90,77,122,122,58,83,167,78,165,164,164,4,23,23,23,118,236,216,193,206,157,59,169,175,175,39,56,56,152,215,94,123,13,104,124,241,232,116,58,198,140,25,195,198,141,27,41,43,43,99,210,164,73,4,7,7,99,109,109,77,67,67,3,121,121,121,156,60,121,18,71,71,71,166,79,159,206,233,211,167,73,73,73,193,219,219,155,196,196,68,50,50,50,80,171,213,228,229,229,225,228,228,164,188,43,55,106,212,40,106,107,107,57,125,250,52,71,142,28,225,239,191,255,102,222,188,121,248,251,251,3,141,99,229,246,237,219,163,86,171,201,202,202,194,205,205,141,232,232,104,229,111,85,80,80,128,183,183,55,35,70,140,160,160,160,128,172,172,44,50,51,51,177,177,177,33,34,34,130,55,223,124,83,249,59,58,58,58,146,155,155,203,213,171,87,9,9,9,49,219,101,196,150,36,39,39,3,32,5,6,6,202,0,91,183,110,53,107,65,143,67,67,67,3,42,213,255,14,6,53,53,53,247,236,245,30,86,89,89,25,221,186,117,107,182,44,34,34,130,228,228,100,66,67,67,241,242,242,194,202,234,201,12,217,43,42,42,232,218,181,235,35,175,199,212,227,55,94,150,91,180,104,17,181,181,181,196,198,198,62,242,118,30,183,121,243,230,1,22,118,88,127,84,77,131,9,247,30,142,91,227,238,96,22,20,20,96,48,24,128,198,39,253,218,181,107,255,120,221,15,242,56,130,9,247,62,254,175,191,254,154,209,163,71,179,99,199,14,142,31,63,110,177,99,77,163,167,42,156,79,210,182,109,219,148,235,166,209,209,209,247,140,135,255,13,186,116,233,66,125,125,61,27,55,110,100,234,212,169,188,245,214,91,230,46,233,190,158,170,195,250,147,100,188,150,216,84,231,206,157,205,80,201,163,49,190,13,252,226,139,47,154,185,146,150,25,15,235,255,234,235,156,109,233,223,24,68,83,44,57,148,119,19,135,117,193,98,137,112,10,22,75,132,83,176,88,202,9,145,32,88,26,229,132,72,156,173,11,150,226,169,188,8,47,60,93,68,56,5,139,37,194,41,88,44,17,78,193,98,137,112,10,22,75,132,83,176,88,34,156,130,197,18,225,20,44,150,8,167,96,177,68,56,5,139,37,194,41,88,44,17,78,193,98,137,112,10,22,75,132,83,120,160,63,255,252,83,153,168,162,37,90,173,246,177,111,87,132,83,184,175,213,171,87,51,125,250,116,101,118,17,83,222,127,255,125,150,44,89,242,216,183,45,194,41,40,110,221,186,133,187,187,59,81,81,81,202,178,79,62,249,196,228,135,251,154,78,190,107,156,137,15,48,57,113,239,253,38,234,189,31,17,78,65,145,148,148,132,151,151,23,201,201,201,38,103,94,142,138,138,98,194,132,9,172,92,185,146,49,99,198,16,25,25,169,180,53,52,52,48,127,254,124,70,142,28,201,161,67,135,0,184,114,229,10,115,231,206,101,193,130,5,204,158,61,187,233,87,9,62,20,17,78,65,145,156,156,204,164,73,147,168,173,173,85,230,43,106,202,219,219,27,131,193,192,184,113,227,216,184,113,35,73,73,73,92,188,120,17,104,156,109,101,233,210,165,188,251,238,187,202,36,105,249,249,249,60,255,252,243,124,251,237,183,92,187,118,237,238,47,100,125,32,17,78,1,128,211,167,79,83,88,88,200,134,13,27,112,116,116,52,25,206,1,3,6,0,141,65,52,222,110,58,87,127,191,126,253,154,205,31,213,191,127,127,212,106,53,147,39,79,166,162,162,130,250,250,250,86,213,36,194,41,0,141,135,244,224,224,96,214,174,93,75,80,80,16,103,206,156,225,236,217,179,38,251,234,245,122,254,248,227,15,128,251,78,212,187,99,199,14,110,222,188,201,222,189,123,233,214,173,27,13,13,13,173,170,73,132,83,224,208,161,67,164,166,166,178,127,255,126,84,42,21,223,125,247,29,54,54,54,132,135,135,179,122,245,106,84,42,85,179,241,101,74,74,10,139,22,45,194,215,215,151,94,189,122,241,249,231,159,163,82,169,216,183,111,31,169,169,169,164,164,164,112,238,220,57,6,14,28,200,241,227,199,9,8,8,96,244,232,209,132,135,135,35,203,15,255,97,95,49,87,146,208,42,227,198,141,35,50,50,146,145,35,71,62,177,111,149,22,159,190,20,90,45,42,42,10,189,94,79,98,98,98,155,124,221,185,152,200,75,120,104,62,62,62,109,58,167,167,8,167,240,208,122,247,238,221,166,219,19,135,117,193,98,137,112,10,22,75,132,83,176,88,34,156,130,197,18,225,20,44,150,8,167,96,177,68,56,5,139,37,194,41,88,44,17,78,193,98,137,112,10,22,75,132,83,176,88,34,156,130,197,18,225,20,44,150,18,206,194,194,66,115,214,33,8,64,243,28,42,225,212,235,245,102,41,70,16,154,50,230,80,150,229,28,149,44,203,233,208,248,25,99,65,48,183,38,57,204,81,1,9,32,14,235,130,101,104,146,195,28,149,74,165,74,7,90,253,129,119,65,120,18,140,57,84,169,84,233,170,173,91,183,230,2,151,74,74,74,200,201,201,49,111,101,194,51,45,39,39,199,56,101,205,165,173,91,183,230,26,79,136,182,3,164,166,166,154,171,46,65,104,154,191,237,240,191,179,245,104,89,150,203,117,58,29,89,89,89,230,168,75,120,198,101,101,101,161,211,233,144,101,185,28,136,134,59,225,140,141,141,173,144,36,41,8,96,207,158,61,226,228,72,104,83,133,133,133,236,217,179,7,0,73,146,130,98,99,99,43,0,218,25,59,104,181,218,220,33,67,134,244,174,171,171,115,57,113,226,4,125,250,244,193,193,193,193,76,229,10,207,138,243,231,207,19,19,19,131,193,96,64,150,229,237,113,113,113,17,198,182,118,77,59,14,27,54,44,93,150,229,17,117,117,117,189,53,26,13,122,189,158,190,125,251,182,201,236,14,194,179,69,175,215,179,127,255,126,118,237,218,69,93,93,29,178,44,167,75,146,52,71,171,213,214,24,251,72,166,238,24,24,24,184,30,8,2,232,216,177,35,174,174,174,140,28,57,18,39,39,167,54,42,93,120,90,21,22,22,146,149,149,133,70,163,193,96,48,24,23,71,199,198,198,254,231,238,190,38,195,9,16,16,16,48,14,136,150,36,201,165,233,114,103,103,231,102,253,196,245,81,161,37,15,202,138,44,203,57,64,80,92,92,220,17,83,247,111,49,156,70,1,1,1,227,36,73,242,2,188,128,222,255,180,80,65,184,227,18,144,32,203,114,66,75,161,52,122,96,56,155,10,12,12,236,42,203,114,179,61,233,131,54,32,60,187,238,28,125,21,146,36,229,24,207,196,5,65,16,132,39,225,255,1,178,131,211,108,234,51,220,169,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_More_AlphaMenu_png_size = 3815;

extern const unsigned char Rc_GZ_RcEngine_Slider_More_Border_png[196] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,7,0,0,0,8,8,6,0,0,0,53,4,229,6,0,0,0,139,73,68,65,84,8,153,125,207,177,106,194,80,0,64,209,243,202,27,146,31,136,10,150,254,131,16,12,56,136,139,159,94,91,148,182,20,220,21,5,53,63,240,50,60,146,14,233,236,93,239,114,111,48,50,64,89,150,32,165,4,63,1,66,8,67,189,92,89,212,13,195,224,176,223,57,124,190,139,80,20,133,69,221,88,111,182,250,190,7,199,223,239,81,198,24,85,213,212,252,245,13,84,147,153,24,163,23,79,136,144,115,214,182,119,215,203,25,180,143,155,156,243,40,187,174,243,181,255,248,239,30,131,82,74,194,147,149,211,31,71,168,53,58,186,216,63,155,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Slider_More_Border_png_size = 196;

extern const unsigned char Rc_GZ_RcEngine_Arrow_png[40131] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,240,0,0,0,170,8,6,0,0,0,147,64,194,3,0,0,32,0,73,68,65,84,120,156,236,189,105,176,109,249,89,222,247,251,79,107,218,107,239,51,159,123,238,237,219,183,71,169,145,100,13,137,13,152,136,128,92,114,8,102,176,33,24,97,192,137,49,101,192,5,206,151,36,149,144,42,87,69,84,101,248,66,170,50,84,18,251,19,137,157,138,141,4,142,65,136,134,150,16,6,34,32,16,219,12,214,64,73,173,30,238,237,59,158,121,239,181,215,90,255,49,31,214,58,247,158,190,234,22,106,117,171,53,176,159,91,187,246,57,231,158,179,246,62,195,179,159,247,125,159,247,125,255,176,194,10,43,172,176,194,10,43,188,254,16,175,221,165,210,107,120,45,145,94,187,107,173,176,194,87,47,190,64,210,141,100,125,239,203,124,253,199,190,192,235,190,133,52,94,247,28,129,87,100,94,97,133,151,195,43,36,218,57,226,126,12,193,91,16,92,31,175,113,116,223,181,38,200,87,116,233,134,8,192,6,137,75,36,62,70,250,108,66,175,200,188,194,10,231,161,63,255,79,77,226,46,113,7,226,75,158,69,178,129,160,65,80,32,152,142,36,238,62,139,204,159,251,133,162,33,177,67,98,78,2,18,39,36,32,112,125,36,243,247,158,145,57,137,21,153,87,88,225,30,94,1,129,225,174,234,126,12,201,101,20,251,72,122,4,57,18,139,36,33,176,8,74,4,110,188,1,44,128,252,115,144,56,145,240,36,50,34,150,72,78,100,7,133,39,174,200,188,194,10,47,143,207,63,132,126,111,146,128,124,17,121,215,81,120,20,18,137,67,32,199,127,29,146,12,129,71,144,33,232,199,112,218,188,204,227,57,18,130,64,36,82,16,105,9,84,68,34,17,77,32,16,241,68,38,36,174,17,62,43,204,94,229,204,43,252,25,197,43,39,240,179,104,50,36,30,69,142,70,34,9,40,226,72,100,137,36,162,16,72,2,130,128,32,67,17,198,199,138,8,212,125,143,27,72,24,34,118,252,138,68,196,224,145,132,23,145,185,199,83,144,240,163,82,55,196,21,153,87,248,179,140,87,22,66,159,161,69,160,70,194,6,20,118,36,178,68,147,144,164,145,208,131,38,11,194,248,49,53,230,207,225,62,18,43,32,140,106,27,71,226,58,60,130,64,137,39,16,145,4,18,154,126,84,100,73,160,32,2,137,103,137,64,228,250,72,224,187,100,62,207,223,21,153,87,248,234,195,43,35,240,117,4,27,8,122,4,233,110,142,59,16,185,63,49,116,66,161,133,38,120,157,229,153,180,203,214,32,196,64,237,36,20,82,72,208,32,132,212,162,16,36,132,143,94,160,138,56,102,208,1,129,191,75,98,112,120,2,225,28,153,187,81,145,61,30,49,42,241,75,145,25,34,223,59,170,241,138,204,43,124,149,226,11,83,224,51,56,4,2,193,242,88,163,165,66,56,131,243,154,164,178,212,47,52,169,49,88,171,49,66,34,140,36,9,73,210,2,97,164,15,157,68,41,144,185,192,47,33,169,136,201,3,18,143,62,71,222,132,123,17,153,5,30,75,32,195,227,63,7,153,79,198,156,185,57,71,230,187,182,212,138,204,43,124,117,224,11,39,176,69,140,149,101,65,39,36,88,69,12,154,208,228,244,205,68,202,126,162,22,243,50,4,155,35,146,196,100,130,60,143,228,181,39,154,52,16,55,3,105,5,89,6,152,128,141,17,173,2,49,121,178,220,163,112,136,145,188,113,84,102,61,222,167,187,111,135,241,253,72,129,39,18,17,35,169,37,233,69,100,190,78,120,113,37,155,115,100,94,17,121,133,175,60,124,97,4,238,16,119,51,88,143,192,32,136,66,210,183,138,208,84,234,248,133,45,191,56,216,10,125,179,142,247,19,68,42,200,77,192,148,61,69,221,82,87,14,81,121,242,42,32,38,17,138,132,204,35,73,71,132,113,8,227,233,163,71,42,79,74,142,44,247,99,192,238,239,222,194,72,238,132,195,140,97,54,231,200,236,240,104,34,57,225,174,82,207,81,47,79,230,149,45,181,194,87,30,94,93,8,45,207,117,91,121,39,145,66,234,229,162,76,203,131,245,112,124,176,199,205,143,125,11,110,126,153,44,118,76,182,111,51,189,124,131,188,92,178,40,90,202,73,135,169,58,202,153,197,79,45,122,234,80,153,39,21,30,161,60,34,247,104,233,193,88,92,244,160,28,41,57,200,29,242,174,10,59,6,19,42,220,189,191,159,204,67,141,59,160,8,212,196,115,97,183,92,121,204,43,124,165,227,213,17,248,12,206,74,188,151,100,65,37,225,148,56,249,131,199,121,238,247,127,20,251,232,22,20,208,69,88,30,124,13,199,183,60,117,113,83,212,23,174,51,217,187,67,158,183,169,63,106,49,85,71,190,214,82,214,45,170,238,208,69,143,40,122,200,2,41,115,8,109,209,198,131,180,184,232,80,202,17,147,71,231,110,204,145,239,17,90,224,1,143,199,163,198,98,152,29,85,88,18,232,240,84,68,212,72,230,63,173,97,100,149,47,175,240,101,140,87,79,224,12,193,18,136,78,16,130,164,144,50,222,248,213,239,23,98,99,107,16,72,128,8,62,130,71,211,245,151,211,226,249,203,34,123,222,139,233,218,29,81,239,221,72,249,246,9,250,164,73,89,185,164,152,52,228,117,75,62,93,18,234,22,89,88,84,214,147,50,7,198,34,180,37,105,139,80,254,46,153,125,114,168,220,221,205,141,5,238,110,254,156,198,251,51,50,135,81,161,35,241,101,201,188,178,165,86,248,10,193,171,39,240,226,232,158,159,155,90,161,202,152,121,181,120,88,78,12,81,204,73,157,97,112,117,26,96,1,201,67,171,73,109,174,211,188,191,72,113,124,81,100,194,49,93,59,16,245,67,55,83,62,61,37,43,151,152,170,33,175,151,228,117,67,62,109,80,121,135,42,123,84,209,33,178,30,148,37,105,79,210,22,169,28,49,58,164,242,119,201,60,132,212,103,228,125,49,153,19,30,117,142,204,146,192,98,84,232,149,199,188,194,87,16,94,61,129,235,141,148,47,79,73,169,199,70,131,21,198,82,205,62,83,230,234,81,118,19,221,157,72,58,184,9,156,0,167,128,5,18,160,32,230,176,172,72,203,169,225,116,99,79,78,78,246,100,153,219,84,238,30,196,201,91,110,147,245,11,50,187,160,190,211,82,213,115,170,105,131,46,27,73,217,237,136,98,89,248,188,119,34,115,54,153,222,75,237,98,48,174,17,19,31,4,46,11,56,145,112,189,193,222,37,111,28,195,234,56,22,194,20,254,69,13,35,43,143,121,133,175,48,188,54,57,48,128,52,201,36,157,92,159,89,30,253,142,159,153,30,253,230,143,44,210,252,74,241,182,55,208,93,243,164,79,61,195,64,224,6,46,62,12,55,158,59,247,197,9,226,6,113,190,13,243,245,140,236,232,162,54,215,47,202,170,232,98,53,59,140,253,149,219,113,81,44,41,38,11,242,114,17,139,73,115,28,39,139,105,54,107,54,180,233,115,85,44,189,40,187,185,44,156,222,212,54,168,220,21,199,56,39,176,165,197,135,2,111,35,246,69,149,108,143,135,149,199,188,194,87,54,212,231,253,153,239,122,175,96,142,36,67,210,35,17,40,52,10,80,58,162,240,157,65,4,45,251,78,199,234,193,185,223,251,218,63,44,142,127,251,29,137,229,44,61,254,4,41,88,56,120,30,198,177,95,254,199,39,225,207,127,19,194,7,184,250,41,160,3,14,129,235,16,110,19,221,41,97,217,232,180,236,166,106,113,115,79,117,55,182,181,109,234,232,85,206,105,83,227,66,237,90,55,89,250,84,118,33,21,167,105,145,55,201,102,33,54,134,216,24,103,91,19,83,103,172,178,38,136,160,72,193,64,50,4,175,81,90,3,26,141,65,162,0,77,68,163,209,12,157,101,10,49,124,111,119,219,64,115,4,98,252,63,133,192,143,205,163,10,73,64,178,4,166,8,118,16,188,7,120,23,130,127,241,94,224,189,2,126,234,181,251,141,173,176,194,57,188,178,97,134,235,40,38,104,78,208,8,12,57,25,96,242,190,207,147,93,22,41,46,202,212,158,214,73,204,235,176,125,178,65,215,239,205,254,228,127,253,241,201,214,246,67,139,141,43,204,63,252,207,225,230,39,134,135,221,187,130,252,153,223,33,175,38,232,163,125,252,7,255,49,253,83,63,75,124,238,147,247,61,240,38,176,13,108,32,139,93,76,94,32,170,105,227,39,15,28,249,234,210,29,178,178,161,204,22,24,189,160,46,27,153,207,230,81,21,13,170,234,145,121,7,121,135,40,28,169,180,232,218,145,99,9,99,145,43,141,42,204,125,225,53,231,26,72,228,185,60,217,143,197,175,108,188,87,132,187,211,82,115,18,219,68,142,72,100,163,199,188,90,74,176,194,23,25,175,29,129,189,203,83,156,151,201,247,147,228,143,235,240,166,211,154,235,243,77,250,110,111,247,249,127,242,55,101,85,61,218,239,60,202,241,135,222,79,186,241,241,225,161,31,121,51,230,191,253,57,178,178,162,16,80,24,112,183,158,163,249,157,15,179,124,234,125,164,103,255,228,220,19,72,12,68,222,1,54,17,197,46,162,202,83,172,215,26,234,11,7,76,118,15,144,170,65,87,11,173,171,133,223,156,204,201,103,75,244,122,131,216,88,234,180,214,123,49,177,104,28,57,61,18,135,196,146,134,166,144,188,239,93,175,207,121,204,103,196,62,35,178,184,91,228,186,71,102,57,126,76,141,163,144,159,207,232,35,172,200,188,194,107,134,215,150,192,132,34,133,101,69,88,78,252,131,71,53,203,48,229,230,237,173,60,217,11,235,251,79,126,151,168,213,227,167,217,148,229,147,255,7,116,7,195,19,248,230,239,34,255,177,255,26,149,226,240,108,180,70,151,37,66,59,216,191,73,247,171,63,79,255,212,251,73,183,175,159,123,50,9,184,0,108,1,155,200,233,30,34,51,49,214,211,121,42,118,14,169,118,15,201,242,134,188,90,144,79,23,200,181,5,217,133,5,102,171,33,159,118,200,170,3,44,10,139,196,41,230,174,64,218,136,116,65,41,39,98,242,253,153,199,124,94,149,207,222,62,83,235,51,143,249,140,220,110,180,165,86,115,204,43,188,78,120,117,4,54,104,60,25,146,60,115,54,79,248,34,197,190,36,180,149,215,213,132,227,219,211,157,53,51,75,254,120,235,200,94,219,43,79,63,244,45,122,202,99,141,200,112,239,255,223,128,118,120,18,223,241,195,148,127,237,199,136,66,211,5,64,101,84,90,146,173,149,168,105,129,87,30,247,153,127,131,123,242,231,112,191,249,43,240,34,50,43,6,85,30,195,236,233,30,170,202,163,46,203,19,234,139,251,182,220,58,9,170,104,200,39,115,242,141,5,122,214,160,55,23,153,174,155,66,155,174,80,178,139,210,185,128,177,167,153,182,161,214,150,164,60,11,57,120,204,156,243,152,213,125,202,252,82,100,54,99,120,253,114,100,94,205,49,175,240,26,226,11,35,112,143,162,39,187,75,96,67,134,35,55,201,21,41,249,130,100,203,11,118,173,42,194,98,114,100,155,233,161,61,154,49,91,108,49,61,184,200,157,167,190,121,58,141,143,118,215,143,112,31,122,63,103,36,214,127,247,191,65,191,237,221,56,61,65,20,83,10,235,232,112,164,74,34,107,131,46,53,249,68,163,100,194,125,242,143,104,63,240,62,252,111,61,117,159,50,103,12,68,222,6,54,49,147,77,212,68,135,176,182,126,236,166,87,238,96,166,167,232,162,65,86,141,49,147,121,110,214,22,89,49,93,56,85,183,141,206,187,88,149,29,107,166,71,107,203,173,224,81,163,199,140,28,60,102,206,121,204,247,135,215,103,149,236,251,201,124,182,148,224,188,199,236,136,148,164,21,153,87,120,181,120,229,27,57,78,48,244,40,18,134,132,1,204,153,10,35,200,105,219,28,25,170,141,88,151,69,164,178,145,201,65,60,152,98,110,172,163,110,110,83,181,23,185,254,107,95,127,161,142,15,31,253,209,167,177,127,244,47,128,14,138,9,234,63,249,159,80,143,189,21,97,50,156,84,200,165,69,231,21,26,1,34,98,50,137,40,64,76,52,114,146,227,69,164,251,141,167,232,63,242,203,164,143,126,152,212,204,207,61,225,130,129,200,91,8,189,141,158,108,32,75,237,227,218,230,145,51,15,222,33,171,231,232,188,161,92,91,80,110,206,41,246,26,76,189,160,218,104,49,117,75,115,181,51,69,229,144,89,31,145,46,132,228,16,202,131,116,160,156,82,202,5,169,94,186,8,118,118,127,54,199,156,141,30,115,49,218,82,97,156,161,122,41,50,191,133,200,199,206,123,204,43,50,175,240,242,248,194,86,234,4,20,235,40,34,6,71,70,24,114,225,187,36,238,219,114,146,202,50,147,148,167,150,73,40,79,106,194,11,51,226,124,29,209,236,108,232,110,175,186,254,203,223,80,206,170,11,207,255,254,239,98,63,243,251,64,15,151,31,67,252,151,255,61,98,98,144,249,38,198,66,38,74,234,144,81,10,77,158,105,130,12,180,202,115,154,58,124,165,144,179,9,69,158,35,83,160,253,240,47,211,252,250,175,224,127,247,35,247,145,185,4,118,129,45,132,220,34,155,174,99,214,235,222,79,214,143,186,226,242,109,116,181,36,155,141,57,242,238,2,181,190,192,220,89,96,242,14,85,44,17,121,143,52,54,159,204,172,50,185,211,202,56,231,177,68,124,72,163,199,124,127,142,124,191,66,127,190,100,62,171,100,159,39,243,106,95,246,10,47,131,87,176,23,58,9,190,23,201,6,242,110,24,157,48,116,99,62,156,145,33,200,9,227,189,164,36,50,193,216,2,125,58,161,109,167,242,116,49,91,179,167,27,27,106,185,27,117,183,87,29,254,246,95,92,86,108,94,253,127,62,64,184,253,113,192,195,59,190,30,249,247,126,130,60,127,152,181,44,35,151,5,133,41,168,171,146,92,43,68,8,116,203,37,74,107,230,182,99,17,2,157,28,74,216,89,153,33,181,194,197,196,225,111,63,137,251,192,63,131,223,253,8,41,158,255,91,159,50,20,191,182,144,249,5,204,116,134,220,88,235,250,106,231,48,202,157,59,232,106,137,153,44,84,150,45,66,86,204,49,147,134,108,186,144,121,217,69,145,183,96,122,212,216,147,173,181,67,24,155,153,194,131,114,2,92,127,94,141,207,207,49,159,145,91,143,202,252,82,182,84,32,82,225,105,198,190,177,149,45,181,194,159,130,87,70,224,247,142,251,160,63,134,100,3,205,217,98,187,14,77,78,246,162,80,58,146,161,152,32,150,37,58,150,170,95,76,203,206,77,242,229,124,61,167,221,72,202,95,64,197,139,197,233,175,254,59,141,236,170,59,79,253,95,164,238,42,32,80,223,255,31,178,241,238,191,195,206,180,34,95,155,240,153,103,143,177,73,114,233,210,148,71,30,94,167,202,36,126,222,225,231,14,219,195,105,27,56,241,129,165,6,103,12,189,22,200,58,163,200,75,56,157,179,252,240,47,210,253,198,147,132,223,251,240,125,100,158,113,22,102,203,124,23,61,153,162,214,38,109,168,183,14,172,216,219,71,101,75,178,106,78,62,105,200,134,46,48,57,217,88,72,85,117,62,200,14,153,119,104,227,148,202,45,102,32,115,8,201,193,56,45,149,231,43,143,121,133,47,42,94,249,201,12,47,69,226,179,138,244,253,249,112,162,40,228,162,148,73,86,62,184,42,120,91,135,126,49,197,249,53,60,91,100,237,94,238,62,249,134,109,241,135,111,107,142,246,205,241,175,255,60,112,136,42,114,234,159,252,135,92,124,226,77,84,107,21,207,60,123,196,169,128,224,150,20,41,176,99,4,95,243,214,135,153,237,110,16,156,160,57,182,52,139,72,235,18,157,79,116,33,96,68,78,19,60,190,212,168,245,18,74,77,63,223,167,121,234,23,232,63,248,62,210,31,253,222,125,223,219,58,67,152,189,129,204,183,49,179,181,164,214,214,155,84,237,30,58,179,125,224,147,106,48,101,67,86,205,213,116,125,158,207,54,151,94,230,11,235,85,139,208,61,170,236,145,202,33,178,30,37,135,201,41,41,239,205,49,175,60,230,21,190,8,248,2,206,48,250,83,72,124,174,42,125,151,196,118,81,186,34,86,65,249,138,228,166,120,102,16,214,112,39,59,184,195,139,69,248,244,27,54,221,31,255,185,163,79,124,82,180,159,248,45,100,214,81,60,254,38,54,255,243,159,102,239,193,75,52,11,207,11,55,78,105,250,6,229,123,180,235,208,173,195,132,140,141,189,61,46,190,241,65,102,187,83,68,74,216,211,158,254,180,135,70,50,119,129,69,14,167,149,164,85,1,95,107,116,61,25,54,1,93,125,134,230,169,15,210,126,240,125,196,103,206,119,127,37,134,16,123,104,24,81,213,5,178,105,157,228,116,99,238,203,237,3,43,215,143,146,54,13,89,181,32,159,44,48,229,130,98,54,39,155,46,165,41,187,40,179,14,97,250,129,192,218,161,140,3,105,65,126,246,28,243,202,99,94,225,85,226,11,63,220,236,115,146,184,205,48,50,195,137,28,33,114,18,133,182,162,244,185,152,144,133,10,142,102,248,110,70,119,186,129,90,108,211,205,31,168,253,51,111,156,246,79,63,113,231,163,191,65,60,254,55,100,235,21,147,111,253,235,108,253,224,143,114,233,129,93,110,94,63,225,153,63,185,77,236,91,178,190,35,139,144,37,77,10,25,222,9,130,247,108,236,148,60,252,246,61,214,47,173,225,188,162,109,44,139,214,210,244,158,38,56,122,4,46,147,216,148,208,153,97,50,153,144,107,69,251,252,51,156,252,250,147,52,191,252,126,210,103,145,121,135,187,100,46,47,144,111,76,163,217,220,62,109,213,230,126,50,235,39,81,153,38,232,98,65,86,207,101,81,55,81,23,11,76,189,64,231,29,170,232,144,231,230,152,213,56,199,204,202,99,94,225,181,193,171,56,18,116,44,106,189,5,241,162,101,239,2,131,89,104,188,202,144,50,167,21,25,153,40,72,162,208,137,210,75,49,65,159,214,132,229,148,180,156,17,154,13,252,226,34,110,113,105,42,110,189,177,104,254,228,145,253,15,254,35,116,117,66,185,187,203,244,63,254,175,216,250,250,119,178,119,113,131,231,158,62,226,185,63,124,129,162,233,216,174,74,118,47,111,178,255,241,125,156,76,56,229,135,234,143,88,14,145,236,99,111,96,239,194,6,219,27,53,162,79,208,38,66,27,176,46,209,144,56,76,142,185,112,88,157,160,200,152,212,19,148,80,116,207,62,199,226,125,63,131,251,200,7,9,119,110,156,251,126,207,26,70,54,129,77,178,245,7,48,147,50,48,221,56,237,205,238,109,175,170,193,99,206,170,133,44,167,139,168,138,57,197,164,65,79,150,232,114,32,179,62,55,199,188,242,152,87,120,13,240,249,79,35,125,22,126,10,62,254,94,216,65,240,70,18,7,8,12,131,99,211,103,144,91,129,4,148,128,0,72,136,73,8,250,30,92,132,40,161,147,2,155,134,105,93,162,178,81,70,163,124,153,79,235,186,187,246,60,41,54,240,204,167,200,223,254,117,20,18,174,60,188,65,127,231,8,209,105,108,27,168,31,152,242,23,254,246,59,80,59,138,78,58,14,143,90,68,154,146,177,77,126,189,167,125,250,148,253,143,221,193,91,143,44,53,197,110,133,174,21,38,19,20,82,80,5,65,105,21,249,50,17,79,28,52,80,76,47,178,246,141,223,73,248,177,31,194,252,165,111,39,10,67,218,191,5,205,9,195,33,79,119,128,235,132,110,31,55,63,145,110,255,184,204,250,102,187,8,71,123,81,117,179,168,85,158,146,173,201,79,106,88,214,200,166,130,174,68,181,5,165,201,152,77,13,213,76,179,86,102,228,153,38,55,6,19,53,198,153,178,11,70,198,100,116,240,38,40,109,0,77,26,203,89,106,156,152,18,227,164,148,31,151,231,23,227,11,103,137,130,113,62,202,143,11,245,37,18,131,228,96,28,164,220,101,248,125,189,101,156,152,186,59,45,181,154,152,250,74,197,171,32,48,188,36,137,33,81,2,244,195,167,72,160,21,195,250,89,1,24,45,8,105,88,12,47,2,72,5,62,10,136,18,41,84,208,211,80,78,252,90,60,94,228,254,228,6,201,205,241,139,5,233,13,111,71,34,185,242,230,7,57,186,117,74,191,116,28,221,56,101,178,93,240,200,219,175,240,208,155,47,243,192,19,23,41,103,37,221,210,19,231,253,32,53,82,176,60,233,57,188,122,204,237,103,14,73,9,138,89,193,218,222,140,172,80,24,35,48,70,98,136,168,20,144,209,34,92,143,113,29,245,250,5,54,222,249,239,49,251,190,31,33,123,231,183,224,218,150,120,243,26,184,142,129,204,183,129,155,248,254,0,123,122,36,211,209,73,85,46,142,119,170,254,206,14,205,241,52,246,50,163,105,107,252,178,194,45,107,236,73,133,59,40,113,7,57,253,113,78,59,207,56,153,27,211,117,166,176,73,231,186,50,42,70,147,132,212,222,168,161,73,38,161,17,104,36,195,8,100,24,73,45,49,8,20,105,124,63,142,164,230,115,144,249,108,244,241,60,153,63,107,244,113,69,230,175,36,188,74,2,195,75,146,184,5,202,38,129,4,47,4,82,136,241,0,179,97,28,56,57,145,151,133,8,1,129,72,2,132,68,233,68,10,50,134,168,59,102,110,115,187,216,105,62,243,140,138,253,45,210,157,23,240,15,60,138,222,188,128,209,154,189,39,118,185,241,204,33,161,247,220,252,228,109,102,23,107,202,105,65,240,145,178,46,216,126,100,131,157,199,183,200,215,11,186,222,227,109,36,73,129,39,209,156,116,28,92,59,229,214,103,14,177,206,147,79,12,27,187,53,69,153,145,103,18,35,18,34,122,202,83,79,56,238,8,203,30,33,52,230,210,101,242,119,127,59,229,223,250,9,244,155,222,78,144,138,116,243,42,216,37,195,162,130,91,16,111,224,187,67,250,147,35,149,142,151,117,213,158,236,150,238,112,71,248,69,237,59,145,209,46,167,180,203,154,182,169,77,219,84,245,98,89,20,196,172,138,54,147,137,204,249,164,201,107,19,115,109,124,217,25,132,80,68,111,176,193,228,222,235,160,95,102,142,57,161,199,57,101,61,174,248,83,116,72,122,20,2,65,190,154,99,254,106,197,171,200,129,207,99,60,248,251,172,209,195,162,8,183,20,42,55,100,74,131,50,44,100,70,38,50,148,200,73,162,40,84,152,164,20,39,189,237,42,124,183,70,178,83,45,219,45,239,142,246,72,71,15,26,127,251,13,245,181,223,121,244,248,95,126,0,85,156,146,93,184,196,218,223,255,159,217,186,184,203,214,133,77,178,44,231,15,126,249,79,160,11,232,92,243,181,127,253,207,97,74,67,219,56,150,77,143,118,9,33,5,38,215,164,148,56,188,118,202,205,167,15,104,27,139,148,146,144,34,46,4,34,137,162,204,185,244,198,29,182,47,207,48,185,166,239,60,198,229,204,231,29,243,222,211,4,79,35,18,86,75,100,149,83,76,10,50,35,145,41,112,250,161,15,112,242,171,191,136,251,232,135,72,205,226,220,207,164,230,174,199,172,182,152,108,95,160,218,220,106,59,61,59,156,179,190,47,116,181,140,186,92,168,201,108,81,175,109,46,172,18,11,79,49,71,230,253,116,90,182,7,235,23,59,162,117,216,96,65,187,73,50,54,6,233,66,175,156,48,227,180,20,56,44,254,69,246,212,249,221,95,103,221,95,110,236,248,50,163,219,44,8,108,173,60,230,175,6,188,70,4,134,63,149,196,167,42,163,144,25,210,229,32,11,146,44,180,8,85,10,177,10,169,173,177,113,150,23,97,61,184,227,29,73,115,209,186,195,43,51,127,245,13,246,119,127,254,98,127,243,183,209,21,100,239,250,78,234,247,252,29,46,94,218,101,125,115,70,127,228,120,230,163,47,32,18,100,219,57,111,251,43,111,164,235,28,71,71,13,170,141,164,16,81,90,97,10,67,94,106,116,174,176,125,224,224,218,9,167,183,150,116,141,35,165,68,140,17,23,60,49,70,38,107,37,23,174,108,48,219,91,35,43,52,222,65,215,71,156,141,244,33,226,18,36,41,144,70,209,116,11,84,174,169,102,19,186,147,67,238,252,202,47,48,255,200,175,144,94,178,251,107,32,179,46,246,152,204,182,83,182,177,185,236,243,173,131,83,81,13,163,143,69,217,160,203,57,101,61,151,102,178,212,219,151,23,214,133,22,39,59,35,202,94,74,229,148,206,122,97,164,235,114,99,131,151,158,48,86,178,201,239,117,124,157,95,230,119,118,127,63,153,207,62,38,8,119,9,189,182,242,152,191,18,241,26,132,208,103,248,41,224,189,67,24,246,60,131,0,173,31,11,164,128,78,64,47,198,109,58,122,200,125,65,196,164,200,181,150,222,123,1,66,134,224,69,12,81,134,96,37,2,221,219,40,182,118,38,235,139,79,125,42,35,30,192,245,103,73,143,189,21,87,205,80,72,214,54,107,116,102,56,221,239,233,218,72,211,57,54,31,152,209,117,30,219,121,218,214,209,182,142,190,15,244,157,167,239,2,0,211,173,9,123,143,109,178,115,101,29,147,27,230,71,75,108,103,17,49,33,163,196,158,6,142,110,47,57,190,185,192,100,130,181,205,140,201,68,83,229,138,66,70,164,183,180,167,167,136,8,190,247,28,29,205,89,6,69,249,214,175,99,246,215,126,16,243,3,63,78,117,233,97,188,79,196,107,79,51,44,242,59,6,174,19,253,45,250,230,80,44,15,246,179,112,114,184,86,251,227,11,179,172,93,143,174,173,188,245,37,182,153,37,45,234,176,127,189,150,221,162,212,174,45,10,233,50,239,189,17,209,27,151,162,241,89,48,232,104,16,201,32,147,38,133,225,94,42,51,22,186,206,114,102,51,230,203,106,44,134,169,177,28,166,112,227,199,228,56,21,157,80,116,40,150,8,54,145,196,241,118,202,112,250,198,249,48,123,149,47,127,217,224,53,84,224,51,140,30,241,199,16,67,223,244,53,77,159,43,142,51,131,83,154,82,101,104,155,147,84,1,178,128,80,104,23,39,62,249,154,228,166,132,118,141,116,178,69,190,188,36,150,7,151,179,249,205,135,39,55,62,250,53,135,127,252,164,144,250,16,125,249,81,138,159,252,31,88,175,107,246,118,183,217,216,221,228,233,223,191,197,225,145,35,106,120,248,237,91,172,111,151,204,143,150,156,30,183,184,214,65,18,8,33,80,90,145,27,137,41,52,90,11,202,58,167,40,12,166,80,156,238,47,57,189,181,96,113,167,71,75,131,109,231,56,231,16,70,32,148,162,218,170,216,126,104,131,201,70,201,32,174,134,211,121,203,98,238,136,34,71,136,130,206,13,171,46,209,25,212,134,36,34,97,113,135,249,47,252,239,52,191,244,143,73,79,127,226,190,159,213,189,117,65,89,125,137,106,107,55,198,181,173,249,105,218,216,207,106,125,18,41,154,64,185,144,197,100,158,116,213,196,98,109,142,153,53,152,245,142,66,119,168,194,162,50,139,192,162,141,197,7,207,89,43,231,217,122,221,52,134,216,233,156,61,21,198,126,236,51,91,170,35,140,231,76,13,103,48,151,163,26,159,87,230,149,45,245,101,137,47,2,129,225,179,27,61,110,104,188,81,204,51,67,33,53,209,102,104,149,131,42,32,20,160,38,120,55,201,50,57,177,237,124,77,235,176,230,197,233,14,203,59,151,139,118,255,202,76,222,124,252,240,55,255,201,37,127,250,175,145,89,194,188,231,199,89,251,198,111,99,107,125,157,173,189,109,242,181,138,143,255,222,29,150,173,37,70,207,91,255,226,3,144,11,142,247,27,230,199,29,190,143,164,0,36,208,74,220,189,21,85,70,158,27,242,66,97,114,69,81,101,20,85,70,55,119,220,121,254,144,219,207,30,162,148,4,35,232,66,139,11,14,164,98,99,119,157,205,189,53,182,247,214,9,22,92,39,73,86,211,45,160,111,5,144,241,124,53,39,105,137,202,20,121,165,7,102,92,251,12,203,95,251,0,205,47,254,83,210,103,238,111,24,185,183,46,40,155,62,64,181,94,71,185,190,113,186,144,155,183,173,172,231,152,106,65,185,217,160,102,11,212,214,41,229,172,33,155,45,181,20,173,17,166,83,170,235,163,18,22,175,125,159,105,27,80,142,52,122,204,233,62,143,217,19,208,231,60,102,123,206,99,62,35,179,36,208,16,128,192,100,229,49,127,185,226,139,68,96,120,73,18,223,52,138,60,51,76,250,12,107,114,50,153,65,40,8,170,34,44,43,146,168,145,113,138,239,167,132,229,166,225,116,79,118,251,15,166,246,224,202,164,249,195,55,31,253,238,255,93,10,249,60,114,182,73,246,159,253,47,236,237,93,100,182,189,78,125,97,13,93,20,252,171,223,124,14,237,18,179,170,228,202,59,119,88,156,118,156,28,182,184,46,225,93,194,181,22,103,45,41,37,38,101,65,145,103,131,18,151,25,218,72,242,76,147,149,26,83,40,100,110,80,74,176,56,108,57,185,57,231,228,250,41,36,71,10,30,145,18,138,140,136,100,227,242,38,107,23,214,152,238,84,120,63,20,165,251,54,113,32,238,128,52,244,81,210,71,65,50,57,34,47,192,40,80,18,123,245,211,44,158,250,103,116,255,244,31,144,110,189,112,254,231,198,249,117,65,197,198,131,148,91,27,193,215,91,199,11,181,123,39,197,114,129,156,44,170,114,109,33,76,49,207,245,164,145,165,94,244,90,46,91,83,46,125,86,116,204,50,199,188,232,65,56,37,141,67,72,31,2,14,148,203,101,230,250,116,78,145,195,168,208,106,188,13,157,216,67,158,172,241,180,227,232,99,63,22,192,94,142,204,171,57,230,47,9,94,195,28,248,126,252,212,144,43,189,139,97,70,224,249,171,137,157,76,16,37,136,28,112,32,133,64,6,129,19,2,45,5,41,9,68,146,164,36,46,152,36,189,75,66,102,209,116,222,229,65,105,153,181,167,91,126,126,19,236,9,38,51,184,7,30,7,18,34,51,100,149,102,99,187,102,121,199,18,231,61,183,218,134,203,15,109,2,131,197,108,173,103,217,246,196,48,24,164,90,229,132,152,104,59,79,223,123,108,235,113,46,225,61,56,155,104,155,68,112,145,172,48,108,94,168,185,244,248,22,179,89,77,150,12,225,200,147,9,141,68,208,206,45,135,183,22,92,123,238,132,62,122,116,13,245,174,100,61,247,212,26,202,148,48,54,162,122,65,234,5,182,77,244,14,228,218,54,245,215,127,19,155,63,244,247,48,223,248,110,146,84,132,131,91,208,44,24,78,177,216,7,174,227,187,59,116,135,251,210,222,188,85,77,220,114,123,198,241,206,68,181,179,121,59,207,172,61,156,182,225,96,178,12,39,181,77,203,42,134,166,34,217,130,190,207,241,222,32,48,201,123,147,188,215,197,180,50,26,97,124,8,186,208,202,248,104,13,168,33,87,62,107,18,113,227,172,183,25,61,102,198,53,187,195,235,213,189,28,186,27,139,148,106,229,49,127,169,241,69,84,224,51,156,111,185,124,86,19,74,197,60,55,148,173,198,100,57,58,228,244,186,64,196,2,169,42,92,87,19,227,116,77,248,153,247,237,186,51,39,23,236,226,224,10,243,91,15,173,133,107,79,156,252,214,255,185,1,159,66,106,69,241,147,255,128,250,194,37,202,141,41,211,221,13,118,247,182,185,245,241,35,142,159,62,226,78,149,120,226,109,123,172,109,84,28,31,44,57,220,111,104,78,59,98,20,24,105,136,49,34,165,132,24,49,153,65,42,133,81,114,236,24,11,212,38,35,51,146,44,211,100,185,34,43,12,166,28,66,109,105,4,167,55,150,220,190,58,231,228,100,65,82,137,168,34,65,122,188,8,36,145,120,251,133,7,152,94,154,145,207,114,186,54,208,245,17,107,5,189,27,142,137,138,82,208,6,139,147,30,81,104,84,157,211,70,203,209,31,255,1,221,47,189,159,244,145,39,239,83,230,179,117,65,195,44,243,116,247,65,204,238,166,61,169,234,131,144,54,246,81,249,210,84,101,147,251,106,145,171,114,222,110,236,46,130,169,154,222,101,13,186,232,72,89,135,84,247,230,152,49,150,36,125,102,74,103,251,222,145,143,149,236,179,124,249,108,163,72,113,110,179,200,89,85,251,126,91,234,126,101,94,217,82,175,27,190,136,10,124,134,247,10,62,78,98,7,65,253,52,44,74,129,18,160,122,129,144,224,13,216,32,48,81,16,133,32,147,18,47,164,198,235,36,146,232,82,80,200,164,209,49,239,27,100,173,253,142,61,190,46,82,92,162,137,184,71,223,140,72,17,35,21,70,25,118,31,90,231,240,185,134,78,9,14,239,44,184,252,240,26,66,72,98,20,144,20,41,66,239,60,62,68,16,146,36,21,58,203,17,74,19,16,52,206,113,218,118,104,217,209,69,71,231,61,173,11,180,1,150,14,90,43,232,124,66,79,51,54,175,76,217,125,100,141,98,150,17,172,39,182,29,38,6,76,240,204,239,212,28,222,180,220,186,222,16,98,160,172,21,235,91,154,73,30,168,181,71,117,115,170,228,201,98,194,91,207,210,70,150,194,192,149,199,201,190,229,187,217,125,207,15,144,253,219,223,136,119,145,120,227,42,184,22,152,115,214,253,101,155,219,180,183,111,43,113,231,120,90,135,238,194,36,46,118,164,237,38,174,245,153,232,218,233,98,113,84,135,246,116,66,223,76,136,77,1,54,35,133,28,65,134,13,58,55,50,11,193,155,128,55,202,72,109,148,54,42,162,181,192,4,49,86,178,197,216,253,21,209,196,81,153,65,161,199,198,17,137,38,13,13,179,8,4,22,69,66,178,28,171,214,205,168,210,47,217,48,242,222,85,195,200,107,128,215,129,192,231,237,165,75,176,241,169,68,87,8,218,18,176,67,83,50,94,32,180,36,37,137,75,146,24,164,174,132,180,73,168,20,16,144,105,250,148,211,53,101,49,173,139,254,234,211,19,216,199,63,247,41,196,215,191,27,147,23,228,218,160,132,34,47,114,102,23,38,92,125,102,159,96,3,118,233,185,252,232,38,41,64,12,17,231,2,182,119,152,60,7,37,176,193,15,77,29,34,17,164,32,202,161,178,179,40,231,44,132,99,41,161,145,145,101,20,180,62,210,217,33,4,246,22,130,141,16,97,82,25,246,30,92,231,226,67,219,204,166,19,226,60,114,44,37,62,75,132,20,104,78,91,14,175,159,112,112,237,132,24,2,147,173,130,122,171,70,20,26,180,68,32,200,146,33,179,18,211,4,196,81,79,169,61,249,149,71,88,255,182,239,98,253,239,254,167,136,55,188,121,112,126,238,235,254,74,225,6,118,126,155,238,224,64,135,131,147,105,37,186,11,185,238,183,164,242,85,242,162,16,126,89,75,215,79,83,119,90,227,151,165,194,151,73,250,124,82,23,166,183,173,33,4,147,156,207,130,243,58,224,12,49,233,148,156,193,37,131,240,26,244,61,75,42,140,97,116,68,143,125,93,250,179,200,44,71,107,202,221,37,238,64,230,207,101,75,173,200,252,5,227,117,32,48,220,205,135,223,3,76,47,9,238,92,3,159,9,170,18,188,19,36,47,64,73,68,20,136,40,80,70,122,130,76,38,42,168,20,190,150,72,105,52,182,104,23,141,170,178,184,229,78,110,72,88,146,145,232,30,124,35,165,210,144,36,72,67,177,158,227,123,79,127,106,177,109,164,156,24,202,90,227,122,79,140,2,169,13,49,37,130,0,27,60,94,36,66,138,36,45,17,74,146,50,141,205,3,73,26,130,144,120,33,177,81,16,19,164,16,137,46,34,147,36,216,68,180,145,104,33,218,68,74,130,124,82,176,243,232,22,219,15,21,152,34,145,188,71,4,80,82,33,200,56,93,10,94,184,101,249,244,181,35,82,158,177,177,51,101,109,189,100,98,20,211,24,217,10,137,109,31,105,187,37,201,11,150,206,115,228,58,228,155,222,194,236,175,126,15,197,127,244,227,152,199,222,76,106,90,226,11,159,25,250,133,54,239,219,0,0,32,0,73,68,65,84,56,56,1,110,144,226,77,250,197,45,150,251,183,76,154,207,215,170,56,191,48,49,118,51,69,91,249,222,22,116,205,52,117,139,137,22,126,210,30,222,170,112,93,46,85,202,82,178,25,132,129,204,33,26,98,50,40,12,49,106,8,6,146,38,121,131,212,131,42,43,52,97,36,244,189,163,104,244,80,92,88,121,204,175,39,94,135,28,248,60,206,85,166,159,125,86,115,189,84,108,247,25,42,55,68,159,97,83,65,102,74,60,19,52,19,84,55,195,151,83,58,177,86,231,254,194,226,240,233,7,57,254,196,35,165,191,249,120,251,47,127,246,34,124,28,128,226,239,255,67,178,106,141,170,94,99,186,179,205,116,103,157,237,221,41,191,255,171,159,38,184,132,204,37,111,123,215,195,180,141,99,126,226,104,219,196,254,209,156,32,36,46,69,148,209,36,37,144,74,145,164,36,198,72,146,227,107,155,72,8,49,12,85,73,226,240,54,129,50,171,198,73,2,137,81,138,92,105,10,99,208,90,98,50,137,44,58,178,76,81,148,6,111,35,135,183,26,246,111,46,232,251,72,16,18,180,34,9,137,148,154,202,8,118,182,43,118,47,150,72,4,182,241,52,54,209,219,132,149,138,86,66,35,3,93,138,152,50,167,158,76,72,209,227,247,247,57,121,242,231,153,127,248,151,240,191,243,161,251,126,214,247,214,5,153,234,18,147,205,11,41,223,189,176,104,228,250,157,133,213,39,166,156,53,46,101,11,242,114,46,171,245,38,202,124,129,158,45,200,202,150,164,59,164,177,144,89,56,155,99,198,35,165,27,70,32,207,205,49,159,229,204,103,249,177,92,121,204,175,39,94,39,5,62,195,168,196,103,249,112,42,239,133,210,58,72,200,36,164,33,148,38,73,8,10,175,84,17,162,94,250,164,16,193,224,143,75,239,130,41,77,218,242,39,215,37,180,100,41,177,124,228,237,104,145,131,206,17,90,147,105,193,108,163,228,206,181,83,148,212,164,164,184,112,101,13,103,61,167,139,37,157,117,4,4,73,128,212,154,40,4,73,9,146,76,36,1,187,167,107,20,62,39,119,10,147,36,74,64,146,9,47,3,189,114,180,88,218,232,89,6,139,117,137,222,70,250,62,209,181,145,182,79,152,94,225,59,232,251,72,18,80,173,25,246,30,154,49,91,87,228,244,232,121,67,182,236,48,157,197,117,150,227,69,228,217,91,142,219,45,184,74,178,179,86,83,215,25,19,161,168,29,76,59,65,29,12,193,6,142,219,57,115,105,89,76,13,250,107,255,60,91,223,253,30,182,126,224,71,49,23,30,36,184,136,191,246,25,134,105,176,35,224,58,209,221,162,59,189,35,154,27,215,243,116,124,176,177,85,196,11,153,234,214,83,36,247,237,98,146,186,211,26,219,213,216,121,141,111,74,146,207,193,101,68,159,33,162,65,6,77,10,195,182,149,132,134,104,240,193,32,147,33,121,141,28,135,44,24,23,29,14,127,87,131,66,203,49,220,214,119,95,239,36,26,73,135,100,57,6,220,47,53,250,232,17,124,231,74,153,255,52,188,206,10,12,47,234,212,226,227,138,110,67,51,107,52,113,146,225,67,142,76,5,25,37,78,76,16,98,146,5,55,51,209,206,148,239,103,157,95,236,218,238,246,67,204,111,60,70,123,251,17,254,232,103,47,193,39,144,147,154,242,191,248,105,10,4,69,61,35,95,223,162,220,123,152,139,151,215,185,246,7,251,44,174,29,147,132,227,177,119,93,33,68,184,115,115,201,226,72,16,189,166,39,225,77,32,234,161,207,25,175,144,201,32,116,139,82,18,169,134,215,184,16,34,145,132,84,10,41,37,9,112,49,12,29,94,74,33,149,32,197,177,247,218,40,114,31,49,70,33,181,64,43,40,11,77,158,43,178,92,97,50,73,150,75,154,185,231,228,200,114,251,230,18,103,135,54,79,145,32,165,196,54,134,162,86,172,95,42,168,55,11,132,4,215,39,186,206,227,125,162,233,61,46,128,19,26,178,156,148,149,136,76,19,20,244,55,158,227,246,83,63,131,255,231,239,35,125,250,165,214,5,13,202,156,175,93,166,218,125,32,132,233,238,233,105,216,188,77,156,44,140,158,53,69,177,62,55,186,153,199,172,110,124,86,46,186,73,185,244,89,190,36,207,58,170,204,18,178,158,160,135,101,4,201,120,66,230,8,163,10,159,239,250,58,239,49,159,169,242,121,143,249,108,9,193,202,99,254,130,241,58,43,48,188,40,31,222,221,1,123,32,232,166,2,213,11,202,32,105,163,68,102,10,132,68,4,165,3,42,164,164,12,81,91,145,116,196,101,248,101,65,20,153,113,203,157,184,124,65,36,55,167,92,223,198,94,124,148,224,34,41,10,40,54,200,180,100,243,66,197,245,79,222,132,20,105,22,45,123,111,216,34,216,52,20,161,130,192,167,72,136,158,32,60,49,129,72,98,168,217,8,135,96,40,48,165,20,73,41,129,0,33,196,221,91,76,195,223,142,20,146,20,33,198,97,48,34,38,72,125,32,68,129,119,1,107,195,224,49,187,68,223,7,108,31,112,54,162,141,100,125,51,231,242,67,53,85,109,144,82,176,92,6,132,20,228,17,250,206,115,114,167,227,232,70,79,240,9,83,72,234,141,140,44,87,228,133,38,51,2,163,65,164,128,12,22,130,71,6,129,46,55,216,251,134,119,80,127,207,223,162,248,246,239,35,237,94,198,239,223,130,163,125,134,147,48,14,128,171,132,254,54,221,225,13,217,223,184,86,22,203,227,237,245,172,217,45,243,174,158,183,167,89,19,79,167,157,63,157,88,219,212,162,109,170,210,117,165,110,125,46,27,151,7,239,12,41,24,132,55,168,33,139,64,106,131,64,103,30,163,2,38,72,94,236,49,199,151,240,152,195,202,99,126,181,248,18,16,24,62,43,148,238,10,65,187,132,188,20,48,54,119,196,164,64,170,144,148,84,50,104,17,163,118,36,149,76,50,184,174,196,181,19,33,228,36,29,190,80,193,1,241,240,54,241,157,223,134,12,48,203,43,188,26,114,212,114,162,33,4,22,135,11,156,243,84,155,19,138,42,199,217,132,235,35,206,123,122,111,9,41,144,34,128,64,73,57,22,135,6,164,152,72,17,82,2,41,65,200,97,55,193,56,127,133,144,195,27,41,37,64,64,18,200,48,132,55,33,38,82,146,132,40,8,33,97,93,196,118,30,103,35,206,37,236,72,232,44,151,108,237,148,92,126,104,202,108,45,35,165,68,179,240,36,41,145,90,211,54,129,163,219,61,47,60,51,199,186,64,150,43,102,27,57,69,161,200,180,64,137,8,206,33,130,5,103,225,176,65,166,140,252,194,3,100,223,240,77,228,127,243,71,208,223,241,253,68,31,134,13,35,139,57,176,100,104,24,121,30,111,247,89,30,189,32,151,55,159,159,76,100,187,83,201,102,187,40,227,52,121,155,209,46,167,186,95,76,51,187,152,104,215,85,194,182,165,247,228,164,148,145,97,48,90,179,60,53,88,107,170,228,77,18,94,73,31,140,74,201,104,239,117,48,99,241,75,143,195,21,17,141,71,147,143,97,55,104,20,195,153,211,102,36,243,153,45,101,199,247,239,39,243,106,142,25,248,146,17,24,238,90,75,103,85,233,102,83,18,123,65,233,5,45,138,34,14,149,202,148,148,142,73,7,80,94,70,13,94,35,124,70,219,85,73,41,163,23,251,59,209,94,35,54,199,212,79,188,3,91,109,80,73,69,27,20,42,70,180,134,237,43,27,220,121,122,159,64,98,126,210,241,192,19,187,195,113,10,189,163,235,61,46,58,124,240,36,2,18,131,150,122,168,201,8,72,49,144,98,4,18,72,129,20,18,41,20,66,66,34,13,106,60,126,71,41,221,139,230,52,2,33,37,136,241,53,73,14,42,237,125,192,135,68,136,224,124,194,217,56,144,216,70,172,77,132,144,200,114,197,218,118,193,197,199,166,84,107,25,214,70,58,27,8,36,34,137,110,25,216,191,217,112,251,218,146,24,160,172,53,235,27,57,89,38,49,70,144,43,48,178,198,59,88,180,158,69,219,225,147,162,216,217,165,120,231,183,176,241,131,63,65,249,77,223,138,144,25,254,224,214,120,138,197,189,117,65,118,113,131,238,224,134,234,94,184,86,87,161,219,157,233,110,91,106,63,89,244,46,95,246,203,169,15,182,198,219,154,110,57,97,177,40,113,77,142,8,25,209,103,62,57,45,83,204,146,136,6,53,76,75,41,17,140,34,105,45,188,9,66,127,110,143,89,172,60,230,87,130,47,33,129,207,181,90,250,231,5,169,20,248,86,80,86,146,165,16,24,33,137,82,33,162,14,74,201,160,210,224,69,42,36,41,101,248,166,196,218,137,209,102,45,28,61,159,193,41,70,73,250,71,255,45,226,233,156,32,50,116,10,24,169,40,166,57,24,56,186,113,66,244,145,122,123,70,94,101,216,46,224,92,192,133,64,136,1,34,40,41,7,5,198,159,83,212,129,135,82,14,203,69,6,210,138,187,137,152,16,12,242,60,222,11,4,74,156,17,24,16,195,18,140,148,6,69,6,136,17,210,72,98,235,2,222,131,247,137,96,19,125,31,233,71,133,54,133,98,235,82,197,214,3,37,85,173,113,62,17,130,64,27,67,2,22,115,203,254,205,150,253,155,29,66,72,170,202,176,190,153,35,50,141,206,20,19,169,153,120,73,221,38,204,194,161,108,32,203,50,196,206,5,38,127,233,91,169,127,224,71,201,191,241,223,39,72,69,188,250,52,216,150,123,235,130,110,97,155,155,52,7,55,180,61,188,51,173,164,189,48,201,220,150,80,177,242,125,95,136,229,98,138,93,214,44,79,107,218,69,73,225,202,84,216,34,168,96,178,78,101,194,43,157,98,200,136,104,103,130,9,42,105,68,24,108,42,225,53,105,229,49,191,90,124,9,138,88,247,99,108,181,60,43,104,169,62,99,26,50,26,89,146,139,146,40,42,162,154,34,219,41,146,41,177,155,209,53,219,180,183,30,18,71,55,30,75,139,163,135,248,196,207,63,6,255,10,128,217,127,247,126,226,209,41,177,88,99,45,207,152,108,76,89,123,96,131,233,118,197,255,247,228,199,208,58,99,178,181,193,91,190,249,81,110,95,111,56,220,111,89,52,150,101,191,196,39,144,42,31,6,165,164,35,49,16,88,8,129,144,10,161,6,82,138,81,85,227,192,109,238,254,24,133,184,91,83,49,40,132,24,72,46,165,68,107,61,228,199,113,80,109,153,206,190,44,145,82,66,105,137,214,10,37,5,82,38,48,122,80,84,45,40,243,97,119,87,145,43,242,92,1,130,230,216,113,251,250,146,249,177,69,8,129,145,195,227,13,57,120,96,237,129,53,46,236,100,84,165,36,54,137,216,11,250,46,112,218,91,26,160,175,13,39,174,35,152,200,108,54,37,147,10,191,236,57,121,234,23,88,252,218,47,225,63,250,228,75,28,22,183,11,108,162,178,61,234,237,135,83,190,182,211,118,249,246,157,133,215,39,81,103,13,121,185,160,40,23,84,147,249,44,236,45,132,174,23,33,171,218,160,202,174,23,186,139,42,88,50,225,40,164,35,98,9,242,222,41,22,105,156,150,58,179,161,206,246,102,203,115,109,156,103,182,212,217,50,130,151,179,165,254,12,237,202,254,18,42,240,25,198,80,250,172,160,181,236,239,169,176,150,131,10,235,160,72,70,35,210,96,97,68,167,181,209,121,92,44,42,17,220,36,139,97,43,44,159,83,208,51,189,252,8,108,63,64,8,145,204,15,42,42,148,32,203,21,229,172,228,228,230,2,215,121,202,205,9,121,165,241,54,16,67,32,248,68,244,99,127,52,32,136,131,120,50,16,80,201,129,188,103,10,156,98,28,254,26,206,194,102,49,242,23,129,16,195,231,37,18,41,69,24,195,236,152,6,178,10,41,135,255,67,140,55,134,182,78,198,110,49,31,89,2,125,72,131,66,7,134,124,217,13,33,55,73,144,229,146,221,139,37,187,151,42,242,220,16,61,56,27,240,222,227,92,160,189,117,204,242,86,207,242,48,32,129,124,38,40,102,146,170,202,169,139,28,213,57,42,161,40,163,33,118,158,118,217,211,123,200,158,120,43,245,95,249,27,172,253,240,143,194,163,111,25,118,232,221,190,6,182,97,104,24,185,73,10,215,233,231,215,69,179,255,130,241,7,55,214,103,170,219,93,155,170,245,228,92,17,154,101,105,150,237,212,119,253,196,135,174,78,174,169,100,116,69,30,109,150,133,148,169,128,22,189,54,177,79,6,41,12,90,105,148,50,32,13,146,97,19,231,153,42,203,113,169,95,28,109,169,51,171,234,108,41,193,153,45,197,231,104,24,249,42,183,165,190,12,8,124,174,160,229,174,11,252,186,192,89,201,204,11,186,52,252,162,144,138,52,118,5,73,52,49,233,232,188,198,45,39,170,95,212,36,49,137,39,87,39,112,72,154,31,193,91,255,93,98,8,228,201,15,157,83,106,24,13,220,123,236,34,87,63,118,3,235,44,205,220,115,249,77,59,56,23,137,62,17,172,31,230,125,129,251,116,117,76,99,199,144,24,65,74,105,204,139,239,225,140,236,226,140,200,114,236,220,226,76,133,25,73,59,132,226,145,97,199,31,119,171,218,195,181,67,74,248,16,89,36,64,140,77,75,73,141,249,50,88,27,135,2,156,131,224,64,8,201,164,86,108,93,202,217,216,205,200,114,131,64,147,199,65,169,23,189,231,116,153,184,113,163,227,206,237,30,165,52,213,36,177,54,211,76,148,164,136,145,204,69,76,82,8,228,176,205,196,70,122,149,49,125,211,95,96,253,47,127,47,245,119,254,16,242,129,71,9,62,18,175,125,154,97,172,248,172,251,235,22,221,252,134,104,110,60,159,139,230,104,99,93,216,221,141,60,174,31,218,54,15,174,153,120,55,159,248,126,94,7,63,175,177,109,169,177,121,30,99,46,162,203,125,48,6,47,53,194,104,20,25,114,44,116,129,33,216,149,199,252,121,224,203,128,192,240,178,42,28,164,36,73,73,10,26,164,70,200,129,196,2,13,202,200,126,89,10,187,172,133,84,57,39,183,182,83,124,22,127,180,207,230,187,191,27,47,21,27,121,198,122,189,134,204,115,162,214,228,117,134,72,208,207,135,149,59,235,151,214,201,114,133,237,28,174,183,216,206,97,123,71,136,113,204,97,135,162,21,12,202,24,98,64,144,144,66,16,67,24,201,199,152,247,14,74,61,20,171,226,208,205,149,18,90,107,148,82,67,53,122,76,166,93,240,40,173,198,215,137,116,87,169,207,170,218,82,41,58,37,7,2,39,240,33,224,125,36,132,68,140,98,40,128,117,67,225,107,32,92,34,132,225,5,160,172,37,59,151,11,234,237,138,96,114,122,167,241,66,146,196,176,210,168,61,238,57,190,209,179,184,211,145,229,130,122,195,48,153,26,138,76,81,73,201,4,69,17,4,166,47,241,11,240,75,144,147,154,201,219,191,150,181,111,255,27,20,239,249,17,228,131,143,16,67,28,114,230,115,235,130,130,189,206,242,244,134,56,185,125,53,207,150,199,155,107,186,187,80,230,126,163,115,93,22,237,124,34,88,76,93,119,50,197,45,38,210,119,149,78,125,30,147,203,83,72,134,144,105,188,24,84,54,195,24,162,142,206,25,124,48,153,50,6,137,73,231,85,248,252,234,32,127,174,122,157,24,118,101,43,134,29,218,47,101,75,125,21,237,202,254,50,33,240,125,42,220,108,74,10,39,137,65,66,82,72,165,17,81,147,228,184,231,41,25,137,208,132,80,104,223,79,146,93,76,141,72,155,126,113,85,65,75,253,240,227,132,11,87,184,188,185,206,238,246,14,147,217,6,125,12,8,37,216,121,120,155,103,254,245,179,72,51,20,132,246,30,222,160,111,29,118,217,19,130,39,37,137,212,131,158,222,85,85,18,119,85,249,44,28,142,67,91,37,112,183,112,53,132,208,9,18,132,81,142,135,124,25,98,138,103,151,24,237,40,73,36,157,213,200,198,48,122,12,167,165,32,40,51,134,226,10,197,176,230,57,38,57,122,211,18,23,192,187,68,215,13,167,77,120,47,134,226,87,31,113,78,32,100,65,189,174,185,244,112,206,108,166,201,180,196,183,14,82,36,74,79,107,45,135,135,45,183,95,232,89,156,120,242,66,49,93,51,212,165,162,210,146,58,42,170,4,57,64,0,231,193,18,145,101,69,245,230,119,176,243,87,191,159,242,63,248,219,164,189,43,132,91,215,72,71,119,24,186,191,14,129,23,8,238,22,237,241,117,209,222,122,190,40,237,124,107,163,136,59,50,181,179,206,121,19,194,124,106,187,195,137,15,167,181,73,125,149,211,86,174,63,42,96,89,200,160,179,212,56,19,253,137,169,38,149,86,185,50,125,215,153,228,131,206,132,52,74,72,19,206,194,236,149,199,252,229,66,96,120,145,10,159,30,75,218,37,20,19,137,144,10,233,53,40,77,74,6,161,148,146,81,71,27,179,132,52,38,180,211,216,159,204,130,75,147,116,122,117,2,7,196,211,35,196,215,189,155,53,61,116,77,217,0,77,63,20,123,234,141,18,59,239,105,151,150,102,233,121,224,137,93,130,117,216,214,129,79,67,75,165,132,228,227,144,215,34,134,52,119,236,144,18,103,161,111,26,114,216,65,128,135,112,90,140,251,235,83,130,40,238,17,254,30,129,199,10,52,105,24,154,96,236,188,226,94,30,125,6,161,179,193,24,29,243,105,1,40,49,252,229,33,37,222,13,29,89,54,68,122,63,52,141,216,144,134,238,172,32,240,109,134,237,19,214,70,148,129,217,166,98,239,209,130,106,67,19,68,160,233,28,81,10,146,82,184,30,142,247,5,251,207,195,226,88,80,212,138,106,83,82,76,160,200,135,242,149,177,150,204,250,65,157,147,164,107,59,38,27,219,108,127,237,59,89,255,158,31,166,252,214,239,35,237,92,194,31,220,30,201,124,214,48,114,13,223,221,100,121,112,85,246,183,175,85,165,91,236,172,25,187,83,230,76,157,181,198,45,143,102,174,221,175,113,39,181,164,173,98,56,44,101,222,229,74,196,188,111,23,198,119,157,169,235,74,231,153,54,173,109,77,72,94,169,132,73,49,24,188,215,252,25,247,152,191,12,170,208,231,113,174,34,125,178,101,88,115,57,125,42,200,69,5,190,6,89,35,211,52,115,126,22,146,155,5,239,182,228,233,213,7,213,201,213,55,132,102,255,145,248,169,95,122,28,254,95,0,54,126,250,231,200,218,22,227,5,173,87,152,233,58,235,59,51,118,30,222,34,186,192,31,254,214,167,137,121,206,131,111,222,99,231,210,140,131,23,78,104,78,58,218,46,176,112,158,16,7,171,72,170,115,21,102,41,7,85,84,99,17,106,76,120,207,114,99,169,70,223,23,112,10,164,84,99,193,42,142,46,147,24,223,7,165,20,67,235,215,153,29,117,79,173,133,16,36,51,25,174,201,89,44,48,116,124,169,241,243,172,29,242,245,16,3,66,48,132,234,90,146,4,195,73,19,34,71,200,128,214,158,204,12,68,172,114,137,49,144,105,48,74,177,56,14,28,31,120,14,111,64,76,102,200,84,146,38,70,201,190,185,201,195,123,53,151,182,11,214,102,154,100,19,118,25,233,187,200,210,70,124,150,113,252,255,147,247,102,207,182,101,87,153,223,111,118,107,173,221,157,238,182,217,41,83,41,40,9,165,104,76,91,52,42,170,40,97,64,54,85,116,18,245,96,7,152,112,68,17,54,17,14,55,127,128,120,180,255,9,71,56,194,15,24,23,118,129,11,84,80,24,28,6,28,118,89,81,182,81,34,64,169,108,111,123,250,179,219,181,214,108,134,31,230,92,123,159,123,83,80,66,194,142,43,106,102,156,60,231,238,102,237,189,215,94,99,142,49,190,241,141,111,244,27,58,29,81,206,82,53,14,99,45,62,68,218,123,111,209,254,246,175,176,252,236,175,18,191,244,250,245,239,151,140,100,223,4,142,152,221,250,70,246,239,190,216,119,213,254,249,89,95,157,38,237,54,84,227,5,163,209,10,38,11,51,61,92,232,102,127,233,131,218,96,155,13,82,109,220,100,230,125,23,203,112,117,221,35,218,35,198,163,202,60,230,65,140,96,208,202,22,60,213,87,168,149,61,32,217,95,71,90,217,207,144,7,134,173,23,30,234,194,85,171,24,37,77,80,22,109,44,70,28,162,157,145,228,236,164,177,169,115,38,133,213,72,250,249,76,133,110,230,66,127,51,182,239,104,232,217,251,134,215,152,219,6,149,132,245,38,98,92,67,211,212,56,171,57,124,233,128,7,95,60,33,42,133,239,19,31,248,240,109,250,214,19,186,72,219,247,108,186,14,37,186,152,141,218,254,135,218,121,95,120,146,200,161,212,240,232,252,183,39,109,141,53,198,130,104,235,252,44,174,61,126,56,14,37,156,222,134,237,201,64,74,217,187,199,18,126,75,126,100,146,172,99,45,26,148,49,96,13,201,104,130,130,160,132,62,37,46,27,207,26,79,151,124,110,153,244,144,66,246,200,253,38,231,204,174,118,28,220,104,184,251,74,195,100,175,194,104,75,187,52,40,209,196,250,17,155,85,199,249,113,199,241,123,61,33,128,27,25,246,238,184,172,78,226,12,149,177,140,237,24,39,134,118,213,211,183,17,69,133,157,221,162,250,193,111,167,249,233,159,195,254,192,39,193,84,200,249,49,178,156,179,99,127,61,160,95,63,100,126,252,174,89,63,124,103,186,111,229,246,161,243,55,27,147,38,105,211,213,161,91,207,100,189,152,166,246,114,170,83,59,22,223,142,81,190,73,126,237,32,85,121,34,69,200,205,21,38,57,68,44,49,58,194,191,89,125,204,207,152,1,151,92,248,213,231,97,114,174,105,103,10,140,65,105,3,209,33,218,146,146,139,198,58,29,147,13,81,85,196,174,38,204,103,210,46,247,85,244,123,105,249,94,13,87,212,135,55,233,94,254,38,26,231,48,166,33,68,69,101,43,92,165,113,19,71,148,196,213,197,154,190,79,220,126,225,0,107,52,126,211,211,182,61,155,190,69,107,183,245,124,10,118,4,142,45,145,3,134,82,238,240,195,181,191,3,82,36,123,132,20,67,185,51,203,126,105,165,81,74,10,81,100,183,137,111,143,170,20,58,228,231,170,72,254,45,249,61,228,82,20,196,148,80,198,32,70,147,172,38,41,136,69,140,160,23,33,218,158,36,137,20,193,70,131,10,142,212,91,98,111,233,122,67,31,29,27,111,104,123,69,31,20,117,165,56,188,165,184,243,34,76,103,80,7,193,248,10,173,44,173,210,156,45,35,15,79,34,143,142,65,105,67,85,195,225,129,162,86,66,163,21,35,99,169,196,160,66,238,143,94,214,43,58,237,168,95,250,32,147,143,255,24,211,79,253,99,154,239,251,36,201,56,210,249,49,178,186,100,71,24,121,64,187,184,207,242,244,190,93,63,188,55,155,233,120,103,102,253,13,87,155,166,91,173,70,178,89,206,26,19,166,164,205,52,109,22,99,210,186,65,186,6,146,131,88,145,162,37,137,131,127,243,250,152,159,49,3,134,173,23,94,127,9,30,207,12,85,48,180,201,208,104,139,36,135,24,135,78,150,16,43,209,198,210,168,138,245,213,12,191,220,147,148,198,92,190,179,7,143,73,171,57,245,223,253,113,194,186,71,41,71,215,69,140,210,212,149,161,154,214,28,188,120,192,219,127,250,136,36,80,89,195,209,237,25,221,166,167,237,58,124,76,40,220,19,222,85,15,165,164,107,239,116,168,3,231,218,177,100,207,44,217,43,7,157,203,69,34,41,123,224,98,128,219,186,177,168,18,128,41,132,82,146,186,230,129,109,114,168,148,182,94,94,15,249,181,202,45,144,152,161,253,81,17,37,199,138,73,9,201,40,162,18,14,91,161,9,134,198,87,72,172,16,106,250,88,209,167,138,142,154,214,91,58,111,240,125,174,49,123,31,115,73,45,37,234,137,112,243,185,41,183,158,31,51,25,143,144,206,146,214,10,27,19,38,68,54,87,129,179,135,45,39,247,3,49,70,154,153,230,224,134,201,205,21,38,139,172,232,104,177,43,33,206,123,76,84,140,154,49,227,15,188,204,236,7,127,140,131,127,239,151,144,215,190,51,35,217,143,239,189,143,253,213,46,31,176,62,189,231,194,217,195,253,67,151,110,239,53,114,212,249,190,238,151,243,49,253,122,166,124,55,197,175,198,244,155,9,113,51,34,197,10,9,21,58,56,98,200,76,175,40,185,134,44,201,229,202,69,105,125,52,246,111,84,141,217,254,127,122,244,175,106,41,1,81,60,255,29,194,197,189,68,213,6,176,137,104,18,164,136,82,1,101,34,42,5,156,36,90,231,113,245,26,235,54,106,52,90,41,119,147,228,161,123,116,143,73,232,184,74,66,37,1,69,238,165,93,207,87,76,87,83,38,119,102,89,146,43,5,206,30,92,241,193,143,61,135,171,45,182,114,84,117,196,119,108,89,83,3,243,106,187,182,70,88,56,150,5,133,150,1,149,74,169,252,214,185,102,28,35,98,10,52,125,205,85,167,82,146,186,118,96,68,37,64,163,19,68,20,70,64,165,124,220,129,127,141,228,82,147,168,236,113,163,36,66,138,160,236,54,82,120,225,194,16,156,161,115,53,107,171,89,227,8,198,16,53,24,1,23,161,241,121,88,70,208,137,206,121,172,19,148,139,212,78,81,93,237,209,84,138,81,13,127,235,35,26,45,21,139,123,158,197,195,158,121,91,194,115,5,239,158,104,238,93,70,154,218,114,116,168,185,123,199,81,237,43,238,92,214,196,166,102,217,11,75,73,92,173,90,174,84,71,95,131,50,176,247,163,63,194,236,135,254,46,202,71,86,255,252,55,88,253,238,255,68,255,71,191,77,90,206,129,123,192,61,98,247,231,156,191,251,5,197,187,55,39,182,190,253,193,163,59,31,18,187,127,107,125,217,29,62,236,87,102,137,173,86,216,241,146,102,188,196,205,22,84,147,5,110,182,198,184,13,213,184,69,220,6,49,61,193,149,121,204,120,66,242,88,147,5,240,175,107,101,167,162,145,157,136,68,60,166,136,19,8,1,151,79,19,85,209,202,62,185,166,149,221,228,113,125,188,77,130,242,243,41,174,181,62,94,79,147,255,250,115,230,103,12,196,26,86,1,179,38,111,59,206,59,71,189,223,96,218,9,98,178,110,116,210,51,82,154,16,55,251,58,245,251,105,249,224,5,51,127,240,141,241,234,244,213,234,241,255,243,209,254,242,55,44,44,248,192,127,241,95,113,62,222,195,133,138,184,216,163,214,35,166,55,45,211,87,39,28,190,114,139,135,95,184,224,234,243,151,136,134,143,126,234,155,88,116,158,211,135,75,54,167,43,86,109,159,67,103,99,178,127,84,10,109,115,89,250,137,165,212,118,190,210,150,148,129,194,184,10,144,188,9,104,157,127,128,64,54,66,109,10,41,132,60,107,201,24,115,13,208,34,139,236,165,184,5,194,130,8,90,27,180,50,217,43,107,77,72,197,216,77,1,203,68,72,138,237,134,163,116,185,79,233,93,185,74,132,20,243,198,68,202,81,130,81,186,40,142,40,140,206,60,238,70,160,114,26,103,161,170,160,174,20,85,165,168,27,69,232,225,209,195,158,139,83,232,219,92,18,203,194,129,17,98,98,50,179,188,52,173,217,123,14,76,149,31,211,247,249,167,141,194,38,22,36,201,41,164,214,80,101,43,90,135,196,226,119,127,141,238,247,126,29,254,249,127,251,212,124,169,221,176,184,102,246,50,123,119,94,73,241,230,173,197,25,245,49,169,94,82,213,43,204,120,89,217,241,162,150,233,114,241,220,11,11,234,122,77,138,107,164,218,140,186,170,111,108,213,133,96,125,106,180,111,45,33,70,237,137,198,163,171,60,193,226,43,237,99,254,203,180,178,255,127,6,191,158,193,16,26,158,8,163,79,111,107,14,163,33,90,75,74,21,202,84,164,100,209,186,50,90,92,138,125,77,236,71,54,181,123,105,61,223,55,201,31,198,229,91,21,44,152,124,240,195,44,111,189,64,101,26,164,171,208,209,80,143,52,169,73,212,179,49,147,189,49,23,95,188,0,13,230,176,162,57,24,209,111,60,177,245,248,16,75,146,123,205,251,234,98,96,67,127,48,215,66,98,10,145,67,101,35,64,101,131,202,33,245,174,62,156,73,27,67,184,157,75,80,66,202,249,111,185,13,50,1,68,149,46,38,173,178,241,107,173,48,198,22,111,47,229,165,175,117,68,73,86,19,121,26,80,123,50,120,144,242,239,76,84,81,82,66,243,164,72,5,47,139,65,72,109,174,45,251,94,232,91,161,239,21,125,39,116,109,254,220,123,7,134,23,94,114,220,122,206,128,8,109,75,102,106,9,132,8,225,145,227,252,61,184,58,134,106,6,227,67,104,102,224,42,69,93,9,86,71,16,79,244,29,201,7,72,145,198,26,102,31,121,141,233,15,255,36,119,254,209,207,145,158,127,133,24,121,138,48,242,144,208,223,103,117,254,174,218,220,123,187,105,46,175,110,28,17,110,143,117,216,111,55,209,134,126,61,235,213,98,202,42,204,88,172,39,116,113,60,177,182,49,113,221,216,212,59,233,189,83,33,186,24,177,170,50,78,156,203,216,138,224,12,56,249,74,106,204,67,89,234,47,235,150,250,138,242,229,175,61,188,126,6,67,104,120,95,24,29,82,34,234,132,77,137,64,192,72,66,36,70,209,9,81,9,91,247,62,208,162,116,215,187,201,18,102,19,128,213,235,159,131,215,190,135,24,84,238,171,77,154,208,5,100,149,232,214,29,183,94,216,223,190,226,229,163,5,71,31,60,196,213,26,99,13,74,171,107,30,160,84,106,147,100,201,157,109,35,66,218,149,120,74,235,160,214,153,106,17,75,254,138,8,18,213,118,35,144,44,185,65,34,211,32,179,13,106,132,220,200,47,2,74,107,82,200,2,3,168,0,74,149,191,115,163,67,206,139,75,167,19,25,236,66,167,29,66,158,15,158,223,249,64,249,28,188,242,181,191,51,175,115,119,214,51,23,27,162,144,91,178,83,97,152,33,152,62,97,20,88,7,181,131,186,209,184,42,225,42,184,253,188,225,165,87,21,203,185,225,236,36,112,250,56,18,74,69,45,244,240,222,23,64,12,140,246,225,232,69,97,114,168,152,29,86,116,125,98,221,6,54,189,167,11,61,161,243,36,111,73,73,136,179,187,204,126,250,23,25,125,234,31,227,23,231,44,126,251,215,240,191,247,155,196,63,248,44,89,145,115,14,188,73,187,124,131,118,121,203,192,209,97,51,125,225,112,246,194,171,161,179,71,23,203,203,254,20,83,173,147,29,45,87,167,147,37,110,178,160,30,45,117,53,93,85,213,225,178,142,118,99,187,182,85,38,116,137,216,175,173,245,126,164,123,68,7,196,248,186,19,223,213,181,47,89,110,220,150,167,174,151,165,234,18,118,183,68,220,53,221,175,101,241,200,129,72,131,102,66,226,109,132,67,242,128,159,79,21,175,188,13,175,191,122,143,252,140,122,96,118,204,172,201,185,38,121,141,85,14,172,67,37,71,50,21,86,28,49,85,88,229,72,190,198,175,166,180,171,3,98,63,227,242,221,3,120,64,92,204,169,127,228,211,164,46,66,111,169,117,131,15,43,204,68,83,77,26,166,7,51,86,143,215,244,155,142,121,219,241,242,191,245,2,155,85,79,88,123,250,62,228,6,255,161,41,129,252,247,192,128,214,90,151,210,210,206,67,15,142,110,64,139,129,29,84,61,24,115,121,76,222,28,100,251,91,107,189,125,126,38,135,20,130,136,228,199,14,141,16,3,77,83,171,92,139,86,114,13,5,47,70,46,146,208,106,119,172,237,239,167,145,244,107,33,255,240,94,243,107,11,58,13,141,22,153,186,153,82,6,187,162,7,31,20,41,26,54,109,162,223,36,124,151,185,217,198,42,14,14,53,47,190,98,153,30,129,170,132,197,82,114,228,98,161,15,112,113,38,60,122,16,56,59,235,168,42,56,60,210,140,154,172,97,102,72,152,148,105,95,109,106,8,98,64,87,216,201,140,241,55,127,23,179,127,247,103,25,125,242,103,225,232,57,228,252,132,116,126,12,180,12,236,175,208,63,206,132,145,251,239,76,38,97,121,235,206,152,91,99,147,166,235,118,93,73,88,205,144,110,38,132,73,88,173,39,146,214,227,177,232,102,166,71,181,78,23,149,10,189,141,70,170,52,74,14,43,46,6,177,248,172,251,101,250,224,196,218,161,135,121,87,150,98,75,4,201,165,40,85,104,156,29,250,47,244,202,79,83,56,183,30,249,171,243,198,207,168,7,190,182,86,235,68,103,132,125,21,137,58,101,203,144,132,152,132,85,193,73,76,62,106,143,114,157,177,85,31,171,186,53,213,33,177,135,176,154,83,233,60,168,164,50,10,223,123,84,138,136,79,132,214,19,90,207,193,139,83,230,231,87,128,102,117,185,161,174,45,173,53,133,148,145,254,194,183,165,245,110,239,27,66,98,145,66,238,144,44,49,11,37,156,149,93,179,191,12,30,79,82,254,71,169,239,146,82,233,120,16,208,26,99,114,100,54,108,30,73,21,144,12,93,60,117,218,25,108,202,29,74,3,19,172,188,64,142,240,85,204,175,165,77,169,69,235,109,174,173,181,42,155,212,238,115,101,126,25,217,51,43,69,42,153,132,148,74,88,76,96,18,248,24,81,49,162,141,224,106,77,211,42,92,165,168,156,228,156,217,37,110,188,172,184,243,33,197,114,158,184,58,131,179,227,252,105,18,112,117,25,153,95,37,212,23,132,219,207,27,14,142,20,71,135,53,34,138,190,135,213,218,226,123,232,230,17,159,34,73,11,122,100,105,62,240,26,205,47,126,19,171,95,248,79,232,222,253,18,253,239,253,51,252,63,251,21,210,27,159,39,27,242,57,32,44,47,190,196,242,226,166,131,163,219,147,163,15,222,158,221,121,185,95,233,195,179,197,124,116,134,155,172,83,55,89,158,186,135,203,11,93,47,71,179,253,165,87,122,41,106,188,34,214,27,212,164,69,79,60,214,118,132,232,43,161,143,221,38,32,198,71,43,125,52,181,71,209,147,213,56,179,87,182,216,210,6,25,24,23,15,237,137,212,197,43,95,94,35,138,84,36,222,38,113,72,228,117,18,159,129,236,141,255,234,158,248,217,245,192,252,50,124,250,51,138,240,174,226,244,182,206,29,236,33,123,97,147,42,146,170,16,169,82,12,53,42,56,103,101,26,151,151,7,116,155,253,70,214,55,195,250,13,5,129,233,183,127,156,214,77,113,210,16,86,1,103,21,198,129,29,215,140,103,99,154,105,205,201,155,167,4,11,147,59,123,140,198,21,221,170,103,211,122,82,28,194,229,29,40,148,229,115,212,182,237,112,107,188,67,110,11,3,177,121,151,59,95,247,188,131,129,48,228,170,187,50,209,80,7,222,122,83,73,164,24,183,141,17,72,66,74,88,43,215,16,240,225,57,3,113,100,40,101,109,61,188,12,111,71,239,80,245,33,7,86,59,239,123,125,105,138,161,75,62,250,78,192,64,145,68,145,162,208,135,68,74,42,235,241,71,202,92,41,77,223,11,27,31,233,251,60,107,202,54,138,131,27,138,231,94,86,140,167,153,208,162,100,68,93,85,24,99,233,214,134,179,227,196,189,183,2,18,52,149,131,163,137,97,175,130,61,171,153,41,195,40,24,216,4,124,55,0,96,21,230,214,29,70,223,245,113,38,63,245,243,52,63,252,105,84,51,37,61,190,247,20,97,228,93,252,230,49,203,211,119,77,255,232,221,217,81,149,110,31,212,253,145,24,63,238,187,101,35,50,159,245,254,106,26,227,102,170,250,213,248,96,179,25,221,12,93,61,79,117,149,241,103,99,199,201,58,151,180,85,74,89,77,116,129,96,33,25,116,116,69,153,223,144,138,183,213,104,2,59,210,186,65,225,209,216,114,75,64,81,151,47,172,71,49,37,207,211,254,52,240,251,191,252,55,201,128,201,76,151,217,243,138,227,133,97,150,44,18,43,148,170,208,146,177,227,226,163,0,0,32,0,73,68,65,84,25,56,66,46,114,198,208,84,42,142,195,226,228,144,190,61,168,195,234,166,95,190,97,96,195,236,219,190,151,118,122,19,35,21,210,38,172,21,80,145,106,84,51,154,77,24,77,107,30,253,217,99,130,21,170,189,49,135,55,167,180,203,108,192,49,164,173,1,43,20,170,116,8,101,187,217,17,49,174,75,233,92,87,235,216,230,155,12,124,233,93,254,154,193,169,66,222,80,108,107,201,131,65,133,152,141,53,94,51,224,93,27,227,245,122,180,218,190,254,246,125,165,84,106,206,48,40,133,168,98,239,90,233,157,82,8,106,139,134,111,13,185,168,7,41,116,105,113,28,236,127,215,210,161,84,142,20,114,94,174,81,202,16,99,86,20,9,65,240,94,104,37,208,135,68,23,160,237,19,109,39,248,0,174,86,28,222,208,220,121,65,176,78,136,193,160,162,166,50,153,131,209,173,52,231,143,133,238,61,133,248,132,107,96,124,88,188,124,109,168,181,161,14,26,179,137,152,77,68,119,1,157,52,179,187,47,48,253,254,79,80,255,236,47,194,15,252,88,30,244,113,113,90,140,121,69,150,11,186,207,102,113,143,229,241,187,174,127,248,246,222,65,149,110,79,235,116,163,147,216,200,122,51,146,205,122,134,95,77,82,191,154,166,222,79,93,236,70,78,250,58,166,88,117,70,92,135,184,96,177,84,46,115,173,197,106,208,166,72,2,105,32,203,15,104,52,9,149,213,99,74,30,98,138,1,39,132,80,78,166,35,27,241,223,42,167,246,171,48,224,103,59,132,254,12,194,103,128,38,10,27,4,83,69,82,72,40,147,208,73,72,58,159,30,173,82,187,105,99,22,34,39,40,55,14,48,114,0,114,126,12,119,63,2,36,170,145,35,117,30,27,18,248,68,234,35,213,94,157,107,175,74,209,173,90,108,101,176,206,162,77,241,80,67,19,209,19,245,96,149,135,127,171,107,23,62,197,81,23,239,28,211,251,191,139,235,94,115,16,194,123,34,234,133,82,67,46,77,12,90,161,197,100,163,49,165,20,36,89,242,39,196,88,94,148,2,70,13,201,176,202,20,204,180,67,209,69,20,202,168,29,216,37,5,33,215,32,169,240,179,139,225,14,9,117,218,190,167,226,201,51,172,152,175,52,85,124,190,228,225,231,67,115,69,146,84,34,137,4,54,210,37,141,245,1,173,85,17,191,207,82,187,117,165,115,141,121,162,216,63,204,209,250,242,18,30,223,83,108,230,121,56,71,135,112,255,145,96,78,13,218,192,254,109,216,187,1,71,183,32,121,72,189,101,189,134,182,11,108,124,98,177,105,105,45,168,233,136,233,183,126,63,230,219,63,70,232,61,139,207,125,14,255,217,95,197,255,246,63,65,22,89,144,32,255,84,92,190,247,166,226,189,27,35,56,250,192,237,87,191,229,37,179,119,115,125,145,246,31,205,55,87,203,106,185,90,81,55,171,88,79,151,193,77,231,201,77,23,76,103,43,226,222,10,95,173,161,90,17,84,107,140,233,177,116,209,211,178,211,249,234,183,222,55,109,125,113,6,80,52,108,129,20,139,48,65,120,128,226,226,137,171,224,43,94,207,182,7,230,51,106,11,100,129,165,83,14,155,42,80,142,36,21,90,85,164,84,33,190,33,134,134,246,242,144,110,117,88,169,246,168,191,120,179,134,115,154,231,95,166,125,249,99,24,177,132,54,224,84,66,169,68,51,106,104,102,19,154,253,134,171,199,151,108,218,13,139,85,207,43,31,125,129,126,25,178,78,85,31,137,81,182,192,80,42,42,28,67,159,175,86,89,194,198,24,189,5,149,80,16,124,200,245,219,242,157,196,65,63,90,155,173,206,180,20,9,90,41,117,226,193,147,15,61,78,74,155,226,117,83,1,197,6,219,210,132,144,171,201,131,80,158,136,20,37,205,204,147,182,214,108,55,146,173,194,136,42,25,181,8,33,132,172,101,61,112,181,139,135,31,222,227,64,74,73,169,24,110,218,129,117,67,227,70,44,57,184,210,5,216,43,225,120,76,9,81,154,141,234,9,49,209,133,92,119,142,88,82,180,185,83,170,83,132,96,232,54,16,251,92,143,174,106,184,245,60,220,126,17,170,70,177,232,21,109,212,244,42,209,73,100,190,244,156,157,6,78,31,39,140,22,234,105,98,52,19,170,90,83,89,67,157,12,214,27,236,82,97,150,208,251,13,90,213,84,47,188,204,222,15,255,56,227,159,255,37,210,43,31,70,217,26,121,124,15,233,215,228,97,113,143,129,71,172,46,222,83,203,71,111,85,92,60,58,218,183,114,103,230,194,145,143,209,249,246,106,146,194,106,70,56,223,163,187,156,16,46,155,35,167,234,73,123,81,29,161,221,84,91,93,69,81,13,70,111,102,40,106,52,14,197,102,161,136,17,232,53,186,202,137,191,65,209,146,208,144,29,18,137,136,112,81,60,240,159,124,134,191,42,152,245,108,123,224,97,173,214,9,63,22,156,22,244,246,42,23,18,98,172,150,24,180,160,36,98,180,7,21,176,227,62,199,39,208,63,190,151,189,68,210,96,19,201,131,17,65,186,136,248,72,10,17,219,88,152,167,28,239,136,100,3,184,230,33,147,60,233,77,51,113,35,123,64,239,61,93,151,24,143,71,24,99,137,49,96,173,217,122,237,29,213,146,93,78,76,14,153,183,161,175,222,229,191,249,97,67,189,249,90,243,196,246,238,39,251,144,183,143,25,140,12,178,167,29,2,222,18,238,230,44,220,160,36,63,95,138,7,87,133,132,161,76,9,253,227,14,140,27,4,6,182,165,166,184,59,7,198,24,146,18,84,217,8,182,181,231,24,49,198,32,117,66,147,55,161,20,50,2,237,67,134,110,157,178,132,10,64,209,89,168,28,59,194,72,3,123,135,112,240,92,86,199,61,59,209,156,157,38,214,235,68,82,145,32,194,27,15,18,241,189,196,184,169,184,125,171,226,214,45,199,100,170,56,88,101,1,2,233,224,212,30,114,177,108,217,132,150,120,100,168,166,251,28,252,195,127,159,244,201,79,163,67,96,241,91,255,3,254,127,249,44,253,255,246,89,210,226,138,156,136,190,75,104,191,200,249,219,95,80,112,99,106,171,187,223,176,127,247,67,81,29,222,94,158,182,123,15,233,47,214,168,102,121,117,245,248,234,176,154,94,5,123,239,178,182,147,203,166,62,92,196,230,96,190,62,171,23,237,141,155,27,26,184,97,102,170,23,212,226,116,222,77,246,136,171,205,18,170,105,42,76,107,205,8,69,87,124,246,215,176,158,125,3,126,13,225,117,96,18,18,253,181,183,171,179,123,50,202,72,180,42,225,141,160,108,194,216,232,187,152,6,3,86,186,36,128,101,88,11,2,38,42,36,36,130,207,17,249,209,139,7,60,62,62,5,132,245,162,199,58,141,214,236,136,27,236,194,223,193,232,98,204,158,119,60,30,211,247,61,49,166,236,117,159,142,137,175,149,105,182,134,9,5,84,26,202,79,79,150,115,212,240,58,91,189,173,225,30,217,25,109,9,149,21,133,174,89,168,150,74,0,21,25,234,203,249,6,41,31,94,109,91,32,101,104,176,32,219,56,82,106,212,42,103,234,169,108,96,3,107,75,229,211,81,164,128,20,49,198,28,61,148,146,217,144,78,136,228,146,87,138,10,99,10,3,77,75,150,45,18,80,162,73,214,178,233,65,69,8,121,76,84,254,25,140,185,2,53,202,94,249,240,54,60,247,146,161,247,154,147,227,192,195,7,30,239,53,162,132,85,11,111,191,229,185,255,38,236,85,154,91,207,105,14,111,43,140,134,105,11,206,86,244,222,17,130,162,189,240,4,171,97,52,38,213,176,247,19,63,135,249,137,159,163,95,46,89,252,218,127,77,248,95,63,75,247,71,191,69,6,191,222,1,222,33,244,51,206,222,253,130,225,221,27,251,205,254,7,246,103,119,62,24,216,187,113,121,218,215,15,79,219,243,165,213,238,170,174,70,87,149,29,95,88,55,58,63,168,167,151,117,55,189,80,182,89,190,77,181,192,142,211,209,157,23,194,249,249,169,35,232,196,98,174,153,238,93,187,8,190,246,245,236,27,48,192,225,70,120,100,242,149,91,139,208,137,108,131,127,165,37,39,128,38,98,108,32,165,20,148,238,135,143,182,254,243,207,231,139,221,232,107,76,170,124,241,224,19,49,120,82,138,89,176,221,100,85,200,168,217,54,48,228,85,74,64,200,214,166,134,144,243,198,141,27,180,109,203,249,249,25,49,42,180,54,57,255,84,249,13,110,141,244,105,176,119,91,195,207,199,101,107,171,106,151,43,63,241,68,217,82,175,135,45,98,104,67,84,138,156,59,83,62,227,64,222,208,219,23,0,149,242,123,209,59,241,60,77,40,145,241,174,104,156,200,155,193,176,217,229,84,87,182,53,241,225,179,199,28,175,19,117,98,219,110,41,89,169,196,0,98,52,49,229,15,170,36,107,126,25,173,242,134,3,244,17,136,16,36,211,159,122,159,171,104,214,130,109,115,153,170,106,133,166,50,212,149,162,113,138,91,183,42,94,120,193,177,184,18,46,207,225,241,131,72,144,60,137,252,42,68,46,223,139,240,78,98,58,19,110,60,55,227,240,48,143,162,142,189,166,219,8,107,47,172,99,98,105,20,173,111,241,70,33,77,195,228,31,253,18,245,79,255,34,233,244,17,171,223,251,167,108,254,240,179,116,127,244,155,228,16,123,1,188,69,123,245,69,218,171,219,22,142,110,54,179,15,220,156,221,126,209,203,222,141,211,211,182,190,183,22,59,31,141,220,133,89,140,206,245,168,57,31,185,131,211,231,191,241,195,23,15,206,206,207,207,207,0,101,226,100,54,211,171,69,44,8,37,106,27,213,108,190,186,220,119,88,95,31,6,252,244,210,34,68,43,152,40,253,32,125,129,22,173,108,74,232,20,181,245,67,122,31,150,115,42,85,202,63,90,136,148,206,32,129,24,34,209,39,38,55,38,104,147,89,84,235,171,150,209,184,65,111,75,44,178,67,128,225,90,24,188,187,93,109,47,236,124,207,245,16,88,224,137,251,135,130,82,74,59,21,15,217,122,176,109,17,169,48,173,212,19,158,45,31,227,201,237,123,247,237,23,207,188,221,96,200,80,103,97,126,161,117,65,166,118,97,117,54,249,152,95,43,198,76,22,25,242,246,45,178,157,115,212,140,189,200,22,53,55,206,130,150,39,194,231,52,104,94,75,194,81,145,210,174,19,203,104,155,207,121,202,72,181,181,26,116,54,224,52,224,113,9,84,16,140,83,172,93,79,229,53,77,7,35,99,105,52,84,38,115,178,109,173,184,243,2,188,240,65,205,124,158,56,61,247,156,159,4,146,239,33,245,92,173,35,221,159,140,121,183,235,105,38,129,87,62,50,99,255,150,97,6,44,214,48,9,176,54,35,90,114,104,191,105,59,54,206,48,186,243,18,227,159,253,143,169,62,245,31,177,185,248,34,253,239,254,38,241,183,255,9,225,255,250,35,178,136,223,21,80,209,46,30,210,46,222,114,112,227,185,201,225,221,231,166,207,61,183,217,164,241,131,185,175,223,91,248,234,220,112,126,20,215,143,79,245,193,173,189,116,99,126,98,111,188,124,182,10,237,197,244,249,27,113,249,232,42,80,239,7,252,53,35,254,26,214,215,151,1,239,37,33,185,244,68,50,6,67,247,143,160,117,66,169,210,210,179,251,104,74,27,148,228,214,59,33,230,11,57,9,164,68,74,17,227,76,190,138,36,18,58,143,76,154,98,25,187,154,237,211,33,180,136,16,99,226,236,236,140,16,66,241,48,153,208,239,172,203,101,160,33,228,69,151,114,237,142,171,60,24,237,118,99,160,24,203,211,6,170,212,251,254,189,125,238,245,156,185,0,94,136,206,181,223,66,240,24,114,249,1,221,86,98,128,4,202,108,165,113,101,32,119,136,160,172,229,90,232,177,5,213,210,181,91,76,241,182,146,129,104,134,186,180,136,100,130,135,2,90,83,132,0,115,199,149,171,64,27,16,201,17,206,238,121,25,158,80,42,131,125,34,130,73,154,206,107,162,228,13,71,137,144,68,225,53,180,21,168,26,236,6,84,5,117,13,207,191,228,120,249,101,203,234,202,50,63,182,156,62,234,177,189,160,173,99,211,193,151,222,82,168,251,48,222,143,28,30,9,183,111,88,124,159,216,180,137,182,131,85,165,89,199,196,102,189,166,75,145,222,58,226,173,187,168,159,252,121,102,63,241,31,98,223,123,155,205,255,252,235,244,191,243,223,209,191,249,199,228,124,249,2,184,195,234,226,156,213,197,189,17,76,63,52,62,60,250,208,228,238,157,121,59,26,191,213,123,253,70,119,254,222,13,123,168,15,195,232,242,161,185,93,141,227,148,99,172,185,96,129,103,197,110,118,207,215,176,190,190,12,248,47,92,91,122,83,118,59,3,28,92,150,210,160,82,6,101,50,117,81,101,16,71,164,224,251,16,99,32,120,159,189,204,224,49,135,163,94,247,126,197,112,84,105,86,88,175,215,0,52,77,77,146,244,132,253,13,23,245,128,97,73,241,112,131,87,29,192,173,225,53,119,117,215,157,103,191,230,240,119,159,103,40,95,93,247,254,41,61,97,236,34,37,63,30,168,208,186,108,14,50,176,182,18,34,165,191,56,197,188,39,26,91,222,175,30,240,178,109,188,174,100,168,49,101,239,156,82,214,155,214,58,135,237,69,234,111,203,45,9,93,121,97,209,40,187,43,118,232,210,39,29,99,62,156,104,33,170,76,253,76,58,33,18,17,101,104,124,141,138,121,131,241,64,138,17,175,5,19,21,170,23,104,53,218,9,109,13,155,74,83,87,138,186,170,184,251,106,197,139,223,8,237,165,226,236,24,238,223,183,120,13,90,11,23,139,196,163,179,150,240,249,150,87,95,217,231,198,77,195,115,207,43,186,94,152,175,19,243,181,97,177,81,172,54,137,110,109,9,49,177,209,134,241,139,31,101,252,31,124,132,233,207,255,103,116,111,127,145,205,239,255,83,226,191,248,85,252,151,190,68,174,49,207,128,49,235,139,83,214,23,247,246,160,254,214,241,209,254,183,236,125,232,67,247,230,7,47,253,43,94,222,219,139,119,246,71,155,213,70,219,143,76,9,199,180,252,9,237,95,122,73,127,133,235,111,136,1,23,26,226,176,212,246,127,187,27,174,229,111,74,32,250,184,45,131,12,160,76,34,148,178,206,147,29,60,195,243,184,230,245,116,25,4,110,173,165,114,14,65,240,222,23,36,58,95,157,131,1,167,98,92,82,60,240,240,252,193,59,230,84,245,73,118,215,95,76,226,44,159,104,32,106,188,111,21,79,60,156,130,235,236,48,217,253,123,232,126,146,20,75,179,133,70,84,66,149,26,245,251,54,132,167,206,168,53,22,165,192,57,135,45,87,81,74,134,94,23,79,222,186,162,133,93,246,140,194,212,18,189,251,170,18,187,122,179,20,44,64,74,14,62,238,32,73,174,125,7,149,74,87,95,196,5,176,81,80,125,142,172,162,49,172,43,195,218,1,53,152,6,154,6,38,14,158,255,70,120,245,99,138,213,18,238,191,3,109,175,153,78,70,92,245,145,183,151,107,254,236,50,17,34,124,228,165,17,119,246,28,31,56,178,180,231,112,181,236,89,156,59,174,36,114,150,86,180,55,19,236,41,168,2,234,163,223,192,254,199,254,115,170,95,248,37,194,255,249,127,176,249,141,255,158,254,115,127,72,60,185,7,91,217,106,195,250,60,40,206,127,235,37,254,229,217,75,124,236,227,143,248,232,15,252,223,124,234,151,127,61,172,187,21,163,250,156,6,69,255,175,249,146,191,130,245,245,101,192,115,157,169,103,79,45,231,28,190,79,164,152,149,36,141,209,250,122,144,173,83,160,194,226,147,65,141,166,204,219,43,14,198,137,232,60,33,10,226,13,35,63,133,152,193,173,132,70,165,156,106,167,152,32,36,172,46,228,254,82,119,69,34,70,21,221,232,148,32,9,149,222,94,201,196,28,177,150,57,75,197,224,134,188,22,69,12,25,5,150,98,184,57,132,12,59,239,26,19,162,20,94,210,251,74,78,73,18,18,211,22,128,26,70,191,136,8,18,114,153,49,234,28,146,14,59,145,74,58,91,81,26,98,215,188,233,105,237,136,41,161,139,231,141,73,80,90,216,111,45,196,220,190,152,10,86,144,164,104,97,35,24,7,174,54,204,102,128,130,182,243,248,208,51,222,207,101,165,174,7,231,160,107,97,189,241,248,152,200,79,47,51,235,16,8,130,49,153,247,205,64,22,73,10,137,48,10,121,179,75,42,17,21,4,101,8,162,233,149,148,26,181,167,209,96,98,143,89,173,169,181,198,170,132,51,130,27,89,86,19,13,81,161,196,114,176,167,185,251,221,121,83,94,156,38,78,222,179,92,93,121,188,178,244,6,46,238,109,56,51,45,118,164,153,206,160,185,171,152,162,177,75,112,243,134,238,29,1,227,232,177,120,2,178,167,144,198,194,243,223,77,253,75,223,9,86,209,61,248,115,210,239,252,10,252,254,255,8,15,223,185,118,245,41,248,252,31,220,229,243,127,112,87,175,215,151,233,103,254,203,123,104,158,114,15,95,253,250,250,50,96,0,237,53,222,40,76,80,131,79,240,49,230,22,32,157,91,239,181,146,161,144,146,151,42,33,38,59,244,120,7,22,149,18,137,190,166,254,188,13,77,203,172,161,82,174,65,229,186,169,214,58,19,25,254,202,107,231,199,118,200,239,251,191,203,193,219,231,48,219,108,197,229,69,164,140,108,209,79,162,199,195,115,174,31,247,43,172,85,60,129,120,179,219,16,140,179,36,114,244,16,134,225,111,128,53,38,159,207,129,248,97,114,253,214,84,142,224,29,25,15,139,28,236,67,12,208,109,64,50,28,141,46,132,23,163,76,46,67,233,66,237,148,28,242,203,22,216,131,165,217,185,39,33,39,205,18,24,240,110,84,114,196,94,208,186,2,44,189,138,57,201,118,249,28,55,90,114,27,100,165,209,141,65,98,194,141,53,119,94,53,220,121,181,162,109,133,63,255,179,150,135,103,150,177,181,108,250,142,62,4,46,47,21,47,62,95,97,111,57,226,24,106,213,33,23,11,226,250,146,27,104,66,187,230,234,173,99,54,244,180,170,39,28,77,225,27,95,132,87,62,10,223,254,131,176,184,204,70,188,188,122,223,185,78,203,243,230,43,250,82,254,10,235,235,195,128,47,70,138,153,81,44,158,186,93,148,50,202,235,72,82,72,80,68,52,41,105,163,181,246,215,131,208,129,38,56,204,59,82,67,8,73,190,227,9,35,146,45,66,12,79,2,68,131,82,165,82,154,39,138,121,79,149,150,174,151,132,182,15,217,222,87,144,105,190,188,1,239,12,49,79,120,136,34,196,2,218,105,173,208,198,92,67,200,75,90,123,205,8,159,44,91,189,223,192,183,233,133,236,254,220,166,24,67,141,170,28,64,148,16,37,230,211,55,160,228,37,39,238,250,142,72,164,170,167,96,178,183,181,85,198,191,124,48,56,3,171,30,66,159,195,114,163,204,14,25,23,48,219,126,230,210,48,49,176,210,84,174,6,180,42,22,67,213,25,159,76,25,128,211,73,161,37,35,227,34,17,83,25,140,19,4,79,50,160,42,77,50,158,137,213,104,9,212,90,81,59,48,165,182,223,174,224,236,49,156,94,40,86,126,4,22,150,157,167,30,55,140,42,48,10,140,141,108,66,194,140,18,222,31,35,231,143,209,39,103,196,171,5,253,197,57,118,181,226,162,93,194,157,35,170,183,175,48,191,243,58,221,31,254,38,233,203,24,45,0,245,216,243,109,127,255,117,247,159,254,55,255,194,159,119,129,244,215,87,9,254,250,48,224,97,213,74,17,85,214,124,73,91,118,3,132,164,136,73,105,141,73,136,182,78,233,235,72,181,80,186,114,82,66,98,200,50,10,218,110,189,47,148,178,201,16,93,34,196,148,182,158,216,152,107,204,42,120,31,82,252,196,146,107,198,250,244,93,195,107,8,239,51,184,225,185,215,131,171,157,122,70,94,131,108,142,122,74,214,103,64,178,183,82,58,215,239,188,126,0,61,32,82,42,255,173,50,11,75,244,208,105,165,183,211,23,251,232,119,27,131,213,91,16,44,148,240,61,137,208,249,158,171,171,21,155,222,81,55,21,174,202,117,220,148,160,187,130,77,11,190,235,115,112,164,20,33,100,212,95,180,224,156,219,214,181,73,66,8,121,151,213,58,235,101,187,104,51,216,150,20,58,41,76,202,68,20,35,229,99,232,156,78,24,11,166,82,40,171,176,13,84,181,96,107,141,109,18,218,130,30,37,148,210,116,199,176,58,201,178,62,201,192,196,146,199,201,58,56,152,58,38,123,80,215,66,223,71,218,62,49,105,123,78,223,184,207,229,191,122,29,30,28,35,199,167,112,53,39,110,90,156,177,28,168,37,203,255,253,87,232,215,111,192,95,144,204,214,127,239,167,175,186,111,249,161,55,244,39,126,225,95,166,149,188,227,23,237,57,43,150,44,233,105,115,96,241,181,174,103,223,128,95,71,49,25,107,46,209,219,43,97,184,38,147,202,35,50,40,16,174,68,77,138,218,198,174,25,12,120,252,13,175,33,202,228,42,74,202,40,180,86,121,102,214,112,177,182,139,77,14,223,140,198,214,54,235,209,133,88,60,198,96,192,89,111,74,36,123,165,235,165,22,120,178,62,251,116,88,250,244,253,40,118,97,241,181,219,174,175,193,176,173,117,69,221,50,31,114,168,153,238,144,241,39,159,119,61,252,46,7,42,239,69,134,23,46,183,149,214,66,173,50,170,116,221,248,163,144,84,30,253,34,34,37,101,43,212,74,149,211,138,186,25,227,83,86,210,232,150,61,109,215,230,83,98,114,121,205,244,99,98,12,196,8,85,85,97,36,115,174,179,238,150,161,208,114,118,29,87,49,99,10,67,100,51,89,87,215,206,5,40,179,221,115,208,86,80,38,98,27,208,54,98,234,72,213,104,92,13,174,78,212,141,134,168,153,159,5,30,188,177,102,191,218,227,112,63,115,121,16,136,61,144,224,224,48,177,119,83,227,26,97,179,74,180,43,79,58,239,88,191,245,136,238,245,47,242,248,207,223,102,125,239,24,153,207,177,27,207,56,36,194,229,123,44,230,111,145,187,155,78,222,247,197,77,191,251,71,59,253,109,159,120,60,255,238,127,240,167,97,255,185,71,186,231,56,157,116,15,166,245,222,195,176,226,113,218,112,217,31,211,241,215,180,158,125,3,30,214,88,103,175,155,19,213,156,196,106,84,12,41,111,211,41,89,66,212,128,118,10,71,41,179,169,201,44,231,187,146,69,45,37,6,108,101,182,23,176,54,154,110,145,17,125,209,154,233,209,152,222,103,2,194,32,84,167,85,238,2,219,105,97,93,11,129,175,173,129,81,37,255,154,8,105,215,138,200,251,242,207,237,223,228,198,0,98,30,161,146,185,24,89,187,202,40,187,53,232,167,65,230,1,120,22,115,61,36,46,94,123,8,91,181,65,21,185,109,101,244,80,219,201,198,25,75,131,87,109,8,18,9,131,54,152,40,172,182,57,103,53,134,1,99,80,202,144,82,204,180,84,201,173,143,41,6,234,152,207,175,81,131,177,230,250,113,229,28,214,106,66,32,3,117,41,65,140,232,180,67,191,73,146,83,89,189,51,94,101,5,235,2,198,70,108,45,216,145,80,55,6,101,18,182,22,70,35,77,20,184,58,137,60,184,23,152,159,43,234,186,6,27,104,235,53,222,142,57,188,11,227,231,97,86,131,171,4,241,66,88,108,184,124,235,138,205,163,115,22,239,158,112,250,165,123,92,222,63,67,30,157,17,46,86,76,55,61,221,217,123,244,139,119,152,115,73,30,23,179,216,126,75,0,179,239,253,209,32,223,252,119,206,219,111,253,241,183,66,125,227,204,68,206,116,103,79,227,59,235,99,18,199,38,76,142,219,205,230,34,60,110,231,92,233,53,110,127,199,99,253,26,215,179,111,192,175,161,120,189,76,27,139,157,166,54,26,81,58,135,209,168,156,36,41,13,189,73,209,59,4,227,106,99,134,176,38,179,131,76,6,162,202,148,3,85,12,0,157,199,164,88,171,81,133,183,43,41,35,207,34,215,140,67,182,162,58,91,144,231,186,137,94,191,255,203,173,167,89,84,91,194,198,151,49,222,93,63,241,80,174,50,215,8,33,185,79,24,51,212,88,179,1,93,127,63,153,237,149,243,117,32,211,24,77,233,103,211,121,212,212,96,176,249,51,27,82,9,165,117,1,237,144,132,84,197,110,53,168,184,123,95,195,107,244,125,64,171,172,218,153,21,45,115,205,72,43,141,24,131,246,25,97,86,42,135,189,18,11,165,50,229,118,192,172,158,23,51,192,85,106,202,249,56,130,16,241,21,104,155,155,28,140,237,169,170,64,85,71,170,90,168,106,161,153,88,170,42,19,85,22,167,145,7,127,222,178,56,49,185,238,172,12,86,87,136,228,151,153,29,122,70,119,54,76,238,84,144,132,126,211,179,122,188,162,59,190,96,241,206,99,186,251,167,116,247,78,184,122,239,132,112,217,98,23,45,155,147,123,244,103,95,162,75,231,100,163,125,50,191,109,94,125,45,153,239,255,169,197,234,251,126,230,189,133,57,184,52,200,101,189,82,103,213,162,59,151,101,58,75,43,117,118,52,189,115,110,101,116,121,124,127,126,197,114,179,222,155,220,105,231,99,122,60,224,50,167,232,107,93,207,182,1,127,166,92,49,173,81,28,38,69,95,114,95,29,243,224,111,201,194,77,78,163,188,136,38,6,135,194,196,245,218,13,6,108,110,61,79,148,34,29,19,179,214,88,206,37,115,14,101,157,98,117,182,70,107,139,24,157,75,16,171,53,215,45,66,6,148,116,64,161,135,240,242,203,24,237,150,132,241,244,237,239,11,177,119,199,126,218,120,149,82,196,152,107,204,123,123,123,84,117,69,74,66,223,117,92,94,206,137,49,22,153,218,29,232,36,91,80,171,212,175,40,196,144,33,100,54,185,247,60,27,238,117,207,107,74,78,172,179,2,73,44,178,55,33,108,235,215,74,107,172,202,82,140,49,38,82,136,184,210,133,100,96,203,152,34,80,34,22,141,78,130,86,96,148,194,36,216,14,130,243,129,62,68,26,87,17,163,160,82,204,104,177,38,171,165,152,44,197,171,235,13,149,131,170,74,52,78,24,53,137,186,201,84,74,227,52,126,46,60,126,115,201,197,253,68,74,14,31,29,214,54,104,107,8,9,154,87,34,71,71,145,163,35,5,65,209,46,22,60,252,227,37,50,95,147,174,150,108,30,157,112,241,214,125,54,143,207,137,103,75,204,194,211,159,30,179,62,125,3,9,167,72,58,35,27,238,238,155,108,94,253,152,184,143,127,122,181,248,240,39,30,183,71,31,188,36,152,57,171,254,138,54,158,199,117,127,177,94,171,11,191,144,139,81,167,175,234,106,182,56,191,119,190,116,213,104,77,72,158,228,210,124,53,23,166,123,185,15,120,192,73,71,200,215,66,233,120,182,13,24,224,193,231,20,221,139,69,27,112,155,168,169,114,69,104,146,104,79,208,69,97,223,146,162,85,201,91,74,154,145,14,239,160,140,3,9,133,77,148,129,149,209,222,8,231,44,218,104,250,117,87,0,35,75,61,202,210,10,89,144,93,240,62,236,8,24,90,231,60,170,172,28,230,22,132,184,132,228,3,147,169,15,1,99,44,77,83,109,59,151,114,167,14,164,20,119,64,212,96,128,233,201,13,161,84,94,104,219,150,241,184,162,26,107,150,212,84,117,77,219,231,65,221,215,235,191,249,88,106,171,184,145,82,202,212,78,178,241,84,182,66,91,131,31,82,3,64,145,69,3,172,117,219,166,126,165,129,8,173,247,168,180,107,115,148,16,179,90,229,208,196,159,138,58,136,206,227,79,147,247,16,20,74,11,78,107,42,173,177,198,160,148,33,244,62,167,0,42,51,189,42,20,164,220,215,107,140,194,170,108,184,182,18,170,218,80,213,14,220,138,166,201,12,171,166,214,212,141,101,115,225,57,125,163,229,242,190,199,216,154,36,22,175,52,189,182,36,87,49,186,107,216,191,43,236,31,64,167,61,97,237,185,120,184,193,159,92,224,31,157,178,121,247,33,171,123,143,232,206,175,240,151,43,70,30,100,113,201,242,221,207,35,225,12,73,167,72,58,222,125,41,40,170,187,47,81,125,252,103,54,171,111,251,153,227,246,224,67,243,182,119,75,90,189,224,161,185,164,211,151,180,238,130,117,59,39,132,43,124,53,247,65,214,46,217,117,215,170,30,53,238,253,198,68,70,38,207,117,157,76,19,29,82,26,229,254,90,214,51,108,192,133,179,116,49,82,236,107,133,93,106,82,165,73,193,16,139,70,172,82,202,152,100,98,39,6,223,90,66,239,0,27,218,141,166,108,107,177,26,99,149,69,43,131,239,186,220,111,109,243,220,35,101,53,198,25,86,167,75,208,138,102,191,41,13,14,161,200,233,228,186,171,210,121,234,95,44,37,166,68,218,54,176,195,46,172,190,190,70,163,49,222,247,180,109,135,181,150,190,239,51,0,150,18,85,85,127,249,143,124,29,48,214,138,16,19,171,205,154,254,56,55,224,103,121,29,133,115,85,238,81,222,214,196,138,161,13,57,175,2,109,13,105,240,196,70,227,99,36,197,128,54,150,170,169,9,73,138,154,134,217,230,190,195,108,1,73,165,217,75,4,73,153,212,162,202,40,152,140,10,103,227,151,24,209,38,123,89,31,21,19,83,163,148,98,189,222,208,88,133,138,217,131,235,148,183,38,93,40,147,162,132,202,129,54,25,32,52,70,112,149,224,106,69,213,228,158,224,81,101,113,141,97,115,25,184,122,39,112,245,48,18,59,67,72,53,129,6,196,176,73,137,253,59,53,119,63,96,24,205,34,66,203,102,21,56,61,77,180,39,247,217,156,92,210,223,59,166,191,127,130,63,185,36,158,175,168,151,61,44,46,104,239,127,129,77,56,41,70,123,198,174,106,145,141,214,126,199,223,239,186,191,253,147,103,253,237,111,187,232,59,89,227,245,146,147,180,96,197,156,182,186,100,227,230,244,118,78,100,65,95,175,17,211,154,177,221,160,165,87,186,234,73,169,67,155,14,39,30,61,9,56,60,137,68,44,138,209,45,194,236,107,47,39,61,195,6,204,14,129,246,87,26,113,249,138,204,37,36,141,17,101,98,178,218,42,29,187,104,32,90,98,239,80,98,131,95,232,220,215,9,233,238,7,129,146,219,6,143,171,26,172,177,104,103,49,165,148,145,218,128,26,85,212,179,154,224,35,193,251,82,103,188,222,105,36,79,24,216,19,58,88,168,107,77,3,249,151,49,154,148,44,206,89,110,221,186,133,247,158,205,166,229,226,242,242,73,99,127,63,22,6,100,2,135,211,134,40,137,222,123,232,251,28,242,219,26,99,45,49,120,6,107,221,233,73,171,109,131,190,179,38,203,254,24,131,117,46,211,59,37,191,47,173,13,102,160,159,170,66,180,144,242,222,99,145,170,149,84,140,55,230,189,178,32,200,42,228,251,173,54,132,152,72,157,39,166,128,164,132,215,154,202,57,102,213,4,233,214,40,171,80,58,79,218,206,81,124,194,24,133,54,80,141,178,200,187,115,96,107,157,115,219,6,92,163,232,86,194,250,29,225,234,254,134,182,51,116,73,225,169,17,215,32,181,102,118,11,166,55,34,179,195,136,181,137,126,211,178,122,188,98,115,53,103,121,124,70,247,224,4,121,239,152,245,249,156,112,181,66,93,181,232,203,75,54,239,125,129,117,9,143,179,209,238,202,63,245,221,151,112,223,245,137,190,253,246,127,112,214,63,255,237,23,125,146,53,107,89,113,28,22,116,106,65,155,230,120,189,100,165,150,180,97,69,167,151,68,217,24,35,189,177,161,179,82,181,209,155,62,98,250,36,226,113,147,142,138,190,40,85,122,44,129,132,167,41,102,60,33,209,32,212,5,127,188,0,190,10,85,202,103,219,128,7,0,203,163,73,90,177,231,13,157,209,152,168,137,90,199,20,117,244,193,16,59,77,12,53,41,85,149,83,213,242,244,1,217,128,21,241,224,22,41,42,8,145,202,88,76,169,31,218,202,225,26,203,230,114,141,72,46,99,204,110,79,241,125,200,181,202,18,161,139,196,34,19,67,161,30,230,50,72,31,119,154,88,79,183,252,1,116,93,14,225,173,109,112,142,109,221,211,185,39,227,167,237,83,182,134,92,188,122,153,242,160,181,217,234,107,105,163,65,76,246,21,42,119,87,109,61,176,86,219,124,85,105,147,203,100,169,180,251,153,220,41,101,11,104,213,7,143,173,234,109,237,120,200,125,7,194,139,68,5,49,97,69,50,39,51,37,84,210,24,201,111,88,39,77,242,158,218,56,108,101,56,152,106,246,246,224,226,2,206,142,231,152,90,33,90,48,42,162,181,69,105,65,219,60,154,197,84,138,202,41,234,70,112,35,69,221,104,170,70,17,250,196,249,195,200,249,163,72,187,18,244,185,71,57,135,170,27,188,181,200,4,246,159,23,110,61,151,65,172,208,10,221,197,154,213,229,156,246,248,152,213,253,135,172,31,31,179,126,116,74,184,90,209,156,122,212,114,69,255,232,139,196,205,131,98,180,167,92,55,90,51,221,167,249,158,31,245,221,71,127,112,222,125,244,147,199,157,87,107,54,105,201,3,191,36,232,165,67,45,42,212,114,181,86,75,214,118,141,152,150,16,54,212,244,216,208,210,73,7,186,79,202,245,73,73,223,185,166,39,208,7,179,29,211,18,208,120,124,153,85,172,137,164,237,0,211,72,32,177,70,120,5,225,121,132,95,253,171,155,200,51,106,192,162,248,12,138,7,159,83,180,207,43,26,52,81,105,124,65,144,162,210,104,101,72,94,35,65,227,147,211,146,170,20,67,53,106,226,248,170,187,100,107,17,251,183,73,65,192,39,106,173,80,74,112,181,197,141,42,170,81,205,213,253,51,36,38,188,36,70,123,163,44,206,22,2,41,100,213,13,24,8,18,20,14,196,147,97,243,151,45,39,201,78,123,106,185,92,178,217,108,74,216,155,182,205,13,195,36,135,173,201,95,35,119,12,161,177,144,101,104,82,74,91,45,45,20,132,152,219,23,7,5,144,28,226,15,69,210,124,220,224,35,198,228,28,63,134,188,9,57,85,231,210,211,160,60,169,20,201,15,222,119,8,161,51,66,110,98,110,77,84,41,162,146,201,77,14,9,84,74,24,20,38,89,136,137,16,61,212,99,70,22,66,5,43,163,72,190,163,154,168,92,151,117,96,42,157,71,170,52,26,87,43,92,147,239,139,61,92,62,10,204,31,67,191,41,165,53,1,43,16,111,30,162,27,225,224,57,197,209,93,176,149,208,174,3,237,101,203,252,98,193,230,228,140,238,209,9,221,195,135,108,30,62,34,156,207,209,243,13,234,106,67,255,248,77,54,221,35,36,156,0,103,72,218,108,191,27,51,221,99,244,61,63,18,194,55,255,208,188,125,237,223,57,94,181,105,131,215,75,206,89,146,244,66,175,237,34,205,211,98,127,25,86,201,87,235,20,105,181,216,46,185,170,167,182,29,22,143,215,61,162,59,106,66,76,117,7,248,32,120,34,30,87,102,43,13,115,149,178,231,141,72,249,61,24,175,37,210,147,168,136,101,126,210,87,181,158,81,3,46,235,98,164,104,172,206,163,152,187,204,188,72,209,20,148,70,35,98,145,104,49,222,17,186,26,82,53,82,126,122,197,10,128,230,99,223,149,37,122,147,206,57,28,66,8,17,235,28,182,169,48,141,101,115,182,44,23,117,162,153,86,204,47,87,132,62,208,117,105,139,246,186,146,3,39,178,92,76,148,152,197,223,174,121,221,167,127,59,87,109,135,126,173,55,107,92,136,57,124,53,150,20,227,181,124,245,154,209,14,127,20,175,154,6,82,134,201,98,120,202,216,12,188,171,98,208,122,40,146,170,45,197,49,31,66,209,123,79,85,85,121,130,161,8,33,9,201,247,88,42,108,201,161,183,154,209,3,213,180,252,72,18,140,8,196,152,207,221,54,221,66,14,130,0,0,32,0,73,68,65,84,151,5,29,74,119,112,204,207,215,49,50,63,93,208,206,13,198,40,70,181,166,170,44,50,245,84,181,206,70,219,40,170,70,225,154,12,148,45,207,133,119,255,184,103,125,149,155,61,242,84,138,140,220,27,11,7,119,13,163,151,2,85,19,233,87,158,245,101,79,127,181,161,59,189,162,125,116,194,234,209,49,254,241,25,237,233,37,92,46,48,151,75,194,229,125,186,203,183,145,112,6,156,34,105,245,196,165,52,253,158,31,137,234,187,255,225,188,125,237,147,199,157,103,19,90,89,114,63,44,193,45,217,216,5,75,191,32,170,101,234,236,154,94,181,186,63,234,140,25,117,126,15,95,69,124,219,111,60,193,120,163,76,31,49,121,8,154,208,179,19,118,223,141,96,113,68,218,226,109,13,9,69,32,22,97,247,41,137,64,218,26,239,5,41,143,89,249,234,242,225,103,215,128,135,252,247,252,60,27,113,116,154,24,109,113,55,134,216,27,146,24,172,182,122,35,85,234,55,13,146,42,233,86,13,197,128,213,243,31,194,42,85,38,220,23,195,178,10,156,198,54,14,215,56,230,247,46,49,218,48,62,24,99,156,161,223,116,116,109,135,207,184,97,105,32,26,106,191,130,34,109,145,102,20,59,137,208,235,167,191,120,79,235,28,90,105,166,118,134,136,96,141,205,228,140,39,8,24,67,61,120,103,184,144,55,11,180,194,154,170,140,180,45,116,79,201,199,205,185,239,224,197,85,49,98,181,37,107,24,107,243,182,239,3,205,104,196,254,104,196,166,109,105,187,30,237,178,241,73,42,249,59,187,218,115,42,175,161,67,185,95,36,147,44,144,108,192,8,70,65,136,61,163,166,97,210,140,48,6,82,234,177,14,170,198,98,27,133,158,10,213,72,83,53,154,36,176,58,79,220,123,189,103,125,85,232,38,146,39,133,105,20,214,194,193,115,154,189,155,138,241,129,162,95,69,218,176,102,254,238,146,246,244,146,245,131,19,150,239,222,167,123,116,138,63,191,34,156,45,176,203,142,112,254,128,254,234,29,36,156,146,61,237,147,100,249,233,223,254,100,226,91,254,222,114,243,209,31,59,94,171,189,165,233,227,58,61,138,75,86,178,144,200,194,244,213,50,174,245,146,86,173,71,238,112,237,100,212,245,155,69,143,213,126,115,48,234,253,18,31,23,101,2,112,61,242,8,62,14,243,145,4,143,33,64,49,220,80,126,91,2,235,50,43,73,72,244,197,227,238,23,195,93,147,88,145,120,141,180,157,92,248,25,228,171,201,127,225,89,53,224,207,148,128,245,117,155,213,117,69,25,188,214,24,209,36,109,177,201,144,148,53,74,233,74,89,227,117,170,82,223,53,72,168,251,245,133,25,152,50,234,249,151,177,162,232,67,128,148,176,90,227,234,42,231,192,181,161,95,118,72,159,48,206,112,248,226,17,190,11,248,206,211,183,45,164,38,123,211,148,7,199,14,186,204,186,212,86,7,208,106,59,145,97,0,187,200,118,221,247,125,190,78,147,96,10,10,61,26,141,8,41,81,215,85,209,117,190,70,109,28,214,118,179,216,25,117,148,93,87,144,209,142,170,170,241,49,128,210,40,109,203,43,14,239,67,64,105,70,227,17,203,213,138,16,3,55,110,221,226,206,93,203,249,197,136,251,15,31,209,247,61,90,153,109,205,121,219,216,81,194,103,73,187,112,54,35,206,96,148,228,102,31,149,189,230,254,108,138,86,137,148,214,152,74,49,155,213,84,13,232,58,81,143,52,52,134,197,89,228,254,23,118,70,43,41,203,39,12,20,206,163,23,12,7,207,105,38,135,208,175,34,221,162,231,236,205,142,246,124,195,201,241,27,116,143,207,241,15,78,240,199,103,196,171,53,118,217,225,31,190,77,127,245,30,93,58,47,8,242,229,19,151,206,248,155,191,63,217,239,251,244,106,241,218,143,29,47,245,116,197,42,45,153,199,21,109,88,164,158,5,157,94,18,212,146,78,86,49,218,13,173,107,93,178,189,149,228,123,122,159,76,229,81,198,247,30,79,93,6,154,233,98,180,79,15,55,83,196,98,186,121,244,40,68,150,4,70,197,88,71,132,247,141,28,125,133,60,114,20,132,95,29,242,222,175,126,184,217,51,104,192,162,120,29,197,225,231,20,87,47,106,246,209,172,149,161,246,54,83,124,50,128,69,157,116,52,189,219,92,205,157,94,93,142,157,132,166,118,177,222,28,63,84,121,12,165,98,115,247,195,236,69,77,189,238,160,179,36,61,6,155,112,77,75,51,9,44,142,31,227,109,79,180,13,7,183,103,132,141,39,245,6,97,15,49,133,26,72,202,234,29,41,151,99,172,177,40,163,232,131,207,173,126,38,131,93,106,104,40,216,202,111,100,50,190,46,148,198,113,93,161,208,52,38,247,169,218,148,187,138,144,194,116,26,26,9,36,119,33,25,29,8,169,244,253,90,131,118,6,101,71,248,20,9,125,139,182,6,81,66,194,103,134,169,86,59,49,118,149,104,23,145,218,142,105,92,98,113,121,198,252,210,131,241,140,109,36,250,14,173,20,86,12,86,213,232,100,33,58,164,207,67,203,136,10,35,83,208,217,219,26,29,177,74,208,14,112,9,227,192,140,13,166,2,215,56,154,145,198,214,9,107,132,203,83,207,233,159,109,232,222,156,231,98,193,104,68,175,32,88,139,153,52,236,223,18,14,110,68,110,221,170,136,93,79,90,108,88,188,185,194,159,204,89,63,58,101,126,239,49,203,227,43,154,135,239,34,139,30,86,145,120,113,66,123,246,38,164,161,86,123,241,196,21,83,127,240,53,105,254,206,207,108,174,62,252,195,199,235,217,75,11,58,89,50,143,107,214,237,156,141,44,89,235,57,94,173,9,102,69,167,215,68,211,98,170,30,101,61,74,123,111,116,239,133,136,214,30,87,245,80,0,168,84,242,216,80,140,86,23,163,237,75,110,11,145,174,120,219,64,66,17,169,174,133,201,19,132,123,68,86,5,168,122,125,11,86,125,205,134,59,172,103,208,128,203,234,111,24,154,75,13,251,6,54,6,140,201,9,159,54,40,239,32,58,250,104,137,93,77,232,43,43,161,217,107,226,225,131,249,3,64,161,198,123,168,59,47,163,218,142,228,61,74,73,174,223,90,69,53,110,112,147,154,249,159,220,103,144,227,153,28,77,185,58,95,19,251,152,231,227,110,39,43,60,85,227,45,225,177,179,142,173,74,165,200,86,90,53,139,169,27,98,84,37,34,206,134,25,201,186,222,73,193,48,82,48,149,199,167,194,88,218,54,21,144,121,200,106,144,171,81,138,40,108,117,173,50,189,50,87,211,6,39,158,40,148,197,65,237,194,230,249,111,90,101,170,184,210,14,19,45,164,128,73,85,102,74,73,62,165,34,58,139,183,3,32,40,35,104,213,101,169,87,173,112,46,215,203,109,165,112,117,102,171,153,74,209,140,53,213,72,115,121,146,56,126,219,99,194,152,217,164,102,34,83,246,190,225,22,203,141,224,67,224,238,221,196,244,40,49,219,87,72,136,248,181,231,234,205,19,252,249,21,237,227,115,214,247,31,179,184,127,66,123,118,65,88,245,232,121,203,252,241,3,218,139,183,174,17,44,158,108,28,104,94,253,24,245,199,127,106,179,254,200,191,125,218,77,95,186,234,58,89,179,73,75,115,204,220,73,189,108,207,86,197,219,218,21,222,116,36,189,65,76,135,174,123,140,206,232,176,104,143,54,30,196,227,234,39,7,124,75,1,162,134,223,215,7,124,135,172,83,79,75,32,146,104,72,184,47,51,224,123,31,225,94,49,90,224,175,211,112,135,245,140,25,240,22,125,214,92,220,201,225,51,173,161,49,37,132,142,134,164,45,90,12,90,44,41,57,136,78,197,110,28,98,108,172,248,201,16,62,155,143,126,39,90,4,213,9,42,196,140,162,58,141,173,12,245,108,140,118,150,211,55,30,145,92,179,85,165,236,55,61,190,207,252,220,76,135,84,88,5,169,52,251,111,153,86,217,226,118,84,198,152,182,157,77,122,80,192,164,32,195,178,203,75,83,201,113,53,42,115,140,75,248,44,80,74,84,101,242,32,37,255,182,102,219,66,24,83,204,34,26,206,98,141,33,12,93,66,146,35,95,45,144,195,84,50,0,102,250,194,210,202,205,240,58,56,16,131,14,146,13,90,40,200,114,174,213,234,156,240,162,108,153,236,96,59,156,53,52,149,161,170,52,77,173,169,106,139,107,52,110,100,88,93,40,78,190,148,56,185,23,88,111,90,80,158,87,62,48,230,198,62,220,62,130,205,4,102,17,140,77,24,37,164,54,177,126,184,166,59,187,98,253,232,148,205,195,71,172,31,157,178,62,62,163,63,95,96,230,45,44,23,180,15,254,180,80,25,191,12,43,234,206,75,184,239,248,68,223,126,239,207,29,183,135,175,92,181,29,43,54,255,111,123,111,246,108,217,121,158,247,253,190,105,173,181,247,62,115,143,104,0,196,200,17,4,1,17,36,56,136,147,76,82,164,40,137,212,96,69,138,227,216,85,44,87,124,145,184,42,229,139,84,170,146,84,41,183,185,76,254,133,220,36,185,202,92,150,29,219,137,45,89,180,45,155,18,5,138,2,9,162,129,158,206,176,207,158,214,188,190,41,23,107,237,211,7,77,180,68,64,0,1,82,251,169,58,181,187,79,247,89,231,0,125,158,243,126,223,251,60,239,243,198,50,93,154,162,157,85,57,45,185,175,69,225,219,182,36,140,234,51,210,6,227,80,186,67,13,164,53,202,65,180,168,212,158,29,133,215,247,90,49,84,218,222,217,225,206,26,82,122,144,129,138,225,168,12,129,209,64,218,132,72,71,160,33,220,191,218,194,91,73,220,53,222,101,4,166,111,94,49,18,44,77,127,124,94,135,12,41,175,207,238,191,132,158,196,182,213,180,205,72,248,118,236,98,204,234,114,150,244,199,103,136,143,127,132,20,209,159,116,4,40,163,200,50,201,104,55,35,221,29,147,223,158,17,165,34,10,193,229,247,63,64,83,182,216,198,245,21,216,139,126,184,92,137,51,61,22,122,191,241,90,113,193,5,228,160,175,10,163,206,26,90,61,249,34,235,160,168,222,79,54,220,101,233,147,68,189,24,142,206,231,34,89,123,93,119,93,129,33,170,187,67,10,97,253,57,69,255,117,69,209,167,77,16,251,13,10,210,115,174,155,61,200,92,209,129,247,32,12,49,232,222,230,24,12,17,133,112,253,253,90,17,135,5,183,30,165,28,106,216,93,100,18,129,159,68,50,163,200,50,77,150,26,178,172,207,139,154,127,63,178,120,53,64,52,4,37,49,34,178,59,82,120,81,83,134,57,185,78,57,184,146,34,157,64,230,45,205,180,166,157,231,216,233,130,234,246,33,249,171,119,104,167,51,220,108,65,92,214,168,34,167,189,253,34,241,204,21,53,229,53,174,168,43,15,147,126,236,23,187,238,99,191,62,235,174,62,61,11,86,85,126,101,11,142,125,78,45,10,42,242,182,110,115,26,83,237,239,95,170,189,142,205,106,85,181,160,59,148,238,144,56,244,185,74,43,210,190,241,180,190,215,174,37,31,57,28,151,229,64,212,6,143,24,142,198,22,55,108,60,10,67,101,189,219,73,110,8,140,238,33,237,239,158,85,92,222,14,210,158,199,187,139,192,235,230,213,245,177,164,29,142,207,42,72,188,213,32,53,49,104,188,53,168,168,104,59,67,180,41,77,57,113,77,59,217,26,187,237,217,159,253,185,232,227,62,5,124,248,83,36,33,18,187,174,55,32,136,64,58,78,25,237,142,49,147,148,163,63,187,213,187,176,162,100,231,129,29,138,89,221,175,174,116,189,221,49,210,87,39,228,176,151,74,174,183,37,136,33,69,178,95,185,114,198,207,56,156,101,215,109,44,179,254,131,115,82,211,208,199,102,93,49,229,48,99,60,252,169,84,235,88,55,16,186,223,84,31,214,147,78,231,246,5,175,119,45,245,251,204,206,198,4,134,185,221,254,105,99,219,17,101,191,119,218,70,129,11,18,161,221,80,113,251,163,187,81,144,40,73,42,5,73,2,137,142,164,41,36,99,137,223,50,164,153,194,55,176,188,233,184,245,170,197,46,13,50,106,4,2,23,61,94,121,244,118,199,193,19,138,75,143,106,66,12,52,229,138,211,91,14,191,132,249,173,35,170,195,83,234,59,83,154,59,199,184,249,18,191,172,49,101,73,119,231,7,248,250,214,235,186,162,212,100,135,236,227,95,118,241,243,223,156,85,87,158,58,237,26,42,234,80,114,219,23,174,233,114,227,211,149,93,197,146,90,20,120,93,131,174,113,186,157,159,180,22,173,45,58,235,144,210,18,148,67,69,139,76,251,163,241,154,164,113,232,44,203,33,41,47,14,230,138,14,79,24,228,158,53,105,195,64,218,123,239,181,251,247,144,22,222,150,35,242,95,134,119,17,129,207,53,175,78,175,73,212,112,124,246,66,247,221,162,208,147,88,74,141,232,82,84,48,148,54,161,109,198,68,59,222,75,217,47,218,254,200,165,47,93,67,238,93,70,22,13,174,110,192,10,84,170,80,169,194,76,82,164,82,156,188,120,132,55,134,173,203,187,253,240,65,101,113,141,59,75,171,28,190,162,161,154,202,179,253,72,235,153,95,169,116,127,84,13,189,134,140,160,31,84,215,186,127,222,176,4,108,125,60,134,94,178,89,31,205,131,4,45,212,48,69,20,135,51,89,63,183,27,98,68,11,217,71,174,6,119,46,41,146,94,167,117,158,68,234,51,242,202,179,25,229,193,177,133,96,171,146,72,45,240,210,211,138,62,133,34,138,0,169,27,44,153,138,212,72,70,137,34,75,4,105,98,122,242,102,146,208,6,14,111,182,188,122,187,197,22,32,67,191,156,62,232,254,25,201,86,228,194,123,20,251,15,68,76,38,177,85,67,113,152,211,173,122,43,227,234,248,148,234,165,67,236,162,198,45,11,220,113,142,170,26,218,163,31,18,218,67,218,51,131,197,221,49,28,53,217,33,123,254,43,46,60,253,139,121,253,193,95,57,170,90,87,201,46,150,28,185,156,34,230,120,89,78,24,231,109,21,10,187,236,234,201,246,165,166,236,170,22,145,180,104,105,179,253,109,27,60,182,171,58,123,70,90,51,52,162,238,118,140,239,234,181,235,14,50,3,89,197,112,20,17,131,67,234,126,164,253,9,220,107,223,8,222,69,4,166,183,78,94,191,160,200,180,100,20,20,117,84,24,52,193,27,188,52,136,160,148,115,218,139,168,112,93,66,91,77,232,170,45,41,227,168,157,221,217,90,207,108,234,103,62,131,10,17,156,37,180,29,82,26,76,154,146,142,53,201,36,97,117,123,142,23,253,218,205,43,239,191,74,91,116,216,218,246,67,233,1,220,64,24,193,112,4,30,166,119,226,186,10,175,115,147,7,127,116,164,39,77,127,220,237,171,243,221,104,106,193,217,114,222,179,231,174,221,92,195,223,99,248,153,33,250,236,173,16,2,46,12,63,16,148,6,17,207,18,66,84,96,200,132,234,3,207,85,92,123,151,251,92,63,209,127,121,36,193,32,99,111,64,73,20,196,196,33,18,143,72,61,194,8,210,145,33,27,37,36,73,63,24,31,157,160,56,246,188,250,175,42,218,2,162,84,32,147,62,204,64,11,226,72,176,247,32,92,126,84,162,147,136,109,91,234,162,102,117,39,167,155,158,82,220,188,77,125,120,76,115,180,160,94,149,196,89,1,139,134,246,240,213,222,202,120,70,218,234,236,159,91,77,118,24,63,255,21,239,63,252,165,188,250,208,55,142,202,206,84,88,85,114,162,202,88,30,229,190,150,43,170,88,72,145,149,218,141,170,50,47,107,68,210,162,118,186,178,12,54,219,187,212,173,73,219,20,173,35,77,45,105,114,87,250,185,159,236,195,208,73,246,132,129,228,225,140,212,187,4,114,226,79,186,25,245,102,241,46,33,240,57,235,100,121,69,144,44,37,245,150,196,215,67,197,149,10,130,74,58,155,120,19,13,222,38,180,109,70,219,77,176,221,36,81,110,123,117,244,67,1,179,254,105,31,120,30,21,2,210,13,249,87,70,49,158,36,164,59,25,102,146,241,202,191,250,33,17,141,151,154,131,247,28,176,60,202,233,26,135,119,17,239,35,81,72,136,174,191,95,70,49,36,177,14,247,207,193,191,225,188,239,135,217,207,154,79,189,148,68,232,87,139,68,173,207,26,86,119,39,134,250,70,216,221,247,201,126,101,201,96,150,96,32,189,32,18,2,24,41,80,90,19,125,24,134,44,250,53,40,74,42,132,15,131,177,162,39,173,162,39,174,18,2,33,33,140,50,68,34,208,6,116,22,49,73,64,102,2,157,74,84,42,49,227,222,147,93,156,118,220,254,179,138,252,20,156,215,248,32,240,70,49,17,6,153,4,14,30,145,108,95,17,140,14,160,171,45,117,81,210,230,37,205,116,65,115,116,202,234,213,91,184,195,19,236,233,146,48,111,16,243,18,187,56,198,174,214,6,139,217,143,26,44,62,254,139,65,62,253,197,162,252,208,47,29,23,122,191,136,157,41,57,17,5,164,57,181,44,241,89,206,52,43,104,68,41,165,105,8,170,233,108,236,84,182,99,149,74,187,174,245,78,137,196,54,69,107,73,83,75,146,188,86,171,245,56,12,14,134,202,234,7,242,158,151,125,214,147,65,175,215,65,30,157,35,237,163,247,146,22,222,13,196,93,227,93,66,96,6,231,213,5,53,52,175,52,105,171,9,74,97,165,70,123,131,144,6,41,181,244,93,226,131,75,240,237,136,42,159,16,237,228,32,117,23,111,175,94,5,58,196,104,27,245,248,135,145,157,163,45,106,164,146,100,89,95,121,179,237,148,208,57,230,183,23,136,201,152,43,79,94,165,107,61,117,105,105,106,75,85,119,180,22,130,210,100,227,172,39,34,2,61,164,249,200,161,233,28,135,187,174,84,10,169,21,106,176,51,174,33,6,82,245,33,0,2,163,13,90,246,193,120,222,245,139,176,133,31,136,43,250,88,159,126,80,65,224,156,195,15,63,28,172,239,250,93,195,131,161,194,8,137,244,17,225,220,208,45,139,40,169,208,74,34,99,68,41,80,195,80,188,79,12,217,86,66,150,9,76,26,48,38,160,147,222,170,152,223,46,153,190,176,196,54,138,101,109,233,84,130,154,236,178,106,60,141,11,60,241,225,61,46,236,193,246,174,196,54,22,155,55,204,95,202,233,102,75,138,59,83,202,195,99,234,195,83,236,233,18,191,168,136,167,57,126,118,136,91,189,10,97,62,52,163,94,155,96,177,245,137,175,4,249,244,231,171,230,131,191,122,212,170,157,146,54,22,178,20,165,207,67,142,107,11,58,181,34,204,42,188,46,137,178,102,213,107,181,33,104,11,210,162,100,231,61,206,7,28,201,168,243,96,145,234,245,181,90,53,84,216,181,236,211,224,201,238,35,251,236,15,164,109,8,236,18,126,26,72,123,30,239,2,2,223,35,29,93,202,21,221,150,162,18,138,113,103,144,209,224,165,81,177,49,136,104,176,214,208,117,9,222,143,176,237,150,136,97,210,45,15,183,214,213,87,253,220,231,80,81,225,187,6,25,2,194,24,244,200,144,237,36,100,59,99,14,95,184,133,208,6,235,34,87,63,120,149,42,111,105,43,139,119,253,186,20,149,232,62,177,98,112,67,121,223,235,194,66,246,233,141,42,209,195,238,35,207,93,11,226,250,63,101,253,18,209,114,29,140,41,192,122,188,140,103,51,181,70,246,141,48,185,30,136,136,253,152,94,4,84,20,8,161,144,107,187,244,176,28,76,132,254,160,222,71,207,244,43,52,53,10,99,250,5,215,82,64,146,244,18,143,214,18,177,59,34,75,251,160,55,37,3,197,73,75,117,189,37,191,221,246,186,177,208,68,165,241,6,26,239,217,63,104,249,192,3,91,236,30,24,218,166,163,173,27,142,95,109,176,167,43,236,201,140,230,230,17,213,205,67,186,217,18,63,47,137,203,6,55,59,164,155,95,63,103,176,120,173,43,42,123,236,131,164,159,254,141,186,125,254,111,29,85,98,59,23,141,44,41,69,161,26,157,187,202,23,212,228,180,174,196,134,2,65,141,50,45,49,105,73,181,69,203,190,209,244,102,181,218,62,63,222,159,145,246,126,178,207,154,180,235,127,186,159,2,210,158,199,59,76,224,129,188,231,165,163,139,65,145,182,154,22,131,87,26,33,13,34,24,101,165,145,177,51,81,132,132,232,70,20,139,109,229,186,237,173,177,221,95,125,255,165,179,227,179,248,252,111,160,133,198,54,150,24,37,38,209,100,91,41,163,157,17,201,216,48,253,238,33,66,43,212,206,136,116,59,99,117,99,65,83,59,156,13,72,169,73,76,74,23,37,46,244,41,18,8,137,54,253,113,55,72,129,24,182,30,174,243,164,162,144,195,241,26,34,131,209,34,10,146,225,232,221,111,185,15,4,92,127,212,213,138,4,141,11,225,46,129,135,129,247,126,237,75,68,11,65,180,67,210,199,186,179,28,251,204,40,163,21,70,73,140,238,171,118,50,232,180,218,72,178,145,34,25,27,76,42,241,90,80,44,44,119,94,177,76,111,217,225,222,45,137,178,95,220,230,108,203,149,135,50,30,187,182,199,246,190,162,107,58,108,213,80,221,42,168,102,37,213,244,136,242,246,148,250,198,33,238,104,134,155,149,136,101,137,159,30,211,45,174,159,171,180,83,206,27,44,146,199,62,68,242,217,223,172,237,123,191,56,13,123,143,45,171,58,148,97,174,74,221,37,57,118,146,119,133,207,125,165,74,156,170,8,212,136,166,70,184,22,111,156,74,116,167,34,22,39,109,167,239,209,106,251,225,129,187,119,217,31,71,171,157,220,135,180,231,101,159,53,105,225,39,34,251,188,213,120,231,43,112,223,121,150,204,175,40,46,229,138,48,81,84,65,145,69,141,117,6,129,70,73,3,46,49,132,180,182,93,130,45,198,116,245,182,119,205,246,150,42,47,45,87,47,3,14,121,241,26,217,195,31,128,202,65,136,72,173,209,227,148,108,39,101,180,55,226,228,207,110,19,68,36,10,197,163,31,123,132,186,176,212,165,163,169,108,159,198,40,77,223,93,30,76,254,32,208,67,10,163,84,195,34,176,115,247,221,187,99,134,98,240,13,247,157,103,164,64,133,94,243,141,244,141,176,224,122,127,177,142,17,37,4,209,199,94,71,246,156,141,24,178,14,54,87,146,232,226,224,139,238,127,40,36,74,160,180,194,36,138,36,211,36,137,66,37,138,52,83,36,195,155,201,20,213,194,114,124,189,228,240,229,138,40,20,12,81,58,77,132,214,57,182,47,36,60,244,232,152,171,87,15,240,157,163,93,150,44,95,173,113,243,146,230,104,206,242,214,49,249,225,20,123,116,130,203,27,226,162,130,197,41,221,201,75,231,12,22,231,93,81,2,115,249,33,70,95,249,102,211,126,240,43,179,118,231,177,121,215,80,77,154,182,16,119,92,30,155,88,198,86,174,186,138,194,117,190,132,173,26,41,91,2,45,138,14,149,117,136,210,129,180,62,40,235,99,180,144,222,149,121,94,107,176,248,169,212,106,223,78,188,131,4,30,170,47,67,231,121,93,125,93,171,73,208,120,161,251,197,60,33,73,154,38,149,10,35,156,77,100,180,35,217,180,219,209,181,59,90,134,237,166,58,73,215,213,87,126,226,171,132,214,209,54,14,141,232,143,206,219,25,217,238,24,51,54,220,250,163,87,8,17,244,78,202,197,135,15,56,61,172,104,27,112,78,224,29,200,36,246,131,3,81,144,26,67,240,253,57,77,132,62,7,69,168,62,37,67,38,26,231,252,153,209,162,151,116,99,31,144,62,220,133,101,232,147,67,21,61,169,131,148,132,193,17,38,173,67,58,63,4,191,13,157,237,193,253,165,180,66,197,62,243,91,169,94,10,82,186,15,114,75,50,67,50,234,115,187,146,145,38,25,105,76,42,41,230,29,199,175,148,204,110,213,4,215,75,75,219,105,127,66,168,130,197,76,58,30,122,100,155,253,75,91,8,73,111,101,188,177,192,46,42,234,91,199,148,183,142,168,239,76,177,179,18,187,172,104,143,23,152,98,65,123,244,210,57,131,197,17,247,146,54,249,232,151,172,123,238,215,230,237,213,159,155,218,206,84,162,22,69,114,40,139,172,30,229,186,41,243,164,150,69,108,85,85,4,89,25,47,155,241,246,78,187,242,195,220,236,152,14,63,84,214,144,57,162,186,191,86,187,118,74,253,148,106,181,111,39,222,217,10,124,94,247,93,87,95,31,52,68,141,180,9,144,244,71,104,111,76,180,41,193,165,184,102,18,108,185,141,171,183,175,110,219,171,55,190,245,111,88,187,175,204,199,191,132,137,253,170,12,45,5,42,75,72,183,71,140,246,71,76,95,188,131,109,90,130,78,120,248,233,135,134,234,235,177,173,239,83,43,17,184,208,155,36,92,20,72,59,152,57,132,236,109,216,195,244,145,245,14,217,70,132,209,235,62,82,191,103,56,174,59,200,189,255,185,95,65,223,119,132,165,82,200,8,33,10,162,11,8,250,57,90,33,227,224,109,238,45,155,200,254,110,171,148,32,27,105,164,145,152,172,183,47,234,145,38,25,25,146,177,38,201,20,206,70,102,183,43,142,94,46,176,174,15,8,8,0,114,144,147,38,158,139,143,110,177,125,49,33,6,143,173,45,97,58,167,158,173,200,239,156,208,28,205,201,111,30,209,28,205,113,69,67,152,22,196,229,10,123,212,87,218,46,156,12,6,139,117,132,177,192,92,126,144,228,99,95,178,237,199,127,125,97,175,61,59,181,45,21,149,44,153,234,124,226,199,185,89,202,66,214,93,49,169,67,209,185,164,113,102,82,71,231,187,24,147,214,105,105,189,44,123,43,99,80,22,27,45,49,29,28,81,234,110,165,141,248,159,53,173,246,237,196,59,68,224,123,170,111,166,37,93,166,73,59,67,18,53,81,24,130,210,32,13,73,151,40,27,19,233,67,26,92,59,138,77,177,69,91,238,36,82,110,119,197,225,46,76,1,72,126,238,179,108,93,184,130,176,2,17,21,194,40,210,173,148,108,111,68,50,73,184,241,111,95,65,68,129,201,18,246,223,179,199,124,218,81,149,150,170,118,4,215,87,194,16,251,173,130,81,104,92,104,250,35,174,82,168,196,32,132,196,197,97,209,87,244,253,156,49,195,20,94,184,27,128,215,59,166,34,209,122,68,236,191,253,213,208,20,19,67,82,71,63,39,209,147,88,233,62,178,85,39,26,169,68,95,113,141,100,91,27,204,216,144,78,12,122,164,49,35,133,235,2,167,55,75,230,119,42,186,58,244,230,52,49,172,42,85,138,241,88,177,123,57,229,194,181,17,49,177,184,218,178,56,154,98,231,5,237,241,156,230,240,148,250,112,138,155,229,148,211,37,238,184,130,162,162,59,121,133,208,220,57,139,82,141,225,238,226,0,57,222,38,251,248,151,125,124,254,27,171,250,137,207,31,217,38,86,116,161,228,80,20,248,164,192,153,156,153,205,203,178,173,182,90,89,141,125,172,42,105,187,83,46,119,248,104,81,190,35,147,22,167,44,54,186,225,120,252,215,74,171,125,59,241,206,85,224,23,16,240,93,73,179,47,217,89,202,179,206,179,138,26,41,18,52,9,222,27,172,79,163,12,169,176,46,141,161,29,99,139,29,172,221,61,216,105,174,156,126,247,5,250,245,22,48,250,236,175,50,246,158,233,162,68,171,17,38,211,100,59,25,227,189,49,71,223,59,34,52,14,41,5,143,127,254,125,116,181,163,94,89,234,202,210,118,30,67,191,52,204,13,178,143,80,130,76,167,195,66,175,97,163,129,236,131,207,245,48,112,224,92,223,100,90,47,245,142,131,47,249,108,93,232,176,50,100,125,191,85,66,14,75,201,64,171,97,235,160,4,157,40,178,180,207,231,50,169,66,37,2,157,72,198,89,74,58,54,68,96,126,61,103,113,179,164,42,125,159,142,41,250,212,73,33,250,140,169,139,143,109,113,240,192,24,109,4,117,101,105,86,45,139,122,65,113,52,167,59,154,209,29,206,232,110,30,225,142,79,113,199,21,98,85,225,230,183,240,205,125,98,103,38,219,36,31,255,178,119,31,254,27,133,125,230,235,135,85,77,69,109,75,238,132,130,86,229,212,166,32,140,115,86,162,164,53,149,148,59,13,182,105,18,37,187,122,71,90,91,249,142,244,92,199,56,12,227,121,252,245,212,106,223,78,188,3,4,142,130,223,66,158,53,174,196,74,209,77,244,89,231,89,98,8,66,19,100,162,164,203,146,72,146,25,159,116,141,29,153,46,223,105,154,110,15,89,237,224,14,47,218,213,15,1,143,184,240,0,229,135,63,71,30,82,148,159,241,152,21,196,139,129,189,131,20,157,192,247,255,240,207,145,73,194,120,127,139,237,7,247,152,223,92,225,243,146,144,55,96,161,75,83,234,84,227,140,238,207,192,82,145,52,55,209,198,16,60,216,206,35,69,66,162,12,168,20,37,21,214,6,100,236,135,233,99,236,167,142,214,1,0,16,144,35,133,240,2,239,29,49,58,66,4,37,52,90,75,18,37,208,42,50,74,77,127,159,205,52,217,164,191,215,234,76,19,124,96,57,91,113,243,187,75,150,139,26,39,33,166,41,234,82,74,52,134,40,35,87,31,222,99,103,219,176,187,157,210,150,150,106,190,162,91,52,116,139,138,252,112,193,133,239,255,191,116,199,43,218,69,75,183,180,184,133,163,203,167,184,213,141,215,117,69,1,140,62,254,229,16,63,249,245,162,249,240,55,14,235,202,215,52,161,224,166,45,105,98,78,69,78,35,115,172,175,232,40,113,77,77,16,45,42,116,33,120,139,146,118,134,232,40,163,67,24,135,167,159,171,93,87,217,191,198,90,237,219,137,159,48,129,95,167,113,53,78,21,89,171,177,35,141,9,26,63,84,95,68,226,189,74,181,176,89,108,253,40,51,229,100,213,149,219,206,22,187,151,15,252,149,211,111,255,177,92,87,95,253,203,127,7,209,90,98,217,178,147,106,72,29,91,23,119,216,186,184,195,205,63,185,121,54,100,255,158,231,222,67,57,171,40,23,117,127,4,69,34,84,111,99,10,49,244,203,207,36,224,29,93,148,120,39,135,12,172,62,87,58,160,193,69,188,132,24,21,97,208,103,123,143,115,223,69,238,19,39,64,150,14,161,4,169,73,122,217,42,85,72,35,72,140,68,37,130,209,200,144,102,253,148,79,50,234,239,200,205,81,197,209,159,31,82,159,84,156,36,26,153,24,100,182,131,48,18,82,193,193,67,19,246,47,141,217,217,75,232,202,150,110,149,51,189,125,7,55,205,177,39,43,202,219,51,230,55,167,116,211,21,179,249,29,154,133,195,206,167,184,226,230,125,99,103,198,207,127,41,198,15,127,161,170,63,244,181,227,58,217,207,105,41,57,234,10,138,216,207,211,54,49,167,147,37,157,44,113,186,31,207,19,73,139,212,22,185,209,106,223,105,252,100,9,124,166,249,14,71,231,75,185,66,141,20,157,210,72,103,16,73,111,214,112,34,65,250,148,164,75,242,206,166,137,171,71,201,178,217,142,182,218,71,54,59,106,117,231,138,93,189,12,180,200,139,87,17,159,250,10,137,5,87,86,100,218,160,14,52,163,221,17,109,217,114,235,59,55,33,42,246,31,187,200,206,181,61,150,183,87,116,93,160,177,125,103,89,233,94,159,16,30,132,10,120,223,235,174,109,72,17,81,15,9,147,2,45,18,124,232,205,25,189,132,196,224,69,6,65,191,225,94,32,208,50,32,181,64,183,2,37,251,92,104,61,73,48,195,61,118,253,154,140,20,198,40,138,147,134,249,245,21,249,141,10,29,5,194,75,124,58,34,140,46,128,18,28,60,146,178,119,213,112,112,53,193,182,29,237,170,228,244,123,71,184,249,138,246,120,74,117,243,132,246,100,78,117,103,78,123,82,64,17,112,39,135,148,197,45,8,51,98,56,249,17,87,212,248,249,47,70,241,204,23,234,238,153,175,31,87,108,231,84,177,196,170,130,101,40,168,69,78,67,206,74,151,116,177,130,180,38,168,26,84,119,54,87,123,126,24,94,70,183,209,106,223,57,252,4,9,124,54,109,212,31,157,215,141,171,137,53,116,169,97,28,13,193,39,32,18,68,155,37,78,167,93,70,70,26,71,161,237,182,106,183,220,243,93,185,191,63,46,30,152,190,240,157,179,234,203,47,255,29,148,78,145,101,224,64,104,178,212,50,186,178,205,100,127,194,11,255,215,119,136,94,32,20,60,254,137,199,169,87,45,85,217,209,217,72,211,57,80,9,82,41,124,140,136,24,250,129,39,49,68,191,198,116,88,119,210,123,157,65,131,239,183,17,120,231,209,82,209,247,125,69,31,55,51,36,87,24,211,27,63,244,68,161,51,77,58,210,164,163,132,100,98,72,183,82,180,145,20,167,29,211,31,228,156,220,40,137,66,246,131,21,42,129,68,33,164,102,255,90,202,227,15,140,57,184,152,16,157,163,91,53,204,255,124,142,157,45,104,78,166,180,199,83,230,175,220,196,47,11,154,147,37,238,180,129,229,10,183,188,113,223,216,25,243,200,251,209,159,250,122,211,61,253,149,211,106,231,177,57,78,150,44,92,73,27,115,229,77,233,231,237,10,39,11,28,21,113,92,81,197,22,146,238,108,174,86,220,51,87,171,210,215,230,69,109,180,218,119,4,63,33,2,191,222,209,185,236,119,103,88,161,49,74,35,162,193,71,131,33,161,147,137,20,93,134,115,35,26,49,118,165,223,161,109,246,136,118,119,162,138,203,243,252,101,160,70,94,184,74,242,185,95,193,249,136,172,107,118,50,195,214,165,17,91,87,182,88,190,60,167,61,109,73,140,230,218,71,31,1,41,200,23,21,121,209,81,213,29,94,10,180,82,68,41,145,33,32,93,132,182,67,132,64,140,2,165,229,176,220,11,52,2,73,68,18,136,49,224,130,71,71,223,207,211,26,141,81,253,210,45,157,138,222,88,49,50,48,150,164,163,148,108,164,73,50,67,125,210,176,120,97,202,234,197,28,169,83,130,54,36,81,81,10,40,149,36,61,200,120,248,67,187,28,92,202,112,54,34,155,130,197,205,83,154,147,37,113,186,194,30,205,169,110,29,83,220,62,162,153,173,136,139,6,191,156,15,119,218,215,143,157,73,30,125,63,201,103,127,173,109,62,244,139,51,187,251,216,204,90,89,233,86,22,28,55,5,101,151,211,202,156,138,194,71,91,225,179,58,221,62,104,130,212,173,173,155,142,68,246,212,146,3,105,99,116,127,225,92,237,121,210,254,85,180,218,13,105,223,16,126,2,4,62,111,151,92,31,157,141,66,57,69,103,13,93,98,144,62,33,154,4,25,83,218,54,67,146,53,58,100,52,49,163,142,91,88,191,71,104,247,46,237,21,215,142,254,221,191,191,123,247,253,218,223,37,17,41,109,103,153,164,9,201,68,49,186,48,65,107,201,245,63,184,14,65,96,198,9,15,124,232,1,242,147,146,170,236,104,91,79,231,35,50,201,250,241,157,208,143,227,169,16,136,214,17,59,139,68,144,100,154,16,2,90,41,148,10,136,40,88,175,228,86,73,47,13,103,137,196,24,65,58,210,61,81,199,154,116,156,96,198,134,56,209,84,179,154,147,31,46,89,190,188,36,54,1,53,100,83,245,246,104,139,190,60,225,241,247,31,48,190,146,17,165,160,170,61,167,119,114,154,121,73,118,248,103,20,183,103,148,183,103,212,135,115,236,113,78,152,55,200,166,162,61,126,233,190,203,184,212,229,7,80,31,253,188,141,159,255,230,172,59,120,239,105,87,185,138,38,150,156,198,156,85,147,187,86,150,52,50,167,49,5,65,54,48,106,118,118,14,186,206,202,182,201,115,139,8,29,58,117,116,220,157,171,61,47,247,220,79,171,85,27,173,246,157,192,219,76,224,97,65,217,143,28,157,43,205,36,53,72,103,144,178,151,141,162,76,176,117,138,140,25,194,103,140,187,49,71,118,66,93,239,210,44,247,205,86,125,85,230,39,151,236,185,234,59,117,92,149,9,0,0,28,90,73,68,65,84,254,133,223,196,54,142,45,7,219,99,77,122,49,35,189,56,230,165,127,254,93,218,162,69,38,154,247,255,194,251,232,138,142,42,239,232,154,136,117,145,72,191,115,183,235,26,132,239,43,177,137,253,96,190,10,1,41,36,153,43,9,49,96,164,70,147,244,131,14,162,151,125,164,81,131,27,202,144,140,13,233,56,33,157,24,146,113,130,111,44,179,23,143,185,121,171,194,187,62,16,61,136,126,107,1,18,38,123,134,7,62,120,137,173,253,12,41,5,93,237,104,142,79,41,78,11,170,211,21,229,116,69,119,184,32,190,242,239,104,22,29,126,230,160,168,177,71,215,207,89,25,95,27,59,163,47,93,35,125,238,23,92,247,169,111,44,237,181,103,143,125,71,197,42,22,220,238,10,218,216,55,162,26,242,44,189,80,75,111,234,174,11,149,107,109,71,208,29,169,182,171,178,238,240,210,42,185,109,181,196,181,225,92,164,106,47,251,248,141,86,251,238,196,219,95,129,127,11,121,119,80,223,72,114,163,49,94,97,149,238,219,187,42,65,4,131,151,41,82,165,136,144,17,66,134,23,163,68,139,157,174,157,237,209,205,246,31,216,153,62,114,251,219,127,2,28,1,32,127,245,239,17,101,66,22,34,153,235,208,219,146,244,242,152,227,27,167,204,95,89,97,204,136,11,239,187,204,100,127,139,211,59,43,170,194,82,85,29,117,235,232,124,64,135,208,231,35,199,72,98,70,253,168,158,144,68,173,73,181,193,248,126,99,161,49,6,147,9,208,2,145,40,210,201,104,48,88,164,36,227,148,116,146,224,90,203,226,250,156,229,171,11,108,222,245,164,205,46,18,165,167,197,193,54,92,120,207,22,87,31,217,39,29,107,92,219,209,149,37,205,124,69,123,52,163,186,125,74,126,227,132,230,100,73,55,175,240,199,5,50,95,209,158,222,34,14,6,139,123,99,103,228,120,139,241,103,191,238,252,199,126,109,89,63,240,220,137,179,177,175,180,183,41,176,50,167,232,10,188,44,40,85,129,79,106,72,235,102,21,90,130,239,208,194,102,59,151,186,166,170,157,18,137,213,66,217,86,247,161,229,254,94,173,54,27,94,215,171,66,196,235,144,214,19,80,56,70,195,71,254,88,90,237,134,180,111,5,222,70,2,159,187,247,190,240,93,73,118,65,17,140,98,84,107,162,49,72,101,32,38,24,153,16,72,16,93,54,26,141,70,90,170,81,211,180,19,43,182,182,186,252,165,61,124,126,48,78,102,215,170,147,89,234,134,206,179,184,112,149,209,151,254,3,218,194,146,182,142,189,177,98,235,210,8,97,224,123,127,116,157,109,185,133,25,165,60,242,233,71,41,78,107,186,220,211,150,142,96,65,161,250,4,70,223,47,20,22,33,96,219,26,124,196,68,72,19,77,106,96,178,61,65,37,6,146,222,146,153,76,70,152,173,20,51,78,201,182,51,108,227,89,220,88,177,184,121,136,45,123,187,161,247,2,47,250,163,183,221,74,185,252,232,132,75,15,142,80,25,216,166,195,149,53,245,97,69,51,235,29,81,229,141,59,52,119,102,216,121,137,187,85,64,222,225,230,183,9,237,209,57,173,246,110,236,140,28,111,145,61,247,55,188,248,200,23,202,242,169,95,189,83,116,177,162,142,37,39,182,80,53,57,109,40,117,163,114,186,88,181,66,151,196,164,166,83,45,50,105,81,218,245,115,181,166,195,227,108,217,57,116,63,87,235,239,151,129,124,94,171,149,56,218,65,171,13,175,163,213,174,73,187,209,106,127,162,120,155,8,124,70,94,201,11,223,149,236,239,107,14,149,100,207,24,68,48,4,109,48,54,33,234,4,47,83,45,125,230,66,76,235,46,31,225,155,49,174,24,115,218,236,226,202,3,218,217,254,149,157,211,135,94,249,246,191,230,172,250,254,135,255,16,231,36,38,74,182,50,195,246,69,205,246,229,109,254,237,63,253,19,130,83,180,105,198,83,191,248,62,186,202,83,47,45,77,229,177,109,232,243,158,189,35,120,143,160,191,247,106,33,200,84,31,19,147,72,73,102,52,227,45,131,30,247,11,208,244,56,33,217,206,200,182,71,196,40,88,30,22,188,242,237,83,138,211,142,206,89,108,215,47,0,151,70,51,222,30,113,245,137,11,236,63,184,141,216,87,248,198,227,170,134,234,78,78,115,50,163,184,117,68,117,231,152,246,104,138,155,175,112,171,150,112,92,226,231,199,132,215,44,227,186,107,176,144,227,45,70,207,253,66,20,207,254,66,81,125,232,235,71,85,67,41,154,80,170,35,91,8,75,46,74,114,217,82,208,202,82,248,180,140,86,54,65,36,45,35,211,18,180,197,72,75,84,142,32,45,40,171,98,180,222,164,157,239,207,224,63,94,6,242,121,131,197,121,173,246,245,12,22,195,55,192,134,180,63,25,188,13,4,62,223,180,66,242,208,142,98,105,20,105,98,136,66,97,164,198,74,131,200,12,137,55,88,153,42,53,202,164,105,178,174,178,35,162,31,99,235,109,105,217,15,245,236,96,103,251,206,163,167,135,71,58,180,55,0,143,248,192,115,152,79,126,13,209,68,38,82,177,189,45,201,46,101,28,253,224,136,230,184,65,202,49,23,63,120,149,100,55,99,126,107,73,177,106,104,74,139,107,251,225,4,137,36,21,130,84,75,132,54,164,105,79,218,204,40,180,145,164,227,132,209,86,138,220,201,72,39,41,33,70,86,71,37,47,255,251,91,20,179,134,64,111,149,108,173,195,164,41,59,7,123,92,120,120,155,237,75,41,91,23,18,186,210,97,171,150,230,135,71,52,167,37,237,225,156,234,206,41,221,241,156,118,154,19,22,53,110,154,227,22,199,248,242,198,125,151,113,101,207,125,33,198,143,124,161,106,63,244,75,199,101,122,105,69,29,74,142,67,169,43,153,143,67,90,216,74,230,178,161,180,173,172,98,208,141,83,166,14,65,117,32,29,70,119,8,213,15,197,119,202,98,162,195,165,22,141,245,12,218,172,198,14,228,180,116,131,86,11,142,142,240,166,50,144,55,90,237,59,130,183,152,192,231,155,86,72,38,55,21,109,170,104,140,238,55,42,40,131,80,166,63,54,203,190,235,236,187,204,69,70,222,150,19,104,39,82,248,9,174,216,211,101,177,143,188,243,224,36,172,46,223,121,241,91,192,20,33,5,201,223,253,47,145,105,198,168,169,217,201,36,147,11,9,94,192,75,127,116,19,67,70,182,63,225,61,207,94,102,113,88,49,159,215,212,133,197,182,126,104,72,9,84,210,7,197,165,169,34,73,53,105,166,200,214,227,121,99,67,58,54,152,68,115,114,210,241,202,159,30,114,114,115,121,182,220,172,159,248,137,72,60,143,60,117,133,253,135,199,108,31,140,176,181,197,87,150,226,122,78,113,178,162,156,46,137,183,191,67,53,45,41,167,57,118,214,225,167,21,126,49,37,148,183,134,97,248,19,98,88,189,230,255,94,246,220,231,163,124,230,115,117,243,204,87,79,218,120,105,21,219,80,82,197,82,175,194,42,212,161,8,165,47,92,171,138,85,16,21,110,187,38,154,150,144,116,168,113,71,164,27,242,141,251,97,1,217,90,92,186,94,192,229,80,131,209,66,12,149,183,195,15,85,215,227,7,173,54,110,180,218,159,54,188,245,21,248,183,144,236,35,233,174,43,234,145,68,25,77,148,10,37,13,177,235,137,139,72,144,34,165,233,50,36,35,31,187,17,34,140,37,97,172,186,114,207,46,167,23,98,87,28,60,180,125,248,200,237,239,191,8,28,246,95,236,87,254,35,70,79,60,11,173,103,50,210,236,237,106,70,123,41,223,249,23,63,68,234,93,148,144,60,245,185,247,210,52,29,101,105,105,45,216,8,36,146,76,101,36,74,12,131,239,125,78,86,182,165,251,102,212,200,160,141,96,117,103,197,244,123,135,204,126,120,202,212,236,247,155,235,145,8,25,209,2,174,61,185,199,197,135,182,216,189,60,70,248,128,43,27,170,235,135,212,39,11,86,71,51,86,119,166,212,39,43,92,209,32,111,93,167,91,5,236,98,129,95,221,28,92,81,63,26,59,163,31,126,47,201,223,248,237,166,253,240,215,166,205,232,218,156,38,84,44,67,113,173,235,74,87,145,183,77,204,93,109,139,50,136,138,189,73,141,52,13,90,119,184,81,71,28,59,226,48,87,219,97,85,192,121,189,182,49,166,253,145,120,189,104,122,125,199,85,67,117,245,27,173,246,103,1,111,33,129,207,155,53,80,248,145,98,207,40,150,74,161,148,65,203,4,41,19,130,52,8,153,226,218,12,37,71,88,63,34,218,49,161,153,4,187,220,9,243,195,61,186,252,224,74,114,253,201,170,168,146,246,240,59,64,142,156,236,178,253,55,255,1,222,69,182,100,100,127,47,97,247,82,198,245,63,186,67,53,87,8,179,199,99,31,191,76,182,147,82,79,151,120,97,48,163,62,149,67,9,72,181,32,73,37,163,113,239,61,78,39,134,108,146,144,31,229,220,252,211,91,156,124,255,228,220,124,110,159,30,41,140,224,242,195,59,60,248,228,30,251,151,199,224,60,174,106,169,95,61,166,58,153,99,231,11,234,147,57,203,219,39,148,167,11,220,162,193,207,91,194,233,140,48,12,13,244,164,157,113,222,96,161,31,126,47,250,211,191,220,218,167,191,60,119,251,239,59,117,77,44,85,43,203,180,12,185,105,147,194,229,174,204,90,151,71,171,202,52,200,166,150,73,83,74,213,97,147,150,68,90,218,189,142,216,57,214,3,241,96,81,56,47,232,183,14,156,151,126,250,97,120,63,220,111,55,90,237,207,24,222,34,2,159,111,90,33,217,191,35,73,83,69,48,6,41,13,78,38,56,161,73,133,65,138,20,219,102,16,71,136,152,153,196,143,109,221,77,232,154,45,170,229,30,237,252,194,69,121,242,168,214,179,203,183,191,253,45,224,8,169,21,163,191,243,15,145,219,187,36,81,176,59,78,217,191,96,152,31,173,56,126,117,129,8,219,236,61,188,207,181,167,46,144,207,86,8,223,33,146,17,137,52,72,52,137,17,140,70,138,209,72,147,142,13,197,97,206,241,159,28,114,250,131,19,124,99,129,128,144,125,181,149,18,182,174,238,112,237,169,7,217,187,50,70,75,104,87,21,243,151,15,177,179,156,110,182,160,61,153,209,204,22,172,142,79,233,142,103,248,69,71,88,150,132,249,141,251,198,206,232,135,159,68,127,250,151,59,255,145,47,47,237,133,247,157,56,39,42,114,87,112,98,11,58,10,95,147,199,154,34,182,182,148,78,55,119,220,168,86,202,116,109,212,109,72,180,67,155,14,33,45,141,178,216,214,161,83,139,196,210,13,164,93,55,165,196,185,215,176,209,106,127,214,241,22,16,248,94,242,162,113,70,225,181,38,149,125,28,172,17,26,68,138,75,83,148,200,192,101,74,133,140,224,38,214,182,19,108,185,173,100,185,231,235,217,69,85,159,92,217,205,110,60,122,243,213,59,132,238,21,132,244,164,79,125,130,237,207,125,141,160,96,119,52,226,226,158,162,173,42,254,244,15,127,128,142,41,217,216,240,209,95,185,70,83,91,2,145,52,145,4,165,208,74,99,18,69,58,82,212,243,150,27,223,57,226,244,123,199,200,198,146,26,141,16,1,53,108,66,216,190,186,203,165,15,93,97,247,193,61,164,82,228,165,167,184,189,192,46,43,154,211,37,197,225,9,245,241,41,246,116,142,91,228,248,105,65,40,10,252,241,249,13,122,175,141,157,145,23,175,162,159,253,188,11,207,255,230,210,61,242,169,99,87,119,21,150,130,59,77,73,71,14,20,180,50,103,37,203,36,209,245,56,209,181,73,77,23,165,238,166,164,22,151,118,103,4,93,39,88,64,191,1,158,65,171,13,195,177,120,173,211,222,79,171,157,16,24,227,40,55,90,237,207,18,254,138,4,126,61,242,78,21,34,49,24,169,233,100,159,42,41,69,138,20,9,65,164,153,35,51,209,142,180,139,163,113,40,199,93,86,109,157,212,249,174,175,79,47,16,237,197,7,210,233,251,230,181,84,237,205,63,70,200,37,114,231,128,253,191,255,187,140,101,70,34,61,23,247,2,73,42,249,246,63,185,137,117,59,132,52,225,75,223,124,47,217,88,65,244,40,159,17,71,154,93,169,40,87,13,71,223,63,100,245,242,41,245,108,1,93,131,145,177,191,243,106,141,217,157,176,247,216,101,246,159,184,138,30,37,52,133,99,49,237,168,230,57,87,110,254,1,205,225,156,118,186,162,158,215,52,171,142,122,106,113,69,131,155,222,28,42,237,143,198,206,200,11,87,73,63,250,5,239,158,253,234,202,62,254,153,163,174,242,53,141,207,185,185,42,104,41,232,100,65,73,142,85,37,65,53,248,164,2,213,117,109,210,118,107,173,86,152,174,207,136,26,198,243,122,210,246,175,238,158,74,155,14,174,168,6,207,54,142,25,158,3,194,32,0,133,129,196,158,142,192,14,129,240,151,145,22,54,196,253,233,193,95,129,192,247,144,247,33,20,75,20,169,209,68,169,65,25,130,76,176,34,69,137,132,40,50,221,49,146,178,30,105,226,72,249,118,75,141,219,157,211,121,187,37,109,179,31,22,197,193,65,251,167,239,13,98,185,59,255,238,31,34,228,17,50,73,216,253,157,255,140,209,197,7,209,90,112,241,202,46,59,23,51,190,243,123,63,64,116,142,76,73,62,241,141,199,185,252,208,132,174,241,8,34,179,101,201,173,239,220,97,250,242,146,229,52,71,132,62,123,42,6,133,82,35,198,23,38,92,121,226,34,251,143,236,51,218,30,225,235,142,230,116,201,234,52,167,156,229,212,211,156,122,94,178,186,245,3,202,85,75,57,109,113,171,14,63,187,77,180,107,131,197,236,53,177,51,98,52,33,121,230,115,65,127,242,27,133,125,223,151,15,219,70,148,137,16,149,61,106,114,170,208,47,156,238,116,65,71,133,55,37,157,172,251,5,211,166,197,172,131,203,77,95,81,81,150,24,251,69,211,226,92,165,141,67,181,213,231,26,82,130,245,114,105,207,246,64,218,9,129,106,152,179,189,159,193,162,132,159,196,234,203,13,222,126,188,73,2,191,14,121,91,20,41,154,102,87,147,214,253,76,175,22,125,199,89,147,102,13,153,84,245,200,96,199,109,180,147,152,214,147,233,178,218,74,109,188,208,206,170,11,59,249,75,79,30,100,167,215,94,189,117,68,180,175,32,147,128,254,200,103,216,250,210,239,160,20,108,31,140,25,239,167,124,251,31,189,68,125,184,66,122,203,71,190,244,62,158,252,185,75,20,139,150,87,95,152,243,39,255,223,43,116,179,21,154,128,45,22,8,37,49,38,35,217,26,113,233,177,3,46,61,190,207,104,39,161,93,213,216,188,97,117,253,132,118,58,195,158,46,177,243,21,245,44,39,159,46,177,199,57,126,145,19,86,39,231,92,81,211,215,184,162,196,104,130,121,230,51,81,60,253,249,210,62,243,235,71,93,103,10,215,198,130,35,95,234,70,230,64,206,50,22,180,178,148,113,84,7,71,131,48,181,84,166,19,198,88,143,24,70,243,122,131,5,68,135,73,239,54,165,206,147,119,109,168,88,15,18,196,225,104,44,241,212,120,36,254,53,164,29,109,180,218,191,46,120,19,4,62,103,212,216,71,156,145,55,98,104,208,136,170,111,90,25,145,208,138,20,69,146,117,237,72,70,57,50,216,145,18,118,178,20,245,22,84,59,196,106,191,93,172,14,46,212,47,63,182,231,95,124,114,90,102,116,119,190,141,144,75,212,206,21,182,191,249,187,4,15,217,78,198,254,197,9,63,248,195,27,172,142,26,164,247,92,124,100,135,36,145,252,31,255,195,191,97,122,228,176,81,19,157,7,50,180,8,236,239,239,112,225,241,11,236,63,180,203,246,165,9,109,222,98,139,154,217,237,25,118,182,164,61,89,80,28,30,81,31,159,210,46,86,184,89,129,95,54,132,213,148,80,190,254,50,46,0,243,201,95,140,226,35,95,168,186,167,127,229,184,11,227,149,104,99,165,78,69,33,59,10,89,168,60,182,177,136,86,21,141,13,21,33,107,144,105,99,204,196,182,206,117,72,221,9,109,172,146,137,243,222,191,118,174,86,157,53,163,238,146,215,13,90,237,186,147,124,158,180,106,144,125,4,142,116,168,207,27,173,246,175,29,222,56,129,239,146,87,50,65,211,162,168,208,36,40,4,134,68,38,136,44,193,119,9,202,36,89,211,140,101,8,35,105,92,150,116,221,100,21,154,45,178,122,155,98,177,75,93,239,111,175,254,228,145,221,230,219,31,104,198,187,44,95,248,3,224,14,66,74,146,223,248,79,137,217,30,153,17,108,111,167,188,248,7,55,184,254,226,138,145,14,200,32,184,243,114,206,173,235,47,33,146,109,100,178,221,247,96,163,230,145,15,246,254,227,75,151,20,93,209,210,173,106,22,223,187,77,117,178,160,153,46,168,78,230,52,211,57,118,145,227,231,37,110,86,16,150,167,132,234,124,130,197,107,99,103,244,51,159,137,60,253,153,198,61,243,245,169,29,95,158,83,250,138,101,204,41,219,50,182,20,161,54,121,104,68,73,160,74,197,65,109,228,184,233,252,188,67,232,78,233,212,201,36,235,84,191,184,212,122,31,157,23,202,34,84,111,178,8,56,196,48,87,123,190,41,37,7,210,250,225,181,127,127,79,218,173,51,21,55,12,119,217,141,86,251,215,20,111,144,192,241,46,121,59,20,53,18,69,31,196,14,6,129,33,102,166,255,117,146,162,154,44,78,124,166,170,144,37,116,147,154,118,171,165,217,162,110,183,41,151,251,44,78,46,92,11,255,250,169,74,75,115,248,195,23,137,221,171,128,199,124,236,139,100,159,254,85,18,87,147,68,201,233,141,21,215,255,124,69,54,25,83,23,43,82,147,33,8,180,14,162,139,60,244,196,136,203,215,198,236,93,78,9,173,167,89,214,156,190,112,147,230,116,69,115,186,164,57,153,211,204,230,180,139,2,59,203,113,39,5,97,113,66,168,238,156,75,176,120,109,236,140,122,246,51,196,15,255,124,19,158,254,234,204,141,223,115,74,19,43,90,87,178,114,57,141,207,169,100,41,109,82,232,104,74,130,105,132,27,53,33,70,235,132,105,29,190,79,83,151,210,161,18,219,57,172,151,201,221,185,90,6,183,84,196,15,228,245,67,213,117,232,97,164,160,175,184,189,94,27,8,67,179,106,157,210,24,57,220,104,181,27,188,33,2,223,107,212,64,177,135,34,160,176,24,52,26,143,25,220,178,41,73,158,17,147,180,245,33,141,218,141,115,215,140,193,76,104,244,22,77,185,207,42,191,240,192,234,247,158,105,66,62,158,150,19,252,242,69,96,5,163,45,204,55,255,43,152,207,217,218,73,161,233,184,254,199,199,108,109,237,81,181,29,12,27,231,31,126,255,5,30,120,207,54,123,87,183,232,106,75,57,43,153,127,239,8,55,47,233,102,43,56,186,205,234,104,78,57,91,226,22,21,126,81,17,22,167,132,252,214,57,173,246,181,177,51,226,193,199,17,207,127,173,11,207,126,101,238,47,62,53,165,9,21,54,22,204,40,104,98,65,41,114,108,44,232,146,138,86,214,193,233,218,105,99,133,72,90,180,114,8,211,41,149,89,20,150,166,117,152,180,247,30,175,73,123,158,176,12,155,6,214,205,40,59,84,93,240,72,2,10,143,30,72,91,12,90,237,134,180,27,220,131,55,86,129,215,3,10,251,67,120,74,133,38,197,12,211,160,125,154,164,32,161,173,83,218,81,138,169,51,146,106,220,89,59,34,100,19,188,28,211,173,118,201,167,251,59,39,255,242,3,58,78,175,46,228,1,245,171,223,1,122,50,153,255,226,191,167,138,91,140,92,137,45,60,91,219,35,198,19,203,178,106,217,222,83,60,250,244,35,92,126,112,132,32,80,207,75,22,47,222,194,207,11,154,195,41,205,241,49,213,209,156,122,222,27,46,236,172,37,44,150,195,157,246,252,48,252,93,87,148,124,240,113,228,39,191,106,253,71,190,58,143,87,62,50,141,149,175,104,101,193,161,43,105,89,225,116,65,99,11,58,85,97,117,77,212,53,65,245,199,227,145,30,36,31,217,175,6,137,202,118,102,112,66,101,233,107,59,200,235,227,178,102,29,63,211,147,182,183,47,246,9,141,158,64,58,104,181,245,208,65,206,239,145,125,54,164,221,224,28,126,124,2,223,173,190,18,61,28,157,155,161,2,131,57,123,107,234,20,68,162,98,149,120,211,102,40,157,225,24,33,196,152,250,100,135,226,214,222,100,254,47,159,216,177,63,120,178,144,7,44,95,185,13,20,64,197,165,191,255,95,51,249,242,111,243,234,247,111,210,52,29,4,77,152,117,92,126,255,14,143,142,37,38,85,16,58,150,47,45,176,203,156,246,232,148,250,240,4,59,157,209,76,103,216,85,73,55,173,113,85,67,152,221,184,111,236,140,56,184,140,120,254,43,46,126,226,55,23,225,218,51,39,161,112,21,93,40,56,172,75,170,144,211,196,146,110,156,99,85,1,52,184,157,26,17,59,80,45,82,59,164,180,74,155,110,45,249,120,53,104,181,235,70,212,189,90,173,28,142,197,130,117,192,91,63,162,39,135,1,130,230,92,7,121,163,213,110,240,6,240,198,42,240,237,161,243,188,164,95,140,59,234,23,195,19,81,8,36,77,165,145,66,226,91,237,15,26,67,209,36,120,151,210,169,17,229,106,76,249,195,157,209,252,247,159,216,90,254,254,179,133,186,196,242,168,3,219,235,169,234,131,63,207,238,127,252,223,224,109,159,185,92,231,1,159,121,164,232,16,117,77,23,26,164,171,137,197,10,183,202,177,211,57,237,108,73,59,207,113,243,154,144,151,248,217,173,251,198,206,136,131,75,136,167,62,29,226,39,191,177,138,79,124,225,40,186,164,164,116,37,135,174,160,113,57,165,47,82,47,11,221,170,74,57,85,173,220,86,141,17,29,164,45,58,90,188,180,72,217,41,133,31,100,31,235,69,210,13,199,222,215,106,181,235,99,242,189,90,109,58,104,181,98,163,213,110,240,214,224,205,27,57,178,179,111,83,137,70,16,134,55,223,40,132,85,136,82,163,10,67,83,37,20,49,99,121,123,219,220,248,127,158,216,201,127,255,249,144,94,36,63,29,19,235,178,255,18,118,175,225,255,246,127,199,15,190,245,103,208,230,80,173,16,62,67,228,13,205,73,137,109,115,68,181,36,84,57,161,172,176,85,67,152,215,132,162,197,79,95,37,134,217,235,26,44,200,198,232,143,127,49,200,143,125,173,240,79,124,246,216,119,73,78,235,75,238,180,5,93,91,80,197,156,154,156,142,42,243,73,157,134,164,73,164,105,4,170,91,137,177,37,24,139,116,86,5,213,55,157,76,116,158,31,67,171,21,67,227,105,163,213,110,240,54,227,205,17,120,130,32,220,243,62,91,74,124,35,81,86,210,86,10,151,27,218,85,194,98,158,145,215,147,201,241,31,60,57,153,255,243,207,134,100,79,204,103,187,248,34,246,159,222,108,97,126,253,239,97,187,45,40,230,16,115,146,176,196,228,30,55,155,211,28,30,35,154,28,209,117,80,88,98,213,18,87,199,125,165,117,199,244,164,189,107,176,32,27,163,158,254,84,12,31,254,124,21,63,246,55,143,156,75,86,212,182,226,36,20,162,106,243,212,81,100,78,22,182,80,133,106,85,45,164,110,4,186,17,49,177,66,232,174,149,186,243,82,89,21,199,14,229,45,36,214,43,101,135,202,250,198,181,218,114,32,239,70,171,221,224,109,192,27,39,112,137,32,189,231,125,117,46,192,9,130,19,80,74,124,169,200,151,154,249,60,25,119,243,113,114,248,135,239,55,183,254,249,151,131,217,149,171,213,69,92,177,69,207,3,129,121,238,231,137,7,15,144,210,49,218,210,200,206,81,157,204,105,103,5,110,89,192,236,4,113,60,135,197,49,132,25,176,28,252,199,119,151,113,145,141,145,79,127,42,198,167,63,95,199,103,191,126,226,217,93,208,142,42,102,49,167,245,21,141,94,81,53,69,210,202,34,177,170,78,189,110,70,152,198,11,211,57,169,59,43,141,11,200,46,32,109,151,244,91,244,188,193,18,213,221,123,173,24,8,252,122,90,173,24,124,199,175,167,213,38,155,185,218,13,222,62,188,117,243,192,193,10,98,45,232,90,137,47,85,182,92,232,120,50,79,119,23,191,255,94,121,243,159,253,82,43,182,213,170,218,167,171,15,88,167,180,168,71,174,162,62,241,28,221,174,35,38,11,138,54,199,133,18,86,167,240,226,31,195,15,95,130,98,73,164,6,114,160,121,205,167,20,79,125,130,248,212,207,55,124,242,119,78,130,186,48,167,161,98,73,65,167,10,108,82,208,169,146,134,130,32,10,156,111,108,87,53,38,10,103,101,210,6,35,173,21,166,11,72,235,163,114,34,70,219,234,180,223,164,167,207,154,80,189,244,179,110,68,253,69,90,173,216,104,181,27,252,228,241,214,18,56,56,129,175,36,93,169,46,151,215,82,119,231,31,127,128,91,191,247,55,189,220,74,234,184,71,215,92,99,61,182,202,193,4,255,107,191,132,127,250,33,68,40,137,47,126,155,248,173,127,4,127,250,45,152,159,220,247,211,136,167,62,14,79,125,170,141,207,126,109,22,119,222,59,165,21,181,176,50,151,203,174,136,133,43,66,19,10,89,183,69,72,198,21,77,108,240,73,141,214,22,49,106,195,120,215,21,9,93,18,176,93,135,197,122,71,170,214,43,48,251,74,43,249,209,14,242,70,171,221,224,93,138,183,134,192,161,237,53,26,223,74,130,149,216,34,177,55,190,245,65,241,234,63,251,91,136,113,218,132,61,42,251,48,68,11,180,176,29,224,63,255,38,60,182,13,255,244,127,33,254,227,255,25,110,254,224,190,143,151,79,124,8,245,220,23,187,248,236,87,103,110,251,201,83,218,80,225,179,130,163,88,208,133,60,54,77,30,11,202,113,39,170,52,142,234,204,233,186,138,157,109,189,238,90,109,173,79,39,29,10,139,195,209,97,187,158,152,150,76,221,109,66,9,238,14,193,111,180,218,13,126,74,240,150,16,120,123,123,155,224,34,101,99,193,91,181,51,253,23,31,156,207,255,239,223,14,137,152,120,46,16,236,163,196,53,121,185,9,159,251,20,252,143,255,160,63,38,223,15,15,60,138,120,238,139,150,103,190,60,15,87,63,122,28,26,95,211,132,146,195,174,160,149,5,117,209,191,122,93,226,76,29,66,210,20,194,180,133,208,29,35,109,137,178,79,177,136,202,210,180,119,231,106,239,213,106,215,113,170,226,117,180,218,53,105,55,90,237,6,239,82,252,213,9,92,46,4,201,136,24,172,192,122,65,87,38,237,75,255,251,223,69,232,7,68,122,145,80,95,35,218,22,152,1,215,129,151,225,255,252,183,175,255,172,7,30,69,60,247,11,158,143,124,121,46,174,125,244,88,88,81,134,58,148,220,105,251,4,139,154,130,70,150,56,81,65,86,97,117,243,35,115,181,194,116,128,71,252,37,115,181,235,138,187,38,237,235,105,181,231,73,187,209,106,55,120,23,226,45,169,192,93,219,161,214,70,167,110,158,121,95,191,39,36,151,136,237,30,177,153,211,167,74,190,2,44,127,244,131,247,47,193,7,63,30,248,248,47,47,120,242,51,119,162,53,5,181,175,56,241,101,168,66,73,31,90,94,208,168,10,47,106,98,218,34,77,3,170,67,105,219,47,154,62,55,87,187,222,87,187,150,123,214,43,48,55,90,237,6,63,131,120,203,154,88,182,141,129,84,5,244,3,93,220,123,224,70,8,217,195,204,95,5,166,192,77,206,251,143,57,184,2,31,122,62,240,177,175,46,120,242,231,111,225,211,156,202,87,76,125,69,101,11,90,81,197,58,148,116,170,194,233,6,116,131,76,27,162,114,8,221,33,117,215,175,188,148,14,165,254,226,185,90,185,209,106,55,248,217,197,95,157,192,147,189,216,22,211,104,140,1,149,6,182,118,173,248,228,223,254,159,228,119,254,183,255,36,220,249,225,78,47,255,8,200,38,240,244,39,3,159,253,141,25,143,61,127,3,177,61,167,13,21,167,174,166,178,53,150,146,90,214,116,212,116,186,193,39,13,210,88,72,236,25,105,149,26,246,251,12,164,149,105,159,123,252,86,104,181,29,129,19,194,70,171,221,224,167,9,226,47,255,43,3,126,55,74,110,15,131,11,41,154,128,25,214,96,37,20,211,20,217,100,184,42,227,98,123,129,11,233,67,92,201,30,228,127,253,111,191,78,113,252,32,79,60,213,241,233,223,186,73,114,225,132,170,173,169,92,197,202,214,184,88,145,171,150,96,26,58,211,245,11,164,19,139,212,142,70,88,180,113,32,59,144,22,169,28,49,90,116,122,119,27,252,189,174,40,49,84,210,245,230,129,245,239,37,119,231,106,215,178,207,189,25,200,215,6,210,62,53,16,118,77,220,13,105,55,120,23,227,141,19,120,130,102,137,102,68,66,28,38,144,86,171,20,95,165,196,54,225,162,219,103,203,92,96,47,92,196,168,3,140,223,70,203,148,170,139,180,190,99,222,214,56,83,147,119,150,214,88,162,14,136,196,35,210,128,208,158,52,181,136,196,39,210,56,239,177,222,57,75,50,116,144,239,14,195,191,190,86,187,158,250,89,147,54,220,163,213,110,72,187,193,207,24,254,234,71,232,142,136,138,17,97,2,157,15,172,84,129,239,36,81,118,140,152,211,249,140,208,105,60,76,210,93,223,84,109,231,87,117,32,108,13,171,238,19,129,78,34,210,4,162,10,8,229,136,209,117,81,245,123,126,180,186,123,44,254,113,181,218,53,105,239,213,106,55,193,229,27,252,140,225,205,19,184,33,98,8,104,34,45,129,104,44,90,8,172,139,44,149,167,233,42,130,211,253,172,82,38,137,66,149,174,1,165,5,106,79,97,180,64,38,17,169,5,66,69,2,17,145,246,119,213,123,71,244,214,111,63,174,86,187,38,237,70,171,221,224,103,28,111,158,192,9,241,140,196,219,187,142,197,82,128,182,232,36,130,13,136,145,3,167,241,66,33,133,236,87,139,34,144,90,16,133,64,104,9,128,64,32,211,184,30,70,228,124,230,241,189,195,240,111,70,171,221,144,118,131,159,97,188,57,2,103,68,42,34,19,2,30,79,131,96,111,151,161,183,27,16,195,144,191,193,34,144,4,4,17,133,58,55,55,172,134,251,119,255,103,145,72,0,250,37,92,231,253,199,102,168,176,111,86,171,221,144,118,131,159,97,188,49,2,95,35,114,157,62,90,124,111,184,149,6,4,201,48,155,35,135,46,111,64,13,36,236,51,180,212,48,203,227,6,210,174,201,11,32,233,105,107,8,103,157,227,123,73,59,222,104,181,27,108,240,122,120,51,243,192,129,135,16,180,136,179,143,150,68,2,253,122,191,245,154,173,228,140,220,130,150,254,184,108,238,211,245,142,68,44,253,198,129,148,112,70,218,141,86,187,193,6,127,33,126,124,25,137,40,206,150,119,207,233,55,50,76,145,24,36,19,4,57,146,17,130,14,113,22,183,99,207,61,63,253,11,62,87,75,196,16,207,102,105,183,135,215,141,236,179,193,6,127,33,222,88,5,126,138,200,11,4,158,66,240,2,48,33,178,75,160,28,250,194,98,72,235,168,7,178,10,250,248,157,191,12,29,17,77,164,38,50,34,146,19,40,135,74,187,145,125,54,216,224,190,120,3,21,24,206,133,187,247,25,209,79,33,184,61,252,126,126,238,89,147,225,200,252,70,80,210,167,108,109,42,237,6,27,252,216,120,131,4,94,35,246,31,247,187,175,243,241,47,188,217,103,194,143,18,22,54,164,221,96,131,251,227,205,147,237,71,16,223,194,103,109,72,187,193,6,27,108,176,193,6,27,108,176,193,6,27,108,176,193,6,27,108,176,193,6,27,108,176,193,6,27,108,240,206,226,255,7,176,112,27,242,125,140,61,69,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Arrow_png_size = 40131;

extern const unsigned char Rc_GZ_RcEngine_Transform_png[41526] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,1,21,0,0,1,14,8,6,0,0,0,167,255,131,186,0,0,32,0,73,68,65,84,120,156,236,157,119,156,36,215,85,239,191,231,86,117,247,228,157,157,217,157,205,73,27,165,149,86,171,85,206,193,86,182,28,176,13,200,1,12,24,12,130,135,193,22,239,241,192,56,0,239,1,54,216,128,193,38,24,222,3,219,224,103,28,112,182,37,99,201,65,146,173,100,201,214,42,109,206,105,54,77,158,233,174,123,223,31,247,222,170,91,53,61,155,36,219,10,245,219,79,109,119,87,223,190,117,171,166,239,175,207,249,157,115,79,9,37,74,60,55,32,193,115,243,19,27,69,137,103,12,57,126,147,18,37,126,100,16,142,253,29,52,148,4,243,188,67,73,42,37,126,18,144,226,182,218,127,23,87,67,203,122,204,67,25,161,120,82,209,63,137,129,150,56,121,148,164,82,226,199,13,79,36,10,144,101,160,198,230,163,180,70,146,196,126,31,163,8,163,20,166,165,5,61,109,35,218,17,140,166,180,92,158,23,40,73,165,196,143,27,202,111,243,33,26,159,73,148,36,168,46,141,106,104,20,93,160,20,38,30,68,87,34,244,96,149,164,173,141,196,145,139,39,150,210,106,121,14,163,36,149,18,167,138,169,190,59,199,178,36,188,133,162,230,67,60,54,131,120,98,130,74,155,38,106,180,16,183,24,20,128,8,38,18,116,28,145,76,84,105,180,142,208,24,110,161,209,210,130,222,184,145,132,210,106,121,78,35,250,73,15,160,196,243,14,169,235,210,228,49,220,154,193,91,41,113,109,38,241,196,4,213,90,66,181,81,163,22,55,168,169,136,22,132,170,129,42,138,88,20,145,86,40,5,138,42,50,56,136,244,244,32,11,22,32,7,14,148,63,136,207,85,168,159,244,0,74,60,175,16,146,72,4,196,110,11,159,199,193,251,138,60,225,0,168,185,160,234,117,226,36,161,82,175,80,83,154,165,58,226,19,137,225,65,35,124,92,67,167,54,116,38,134,142,138,166,163,1,237,198,208,58,189,66,75,181,74,181,191,159,202,226,197,196,231,218,99,68,193,49,74,60,7,80,90,42,37,78,20,126,226,70,77,182,10,25,185,40,242,100,226,145,186,62,181,25,84,234,117,42,213,132,90,36,180,26,225,189,34,92,38,80,19,97,174,68,28,138,34,118,40,77,85,11,81,20,19,43,131,210,6,165,71,81,82,69,170,67,200,225,233,200,172,89,176,100,9,178,103,79,122,140,18,63,97,148,164,82,226,68,224,45,141,144,68,194,45,166,57,177,132,238,144,223,23,85,171,84,146,132,170,104,90,80,180,26,225,103,69,152,171,4,68,64,9,231,8,116,162,216,73,4,202,16,39,6,165,53,145,174,161,90,12,202,8,66,21,169,14,34,7,71,145,89,179,144,53,135,96,235,241,115,95,74,252,136,81,146,74,137,19,65,170,133,144,17,72,213,109,53,183,85,201,72,166,232,150,132,86,78,92,169,16,39,9,85,49,180,32,180,170,136,69,34,156,35,226,24,65,168,42,225,44,17,110,198,112,72,41,246,107,33,22,133,18,77,164,13,145,54,40,173,80,17,136,169,160,170,131,200,190,30,164,175,47,37,23,40,201,229,39,130,146,84,74,28,15,158,20,66,66,105,193,18,73,139,219,90,201,136,197,147,75,232,30,9,160,186,33,170,116,18,107,77,69,107,170,170,66,139,104,90,81,204,16,184,90,41,107,169,132,228,2,92,138,181,92,6,80,28,6,71,46,138,88,25,162,68,19,153,8,241,98,110,235,32,178,199,137,185,171,15,228,200,165,140,20,253,152,80,146,74,137,227,161,72,42,85,44,145,156,6,124,28,120,23,112,33,112,24,56,74,70,44,49,16,215,32,74,32,106,107,35,210,117,34,29,19,27,67,197,24,170,74,209,34,17,173,2,115,4,174,117,174,143,61,104,240,28,152,41,194,213,98,88,32,194,110,52,227,104,34,34,98,21,161,34,131,74,12,81,34,40,37,206,114,57,82,146,203,79,10,37,169,148,56,30,66,215,167,130,181,72,90,129,115,128,95,116,109,230,0,55,185,173,23,120,10,71,44,10,226,184,74,100,198,136,117,205,18,141,49,84,43,134,154,81,180,136,208,26,9,67,88,93,5,17,184,229,170,5,172,92,50,141,93,251,134,105,36,150,3,196,18,204,34,224,101,40,22,40,97,131,209,24,49,196,162,137,36,38,138,12,81,98,80,38,66,69,130,80,67,42,135,81,7,250,96,222,188,28,185,148,248,17,162,36,149,18,199,131,144,9,176,222,229,105,5,26,192,79,97,201,195,163,3,88,3,156,11,236,6,134,85,76,108,234,84,168,88,11,5,71,42,138,148,84,218,20,180,137,112,179,64,69,20,244,78,171,241,91,111,60,139,27,46,91,200,209,193,113,182,236,26,244,164,226,177,216,192,141,6,58,149,176,203,8,26,77,44,134,72,197,68,162,45,185,104,101,201,69,87,80,45,71,145,125,51,145,165,75,97,229,30,100,235,143,250,170,189,136,81,146,74,137,227,193,91,42,161,149,210,134,37,147,53,192,252,38,159,153,9,92,15,44,208,154,68,34,142,224,44,29,99,172,123,36,80,51,98,45,21,71,42,231,40,161,87,4,122,166,213,184,238,226,5,180,84,99,46,58,123,22,103,173,232,101,203,206,1,142,12,78,132,199,168,40,225,12,3,55,138,161,211,8,187,16,12,17,177,8,145,82,68,146,16,37,53,162,86,141,106,128,162,134,28,62,140,140,150,97,232,31,41,74,82,41,113,60,248,196,54,31,241,105,193,146,74,59,240,63,143,243,217,69,192,213,88,87,105,0,56,2,84,99,168,17,83,139,12,45,198,90,42,173,2,171,69,152,39,2,253,135,199,120,195,45,203,17,165,80,34,204,158,209,206,77,87,44,98,86,79,43,251,14,142,114,100,112,28,72,217,160,34,194,106,129,171,128,4,205,46,12,17,17,145,40,107,181,52,18,34,3,210,162,108,56,58,137,81,71,143,66,33,82,84,226,89,66,73,42,37,142,7,159,29,91,180,84,46,4,94,234,27,221,116,121,43,239,125,123,47,131,35,154,13,219,26,197,62,102,98,39,253,75,5,18,45,236,21,161,5,67,139,18,90,5,90,69,88,44,138,165,202,101,153,92,123,201,2,186,218,171,136,8,34,54,34,189,116,65,55,55,93,190,152,51,87,244,178,175,127,148,3,135,70,129,148,92,218,128,243,69,184,22,33,137,20,59,149,161,98,4,37,202,18,140,214,40,109,16,51,102,115,92,194,72,209,129,3,97,87,37,158,9,74,82,41,113,60,132,164,82,197,146,74,43,112,11,112,150,111,180,97,123,131,61,7,26,252,207,55,79,231,167,94,210,142,17,216,186,171,78,61,207,47,109,8,231,41,225,42,4,45,208,47,66,171,19,107,171,162,56,71,0,165,224,242,181,179,153,61,179,13,17,107,173,136,18,148,82,136,24,102,207,104,227,165,23,47,96,245,242,94,246,247,143,176,223,145,11,128,8,109,34,92,128,225,82,35,28,84,194,97,5,113,36,68,90,44,185,68,49,42,74,80,137,32,82,67,134,134,160,73,242,92,25,37,58,69,148,164,82,226,88,8,195,201,69,247,231,124,224,204,176,241,182,61,9,159,190,115,136,51,151,215,120,221,205,157,188,250,218,14,106,85,225,169,45,19,57,114,17,251,249,179,129,107,220,243,195,70,104,87,86,87,65,4,150,46,156,198,234,165,189,142,80,28,177,136,66,148,114,125,24,102,245,182,113,205,133,11,152,57,189,133,205,187,142,50,50,218,200,242,92,132,110,17,174,22,88,103,132,163,6,14,155,196,186,67,162,237,34,197,122,13,213,170,81,237,2,209,16,56,171,133,50,74,244,204,80,146,74,137,99,33,92,60,24,146,74,43,112,1,5,82,1,168,55,224,235,247,141,242,244,214,9,174,60,191,149,139,215,182,240,139,175,234,98,206,204,136,167,183,213,25,28,54,105,199,216,68,182,37,34,156,167,20,177,8,179,69,172,165,114,198,210,233,172,93,53,211,18,10,56,43,69,236,134,96,176,196,130,129,37,11,58,121,217,149,139,153,57,189,133,45,187,6,24,29,107,132,73,116,51,149,112,13,134,115,148,176,91,195,32,138,72,132,200,104,34,99,144,196,9,185,170,5,124,8,186,16,37,42,83,255,79,2,37,169,148,56,30,194,21,201,62,155,182,21,56,143,38,164,226,177,109,183,181,90,22,207,173,176,104,94,133,85,75,170,188,238,166,14,230,246,197,60,181,117,130,161,209,44,255,68,200,8,69,124,86,45,194,245,151,45,66,196,138,34,74,64,148,178,68,34,110,142,27,141,49,128,39,151,121,157,220,124,229,34,140,214,108,219,61,72,35,49,33,19,204,4,110,16,161,23,195,22,35,104,35,40,20,81,148,32,81,11,170,110,16,159,223,18,245,163,118,77,71,245,245,161,150,44,65,86,238,65,22,131,218,218,188,196,67,73,56,1,74,82,41,113,60,52,75,126,107,193,186,63,103,133,13,175,191,122,29,155,182,238,73,95,215,27,112,231,125,163,12,12,107,46,62,187,5,17,88,177,184,194,235,111,238,98,221,233,85,246,28,104,176,231,64,130,243,104,80,153,235,2,10,214,173,236,165,167,187,53,179,80,148,183,82,76,42,120,120,82,73,31,129,213,203,166,243,146,11,230,82,169,8,7,14,141,49,58,150,132,195,92,46,194,77,6,14,42,97,47,26,133,16,37,6,145,196,174,41,106,17,34,31,130,142,99,148,236,183,4,115,168,139,168,175,15,233,233,33,154,51,7,181,250,0,44,158,76,52,47,122,148,164,82,226,120,8,87,39,199,100,11,8,219,128,151,248,70,239,186,253,86,222,253,63,222,200,234,149,139,184,235,158,71,153,152,200,68,148,245,27,235,60,180,126,156,117,167,215,232,234,176,110,204,220,190,152,151,93,213,198,186,51,106,24,99,216,180,163,97,23,240,40,75,46,35,163,117,190,244,173,173,252,224,169,3,116,180,87,89,56,167,203,185,59,6,196,96,140,206,89,42,58,36,23,99,136,43,138,51,78,235,230,242,117,179,24,159,168,179,121,231,80,120,78,21,129,75,129,149,192,122,17,146,72,136,140,139,18,37,26,149,104,84,77,136,234,16,161,137,218,35,162,70,100,243,95,162,136,72,245,19,233,110,212,142,105,168,190,62,100,206,28,212,194,133,214,162,217,154,93,183,240,241,69,131,146,84,74,28,15,185,21,198,100,186,202,17,224,13,190,209,210,197,115,185,234,178,179,89,118,218,2,126,238,167,175,99,227,150,221,108,218,186,59,237,100,79,127,194,23,238,30,102,209,220,10,75,230,197,136,75,145,157,59,51,230,170,243,91,185,124,93,11,135,142,38,108,223,147,132,98,43,251,15,141,242,205,7,119,114,199,119,182,210,222,94,101,233,252,110,140,209,182,150,164,101,20,140,113,54,138,49,104,64,187,231,134,132,74,108,56,107,121,55,107,87,77,231,200,224,4,123,251,199,194,115,155,171,132,27,49,140,25,97,135,130,200,8,49,118,69,116,172,18,98,49,196,170,66,101,188,65,92,129,184,10,241,4,196,70,91,18,74,98,75,52,241,33,212,129,17,212,96,47,50,99,70,230,50,109,181,199,121,81,17,75,73,42,37,142,135,162,165,226,203,27,212,128,211,129,121,0,251,251,143,240,75,175,191,9,3,180,180,180,240,138,155,46,165,171,163,157,187,239,121,52,237,200,187,67,71,135,53,151,172,109,73,137,5,96,198,244,136,151,92,212,198,13,151,182,50,52,162,217,215,223,160,145,164,171,149,25,30,107,112,223,35,123,184,227,222,173,96,132,5,179,218,168,196,145,35,24,183,105,131,193,90,48,160,45,177,24,75,48,93,29,21,206,59,115,58,189,221,85,158,218,50,144,174,41,2,42,8,23,0,11,4,54,136,128,130,88,160,106,160,162,21,21,213,160,162,35,106,18,81,149,134,93,97,29,85,168,76,84,136,171,13,75,52,227,109,68,29,9,81,18,163,90,6,16,79,48,193,154,163,23,141,123,84,146,74,137,227,33,44,178,20,90,43,85,160,11,155,4,199,224,208,40,23,158,123,58,11,230,205,114,46,73,196,186,181,43,185,248,252,213,220,247,192,122,6,6,71,210,14,215,111,172,115,215,253,163,92,119,73,43,181,170,11,17,187,204,144,206,14,197,101,231,180,242,242,171,218,169,84,97,227,246,9,26,141,116,65,33,195,163,13,30,122,124,63,95,252,230,86,38,26,9,75,230,117,81,137,149,45,133,45,198,89,48,193,61,61,140,65,11,150,112,140,97,193,172,86,46,95,55,157,61,253,99,236,59,104,211,254,109,36,137,69,192,249,8,15,139,65,52,84,180,161,22,9,181,196,80,83,66,77,187,242,14,177,162,170,21,213,170,37,155,106,212,32,198,80,169,107,162,170,16,79,56,130,49,85,36,62,132,218,147,175,243,242,130,39,151,146,84,74,156,8,194,202,109,97,165,183,163,192,205,238,57,3,131,35,220,114,253,101,105,22,172,32,44,152,219,199,207,190,234,26,54,110,217,197,166,45,187,210,14,15,29,213,124,234,142,33,122,187,21,43,151,216,53,137,158,56,4,168,85,133,179,87,86,185,245,166,78,102,245,70,108,220,94,103,100,204,164,109,26,137,230,135,27,14,241,169,59,55,177,175,127,132,197,243,58,104,107,141,173,229,146,234,45,9,219,118,15,178,231,192,48,223,249,254,126,158,220,58,192,83,91,7,216,188,107,152,174,142,10,35,163,13,6,135,147,244,152,192,52,3,151,9,244,24,97,173,178,229,45,23,8,244,8,140,33,180,40,77,139,22,106,2,45,26,187,48,82,59,162,137,132,138,137,137,165,65,92,215,68,78,147,81,166,130,242,217,187,77,138,72,189,224,146,236,94,208,140,89,226,89,67,40,210,182,97,87,35,119,3,211,129,95,1,94,227,27,126,251,75,31,100,193,188,217,32,54,3,22,112,185,37,134,143,124,244,11,188,251,207,254,207,164,206,127,229,181,93,188,229,181,157,182,45,32,42,204,101,201,136,228,235,247,141,112,231,125,163,60,182,97,34,35,160,224,27,124,254,153,51,233,235,105,97,219,158,1,14,28,28,227,224,209,241,92,59,105,242,109,247,179,58,124,164,240,60,64,63,112,64,132,45,6,54,139,97,163,17,54,68,138,186,214,52,48,76,152,152,137,138,166,142,102,130,10,19,218,61,79,234,212,39,170,52,218,135,105,28,173,145,76,155,70,50,115,61,250,238,23,224,237,70,74,75,165,196,137,192,155,236,190,68,100,88,176,105,0,120,153,111,56,48,48,204,117,215,92,136,16,165,174,136,255,248,186,179,87,114,195,53,23,240,185,47,127,135,137,137,122,218,249,67,143,143,243,244,214,58,151,174,109,161,86,147,236,128,33,113,24,56,109,65,133,235,46,110,227,204,21,85,246,245,39,236,59,152,11,21,179,107,255,8,27,182,15,112,224,240,56,35,227,217,123,33,153,136,184,0,210,49,126,78,143,17,182,105,195,230,187,44,23,225,2,132,27,20,92,143,225,92,129,78,165,56,34,6,209,134,170,17,98,52,49,17,49,66,164,34,162,138,65,105,151,7,211,114,20,57,56,103,210,106,233,23,4,177,148,164,82,226,68,81,212,86,188,96,91,199,134,103,187,1,118,238,62,192,235,94,115,61,181,90,13,92,246,43,72,26,169,153,217,219,205,207,253,204,181,236,239,63,204,227,79,109,75,59,223,186,187,193,189,143,140,113,214,242,42,51,186,227,128,80,28,201,4,166,196,172,222,152,107,47,105,227,165,23,181,50,48,162,217,188,179,145,181,41,140,216,231,198,121,152,224,249,177,136,197,159,240,20,22,11,96,195,223,8,109,8,115,157,216,251,26,17,86,33,116,24,225,136,210,160,20,149,196,102,14,71,216,59,3,168,138,118,133,187,109,41,6,10,75,3,158,247,196,82,186,63,37,78,20,197,154,42,157,192,52,172,11,244,42,224,54,223,240,247,223,246,38,126,225,13,183,16,41,251,155,37,34,24,52,98,12,136,118,73,246,134,15,252,221,39,249,203,15,127,42,119,144,121,125,138,191,248,157,94,86,44,174,34,210,196,13,42,204,114,1,246,246,55,248,250,247,198,249,236,215,7,25,117,186,75,209,237,121,251,155,206,228,186,203,231,3,202,17,149,39,171,24,196,118,42,40,183,219,166,245,110,222,118,132,225,209,6,251,250,71,216,119,112,152,205,219,143,176,105,251,97,246,31,28,158,218,157,202,246,245,3,223,195,240,81,20,7,21,140,37,13,70,21,140,53,96,20,205,184,110,48,161,219,152,24,27,163,222,214,70,50,127,35,201,221,47,0,119,168,36,149,18,39,10,111,161,248,60,149,14,108,244,103,58,176,0,248,152,111,184,106,249,34,190,248,137,247,187,197,127,130,18,210,80,175,136,73,73,69,68,115,199,55,238,231,109,127,240,119,12,14,101,43,141,187,218,225,119,126,161,155,155,175,108,119,237,61,154,19,11,88,203,102,120,164,202,103,255,235,48,119,222,55,72,255,97,235,94,133,57,47,103,175,236,225,13,47,95,206,217,171,102,218,14,130,178,10,185,215,142,88,196,117,96,57,39,107,55,60,50,193,230,29,135,185,247,225,29,108,222,113,152,31,62,181,47,29,201,20,214,207,151,48,124,84,20,253,58,97,36,18,70,19,197,136,24,198,149,97,124,24,198,218,135,105,140,79,163,254,66,32,150,210,253,41,113,50,8,163,64,161,11,36,192,42,96,46,64,255,161,163,252,220,173,55,209,82,173,165,185,34,6,151,51,130,113,145,25,75,46,203,150,204,229,21,55,92,200,192,224,8,143,63,181,29,128,137,6,124,235,161,49,230,246,69,44,95,84,177,243,61,61,124,48,113,83,114,81,8,21,170,149,152,53,171,58,249,169,151,206,164,175,183,202,230,237,163,12,143,234,212,229,217,119,112,148,59,239,221,197,198,29,71,185,250,194,5,8,81,182,38,0,16,241,211,65,185,99,136,227,154,140,80,4,168,86,99,102,205,236,228,188,53,243,184,246,178,21,188,234,186,211,153,63,103,26,32,236,220,123,52,187,88,25,193,172,64,120,141,8,137,81,236,5,18,35,168,40,65,26,64,213,29,34,30,134,3,125,176,246,8,102,235,51,255,91,253,196,80,146,74,137,147,197,84,247,0,154,13,172,245,141,150,44,154,203,170,21,11,193,104,180,241,9,105,6,163,221,163,241,43,120,12,93,157,109,220,112,205,57,44,156,55,131,123,31,120,130,241,137,6,6,248,246,67,99,236,237,111,112,229,121,173,0,217,68,119,200,92,156,200,89,18,150,92,80,176,108,65,39,175,186,118,14,237,45,49,79,108,26,164,222,200,178,111,123,166,181,112,253,101,11,145,180,92,127,96,177,56,146,145,156,37,3,16,165,150,75,198,114,202,145,76,133,165,139,122,185,234,226,165,252,212,117,171,153,152,104,112,232,232,40,35,163,19,233,56,221,88,207,17,184,16,97,171,130,1,3,138,8,137,34,164,161,49,70,65,212,6,7,59,159,223,196,82,146,74,137,147,65,40,214,22,235,172,140,98,11,55,89,24,205,141,215,94,236,95,164,105,244,6,157,102,185,166,22,190,177,110,205,25,43,23,112,205,229,103,241,185,175,124,143,113,183,118,104,211,142,6,27,183,79,112,237,197,109,118,0,5,98,9,111,146,40,226,210,255,37,114,54,133,226,244,165,93,188,236,234,57,84,42,17,27,183,13,83,111,24,110,127,243,185,204,153,217,137,37,147,200,9,202,42,32,38,220,62,114,110,143,248,37,212,8,136,10,72,198,183,23,170,149,152,243,214,44,228,186,43,86,48,125,90,43,59,247,28,97,100,116,34,92,113,216,45,112,3,194,128,50,108,215,10,81,26,84,12,73,2,106,2,211,132,88,158,87,110,80,169,169,148,56,25,248,176,178,23,108,219,176,186,74,55,208,3,124,8,155,153,10,192,227,223,253,120,246,73,227,243,77,180,237,200,9,182,130,70,137,160,148,65,41,136,34,24,28,28,226,181,191,244,62,214,63,181,147,200,237,59,239,140,42,127,246,182,30,58,218,84,94,183,144,216,90,39,68,246,185,216,168,183,82,110,152,198,138,177,162,170,68,113,151,251,76,102,137,88,178,144,84,188,21,178,125,41,129,16,28,83,4,140,74,245,220,212,69,10,3,209,34,89,6,240,208,4,159,189,227,49,62,254,185,135,154,93,207,245,24,222,141,93,45,61,148,40,70,170,138,145,49,197,152,8,227,227,227,212,23,47,166,113,247,221,110,73,211,243,4,165,165,82,226,84,80,180,84,124,206,202,108,96,181,111,180,114,233,2,150,44,154,237,172,18,157,234,42,198,36,248,181,57,214,82,73,220,36,180,207,91,106,21,94,121,227,121,60,252,131,205,236,216,125,200,70,120,14,38,124,247,209,49,174,189,164,149,106,197,79,100,175,119,216,165,73,66,197,89,41,217,93,87,109,102,175,66,169,78,68,69,238,253,204,42,241,109,72,251,145,244,51,217,251,228,124,24,17,239,254,120,2,241,132,162,2,66,177,132,84,173,84,88,115,250,92,174,187,108,37,155,182,245,179,255,96,110,181,116,31,194,133,198,112,159,17,26,42,194,52,236,90,0,163,71,156,197,114,16,214,174,197,108,221,138,187,64,207,125,148,164,82,226,100,113,44,23,40,193,222,154,3,128,197,139,102,115,254,57,171,240,46,142,215,85,44,161,144,166,211,35,246,185,184,232,142,49,9,45,45,85,110,125,229,197,60,246,228,14,54,108,177,209,149,195,131,154,239,62,58,198,75,47,105,165,86,17,114,174,143,242,174,143,35,4,175,141,136,2,85,35,138,219,178,161,139,183,60,84,160,165,52,113,123,188,5,34,153,229,34,100,237,195,60,156,220,235,212,194,201,172,160,142,246,26,215,93,126,58,195,35,227,236,216,115,132,70,35,93,141,221,13,44,81,194,119,181,6,79,44,213,42,232,8,19,69,112,244,40,102,205,26,120,190,16,75,73,42,37,78,5,197,40,144,191,127,242,8,176,14,155,117,202,174,61,253,188,241,181,47,41,144,137,203,87,49,73,78,87,17,177,164,99,141,2,13,98,45,254,159,186,233,60,118,238,62,200,250,167,236,186,161,67,3,154,239,121,98,169,198,206,42,113,67,17,95,114,210,114,157,136,2,19,17,197,211,92,164,71,165,26,10,68,96,124,91,149,35,140,28,41,41,111,197,216,253,169,174,34,228,45,20,149,57,64,161,91,149,187,100,34,156,191,102,17,231,159,189,144,187,191,187,33,36,150,185,24,230,43,225,33,23,133,55,137,198,212,4,147,40,76,165,130,57,124,248,249,67,44,37,169,148,56,85,100,126,71,62,109,191,7,23,5,26,26,26,101,197,178,121,44,89,56,155,140,60,176,143,64,90,158,192,73,6,54,7,37,73,235,207,250,28,149,155,175,61,139,109,59,251,89,255,148,173,207,114,120,192,90,44,175,122,105,87,234,234,136,248,208,179,191,55,188,35,153,168,221,22,159,245,86,67,90,30,70,185,232,143,47,164,109,201,66,137,224,18,107,178,182,138,192,10,241,100,162,82,203,40,115,129,188,213,226,173,157,162,206,98,31,167,79,107,231,252,53,139,248,242,93,235,195,235,185,8,225,82,129,123,149,80,39,193,218,113,99,24,53,134,137,219,225,240,97,204,161,67,207,109,66,129,146,84,74,156,26,142,229,2,41,224,6,223,176,86,141,185,230,242,179,73,243,185,140,182,196,225,220,29,147,38,180,233,180,170,155,184,196,56,140,113,139,11,13,55,191,212,19,203,30,68,44,177,236,57,208,224,138,115,167,131,138,221,132,143,50,203,3,235,6,69,241,180,76,132,149,200,105,33,145,147,100,93,40,90,2,55,136,236,117,40,214,134,214,75,74,26,142,152,194,208,180,61,142,123,46,146,230,242,231,72,7,161,103,90,59,179,102,118,113,223,195,155,237,39,109,23,221,192,18,52,247,249,139,163,98,208,160,163,113,76,117,4,51,99,49,198,221,163,232,57,139,146,84,74,156,42,138,46,144,23,56,70,128,235,176,119,48,100,215,158,126,126,233,245,215,17,84,56,1,156,158,226,200,67,2,203,69,148,39,21,55,39,197,181,17,184,233,154,213,220,243,192,70,118,238,62,2,2,79,111,171,179,183,127,130,43,207,155,150,14,197,78,222,10,0,42,158,134,82,142,231,124,152,89,194,73,174,156,39,227,172,21,95,36,151,204,114,17,21,146,138,211,89,210,220,21,223,23,147,250,181,157,68,238,60,60,153,144,181,17,97,233,162,62,214,172,154,199,189,15,109,162,222,72,23,64,206,53,176,66,195,125,162,48,202,160,85,21,163,53,38,174,96,14,143,162,151,47,199,236,217,243,220,205,184,45,73,165,196,51,193,84,137,112,189,184,40,208,68,189,193,220,217,211,89,181,124,190,115,117,242,58,138,245,134,172,134,98,220,115,75,44,160,148,37,34,17,131,24,131,18,195,13,87,175,228,27,247,60,197,129,131,195,0,108,216,54,206,242,197,45,44,153,223,234,92,31,171,151,136,170,160,226,174,130,0,27,10,181,217,196,199,88,139,34,151,171,34,153,101,34,161,117,146,134,163,189,219,19,230,177,72,74,80,89,36,40,111,161,20,95,207,154,57,141,243,215,44,230,139,223,248,97,120,93,231,138,97,30,194,3,162,48,13,91,212,78,171,8,109,42,152,225,97,204,115,57,34,84,146,74,137,83,197,177,92,160,1,130,68,184,193,193,17,94,126,195,5,100,203,89,178,69,133,130,183,88,156,80,235,36,13,239,2,41,229,139,97,91,11,166,165,37,230,21,215,157,193,191,252,199,253,76,76,36,24,3,247,61,50,200,117,151,246,210,213,94,1,101,245,148,40,234,178,17,161,84,207,136,221,136,35,196,56,98,8,93,147,52,169,77,130,207,228,173,22,47,230,102,122,73,62,124,156,111,239,173,38,47,242,102,255,167,174,145,59,86,79,119,7,107,206,152,207,157,223,126,60,91,69,45,44,70,56,130,102,11,26,19,25,180,22,140,137,208,45,45,232,231,178,112,91,146,74,137,103,2,63,107,188,96,27,134,150,87,1,115,0,118,239,59,196,220,89,211,88,181,108,46,89,22,173,70,185,242,143,214,253,241,100,131,181,76,220,6,198,17,138,181,102,4,67,75,77,88,182,184,135,207,125,237,113,0,234,13,195,83,91,71,185,229,234,62,64,80,82,67,197,157,248,68,184,212,186,8,93,26,103,193,100,4,64,102,165,24,63,233,149,35,145,48,236,156,137,180,121,210,200,92,171,141,219,251,249,200,39,238,99,211,246,126,150,45,154,65,181,234,34,81,133,236,220,144,188,102,207,156,198,172,25,93,220,251,208,166,240,250,94,128,226,105,81,236,19,193,36,144,152,49,171,175,212,70,49,67,96,14,28,120,238,185,65,114,252,38,37,74,76,9,31,249,241,183,66,237,196,174,90,158,14,172,0,254,202,55,156,51,107,58,255,241,145,183,211,213,209,66,170,171,56,50,217,189,239,16,159,251,234,131,60,240,200,230,76,121,16,91,73,73,12,116,119,213,184,254,234,211,185,241,170,85,76,239,110,65,72,128,6,111,122,219,39,185,227,238,141,174,61,188,235,182,37,220,114,245,108,162,74,31,74,252,68,118,100,96,178,20,251,148,12,84,48,177,77,144,139,226,147,219,140,35,11,37,62,138,236,92,37,103,145,164,150,9,12,141,140,243,237,7,54,243,169,47,63,194,150,29,253,169,38,212,209,86,229,35,127,246,122,102,207,236,246,39,134,191,191,98,170,223,24,48,78,175,249,232,167,238,225,95,63,125,175,187,62,0,140,24,248,61,12,223,87,134,1,137,25,52,13,134,43,48,214,223,96,124,217,50,234,207,181,140,219,146,84,74,60,19,40,242,41,251,29,100,164,210,139,189,133,199,77,190,241,203,175,63,151,63,250,221,159,73,43,39,121,75,228,23,126,235,31,120,232,209,45,39,116,192,51,86,244,113,235,43,206,230,134,171,151,210,213,81,97,213,149,31,244,115,156,57,51,42,124,233,239,175,34,170,116,166,86,70,230,222,132,86,70,168,151,72,38,190,138,61,37,155,125,31,186,66,62,236,236,73,199,53,21,120,122,115,63,255,241,229,239,243,237,7,54,217,53,62,222,125,11,130,63,203,22,206,228,3,239,124,45,29,237,45,206,88,9,114,90,82,151,200,29,65,224,189,31,254,50,95,253,230,99,248,97,24,195,54,5,183,39,138,221,2,3,104,6,235,17,35,81,196,88,146,48,177,113,35,13,66,21,252,228,17,14,34,220,23,194,20,158,79,121,172,210,253,41,241,76,96,85,209,76,168,245,119,47,244,150,203,114,224,12,223,248,169,77,123,0,205,5,231,44,113,26,10,128,225,189,127,251,37,38,194,59,184,31,3,7,14,14,115,215,189,155,249,199,143,63,200,93,247,108,166,86,141,24,24,182,171,129,7,71,52,23,174,153,203,220,190,14,50,151,196,235,41,126,168,94,168,149,180,77,154,111,146,146,76,228,114,85,252,194,68,111,173,136,181,84,80,220,125,255,38,222,241,231,95,229,159,63,249,61,54,108,237,103,162,158,149,175,76,43,104,186,105,119,240,200,8,79,108,220,195,141,87,157,153,29,35,77,216,11,220,33,247,252,210,243,87,240,200,250,237,236,235,31,240,93,118,107,107,188,253,80,25,116,195,160,141,66,87,71,209,181,209,19,10,51,75,97,83,225,243,171,64,45,6,233,5,213,179,154,104,218,52,162,158,30,84,97,139,14,29,154,212,79,112,150,25,74,82,41,241,76,16,146,74,149,172,42,92,43,150,84,110,115,143,41,30,124,116,11,115,102,117,179,106,217,108,112,86,251,140,222,14,238,186,231,201,92,199,179,122,99,150,47,106,165,163,45,226,208,209,230,132,115,224,224,8,3,67,19,185,125,111,120,249,82,102,244,180,90,34,113,67,204,52,145,108,2,135,86,72,150,90,239,243,92,66,43,198,101,203,6,174,208,231,191,241,56,239,120,223,87,56,120,100,36,247,147,109,128,101,43,207,224,21,175,121,3,191,254,182,119,242,141,59,62,207,248,248,4,24,216,215,63,64,123,91,43,103,174,154,151,90,73,62,122,148,15,57,91,92,122,254,74,62,127,231,195,33,89,173,22,120,88,195,193,200,144,196,10,173,65,15,87,208,195,195,152,133,11,97,245,1,100,235,100,242,80,128,92,101,137,195,111,210,123,46,170,189,157,184,167,7,181,191,141,248,80,23,209,145,86,226,161,33,226,177,49,226,145,17,226,209,81,187,141,143,19,141,143,163,186,187,81,211,166,161,250,6,144,67,161,121,85,64,73,42,37,158,9,188,72,27,222,185,176,21,155,163,114,61,112,121,179,15,221,117,207,19,12,12,141,112,217,5,203,0,205,233,203,103,179,107,239,97,158,218,180,47,104,101,120,207,175,47,228,151,95,59,143,91,174,238,99,110,95,11,181,106,196,214,221,163,147,250,243,137,171,29,109,49,183,221,122,58,181,90,32,140,170,168,224,238,64,40,150,166,11,11,211,80,50,25,249,224,93,34,255,60,226,243,95,95,207,187,63,112,71,22,24,55,208,222,209,201,207,255,202,111,242,238,63,249,75,126,254,205,191,193,121,23,92,194,140,190,62,46,184,232,10,238,252,234,231,169,215,39,48,6,30,127,122,23,23,174,61,141,222,238,142,76,187,201,121,30,217,50,131,90,181,66,207,180,14,190,243,192,211,233,249,25,195,233,10,238,212,134,196,52,172,181,162,149,93,31,212,58,0,251,102,218,187,35,246,244,16,185,77,245,244,160,186,186,136,250,59,136,14,117,217,173,210,65,60,118,152,74,60,78,148,180,164,249,69,21,177,49,249,106,167,80,169,10,213,154,162,146,68,196,74,217,45,26,38,26,110,160,234,157,72,79,15,226,200,101,18,74,82,41,113,170,8,35,63,97,237,218,118,183,189,21,91,195,22,128,139,207,174,177,115,95,230,34,252,240,137,157,60,185,113,55,107,206,152,79,87,71,141,151,92,182,146,93,123,142,164,196,82,111,192,215,191,123,132,139,214,76,99,201,252,54,214,172,156,206,13,151,245,241,250,91,22,178,100,126,59,34,194,214,93,217,13,202,0,38,234,154,27,175,92,196,140,233,109,217,132,13,66,196,161,190,146,174,86,198,71,128,50,235,129,192,53,74,51,110,17,118,237,27,228,173,127,248,57,198,39,236,121,24,3,183,188,250,86,62,254,153,59,184,232,194,75,153,62,173,155,72,129,114,199,156,49,179,143,233,189,51,249,230,55,238,112,231,148,48,62,145,112,197,69,43,201,185,62,169,155,22,100,245,2,203,151,204,102,195,150,125,108,219,117,208,135,154,187,221,77,206,30,51,160,181,160,107,10,83,195,26,82,73,140,138,99,148,82,246,86,172,198,164,110,105,60,93,136,219,20,113,69,83,29,135,74,162,168,52,132,74,67,81,171,37,84,149,166,166,52,45,145,161,214,48,180,104,123,63,163,90,4,213,138,80,73,132,138,24,34,19,19,85,199,144,81,13,141,46,100,206,48,4,196,98,160,36,149,18,167,14,111,90,251,48,178,23,107,219,177,137,111,63,237,27,158,181,188,202,31,255,102,47,123,251,27,108,217,153,185,50,91,119,28,228,174,239,60,201,53,151,174,160,171,163,202,5,107,23,242,157,7,54,113,240,176,77,108,171,55,12,247,253,224,40,47,187,114,6,45,213,10,74,69,180,84,99,86,157,214,197,141,151,207,229,182,91,87,176,242,180,105,44,153,111,239,25,116,205,69,115,121,229,75,151,48,121,245,113,96,113,164,11,10,131,201,236,242,85,210,104,79,78,127,201,72,230,55,223,253,121,182,236,60,12,216,217,243,138,87,191,142,63,253,139,191,35,86,16,43,65,41,33,114,105,251,254,70,243,43,86,157,201,131,247,223,203,222,221,59,49,6,54,108,221,207,205,215,156,77,87,135,95,53,93,32,181,148,200,172,104,123,193,57,75,249,207,175,61,148,186,65,2,171,149,112,7,194,132,24,140,191,123,107,93,19,181,40,162,9,136,181,166,210,104,80,109,213,84,99,77,69,26,212,26,134,202,120,149,90,45,166,66,68,13,69,13,69,11,9,181,134,166,69,105,90,137,105,69,209,42,138,86,132,54,81,180,36,154,154,129,90,36,84,180,161,98,20,81,36,136,170,194,248,56,208,131,153,53,8,135,2,109,165,36,149,18,167,10,33,75,120,11,173,148,14,224,117,88,145,22,128,55,188,172,131,165,11,42,92,178,182,149,217,189,17,247,61,58,158,118,50,56,60,206,199,62,115,63,15,60,178,149,254,195,195,220,244,146,85,108,222,113,136,131,135,44,177,12,143,104,238,123,244,40,23,175,157,78,87,135,77,185,23,229,181,8,197,146,5,157,92,112,214,76,94,249,210,37,92,126,238,44,242,233,242,69,75,37,140,252,20,147,220,66,119,8,50,77,197,78,238,207,222,177,158,127,253,236,195,246,45,3,43,207,56,139,191,252,208,191,208,209,214,66,28,41,71,44,88,98,17,16,17,254,243,51,159,224,174,175,127,141,129,129,1,182,110,217,148,94,180,57,125,211,57,107,213,124,114,110,24,2,70,89,3,6,73,233,166,86,173,176,112,238,76,254,235,158,245,153,27,4,51,141,113,43,154,109,194,177,146,10,81,189,65,44,154,170,36,212,196,146,69,85,98,90,80,212,52,180,214,18,90,116,68,139,54,180,70,134,182,6,180,70,208,166,132,86,3,237,70,211,102,132,118,211,160,157,136,86,18,90,35,161,213,40,106,90,83,141,140,181,128,0,145,58,162,106,152,241,113,140,154,129,30,24,200,60,66,175,102,149,40,113,50,8,69,192,226,218,159,42,112,65,216,248,210,115,90,82,213,224,218,139,219,104,107,85,252,197,255,61,204,200,88,214,230,193,31,236,224,193,31,236,104,122,176,13,219,70,249,226,221,251,249,213,159,93,114,2,195,154,106,183,106,178,51,155,190,249,183,28,161,248,105,34,194,7,255,179,161,34,68,0,0,32,0,73,68,65,84,239,189,105,182,171,1,254,244,3,255,64,119,247,116,68,25,87,181,206,207,54,131,49,240,127,254,225,67,124,232,131,239,167,86,171,96,180,70,235,204,24,249,194,127,61,202,173,175,184,8,27,86,15,116,21,71,40,62,142,236,113,197,69,167,179,246,140,69,124,127,253,54,191,235,114,81,124,166,161,217,234,220,156,170,105,48,97,132,68,148,203,87,49,72,100,80,218,61,10,72,163,130,138,18,247,220,16,41,131,210,16,169,136,88,52,17,138,179,69,115,11,17,171,209,180,27,119,9,196,64,100,131,97,143,106,195,23,69,248,180,68,16,215,209,113,131,100,124,156,100,25,232,141,238,142,214,197,43,93,162,196,137,192,207,4,47,210,134,132,50,29,152,225,27,94,124,118,141,246,182,252,215,236,210,115,90,120,223,237,189,172,89,94,61,225,3,254,251,151,118,229,94,79,65,31,39,48,236,169,246,55,121,207,37,156,124,253,59,27,217,181,111,16,95,90,247,149,175,125,3,103,156,121,14,74,41,148,216,45,86,66,28,43,226,72,136,35,197,31,190,251,15,232,235,155,197,172,89,115,152,217,55,11,17,133,49,160,53,78,55,114,12,99,130,44,91,239,250,224,194,218,105,65,111,225,173,191,120,99,122,124,0,163,249,25,52,211,76,66,183,134,233,26,166,27,97,186,174,211,163,12,61,10,187,161,233,197,208,131,98,70,172,233,21,97,62,138,43,68,184,92,34,122,35,197,124,109,120,165,81,252,141,18,254,72,132,11,68,236,98,80,111,25,165,30,32,156,173,132,223,55,240,106,20,173,18,209,50,94,163,218,94,39,30,155,159,133,169,75,75,165,196,169,162,184,152,176,234,182,87,132,141,46,89,219,146,207,100,112,95,212,165,11,170,188,247,246,94,54,237,152,224,190,71,198,249,216,23,115,101,22,39,97,197,226,142,19,31,217,169,49,14,77,201,69,224,206,123,54,0,217,132,254,141,183,189,51,163,1,241,220,163,136,68,19,41,69,226,45,19,21,97,12,68,81,140,168,136,164,161,83,123,233,169,205,123,89,113,218,220,32,48,43,174,134,139,119,137,252,120,12,70,52,203,151,206,225,198,171,207,230,203,223,120,212,223,182,245,34,132,175,1,187,129,9,3,117,165,153,46,138,25,137,97,177,18,218,181,176,218,119,35,112,186,17,71,101,6,180,123,174,177,127,68,163,44,225,249,163,42,247,58,136,60,101,49,42,225,173,34,124,161,209,160,94,133,241,122,66,212,168,167,164,66,73,42,37,78,22,199,114,125,106,192,85,97,227,107,47,105,227,88,88,186,160,202,178,133,85,222,248,242,78,126,240,116,131,31,62,221,96,211,142,58,143,60,57,204,240,168,97,249,194,86,222,246,166,133,172,90,210,253,163,56,151,0,161,53,149,39,151,157,123,6,210,91,12,205,153,183,144,249,11,23,187,119,76,214,28,48,40,87,112,74,241,230,95,254,85,62,243,233,255,71,111,111,15,35,195,67,76,76,212,17,201,114,233,7,6,51,93,41,61,158,128,73,5,91,19,116,109,197,147,95,250,217,171,249,210,55,30,205,14,109,120,171,54,28,20,97,58,208,227,61,54,33,245,218,188,124,148,101,1,251,35,58,15,43,244,180,178,44,224,136,206,174,174,116,108,198,64,189,94,103,100,100,148,70,163,1,134,14,173,89,29,69,60,220,80,84,168,16,37,9,106,217,50,212,198,141,36,37,169,148,56,89,20,93,159,112,117,242,117,4,174,207,201,184,55,0,107,87,182,178,238,244,10,74,98,84,20,19,69,17,177,170,161,34,130,100,182,31,21,252,111,118,8,59,13,239,255,193,206,244,229,220,5,139,221,138,37,147,174,181,214,198,110,137,6,109,44,177,188,231,127,189,151,107,175,187,153,15,188,255,79,233,153,105,56,253,172,117,220,253,245,175,164,169,251,118,230,251,153,46,193,241,82,74,0,12,198,184,215,2,115,103,77,231,23,127,230,42,190,252,141,71,6,247,30,56,210,9,116,99,107,220,2,57,25,38,237,206,19,71,206,32,50,121,226,241,86,73,181,86,99,198,140,153,172,88,177,138,40,138,16,165,80,202,138,219,253,253,7,185,247,222,123,211,62,34,152,142,162,18,55,136,39,4,165,117,118,136,146,84,74,156,10,166,18,104,47,242,13,218,90,225,93,183,77,63,110,71,169,223,222,236,189,38,143,210,172,97,17,126,78,62,27,48,194,220,190,78,118,239,207,52,21,75,34,246,166,243,90,11,90,44,161,24,5,162,93,65,7,13,231,95,122,37,31,189,232,114,26,90,243,193,15,252,41,119,221,249,21,192,78,224,204,245,145,32,175,63,155,253,126,253,182,93,109,104,220,242,0,195,47,223,122,53,23,174,93,122,248,183,223,243,177,218,240,232,120,53,119,129,220,83,79,36,125,51,186,152,51,179,139,40,50,204,158,209,201,172,190,46,4,195,61,15,110,102,243,246,131,40,177,231,82,173,86,89,182,108,5,189,51,102,32,162,80,110,49,149,189,117,138,203,229,9,244,21,99,192,88,129,56,210,21,162,150,58,42,210,168,70,163,212,84,74,156,26,252,207,105,152,77,235,137,37,189,61,199,236,158,120,146,64,123,44,120,30,8,68,65,183,63,193,166,207,75,211,246,39,142,102,150,200,212,253,248,168,7,2,243,103,119,179,123,255,32,0,79,60,246,8,218,8,218,24,18,237,86,28,139,216,197,203,169,129,97,73,197,184,54,90,11,79,172,127,204,47,117,162,163,189,70,87,71,43,153,251,36,238,152,6,209,193,5,144,224,125,99,210,250,120,107,86,45,92,248,225,255,253,38,254,225,223,238,102,120,100,20,3,156,123,230,98,16,195,57,171,23,210,217,86,101,249,146,62,32,193,104,141,136,191,43,164,93,22,113,201,185,75,184,237,29,159,76,201,103,98,98,130,56,142,240,229,60,253,33,197,49,148,138,34,148,91,169,157,90,62,134,8,67,20,25,68,187,129,57,82,41,53,149,18,39,133,144,80,194,58,42,49,54,47,37,21,80,214,172,60,190,235,19,242,132,127,106,194,89,126,210,107,110,167,248,192,73,51,80,190,159,11,215,46,224,123,143,238,64,4,134,6,7,248,227,63,120,27,239,252,227,247,35,198,146,128,45,38,43,216,74,118,130,49,226,238,72,34,36,6,26,70,241,196,250,31,166,231,182,226,180,57,174,103,219,54,71,162,222,88,49,38,29,134,241,228,130,178,33,107,129,229,167,205,229,207,127,255,86,103,209,184,40,178,55,165,36,193,222,193,128,244,56,225,194,226,211,22,206,228,149,215,175,225,179,95,253,129,125,87,96,253,250,199,88,179,102,45,157,93,93,110,60,6,173,53,81,164,92,72,92,167,68,163,237,29,86,124,225,62,123,25,76,118,133,75,82,41,113,50,104,70,42,222,74,57,59,108,184,116,65,165,121,7,129,48,216,236,189,162,123,115,34,238,142,157,171,205,45,145,230,31,48,77,73,198,246,51,153,129,94,114,217,114,254,250,95,238,77,127,165,63,246,145,191,230,201,245,143,240,11,191,242,155,76,159,54,13,229,116,9,59,86,205,19,143,61,202,224,192,81,48,134,39,30,127,148,193,193,163,236,222,185,35,213,47,206,91,179,36,149,97,197,233,38,18,16,105,234,13,249,177,26,191,232,208,151,220,116,122,75,122,49,61,105,144,62,26,36,43,54,149,190,231,158,27,195,91,94,119,25,251,246,15,112,239,195,91,49,64,146,36,172,95,255,24,231,159,127,129,115,121,20,74,129,49,54,146,101,116,70,82,74,217,91,180,82,193,242,89,43,16,4,239,74,82,41,113,178,8,23,168,196,100,150,202,105,97,163,179,87,86,115,225,72,15,63,49,67,228,181,146,58,246,158,61,193,62,1,176,165,35,237,237,76,3,156,180,21,210,132,124,154,246,225,219,9,103,44,235,227,165,151,46,227,235,247,108,76,199,255,224,125,223,226,193,251,190,53,73,4,205,109,100,66,168,159,219,90,195,220,190,238,148,72,236,228,119,215,37,173,202,175,29,113,100,37,42,173,251,227,47,134,183,76,252,229,9,77,59,201,72,39,119,142,153,165,226,137,229,237,111,190,154,189,127,242,121,54,237,56,8,192,196,196,56,15,63,252,48,231,172,91,71,181,90,37,73,192,22,29,87,24,99,114,212,21,169,212,22,50,0,74,50,219,168,76,126,43,113,50,8,167,121,49,79,101,177,111,212,214,10,125,189,113,42,108,22,39,219,84,150,138,37,148,230,214,201,100,145,86,55,247,118,204,137,22,65,59,209,154,70,118,50,190,247,119,111,226,194,179,23,218,61,5,146,52,225,243,112,43,238,3,86,156,54,139,107,46,57,29,171,113,216,51,51,78,147,209,198,222,22,54,100,56,19,108,147,14,158,218,86,146,246,53,57,154,148,31,99,136,246,246,42,239,251,159,183,48,171,55,203,1,26,30,30,230,137,199,31,71,107,141,49,218,137,209,154,254,254,254,160,71,16,97,72,64,139,27,62,221,16,199,118,168,229,218,159,18,39,3,79,34,225,122,159,86,236,122,159,95,243,141,78,63,173,202,117,151,182,53,37,145,166,46,78,176,95,137,189,49,152,160,81,42,70,148,178,225,77,252,189,120,108,99,91,227,53,74,63,40,126,141,79,144,148,145,174,160,9,214,251,164,191,254,18,172,176,73,25,43,168,109,146,91,51,36,180,212,98,94,125,195,89,204,155,211,205,224,208,56,59,247,30,205,159,71,96,177,132,232,234,168,177,246,140,249,246,142,2,75,103,243,183,127,244,122,186,58,91,179,120,46,97,162,91,214,89,214,119,168,135,100,110,155,53,11,236,65,77,176,126,64,188,133,98,92,35,49,76,166,38,147,246,95,173,68,156,181,106,14,119,223,191,145,122,221,146,241,200,200,40,218,24,166,79,239,70,107,219,118,247,238,221,12,14,14,165,35,210,138,191,17,24,17,24,51,138,241,120,144,137,168,131,198,161,67,232,210,253,41,113,50,240,95,245,208,5,138,40,184,62,167,45,200,127,173,78,40,12,236,96,191,246,13,124,181,182,99,127,214,151,82,56,182,193,109,51,74,78,36,242,227,227,194,153,251,224,35,64,190,237,171,175,63,139,87,223,176,134,93,123,143,178,115,175,173,204,150,145,130,160,4,230,205,153,206,252,217,211,29,55,137,235,163,64,30,130,141,231,42,2,77,197,89,22,89,22,9,24,19,188,103,50,130,46,94,151,148,87,50,237,37,211,105,2,13,201,152,252,7,4,150,46,154,193,251,126,247,22,110,251,131,207,164,159,217,190,109,27,198,24,150,44,57,141,70,67,51,52,52,232,52,22,48,134,109,146,160,37,66,11,104,198,208,74,50,198,42,73,165,196,137,34,180,169,133,44,242,19,1,179,195,134,179,123,79,220,0,158,236,214,248,253,126,103,98,191,166,129,133,211,116,17,160,209,24,127,143,31,56,142,78,82,248,104,208,52,47,214,102,186,74,177,213,252,57,221,204,159,51,157,188,165,145,183,128,60,41,24,81,136,11,9,219,5,135,222,90,202,124,36,203,101,62,147,214,147,135,179,46,116,214,93,254,202,153,64,42,201,94,219,197,144,218,69,146,76,22,81,242,77,115,254,155,125,88,186,168,151,183,191,249,10,62,244,177,251,24,30,177,110,232,142,237,219,25,27,27,99,229,202,85,12,13,101,74,172,18,182,106,72,84,66,66,132,142,20,58,50,152,184,102,123,43,73,165,196,201,192,91,39,161,166,210,196,82,57,241,76,90,63,119,154,91,36,137,117,113,220,243,98,165,142,108,154,135,100,49,133,78,146,35,25,111,145,4,111,28,83,240,53,86,252,20,147,126,54,189,93,43,222,210,200,92,16,32,245,251,140,184,8,143,72,64,44,214,101,145,140,37,1,193,104,19,136,181,153,73,146,133,148,133,236,48,254,137,111,175,3,109,199,89,38,102,170,243,10,172,21,1,159,209,119,237,229,43,104,111,171,242,158,191,250,186,235,7,246,239,223,207,208,208,80,126,45,144,97,159,18,146,68,72,76,157,164,34,152,88,48,45,235,157,104,59,213,101,44,81,162,0,111,161,132,207,211,26,168,205,62,16,174,170,61,102,167,146,127,157,239,4,12,201,177,221,160,84,136,244,241,136,130,88,107,242,194,109,54,38,29,236,240,194,173,14,148,205,64,159,200,30,142,11,227,39,170,235,219,91,29,62,4,236,53,16,99,180,119,178,2,111,39,123,191,25,52,6,157,179,80,116,110,156,118,183,144,11,59,167,110,85,225,15,226,149,228,224,245,37,235,22,241,182,55,231,171,128,142,140,228,43,236,161,248,97,146,144,40,33,81,10,61,26,161,15,87,208,15,185,30,75,82,41,113,178,8,201,196,111,171,195,6,103,187,196,183,80,148,157,138,96,138,223,107,139,124,161,235,140,79,18,178,169,237,136,227,24,51,221,132,247,110,158,34,218,83,80,24,130,231,225,113,138,98,167,14,200,161,137,187,98,76,102,64,64,174,109,74,44,218,103,200,6,150,137,201,117,97,219,56,82,74,201,38,37,19,227,254,185,200,143,9,8,48,188,230,233,16,76,74,52,222,45,203,157,127,48,222,235,46,95,198,43,174,61,131,34,210,191,37,108,82,138,68,53,208,145,34,137,34,180,82,89,87,37,169,148,56,25,72,147,173,169,165,18,134,82,97,50,193,228,58,204,125,186,17,164,136,79,117,219,142,164,240,60,179,68,114,180,81,228,144,224,151,61,181,72,194,134,166,240,161,226,110,51,185,203,176,225,36,98,41,176,101,102,177,100,243,59,37,142,73,7,13,14,174,77,16,1,79,89,37,37,100,251,232,59,13,222,8,88,192,164,68,34,206,48,146,84,138,201,78,219,143,93,184,237,245,23,242,174,255,118,13,237,173,149,220,112,128,237,104,6,19,33,169,11,122,92,89,66,241,225,100,40,221,159,18,167,142,41,9,5,242,68,209,140,96,210,247,152,108,169,216,151,141,32,212,155,76,45,11,164,208,100,110,207,137,58,42,246,115,198,15,50,37,39,79,56,129,101,114,76,107,165,217,128,188,5,19,144,131,119,133,82,43,33,35,159,60,185,20,250,106,102,208,152,252,243,220,231,140,77,32,201,136,208,100,150,12,238,50,165,89,123,161,245,34,142,156,108,187,75,206,91,196,27,95,181,54,255,247,51,124,12,65,139,88,43,69,41,76,60,128,14,73,165,20,106,75,156,10,138,250,202,34,255,198,105,243,226,73,121,41,16,252,240,54,121,239,88,240,11,10,13,9,170,201,7,82,107,223,89,247,89,244,71,7,82,133,114,175,179,58,37,198,152,73,199,55,76,14,33,19,190,246,231,16,30,199,185,62,147,69,91,63,89,189,209,224,46,89,96,45,248,190,178,174,76,112,224,162,96,155,31,104,193,104,9,44,142,108,192,217,40,178,176,118,206,55,66,156,91,100,235,181,228,130,92,238,0,167,45,232,177,58,174,227,91,109,108,24,89,25,244,68,140,137,71,38,15,176,180,84,74,156,44,138,98,45,4,11,9,59,218,85,83,43,5,50,23,168,89,2,156,127,223,126,40,191,47,223,52,193,152,192,162,72,117,149,227,187,64,102,82,91,111,145,56,75,164,153,96,219,204,90,49,193,62,19,30,196,91,39,133,125,46,51,213,207,88,131,181,76,138,3,77,143,150,106,41,193,62,191,165,214,142,191,64,164,36,96,57,201,39,140,56,98,113,150,135,113,101,41,181,145,180,141,73,63,239,181,25,79,124,193,162,72,35,182,172,67,118,200,54,192,212,1,198,109,54,237,17,149,63,147,210,82,41,113,42,144,41,158,167,95,238,73,86,64,129,92,154,193,24,133,40,229,126,233,39,128,24,76,3,67,212,196,199,74,192,68,238,232,62,220,236,190,253,129,69,146,63,128,183,86,178,49,5,178,67,246,67,221,212,90,241,201,112,246,67,89,33,130,48,196,92,180,78,220,229,73,153,49,100,2,103,45,165,7,201,30,77,216,214,95,179,99,68,132,82,18,9,246,104,131,203,87,241,153,193,254,250,251,49,42,210,85,205,248,40,84,208,131,27,251,218,51,102,167,86,138,59,167,69,90,99,141,71,96,68,38,95,232,146,84,74,60,187,112,115,168,232,230,76,69,36,86,54,137,236,13,184,84,214,222,90,235,13,160,226,92,32,176,73,112,199,200,87,73,93,32,151,183,82,116,129,16,12,26,241,213,148,92,153,70,194,215,134,220,123,198,168,140,28,210,126,157,197,225,74,29,100,196,66,64,44,42,239,98,165,214,130,33,227,30,201,25,58,98,116,254,66,5,110,80,150,171,226,251,43,210,128,239,35,51,158,60,241,25,193,21,165,117,127,24,113,215,38,237,32,20,120,113,159,74,240,121,46,58,108,106,156,123,99,152,226,47,90,186,63,37,78,13,102,138,231,41,138,110,206,84,63,180,198,221,180,43,215,97,250,43,111,210,190,236,151,221,71,125,142,227,2,25,157,31,212,212,63,242,147,210,54,210,199,112,182,7,42,165,9,93,37,227,157,22,127,236,162,112,43,185,176,51,38,33,203,91,193,50,128,115,63,60,5,228,68,81,141,139,252,232,84,135,78,183,73,126,145,221,116,112,25,252,244,54,26,23,202,22,112,85,253,141,241,46,144,216,178,152,193,235,52,84,141,229,162,214,150,138,29,130,221,102,54,128,122,61,189,52,147,200,165,36,149,18,167,138,208,179,79,179,163,246,30,108,30,6,110,110,169,56,11,37,208,77,36,120,45,62,95,229,88,161,101,19,60,7,178,204,82,63,249,53,62,101,204,191,54,161,110,226,31,67,55,192,56,242,48,182,95,203,47,153,9,96,10,250,74,150,221,234,222,207,205,248,144,88,200,198,224,117,22,227,250,146,201,91,246,175,9,47,102,23,41,227,56,23,122,54,169,121,98,57,41,19,110,131,250,4,126,108,144,31,90,120,46,198,158,247,210,133,61,41,209,105,205,76,95,225,109,28,87,160,73,35,108,204,134,86,146,74,137,147,69,56,99,252,235,109,254,205,253,7,243,217,171,83,7,120,84,74,40,69,228,245,218,134,123,158,144,145,72,50,233,51,41,9,52,177,60,38,191,40,180,155,52,99,3,98,1,50,162,50,132,115,110,178,185,144,9,183,121,98,161,240,58,32,164,52,185,173,201,64,228,24,91,240,185,148,118,2,146,209,152,124,193,19,231,249,100,132,227,9,37,16,103,115,162,142,127,157,47,238,173,109,135,82,119,132,82,188,114,80,106,42,37,78,29,225,79,125,14,197,111,90,179,111,158,47,168,156,190,223,164,209,164,201,110,192,136,95,15,148,20,4,97,69,142,108,140,239,179,137,182,226,23,219,77,161,173,24,194,133,137,94,220,13,245,21,236,107,84,16,102,206,11,183,136,41,140,79,210,243,201,19,169,183,86,252,133,60,137,234,117,205,223,192,215,100,49,146,149,184,79,155,107,187,63,59,94,179,39,249,8,214,172,222,14,180,222,231,199,61,3,16,234,142,109,90,38,143,160,36,149,18,39,131,102,158,252,36,98,41,234,40,147,173,145,76,104,157,20,32,201,245,99,240,149,224,48,13,108,157,246,48,234,19,140,202,147,70,58,201,155,240,84,74,52,48,101,222,138,49,25,177,24,220,66,192,176,99,127,82,144,9,183,118,199,36,98,113,54,68,24,21,58,246,117,113,227,58,134,125,151,157,200,228,215,169,53,228,207,195,19,140,128,104,227,8,212,56,114,54,169,123,99,194,62,83,227,42,107,59,167,175,35,28,247,204,227,229,23,149,238,79,137,147,133,39,146,112,219,26,54,120,228,169,9,96,170,168,143,47,168,52,25,249,60,22,73,15,150,115,129,76,224,10,165,130,173,79,213,47,60,55,121,45,37,167,173,16,184,76,105,121,198,38,11,12,155,185,65,205,244,149,156,112,27,92,34,99,50,253,164,192,199,105,46,138,215,85,78,97,243,125,79,213,127,118,14,238,156,197,145,79,152,124,236,149,223,32,238,239,243,86,252,226,197,156,97,20,122,159,133,181,134,80,90,42,37,78,28,233,111,88,240,220,127,53,135,195,134,54,76,60,85,55,153,107,113,172,95,60,99,140,205,160,53,128,56,107,165,56,154,19,180,86,114,77,211,23,38,115,131,188,251,131,194,24,237,234,154,248,166,190,227,192,13,66,217,253,174,28,66,90,4,42,248,177,183,169,33,89,184,153,116,90,55,39,218,252,58,33,227,218,229,27,54,95,189,92,252,92,158,76,44,188,187,227,247,121,162,241,239,21,247,5,127,222,224,152,254,105,98,207,168,217,96,128,210,82,41,113,114,40,186,61,126,219,28,54,122,244,233,241,201,159,4,188,149,146,10,138,185,119,38,79,34,0,145,70,102,173,152,70,106,165,156,168,181,226,239,117,51,217,90,41,156,85,142,47,195,104,16,217,100,75,45,138,192,242,104,102,177,228,44,156,188,213,18,90,40,249,75,89,180,52,8,44,153,98,168,122,42,171,197,175,100,14,198,129,38,171,3,19,244,29,186,100,198,157,163,145,236,179,90,167,205,31,94,191,55,236,242,128,227,110,95,90,215,0,97,240,167,180,84,74,156,48,194,159,189,144,84,18,96,48,108,56,60,50,213,143,88,254,55,44,151,231,37,197,199,224,205,41,172,146,166,35,44,88,43,214,84,241,85,225,252,36,10,44,148,38,162,237,137,233,43,129,112,27,88,44,160,130,236,215,172,192,82,102,181,100,215,193,4,39,50,153,79,167,52,4,242,173,66,178,241,207,77,146,106,62,6,231,234,32,46,27,56,176,80,196,216,144,142,113,37,25,196,187,65,33,153,26,118,237,31,74,71,106,224,0,66,34,174,243,17,193,180,168,156,21,91,146,74,137,147,66,72,44,225,246,131,176,209,166,237,245,41,181,20,160,16,21,201,243,195,228,72,144,224,171,236,167,249,22,222,173,9,250,41,246,25,142,216,18,74,152,101,171,2,98,50,83,16,139,115,131,38,17,139,207,200,13,136,197,119,150,78,100,79,88,193,48,92,62,126,74,46,144,186,69,118,20,83,49,229,177,224,147,82,130,215,105,111,46,125,45,181,156,116,186,63,187,48,206,194,73,69,103,255,90,172,165,226,174,207,222,3,195,254,19,24,195,250,72,208,117,48,136,45,112,35,82,146,74,137,103,134,162,221,238,125,141,126,220,205,217,55,238,152,104,242,177,236,203,159,171,162,72,38,204,22,247,135,175,38,145,70,240,211,217,92,91,209,136,137,28,73,16,144,81,16,98,54,164,250,201,241,137,197,119,210,132,88,66,235,196,147,92,106,181,20,46,94,74,46,16,46,130,12,45,152,227,35,228,118,9,246,5,154,136,119,233,76,184,95,7,239,193,36,93,37,117,243,50,162,217,179,63,103,132,34,130,78,220,237,163,193,150,64,8,11,52,157,204,89,148,40,1,147,9,37,116,129,182,249,70,195,163,176,255,96,226,136,194,110,42,40,74,221,68,82,105,14,201,166,159,181,86,234,156,144,182,146,230,125,36,233,104,237,100,9,147,216,38,71,131,178,116,83,127,122,62,50,3,249,4,56,159,113,27,104,44,144,233,17,134,96,127,24,29,202,54,227,250,200,231,203,22,13,192,102,91,168,29,101,199,48,94,231,73,55,157,186,47,38,108,239,198,102,142,69,40,254,252,141,225,225,245,123,139,127,147,31,72,66,67,26,182,148,164,8,166,178,47,159,86,80,146,74,137,83,65,72,44,254,249,250,176,193,35,79,142,7,9,160,246,107,86,204,69,105,22,114,110,30,17,202,172,149,73,163,8,31,129,73,107,130,252,36,76,9,165,184,46,104,170,48,115,120,122,5,225,54,55,9,11,147,59,152,208,153,149,208,132,92,252,4,207,17,140,102,114,114,126,182,229,223,119,207,139,68,230,73,43,37,19,147,63,110,26,222,246,215,102,106,66,1,120,232,177,125,233,181,55,6,116,194,6,129,134,130,68,141,89,98,41,254,69,74,247,167,196,51,133,255,214,111,11,119,110,220,209,200,173,86,46,10,177,30,161,32,219,76,184,205,218,24,160,158,121,59,222,157,73,221,26,15,155,109,235,19,228,138,110,80,230,70,133,250,202,84,194,173,59,65,99,16,113,161,97,241,196,18,138,183,78,175,73,53,21,231,14,21,220,179,44,234,228,221,162,162,239,22,68,100,114,207,38,191,202,172,171,252,107,3,164,73,110,129,101,130,152,32,175,206,19,156,100,99,106,66,40,198,104,190,121,255,206,240,111,184,205,40,142,54,12,13,132,70,205,160,149,66,239,44,36,64,150,164,82,226,153,194,207,138,39,195,157,143,60,105,195,202,214,253,81,77,115,44,138,132,82,52,82,194,20,247,20,6,210,188,21,211,0,9,73,196,102,101,165,196,97,0,81,24,18,75,44,52,39,145,19,19,110,3,98,129,188,120,235,94,231,117,22,192,168,201,110,158,128,117,219,252,59,42,61,108,158,56,166,10,111,77,190,142,153,27,3,121,23,206,19,79,70,24,18,180,75,93,54,2,87,40,71,40,59,24,26,241,34,57,24,195,99,162,169,139,161,110,98,26,163,66,210,26,229,172,85,119,70,37,74,156,60,188,103,163,10,143,187,124,131,77,59,26,12,141,184,95,112,200,233,43,126,155,178,243,194,123,249,215,117,247,237,109,146,101,123,12,55,40,171,201,226,39,83,147,108,219,112,66,250,247,83,87,193,103,174,102,191,236,105,200,54,117,33,116,230,250,76,114,137,66,55,196,29,3,131,37,24,93,216,200,185,65,147,29,34,147,107,31,186,49,153,181,227,51,97,11,154,138,22,208,65,78,10,144,222,17,209,178,99,250,3,240,239,95,124,50,39,5,105,195,215,18,97,66,9,245,104,130,134,82,36,149,3,105,231,41,74,75,165,196,137,194,147,71,120,19,177,112,91,12,204,11,63,240,157,135,199,184,241,242,227,223,88,44,167,173,52,141,0,21,246,152,122,46,232,113,124,55,40,139,0,165,243,71,20,18,230,175,76,138,8,217,125,218,140,161,84,91,48,165,189,213,226,163,66,6,131,43,190,100,124,133,122,87,209,45,117,137,188,102,161,178,51,201,17,165,29,120,22,114,207,74,61,28,139,124,211,115,202,189,118,36,230,220,156,44,55,199,143,195,4,100,98,219,184,131,98,137,211,190,243,212,150,131,60,188,254,64,216,243,1,129,39,209,76,212,35,234,137,208,104,137,105,236,14,227,216,14,37,169,148,56,81,120,82,137,176,223,27,191,85,220,118,227,164,15,72,182,170,183,232,253,28,43,241,109,234,195,7,122,131,9,218,7,110,80,211,220,149,156,190,66,158,88,188,6,82,32,22,109,134,209,245,125,24,3,113,109,9,74,106,169,107,99,137,197,70,183,44,81,36,216,18,147,153,43,99,51,86,181,155,114,158,92,18,240,211,220,187,81,238,194,136,82,169,19,18,186,138,158,84,166,188,54,1,65,164,218,147,248,115,241,214,71,33,202,36,174,189,209,193,31,198,4,127,35,195,251,255,249,225,98,24,255,223,18,97,188,2,227,166,206,132,137,105,68,81,46,44,85,146,74,137,147,66,209,58,137,129,106,176,205,5,46,13,63,208,222,42,92,126,110,90,15,251,152,132,81,148,42,155,182,145,66,105,131,80,180,37,206,116,147,84,75,153,74,95,9,136,37,120,223,19,139,49,9,38,57,4,18,17,85,22,165,71,51,166,129,16,103,98,38,10,173,237,92,74,45,155,52,41,197,107,41,222,4,75,82,203,37,43,11,105,85,211,148,42,115,14,68,118,45,60,193,236,218,59,192,174,253,131,92,176,102,94,161,85,246,193,252,98,76,1,173,209,169,213,228,206,3,50,209,218,125,40,93,208,232,172,155,127,255,194,147,60,244,248,129,244,250,0,7,140,240,229,40,97,172,17,51,158,24,38,170,49,245,3,7,210,248,118,238,39,163,36,149,18,199,67,72,40,158,76,106,110,107,113,219,203,139,31,186,226,220,54,58,219,79,77,178,155,154,128,242,214,202,49,221,160,160,60,130,77,98,163,64,44,94,184,37,53,249,45,215,24,36,234,180,157,4,209,33,109,112,165,24,220,229,8,8,196,56,11,39,47,226,218,247,196,4,22,64,90,110,192,189,39,225,42,36,23,154,9,8,47,196,207,255,247,207,178,123,191,189,73,250,202,211,122,121,227,43,206,226,37,151,46,161,171,163,150,158,191,51,63,236,249,167,230,90,120,197,116,238,1,242,43,176,1,158,218,116,136,191,248,231,239,231,142,173,20,31,16,205,72,162,24,173,212,25,55,49,245,56,206,17,74,142,84,142,227,176,149,120,17,35,20,99,35,172,139,83,3,90,129,118,160,11,152,134,213,81,62,68,112,155,14,128,191,254,189,62,214,173,154,92,193,39,148,18,253,65,192,17,137,211,68,148,178,191,224,162,252,235,176,135,98,213,183,138,35,161,86,215,81,140,16,129,68,136,132,146,143,183,118,34,219,49,10,33,178,4,3,233,62,92,146,158,45,105,237,214,232,4,181,93,17,187,223,16,187,155,169,251,75,100,219,217,48,122,209,159,83,153,33,64,246,158,119,119,82,94,12,111,24,26,116,241,159,119,62,197,59,255,242,155,147,174,37,192,202,37,61,172,58,109,6,231,173,153,195,5,103,205,101,222,236,142,236,154,121,38,245,107,129,140,47,218,148,228,92,29,207,13,119,125,119,7,239,250,235,239,50,52,18,220,37,18,190,32,134,15,104,197,209,40,97,40,137,24,170,86,25,57,114,132,113,108,54,98,41,212,150,56,33,248,217,18,186,59,222,50,241,164,226,183,87,82,32,148,181,171,106,172,91,213,146,230,169,228,242,85,200,63,66,160,169,64,86,107,165,201,207,157,136,76,210,102,172,27,84,193,214,179,205,135,153,243,154,64,228,44,150,200,234,33,36,24,26,206,114,33,151,87,226,171,222,167,169,246,226,163,62,86,156,53,104,140,76,128,142,128,236,246,28,254,94,57,222,173,241,183,238,240,86,141,33,11,173,75,16,105,241,110,200,164,202,117,14,235,86,207,102,78,95,7,123,156,165,18,226,169,45,135,120,106,203,33,62,247,95,79,167,251,58,218,42,172,90,218,155,94,51,113,21,224,252,181,120,120,253,190,180,173,18,255,153,152,161,145,70,250,247,112,17,159,45,98,248,39,29,49,28,53,24,109,68,140,197,17,19,149,35,52,152,194,74,177,103,85,162,68,30,62,60,236,9,197,11,177,173,100,132,210,137,181,82,166,1,127,10,204,15,59,248,224,239,245,177,238,244,38,117,6,3,76,90,203,35,25,169,120,3,192,231,174,120,75,69,82,255,191,153,0,81,65,168,0,113,96,173,0,228,45,22,241,22,7,186,96,185,96,45,19,113,85,233,68,89,203,3,175,183,168,148,48,76,26,165,113,81,31,127,251,15,137,156,181,18,21,206,81,165,175,115,235,255,210,62,221,80,141,33,127,95,34,157,10,174,131,67,19,252,219,23,214,179,103,255,48,95,188,123,203,49,175,109,51,136,100,4,226,175,187,82,147,219,164,99,129,45,10,126,219,68,236,141,18,134,26,138,225,40,98,180,54,204,232,161,108,205,68,211,63,70,73,42,37,60,138,238,142,39,20,175,161,180,97,9,165,3,75,42,179,129,255,1,172,40,118,244,233,15,204,99,246,204,252,189,121,38,255,158,229,143,236,9,5,56,14,169,24,154,21,190,182,239,123,254,243,6,184,2,105,216,71,83,119,167,231,170,210,169,57,136,196,147,136,197,187,69,56,50,240,119,246,177,86,134,119,141,252,41,101,165,36,211,246,233,121,42,151,255,225,200,73,188,14,227,5,94,119,81,12,228,43,191,29,31,3,195,227,124,235,254,93,60,189,229,8,79,111,61,204,195,143,247,159,208,231,36,184,166,254,117,58,218,140,96,70,148,240,121,20,255,36,9,131,137,48,164,20,35,81,196,104,101,152,177,35,246,2,54,220,214,132,221,75,82,41,97,209,76,63,153,202,229,233,4,174,6,126,141,130,219,3,112,211,229,237,188,227,45,189,77,15,210,108,202,228,221,32,9,34,24,158,104,252,150,181,204,38,97,216,131,61,133,227,165,117,216,227,116,34,106,90,250,89,219,119,148,9,59,254,142,136,206,242,240,132,97,57,192,235,214,62,129,12,231,66,89,194,176,154,81,230,230,164,214,77,54,120,167,205,168,166,215,195,230,192,20,43,193,185,49,154,201,115,216,247,252,208,250,3,60,189,245,8,67,35,117,251,56,92,207,189,47,226,159,105,134,70,234,44,63,243,106,148,192,23,191,240,121,68,216,141,97,191,8,63,68,241,205,200,176,57,17,134,69,24,246,132,18,15,51,126,116,50,161,52,101,193,82,83,41,81,212,79,252,207,189,39,148,54,183,117,0,125,192,107,129,87,55,235,232,166,43,218,121,199,175,244,22,8,32,200,185,56,214,32,124,62,198,137,12,88,212,241,27,29,179,131,152,172,108,128,198,152,40,203,103,113,138,170,113,145,24,193,187,50,218,17,138,91,156,40,86,188,181,6,70,16,146,53,88,205,197,145,145,39,25,215,137,27,63,100,137,102,5,4,209,162,98,206,77,113,14,139,8,218,25,11,235,206,232,229,220,213,61,32,216,91,159,160,221,93,31,221,8,148,77,132,51,192,135,255,253,73,76,207,98,238,253,246,221,174,115,254,217,8,79,24,24,20,195,64,34,12,137,48,226,8,101,172,50,204,248,145,140,76,92,250,238,212,102,85,73,42,47,110,52,211,79,188,187,19,106,40,29,192,105,192,239,1,139,138,157,180,183,10,111,126,77,55,63,123,67,215,164,3,20,9,230,88,117,87,79,44,9,238,89,128,153,0,169,146,222,154,3,63,105,125,253,20,188,200,225,163,180,86,39,49,13,140,81,206,237,49,64,3,148,194,104,231,22,153,36,16,77,60,225,248,148,122,23,202,50,94,131,73,147,227,115,176,34,105,72,62,126,191,229,126,109,156,0,141,191,158,238,148,32,127,191,101,177,41,111,98,140,149,146,141,239,92,211,217,22,241,190,15,253,181,63,198,65,132,39,129,1,73,24,144,10,67,170,206,144,130,177,8,198,134,96,156,60,161,76,33,106,101,40,73,229,197,137,99,233,39,222,221,9,53,148,11,177,250,201,36,119,231,138,115,91,249,237,55,246,48,167,175,249,87,41,247,61,111,194,22,97,198,232,143,203,23,55,102,216,25,42,173,8,254,254,204,144,69,136,112,86,139,6,239,54,56,130,176,239,217,138,111,86,204,245,107,139,188,240,131,51,90,146,64,232,245,166,7,206,146,201,52,33,33,139,104,133,4,83,44,132,157,127,153,229,212,132,109,252,88,211,80,181,177,22,147,86,32,218,160,68,35,34,124,227,123,251,195,168,220,183,68,24,148,132,65,129,161,122,157,33,108,141,252,113,183,121,65,246,132,8,5,74,82,121,49,98,42,253,164,133,76,144,13,9,229,167,129,159,111,214,209,111,189,113,58,183,222,56,217,58,241,48,88,209,181,152,155,18,134,153,11,17,135,244,73,51,49,241,217,132,49,195,96,134,49,82,67,232,112,199,177,107,133,82,171,69,121,171,37,27,148,13,71,219,252,150,180,150,128,59,151,148,125,210,156,150,48,63,37,76,209,15,6,226,150,50,24,147,173,91,14,15,105,119,100,214,84,174,38,173,8,90,27,151,47,163,173,237,163,181,45,117,111,156,203,227,147,248,28,121,237,60,48,200,131,143,29,74,251,3,190,150,36,12,67,186,141,0,163,228,170,98,133,133,101,142,143,146,84,94,92,40,234,39,97,134,172,215,79,188,32,219,7,220,14,156,87,236,100,246,140,136,247,189,189,143,21,139,167,88,44,56,69,78,74,145,40,36,32,28,223,96,170,232,196,179,15,111,30,76,128,36,110,217,79,86,62,33,111,181,216,215,136,47,227,80,39,77,104,147,40,37,4,123,75,81,149,49,140,9,44,24,223,77,142,44,0,99,143,231,221,153,102,77,60,252,245,34,109,235,221,51,123,191,103,157,38,223,105,187,80,32,29,135,45,181,177,201,201,72,0,0,32,0,73,68,65,84,96,208,188,239,159,114,21,42,190,137,173,131,19,146,201,24,86,144,45,18,202,137,133,166,40,73,229,197,132,176,76,65,184,16,208,91,39,161,126,114,22,240,86,154,232,39,55,95,217,206,219,126,174,231,152,41,248,169,251,110,138,59,131,231,14,69,66,249,241,67,48,58,225,225,199,7,89,177,164,131,206,246,216,17,73,96,181,248,177,25,43,240,122,161,213,207,91,159,125,111,39,189,47,230,100,114,179,48,203,173,51,228,92,37,200,174,71,179,243,207,173,40,6,113,2,111,120,109,179,84,123,107,177,120,246,50,218,47,116,180,99,190,251,254,253,220,125,127,46,252,252,81,242,132,50,206,51,36,20,40,73,229,197,130,102,130,172,95,191,83,116,119,166,212,79,222,249,171,189,220,114,85,199,84,252,144,162,153,224,26,18,141,175,26,240,92,193,191,125,105,31,31,248,215,253,44,95,212,194,191,255,249,42,71,0,174,116,130,131,29,239,132,19,108,35,252,138,102,240,215,64,7,26,138,19,119,177,250,73,184,31,191,112,177,168,147,100,29,53,135,201,180,18,79,34,70,131,72,90,206,205,117,224,22,82,6,247,40,17,163,25,24,110,240,247,159,216,18,246,248,73,236,157,37,71,176,214,73,168,161,156,176,126,210,12,37,169,188,240,81,92,16,88,20,100,61,153,116,96,195,197,111,42,118,48,123,70,196,95,220,158,185,59,225,15,234,84,198,69,179,168,70,179,199,34,164,105,219,31,165,9,147,240,205,7,142,34,2,27,183,143,241,224,99,71,57,111,245,52,140,36,164,249,42,1,139,230,179,113,51,248,208,177,77,203,119,183,238,72,245,148,8,67,118,159,229,180,220,73,232,26,21,25,166,40,68,185,53,74,198,11,198,254,45,19,104,53,162,201,10,133,103,22,11,36,220,254,103,63,224,233,109,233,141,36,15,0,255,143,140,80,188,203,227,35,60,62,108,124,74,40,73,229,133,139,102,130,108,152,127,210,138,37,18,159,208,118,59,112,69,177,147,117,167,215,120,255,127,239,163,163,109,234,218,40,197,245,61,254,224,205,80,180,244,195,185,243,19,241,126,38,33,193,86,236,183,55,131,55,62,154,99,8,56,32,92,131,228,35,66,78,131,177,111,147,174,84,118,36,68,144,171,98,201,33,66,138,134,128,20,200,37,212,100,113,81,163,64,172,53,120,1,214,164,46,153,37,44,207,198,246,245,237,239,91,207,67,143,15,132,71,250,0,150,88,138,110,207,41,187,60,33,74,82,121,97,34,36,20,95,76,169,40,200,122,235,100,9,240,14,154,232,39,183,222,216,201,237,191,208,51,185,115,153,252,122,210,90,30,135,73,197,153,154,12,52,247,248,227,214,86,138,227,147,196,253,250,39,24,137,179,251,50,131,143,48,147,55,95,34,124,117,250,244,30,204,6,124,77,149,148,148,124,31,158,56,164,152,252,166,242,175,189,110,99,200,145,77,94,175,10,202,37,248,143,164,90,143,230,233,173,195,252,225,135,55,176,97,91,238,46,234,127,5,220,135,213,82,66,97,214,91,40,83,102,202,158,40,74,82,121,225,161,24,225,41,38,180,133,132,114,38,240,199,20,244,147,142,54,197,123,126,125,6,87,157,223,154,166,140,103,165,14,179,239,91,152,78,62,165,59,83,20,108,155,224,88,239,255,104,93,31,127,140,240,177,1,82,7,83,65,76,3,187,146,57,206,44,171,112,2,187,149,197,62,2,228,223,47,186,72,89,222,72,118,76,131,153,100,249,77,62,83,157,145,146,128,209,222,202,113,251,2,75,199,102,252,218,30,6,135,27,124,242,171,187,248,200,167,119,21,59,252,8,240,121,242,226,108,51,97,246,25,161,36,149,23,22,188,117,18,70,120,188,126,210,66,126,65,224,213,192,111,80,32,148,57,51,99,222,255,59,125,172,92,146,133,139,243,85,239,243,95,253,102,147,126,242,186,149,169,7,92,180,112,126,50,17,160,204,66,218,115,96,28,67,43,182,148,66,5,33,198,20,200,229,233,205,35,172,56,173,205,10,182,169,179,97,69,210,167,183,90,93,102,96,120,178,198,185,123,255,56,29,237,49,115,103,182,176,124,113,59,231,173,238,118,238,138,205,236,109,78,174,73,97,154,123,242,202,87,124,3,216,125,96,152,79,126,117,47,223,122,240,16,123,251,235,225,135,134,177,132,242,57,96,200,109,205,172,148,103,228,246,120,148,164,242,194,193,84,17,158,162,32,219,9,220,12,220,86,236,224,170,243,219,120,207,175,207,56,229,138,109,30,69,235,198,163,249,109,58,78,252,243,63,42,132,231,251,208,227,227,220,124,69,157,187,31,24,101,195,246,196,185,45,182,110,202,67,235,135,121,232,241,81,140,129,95,126,77,31,111,249,233,185,0,24,73,248,252,93,135,249,240,39,118,21,39,243,113,177,124,81,27,43,22,181,219,109,113,59,235,86,119,79,90,84,232,181,153,108,77,144,37,176,189,253,227,236,57,48,206,119,30,58,196,195,79,12,178,113,251,104,179,67,172,7,254,28,216,76,102,161,76,101,165,156,82,180,167,136,231,134,54,86,226,153,34,172,114,239,45,148,102,11,2,59,69,248,29,99,184,178,232,150,188,229,181,221,188,229,167,187,57,118,210,196,179,131,102,228,226,241,227,34,146,244,60,13,252,227,167,142,240,79,159,61,10,192,156,153,138,206,54,197,198,237,141,176,85,110,145,159,49,112,206,170,86,254,254,221,203,64,224,238,251,135,120,231,223,108,103,104,164,121,73,134,147,197,242,69,173,41,209,204,158,89,101,195,182,145,148,88,30,126,252,40,27,182,141,48,52,122,220,249,191,21,248,55,224,110,44,137,120,13,197,91,40,62,124,28,174,233,121,86,2,253,165,165,242,252,71,179,144,113,51,65,182,79,196,102,200,134,26,66,123,171,112,251,155,122,120,249,213,29,228,191,83,69,213,240,217,35,155,102,250,76,184,255,199,6,119,248,117,171,91,248,167,207,218,176,242,190,126,205,126,9,92,139,124,211,64,148,54,12,14,143,243,238,15,237,230,238,7,134,138,174,203,56,240,125,96,144,230,165,2,22,186,109,70,179,97,109,216,54,202,134,109,163,124,137,19,171,147,18,96,4,184,31,184,7,248,22,150,60,66,34,241,100,18,90,40,207,42,161,64,105,169,60,159,113,172,144,113,184,32,176,19,75,40,127,66,33,194,211,222,42,188,231,215,103,112,245,5,147,242,220,78,114,24,207,71,152,92,28,251,37,191,180,157,209,177,188,232,124,249,185,173,44,95,104,181,165,246,118,197,138,69,85,110,251,35,123,219,142,182,22,219,104,104,196,221,252,34,176,100,128,239,2,159,34,239,106,120,114,241,147,87,97,255,54,167,97,51,152,23,187,173,41,209,28,3,143,3,251,176,17,157,123,200,146,216,38,200,72,196,107,39,158,76,124,130,155,215,81,158,21,183,199,163,180,84,158,159,104,70,40,97,200,56,44,168,116,150,8,191,71,225,203,186,124,81,133,247,220,54,35,39,200,158,26,126,244,238,210,143,3,239,252,181,25,124,242,43,3,136,192,242,69,85,110,190,162,157,229,139,252,181,145,252,131,192,200,152,201,68,102,51,233,103,190,15,75,36,161,40,26,174,248,245,127,191,195,192,110,44,33,120,45,172,11,88,138,141,204,45,193,254,29,31,39,59,196,15,177,250,200,32,105,82,13,13,50,178,240,196,49,94,120,172,211,188,132,193,179,102,161,120,60,191,191,9,47,78,52,203,65,241,41,247,197,144,241,69,192,239,138,228,35,60,203,23,85,248,199,119,207,126,198,130,236,241,135,249,220,73,105,155,140,204,82,145,226,126,201,191,180,176,59,95,249,214,157,236,57,144,85,163,95,182,176,194,205,87,116,240,254,127,61,108,155,91,205,101,35,240,191,129,163,216,201,63,140,181,22,60,169,248,11,211,236,78,143,17,153,75,235,219,248,145,120,171,194,111,222,173,10,93,153,122,97,107,144,119,193,166,188,181,198,179,133,232,248,77,74,60,135,16,230,160,52,171,208,230,163,59,93,192,45,192,127,3,218,66,169,226,101,87,182,243,183,191,63,139,90,245,199,49,217,159,235,196,66,70,42,62,161,77,178,139,156,237,207,158,116,182,41,190,245,240,40,237,173,194,207,189,124,26,255,235,173,51,153,209,29,241,137,175,12,134,237,91,129,207,98,173,148,176,172,128,215,56,194,117,54,222,45,25,15,30,189,203,50,78,166,137,76,181,253,127,246,222,60,222,143,170,190,255,127,158,153,207,114,247,236,219,77,200,30,72,72,32,1,66,16,100,9,187,200,34,40,106,197,5,165,125,104,221,133,90,250,179,95,23,90,235,250,109,171,181,181,90,109,107,235,207,90,183,86,84,4,21,81,64,64,86,195,22,72,66,18,66,18,178,135,144,220,37,247,222,207,103,230,124,255,56,251,124,230,115,239,205,74,32,159,119,50,247,51,235,153,51,103,102,94,243,122,47,231,125,252,222,197,254,228,171,58,217,240,251,67,6,40,208,80,127,94,78,226,3,202,96,125,120,218,129,203,200,113,25,215,139,144,61,116,114,132,3,138,47,117,2,208,92,84,172,186,150,75,207,105,99,206,244,18,147,198,21,104,111,81,121,102,39,141,47,100,131,252,154,113,42,137,1,8,255,69,55,54,12,223,107,39,114,150,45,182,121,181,52,108,197,103,45,73,230,55,59,239,31,115,200,192,196,72,3,84,94,30,146,23,212,230,247,50,246,1,229,93,192,213,254,193,82,194,77,239,27,163,61,60,254,6,14,241,59,127,164,2,74,157,247,170,94,84,48,33,176,28,59,173,20,58,196,204,126,30,49,147,210,218,59,178,108,196,87,129,178,224,145,85,121,234,129,74,30,184,248,32,147,5,145,195,2,38,70,26,160,114,228,75,86,247,246,61,60,62,67,233,64,117,10,60,199,63,184,173,37,226,239,111,28,207,226,249,229,252,146,15,89,149,95,70,98,66,225,135,222,5,135,26,234,199,228,82,153,52,46,102,243,118,151,112,41,138,24,155,166,236,192,169,29,190,81,53,113,5,5,192,145,5,147,188,42,101,129,162,222,4,135,25,76,140,52,64,229,200,22,31,80,124,134,146,205,33,59,129,156,44,109,109,45,17,223,188,105,162,246,240,28,142,103,235,101,6,38,129,12,163,125,108,208,74,45,176,116,142,43,176,121,123,226,171,65,227,128,167,189,194,125,181,196,7,21,191,116,225,205,67,109,131,202,204,175,153,31,108,249,176,75,3,84,142,92,201,2,74,73,79,89,15,207,68,168,141,65,153,51,173,200,151,110,156,64,103,157,132,212,135,70,94,70,54,20,200,241,252,12,185,187,247,182,122,192,98,202,178,129,113,234,183,128,162,37,212,170,43,121,42,73,22,96,134,146,60,128,57,34,164,1,42,71,166,228,1,74,94,12,202,4,234,0,202,55,111,154,72,71,91,156,41,242,96,63,127,7,55,210,246,37,147,125,104,22,103,95,49,7,10,231,49,210,77,32,165,211,99,74,192,192,190,129,196,62,214,232,200,147,67,25,168,208,144,253,147,122,128,146,181,159,44,4,190,66,6,80,206,89,220,204,55,62,165,98,80,6,235,99,115,96,213,51,226,155,5,94,230,178,15,151,16,186,154,201,55,216,2,20,94,9,13,179,239,210,96,42,71,150,212,51,202,250,105,11,218,128,19,201,201,131,114,217,57,173,220,112,237,96,73,169,173,81,224,32,85,245,149,35,251,127,53,10,88,125,166,2,32,51,84,229,128,79,243,50,146,6,168,28,57,226,187,21,99,106,85,30,3,40,167,3,31,35,7,80,62,245,222,125,237,54,50,156,42,249,242,10,80,117,140,4,230,159,90,144,173,151,58,211,110,39,171,6,133,226,198,62,172,57,235,43,94,26,160,114,228,136,31,122,111,2,219,178,70,217,92,64,249,228,159,142,225,178,165,153,24,148,97,157,78,230,204,231,45,195,203,206,8,123,0,146,151,52,42,15,92,66,96,113,106,145,183,111,61,99,234,43,26,92,26,54,149,35,67,252,192,54,99,71,241,147,83,183,83,7,80,62,241,158,49,92,122,142,2,148,125,123,82,243,246,206,170,71,67,1,205,43,64,50,56,41,6,97,47,131,29,238,143,180,40,252,240,53,144,205,7,80,189,151,163,52,64,229,165,151,108,248,125,94,232,253,2,234,0,138,97,40,254,120,188,65,66,246,92,254,62,88,108,85,189,232,112,120,101,48,149,58,148,35,119,31,231,249,29,52,213,139,1,20,17,44,214,11,72,123,197,75,67,253,121,233,197,0,74,214,48,107,130,219,102,162,122,188,214,2,202,57,109,142,122,103,7,189,147,12,254,34,4,167,247,127,135,187,237,165,21,149,163,213,127,87,21,61,216,231,68,79,195,110,39,178,253,123,220,122,224,209,149,253,118,31,128,88,178,54,70,15,106,218,12,236,61,122,64,165,193,84,94,90,241,179,182,101,179,222,155,72,217,79,144,1,148,143,123,42,143,17,159,169,28,28,57,50,223,1,41,37,82,230,37,126,151,64,162,146,84,203,116,104,119,122,78,224,155,2,4,201,127,220,188,155,243,174,219,192,229,239,223,200,150,237,38,241,180,244,246,201,41,78,64,228,189,77,169,160,91,87,50,21,46,237,253,81,193,88,26,160,242,210,137,175,246,100,251,244,24,181,231,207,201,196,161,124,248,237,163,184,244,236,54,149,183,3,239,9,149,117,190,162,251,157,162,241,200,98,39,10,76,76,132,251,80,162,162,225,165,76,234,131,139,93,109,12,32,106,234,238,129,111,255,84,13,188,213,179,87,242,249,127,219,233,153,147,242,85,161,238,158,212,102,227,143,34,53,197,32,41,214,244,195,57,42,164,161,254,188,116,226,187,143,253,52,6,70,237,121,19,112,170,127,192,107,207,110,229,143,94,211,97,151,109,72,56,245,33,224,112,102,165,63,84,98,178,199,239,199,145,40,112,1,208,3,175,83,192,217,196,1,17,107,214,18,33,132,100,235,11,97,70,250,199,87,245,211,221,155,210,214,18,121,13,237,143,131,4,207,108,24,32,210,77,172,211,186,61,151,196,164,72,197,82,52,83,57,106,108,43,13,166,242,210,200,96,81,179,45,192,116,84,10,3,43,179,167,21,249,196,123,84,28,138,250,106,75,61,143,101,45,254,227,106,7,168,58,106,1,197,72,17,33,138,8,81,66,53,109,9,100,1,162,2,66,148,16,196,106,208,47,17,131,136,153,51,173,195,14,241,106,166,71,87,40,123,137,101,44,25,214,226,171,62,145,90,238,45,8,210,162,32,45,235,189,15,103,22,155,151,90,26,160,242,210,72,150,165,20,113,30,159,22,224,6,127,231,214,102,193,39,222,61,54,0,19,168,231,217,209,31,84,97,0,71,14,109,95,56,66,229,192,0,197,128,73,17,213,172,5,148,85,182,128,136,202,8,98,136,98,136,34,4,37,132,136,16,26,88,22,205,237,8,74,122,108,101,159,91,240,29,99,218,213,246,216,138,190,64,245,17,17,235,4,36,2,82,202,72,33,72,163,177,71,7,75,129,6,168,188,20,226,43,241,38,208,205,0,74,51,106,160,175,227,253,3,254,248,13,35,153,51,173,8,228,68,81,105,208,240,179,185,11,243,107,93,157,47,87,182,178,159,73,222,45,152,20,113,106,78,1,33,202,22,56,16,177,102,41,122,94,24,124,143,89,52,119,68,192,84,214,110,172,228,171,151,26,96,122,122,83,195,80,212,4,221,20,72,69,137,84,8,149,230,64,136,163,71,253,105,216,84,14,191,248,145,179,217,30,200,99,129,55,251,59,159,52,183,204,155,47,110,15,99,79,76,65,30,104,4,253,78,200,68,153,28,6,187,202,206,23,147,222,49,35,227,65,199,250,120,120,185,250,226,111,218,86,101,243,246,234,160,229,73,36,157,227,34,38,141,43,208,57,46,30,102,10,135,162,110,135,12,152,16,235,6,137,212,60,160,6,54,142,81,67,142,106,207,142,118,9,157,116,252,40,224,57,219,166,143,175,234,199,228,77,169,173,39,172,217,80,81,76,197,172,20,60,43,4,105,4,233,128,182,169,68,209,43,31,76,140,52,64,229,240,138,207,82,242,220,200,87,163,146,251,88,185,238,245,35,234,22,102,114,5,153,25,63,157,161,217,126,56,72,74,22,80,54,109,171,178,105,123,149,77,219,170,220,249,80,47,93,61,41,143,60,213,55,88,17,67,202,164,113,49,199,77,47,178,244,212,102,150,158,218,92,219,105,82,20,17,121,96,2,138,153,128,29,48,93,141,129,28,233,117,186,209,108,160,143,100,206,180,142,48,84,31,120,108,69,31,11,231,54,213,212,75,0,91,119,85,117,89,118,93,23,144,8,65,42,52,75,137,227,163,131,165,64,3,84,14,183,100,163,103,125,55,242,88,84,194,106,43,151,156,213,202,73,115,155,234,184,138,15,117,85,135,47,99,70,198,45,155,182,85,249,217,157,221,252,244,206,238,33,89,200,254,200,230,237,9,155,183,39,220,249,80,31,109,45,47,178,244,212,102,222,243,198,14,58,199,55,15,193,78,140,106,163,152,137,25,64,34,178,13,24,41,10,98,35,219,212,45,90,56,119,4,143,173,216,109,207,191,122,67,37,23,84,0,182,237,76,66,166,40,121,60,18,36,66,40,187,138,16,72,143,169,188,226,129,165,1,42,135,87,178,6,90,147,188,186,9,120,61,153,32,183,235,174,170,207,82,172,12,163,159,223,161,82,125,86,62,59,192,207,238,236,230,225,167,250,88,181,110,96,232,3,14,146,116,247,74,110,185,171,151,91,238,234,229,242,165,109,188,231,141,227,148,122,148,5,19,111,222,49,147,200,170,66,10,76,148,250,35,16,8,3,60,66,50,123,106,123,0,42,107,54,228,95,223,163,218,136,235,53,241,14,169,88,74,82,17,164,145,32,77,83,100,161,208,96,42,13,57,248,146,101,41,217,113,143,67,150,114,102,43,19,199,170,219,147,125,18,173,198,3,67,216,82,204,7,248,224,219,84,126,251,96,47,159,250,234,14,186,123,135,111,76,61,110,70,7,237,173,69,218,91,139,204,157,57,194,100,33,241,46,34,236,115,180,98,237,46,158,223,214,203,202,181,187,234,150,249,179,59,187,249,237,131,189,124,244,93,157,188,238,220,113,25,118,98,50,223,197,222,245,199,218,56,98,108,41,10,78,132,6,23,132,2,155,217,211,70,0,27,65,239,181,122,67,37,60,177,110,236,173,219,147,236,234,237,66,179,148,40,82,195,100,68,17,105,97,93,3,84,26,114,240,197,103,41,217,126,62,175,33,195,82,222,117,229,8,23,127,66,45,120,152,2,237,114,14,112,132,148,252,224,2,203,157,15,245,14,10,40,199,205,104,163,189,181,200,169,11,70,179,120,193,24,58,199,183,50,121,98,155,126,121,35,93,119,225,217,50,34,109,52,13,215,11,34,246,244,12,240,208,227,91,185,227,247,27,184,249,215,107,106,206,213,221,155,114,211,87,55,242,200,242,189,124,250,131,179,61,118,226,219,82,52,67,145,6,76,34,27,240,6,154,171,8,101,141,21,8,78,154,23,230,166,89,235,131,138,135,222,89,6,35,96,57,144,84,5,73,52,64,42,154,72,165,68,150,143,18,64,129,6,168,28,46,25,204,64,91,6,206,247,119,62,243,228,102,38,142,11,111,77,214,174,146,135,15,131,25,102,15,54,83,105,111,169,141,70,232,28,87,230,138,243,58,185,226,252,78,38,143,111,86,32,33,98,13,16,81,29,64,137,156,1,213,118,247,213,0,35,212,186,142,182,102,206,63,99,58,231,159,49,131,207,125,244,108,126,124,251,106,254,233,59,203,216,180,181,59,56,255,207,238,220,201,230,237,21,190,244,255,205,165,189,85,7,181,161,237,41,246,28,26,76,34,64,26,151,142,64,8,169,207,169,0,103,210,184,218,87,99,245,250,1,102,79,45,5,116,48,203,96,132,100,139,136,169,202,42,105,36,72,162,94,210,180,9,185,188,1,42,13,57,200,98,120,125,22,84,74,192,20,96,158,191,243,107,206,108,29,210,56,235,60,63,246,221,59,172,242,209,235,58,153,60,97,36,93,189,146,246,150,34,139,79,24,197,220,25,35,60,215,109,61,64,201,99,39,249,96,226,15,131,35,140,29,4,184,234,162,227,184,234,162,227,248,220,215,238,231,219,55,63,25,212,235,225,229,123,248,228,63,174,225,203,31,91,0,158,43,217,130,153,136,45,144,16,9,93,31,205,80,164,185,77,170,97,23,205,27,195,163,79,239,180,101,111,217,145,48,123,106,216,14,143,175,234,15,87,8,214,38,85,146,72,144,68,40,155,74,177,120,248,70,7,60,18,164,17,252,118,248,36,59,126,143,1,150,43,253,157,38,140,137,57,235,228,252,112,15,27,146,239,5,186,189,52,34,128,22,222,122,249,36,254,244,205,211,121,235,229,147,135,4,20,49,108,64,49,102,39,181,77,197,224,24,245,69,104,247,176,218,247,47,223,251,106,190,253,197,203,105,111,45,5,181,251,237,131,59,249,226,191,173,113,231,55,241,41,34,214,113,244,5,173,250,168,91,34,240,235,162,207,45,34,38,142,13,239,195,218,140,170,179,122,125,142,241,86,178,90,68,84,163,136,106,127,68,210,29,5,49,42,13,80,105,200,65,145,172,234,147,85,127,150,248,59,103,1,165,94,152,253,190,2,202,65,13,213,23,205,68,145,138,62,133,208,163,82,15,80,66,117,167,16,172,19,162,160,203,112,236,36,15,76,12,48,89,112,18,130,211,22,77,230,230,175,189,137,201,19,218,131,42,254,215,45,27,249,205,3,59,16,20,188,250,168,206,132,145,136,44,136,57,85,204,213,153,72,32,68,129,137,227,90,131,50,179,170,206,154,245,225,178,132,167,83,168,106,207,79,162,131,222,210,166,141,53,121,26,94,209,210,0,149,67,47,121,170,143,137,164,61,150,76,176,219,197,175,110,245,66,239,135,215,207,103,88,149,56,104,54,21,129,16,173,24,124,116,118,11,3,0,110,62,31,80,66,99,108,62,59,49,108,33,4,19,3,36,66,8,199,52,68,196,148,73,35,184,249,235,111,174,97,44,159,252,202,147,236,233,169,232,227,20,128,56,214,164,235,21,121,96,34,194,58,47,154,27,26,107,187,122,66,195,244,99,171,92,64,159,238,30,177,78,8,170,137,160,106,0,37,138,144,171,143,34,213,7,26,160,114,184,36,143,169,20,129,11,252,157,38,140,137,153,61,181,88,151,133,28,72,231,192,131,213,177,80,136,22,221,175,198,3,20,171,102,56,213,97,223,0,37,195,78,2,53,199,3,19,15,72,212,113,14,140,70,180,53,243,157,191,123,67,80,215,174,158,42,191,125,112,7,142,65,249,12,201,7,19,145,81,129,212,57,219,91,203,129,202,249,196,51,161,253,228,153,245,21,187,77,155,101,214,68,17,85,81,37,137,6,148,145,214,235,243,115,212,72,3,84,14,189,100,153,138,111,83,89,224,239,184,200,139,216,244,31,102,223,142,162,182,185,78,132,65,234,3,239,132,166,140,160,34,7,204,86,4,136,22,252,248,15,231,250,213,70,81,225,140,178,195,7,148,12,59,209,106,137,49,162,58,48,9,129,68,136,216,3,162,136,121,115,198,243,193,119,156,230,93,47,124,241,95,159,116,236,68,232,50,35,93,186,62,54,84,131,132,85,207,142,157,49,218,150,99,154,174,187,55,5,169,18,51,173,213,125,126,188,48,155,199,147,132,106,36,168,14,68,36,241,81,104,164,133,6,168,28,106,241,221,9,62,168,20,128,145,100,178,186,189,250,164,230,220,108,201,102,74,135,249,88,154,221,252,244,134,7,67,253,113,44,197,183,163,224,60,54,194,188,156,198,211,226,69,177,234,61,243,1,197,24,111,13,160,24,91,139,240,206,99,182,249,235,69,56,33,184,234,226,0,167,233,238,77,248,250,127,175,180,231,206,181,245,248,182,29,63,86,134,152,137,227,66,27,215,106,109,172,125,116,101,127,214,125,223,139,100,179,16,84,171,145,10,124,235,137,73,142,54,35,45,52,64,229,80,139,121,236,124,245,199,48,149,133,217,157,23,205,45,15,89,96,42,107,25,72,238,25,51,114,224,170,143,99,41,185,118,20,223,46,225,87,100,56,128,82,99,59,17,122,63,231,145,49,96,130,15,38,254,54,173,126,29,51,113,36,215,190,225,228,160,230,223,249,233,26,246,244,86,176,236,198,212,65,26,102,226,219,112,52,19,210,57,12,38,141,15,141,181,234,24,120,124,101,216,65,82,192,83,82,80,137,132,242,252,68,10,88,142,58,35,45,52,64,229,112,136,121,51,178,76,229,68,127,167,133,199,150,105,109,142,114,213,157,172,248,155,106,246,147,249,219,14,148,169,248,44,165,70,237,169,103,152,205,44,215,5,20,79,253,8,88,136,97,39,57,96,226,128,196,48,21,183,253,67,239,60,195,26,109,133,128,238,222,42,223,253,217,90,213,137,208,170,42,145,78,208,228,140,191,238,54,185,122,76,26,23,38,24,55,96,114,207,163,97,218,73,224,9,33,168,36,9,149,104,128,106,188,151,36,142,109,230,183,6,168,52,228,160,73,86,245,49,83,1,152,239,239,184,48,135,165,228,217,85,178,49,42,245,35,104,235,111,219,119,17,32,218,113,44,197,172,173,85,123,2,59,202,176,1,197,169,59,142,157,56,85,39,15,76,178,64,98,189,66,34,98,68,91,11,239,186,122,113,112,5,223,249,233,42,246,244,84,53,211,240,93,211,174,78,166,94,34,210,235,132,96,226,184,208,85,13,42,62,101,219,206,154,140,116,143,165,169,98,42,177,103,79,89,190,223,153,166,94,190,210,0,149,67,43,62,168,248,76,37,38,99,79,153,117,76,41,52,160,12,67,252,140,111,254,25,179,88,114,112,88,138,121,84,124,85,199,245,254,181,192,18,216,81,12,255,24,10,80,132,119,108,14,59,241,64,38,11,38,214,189,156,105,234,119,94,125,42,157,227,59,212,90,1,61,123,171,252,215,79,87,134,0,39,98,85,31,208,70,95,31,164,140,247,41,148,45,59,171,60,182,50,19,69,11,207,165,146,103,34,65,165,26,81,29,136,169,246,196,36,165,210,209,103,164,133,6,168,28,14,201,99,43,147,178,59,205,62,38,147,46,178,158,181,150,90,111,79,120,160,62,233,65,99,41,128,142,75,9,141,179,102,91,214,232,9,120,108,6,47,48,78,213,203,108,51,32,84,7,80,44,58,122,160,225,131,73,14,144,248,219,59,218,155,121,195,37,78,195,20,2,190,123,203,42,186,122,170,106,87,169,1,207,6,217,225,177,46,199,100,78,158,31,222,170,173,59,18,238,93,22,170,62,2,150,11,65,37,138,168,248,246,20,175,103,114,3,84,26,114,80,68,80,11,40,230,119,98,118,231,9,99,11,181,249,103,217,7,242,98,222,103,253,123,208,178,233,139,38,132,48,93,196,106,141,179,78,237,161,190,218,131,123,129,77,37,13,144,228,51,20,103,48,117,172,194,128,137,86,91,204,121,3,214,98,60,67,106,122,215,213,75,104,243,2,226,122,122,171,220,249,192,6,66,175,147,99,63,66,132,93,9,4,216,190,85,102,2,120,98,85,127,118,221,175,163,148,129,36,161,82,168,80,41,238,165,90,44,146,172,62,10,85,31,104,128,202,225,144,172,161,54,6,102,249,59,204,60,166,24,28,80,15,68,36,117,54,104,241,241,227,96,49,21,33,58,168,203,82,114,188,61,245,212,30,97,212,31,95,13,130,124,64,177,234,14,22,52,132,48,96,34,240,193,196,1,137,231,30,214,251,116,180,55,243,206,55,184,184,21,128,127,249,222,147,106,255,200,48,39,8,216,17,32,164,196,15,178,243,113,206,116,32,180,235,34,118,16,241,76,26,81,137,35,42,3,49,213,98,76,114,52,198,167,24,105,128,202,161,19,255,227,150,181,173,4,46,133,182,230,218,219,48,232,192,122,135,235,49,29,54,75,49,170,73,61,181,39,4,148,192,99,83,23,80,132,45,99,48,48,113,205,170,230,107,217,202,105,180,181,150,44,200,110,217,209,195,157,247,111,212,187,123,118,19,207,208,235,167,73,56,121,126,103,216,36,166,154,70,36,203,227,148,1,109,79,169,68,17,201,158,136,180,169,73,13,121,74,3,84,26,114,144,197,7,18,159,169,4,67,112,44,60,78,121,126,242,60,60,245,67,246,107,79,100,231,173,150,113,96,116,69,4,113,41,217,243,248,44,197,108,171,167,246,184,99,130,56,148,172,13,133,44,232,16,236,87,15,76,132,15,8,62,91,145,202,182,114,209,153,115,109,61,132,128,255,190,229,105,117,30,147,54,34,242,89,144,190,54,28,56,13,33,247,27,150,18,87,168,22,251,168,198,49,233,234,213,71,167,234,3,13,80,57,92,146,5,151,224,73,109,109,137,72,7,121,4,135,27,183,118,144,52,30,45,69,132,240,18,61,219,194,125,175,72,29,150,98,247,207,0,130,191,201,168,29,102,141,93,206,2,10,238,120,225,151,32,188,151,62,51,217,177,125,212,113,215,94,125,90,208,54,203,158,218,202,150,109,61,10,76,68,45,160,216,114,173,173,166,150,161,232,229,222,72,112,111,20,49,144,36,12,196,17,213,66,68,82,46,171,177,126,56,10,89,10,52,64,229,80,75,86,237,49,83,144,148,105,150,241,252,212,137,75,169,97,48,117,78,102,214,59,99,237,254,63,211,34,242,195,211,93,14,19,117,69,251,194,82,66,59,74,168,246,96,1,196,40,57,131,3,74,200,78,106,129,36,170,81,127,132,16,28,127,108,39,167,46,12,60,248,220,114,231,106,194,168,93,211,199,200,148,231,159,207,187,206,16,92,30,150,17,3,169,6,148,129,152,106,119,76,162,85,159,6,168,52,228,160,139,200,249,173,125,74,15,64,6,87,129,134,69,221,235,72,172,89,74,104,160,245,179,210,187,19,69,57,235,32,75,200,172,221,34,171,246,8,247,66,59,64,241,212,144,12,27,169,81,115,116,124,137,99,23,181,6,91,16,92,117,241,34,221,46,106,186,235,129,231,60,202,148,23,181,235,220,202,139,142,159,148,107,248,150,112,191,76,25,136,35,42,213,152,74,28,235,40,218,213,71,47,160,64,3,84,14,181,132,74,186,155,2,153,117,76,41,187,170,70,242,194,247,243,30,116,97,247,63,0,150,98,243,165,24,49,6,90,156,166,18,196,165,248,231,31,132,165,144,253,241,0,197,206,123,96,144,3,40,1,70,139,172,129,87,4,229,248,96,115,225,153,243,130,246,90,253,220,46,54,111,235,210,229,154,242,112,199,170,11,240,234,224,218,219,170,62,112,111,36,168,36,177,114,37,23,122,149,234,179,252,40,53,208,26,105,128,202,161,147,44,83,49,243,11,178,59,182,54,11,228,126,60,131,135,38,157,100,132,136,154,189,101,157,221,205,219,62,152,234,51,92,150,226,212,30,179,83,70,229,168,11,40,33,59,169,5,146,124,198,162,146,103,31,23,92,233,221,15,110,8,108,39,214,166,99,175,69,173,143,132,180,187,68,6,39,225,97,41,24,136,98,6,226,42,149,66,68,82,106,168,62,64,3,84,14,135,132,60,60,124,149,244,14,234,159,204,249,119,216,197,26,103,67,175,207,112,84,159,122,30,159,33,89,74,86,237,17,4,70,217,16,80,156,11,56,11,38,190,139,154,0,28,212,116,254,153,243,108,221,132,128,91,238,92,149,41,7,91,23,220,79,174,68,130,7,162,136,74,154,80,137,99,170,253,5,170,93,5,146,114,249,232,6,20,104,128,202,161,18,159,165,136,156,101,43,227,71,199,131,2,72,22,96,134,237,9,218,47,123,138,64,13,67,20,135,171,188,249,124,213,199,188,208,190,184,79,122,88,76,14,75,9,154,197,103,57,153,223,154,8,220,28,86,146,53,212,122,42,213,249,175,14,250,112,178,122,221,11,116,245,12,144,223,13,32,251,45,8,106,219,11,252,62,74,85,88,126,53,86,110,228,98,145,116,249,242,163,91,245,129,6,168,28,46,201,42,253,86,38,142,57,146,70,73,41,17,9,63,186,215,15,120,211,171,114,85,31,187,64,61,213,199,188,248,131,179,148,122,106,15,238,216,122,12,6,7,34,216,120,150,16,96,70,118,52,51,119,214,132,224,138,151,61,185,5,77,141,60,118,34,130,117,166,198,145,91,188,39,213,185,104,227,136,106,212,79,82,236,177,9,153,26,76,229,165,174,192,43,92,50,223,249,186,108,122,159,68,234,199,182,230,201,61,208,210,69,75,110,25,1,203,176,43,135,175,250,12,159,165,132,235,179,106,15,53,96,227,94,126,99,27,9,227,78,178,108,67,112,234,194,153,193,89,30,89,190,41,0,148,64,247,177,44,199,93,147,62,205,67,145,160,26,9,146,106,133,164,16,145,20,92,20,237,81,13,40,208,0,149,67,41,245,84,160,249,53,123,14,246,109,243,123,39,15,242,188,10,33,14,240,113,46,161,50,160,65,173,61,5,114,31,149,186,32,22,170,62,121,42,132,191,206,110,17,16,122,120,204,250,40,135,189,120,128,130,102,38,62,136,88,3,108,20,252,46,89,20,130,202,51,235,118,106,12,241,156,115,150,233,120,128,21,94,119,42,82,82,33,236,116,212,3,137,47,71,18,247,126,37,75,22,96,172,12,149,194,32,79,164,180,89,13,15,162,228,184,181,237,9,178,238,229,12,1,171,1,32,239,240,26,187,138,83,48,92,107,100,109,23,25,21,40,115,116,45,160,120,205,27,184,127,5,182,155,49,32,68,196,105,39,5,125,57,89,246,212,38,143,75,25,16,169,105,0,119,13,6,187,11,206,208,21,9,100,28,33,11,229,6,184,64,131,169,28,110,169,139,3,242,37,213,196,35,132,40,214,223,236,107,4,193,234,193,236,41,57,113,44,131,169,62,131,176,20,114,64,67,1,10,30,160,56,123,76,110,57,90,58,218,154,105,111,13,179,236,169,120,21,207,158,35,61,203,138,200,15,211,247,37,149,234,100,253,253,7,25,231,95,166,210,0,149,67,35,34,243,59,168,12,214,105,112,168,124,181,110,223,3,65,36,157,207,213,246,119,52,146,137,213,203,24,105,243,164,86,83,240,203,242,231,51,170,79,14,100,101,215,213,50,29,31,108,242,64,201,69,224,250,113,45,199,205,10,19,47,109,222,214,13,66,112,219,157,79,243,129,79,254,15,255,254,195,7,188,139,241,106,168,129,37,18,136,88,18,21,98,162,82,137,72,74,68,146,54,0,197,72,67,253,57,52,34,51,191,195,59,72,106,122,93,47,153,138,80,118,21,113,80,159,95,1,162,148,3,127,113,102,185,190,141,69,228,218,76,134,62,109,168,250,184,13,190,13,35,171,238,168,69,3,44,158,26,20,0,128,89,214,141,230,122,69,33,4,180,183,53,219,182,6,216,188,125,15,223,191,229,81,254,241,63,127,135,0,30,123,122,19,109,173,77,188,249,178,147,236,185,69,120,250,40,133,88,74,98,82,226,180,137,136,152,168,218,71,180,20,162,59,143,114,15,80,131,169,28,94,25,242,97,59,252,131,174,239,199,119,165,142,13,69,201,80,70,218,125,128,68,79,245,201,181,199,120,235,242,237,49,190,193,214,217,109,230,205,14,115,164,108,222,222,197,178,229,207,7,235,110,251,237,83,182,172,40,115,73,169,164,93,72,138,81,74,49,142,41,20,170,20,75,3,20,42,21,162,174,83,114,40,214,81,38,13,80,57,60,226,51,151,222,253,42,96,152,223,190,125,199,164,193,65,101,127,223,142,250,70,90,127,141,175,90,212,170,46,131,151,239,12,61,254,11,31,122,134,12,159,241,163,110,213,206,18,31,192,5,103,47,153,21,228,254,93,179,126,7,207,172,219,94,163,207,105,104,186,82,8,74,34,82,192,18,197,20,7,74,20,218,219,137,119,238,36,94,154,239,238,58,106,164,1,42,135,78,124,32,241,33,225,217,3,47,248,96,210,25,62,160,205,123,0,0,32,0,73,68,65,84,145,59,187,47,135,29,204,42,212,174,200,87,125,242,246,15,189,64,32,50,238,100,227,45,146,50,114,69,233,253,207,57,109,182,202,16,231,149,122,219,157,79,5,231,242,182,29,35,224,205,64,19,130,178,136,40,197,3,20,11,123,41,118,236,37,62,218,217,74,3,84,14,173,200,204,252,17,166,103,31,6,147,218,1,188,90,67,31,154,199,110,28,67,81,98,226,87,76,167,71,183,191,29,92,29,104,111,107,226,236,83,103,7,55,232,214,223,62,149,91,15,141,79,175,17,48,69,42,96,105,34,162,28,23,41,246,54,216,74,3,84,14,163,24,80,57,224,52,131,195,177,74,12,229,13,82,219,95,218,219,127,72,223,56,107,204,197,51,228,42,233,234,118,67,108,88,149,71,10,94,123,222,2,183,78,66,79,111,63,183,253,118,57,93,61,53,227,252,0,180,0,31,142,11,52,3,101,17,81,222,27,81,42,236,165,216,218,74,97,251,252,6,168,52,228,224,74,61,213,167,230,77,95,163,7,252,62,168,39,31,22,31,58,218,82,168,186,129,215,158,94,189,41,112,213,159,188,224,24,64,112,202,130,169,180,182,132,49,44,119,63,176,90,217,86,242,68,48,79,74,206,137,36,45,5,104,42,15,80,22,5,74,197,30,10,187,119,19,47,93,154,159,63,231,149,46,71,221,5,191,4,98,216,73,46,176,244,246,13,79,35,26,36,158,107,223,43,116,56,35,237,6,57,205,193,175,129,87,162,190,70,137,212,35,57,186,107,126,126,203,174,204,113,202,238,34,132,224,210,115,23,184,27,37,225,119,15,173,174,41,253,184,105,110,40,84,41,185,46,133,150,20,154,37,52,17,81,234,46,80,28,49,130,120,227,70,212,16,136,71,153,52,64,229,240,137,1,151,181,217,13,245,34,54,131,245,7,245,209,52,44,165,114,48,11,61,232,34,189,191,110,101,125,51,149,218,164,40,136,68,226,92,102,14,211,119,239,233,181,160,98,60,64,167,156,48,213,150,241,230,203,79,169,61,141,183,44,129,107,46,57,198,223,62,86,74,94,47,161,57,21,52,73,65,57,238,167,88,236,161,208,215,71,180,116,105,77,32,206,43,94,142,170,139,61,204,146,167,2,73,160,103,176,131,130,52,169,245,246,17,245,49,102,120,216,83,47,132,119,88,7,15,107,223,236,230,218,221,101,48,43,7,1,11,44,64,12,85,186,247,43,113,192,162,39,41,83,30,88,182,58,112,39,207,153,49,206,235,72,37,232,28,63,138,147,230,31,19,150,238,157,174,185,28,49,109,82,43,23,157,62,222,55,244,190,73,8,166,73,104,150,82,25,109,187,98,74,77,77,20,55,110,36,126,99,173,69,249,21,45,13,80,57,180,146,5,22,51,192,84,32,107,54,84,178,241,91,181,147,221,116,96,207,166,148,251,102,75,57,32,21,165,198,184,179,175,203,131,237,169,155,52,131,55,14,156,82,13,36,82,191,252,106,199,95,255,238,201,160,106,139,23,28,83,131,226,151,158,119,130,5,158,236,24,76,211,38,181,66,4,87,45,157,76,115,57,50,219,90,210,148,215,167,146,150,180,66,115,10,77,66,80,42,247,81,24,209,75,188,246,148,163,203,104,219,0,149,67,39,89,134,146,122,191,59,252,29,187,247,14,253,162,187,0,46,167,14,9,6,103,52,249,82,231,92,251,196,82,194,50,100,80,102,154,1,147,108,138,17,29,101,51,156,243,201,108,89,218,78,18,116,136,242,214,153,242,165,159,38,86,227,184,80,203,191,190,103,185,43,77,194,229,231,159,0,8,144,194,118,128,56,231,180,99,105,243,12,182,121,163,22,180,52,23,120,247,85,179,252,109,151,68,17,211,162,152,22,4,101,250,41,83,160,180,187,133,194,206,157,214,104,123,84,0,75,3,84,14,189,100,193,69,2,129,59,65,100,35,63,115,254,217,253,68,120,156,91,47,106,214,215,84,36,243,118,212,126,253,19,111,41,129,26,176,200,44,15,90,218,96,107,83,111,99,173,29,219,175,167,179,171,100,85,32,159,173,248,77,171,183,201,172,129,86,242,163,91,31,166,171,167,207,238,211,214,90,226,184,217,94,38,56,221,192,237,173,77,92,122,222,137,181,237,227,87,65,68,156,50,127,20,115,167,183,219,109,192,135,37,52,199,146,230,178,160,44,98,138,133,130,10,136,219,190,189,1,42,13,57,184,82,107,49,244,100,205,134,202,176,236,40,118,158,253,97,40,144,207,82,170,32,171,222,114,146,217,158,102,205,31,249,226,169,9,249,231,210,172,67,134,7,248,139,131,219,85,66,128,49,108,197,7,22,7,34,97,25,102,253,63,126,235,87,65,207,239,183,190,238,84,32,191,11,193,155,47,87,219,210,204,117,205,155,209,14,210,1,249,219,46,157,230,171,72,243,164,228,156,84,210,146,10,154,36,148,227,62,138,197,86,10,29,71,145,139,249,21,127,129,47,177,228,169,64,9,176,206,223,169,183,55,117,221,234,163,252,41,0,29,203,80,134,143,44,251,229,70,206,218,74,107,54,103,49,178,86,213,201,249,201,108,207,179,171,120,224,32,211,128,109,248,172,68,17,157,16,88,140,65,54,123,189,63,186,245,33,158,223,242,98,224,197,185,226,252,204,104,41,90,5,2,232,156,48,146,147,230,43,175,144,111,87,1,80,137,178,149,76,239,108,225,226,211,39,248,219,175,147,208,156,196,180,164,208,148,10,202,93,5,138,123,180,139,249,104,48,218,54,64,229,208,138,15,40,102,124,221,20,232,246,119,234,238,77,235,218,102,235,205,27,25,62,174,228,0,74,93,140,201,178,21,95,21,202,33,91,117,140,191,230,165,175,13,211,241,236,42,185,42,16,193,190,216,114,252,50,213,121,107,128,197,7,23,13,78,47,238,233,225,43,255,126,123,80,250,235,46,152,79,231,196,145,168,132,76,224,144,218,237,243,39,127,116,150,171,133,207,214,132,171,150,64,240,134,11,166,208,84,180,169,34,198,10,120,67,92,165,57,145,52,75,65,89,236,165,20,117,81,28,209,75,252,212,124,226,55,186,68,53,175,72,128,105,128,202,161,147,60,46,111,188,63,219,252,29,3,239,143,55,249,241,41,153,180,172,100,94,133,156,133,172,228,189,248,46,78,69,217,83,28,152,12,203,75,20,168,69,62,40,132,6,86,55,151,181,201,212,83,129,114,216,138,221,83,134,71,25,86,146,177,159,56,117,75,242,15,255,118,59,207,111,121,209,158,185,181,165,196,123,223,126,166,171,74,6,153,85,201,130,197,39,76,183,108,5,84,113,119,61,172,108,236,210,187,55,109,205,37,46,57,115,146,221,71,194,101,50,98,108,44,149,125,165,212,76,83,26,81,78,74,148,226,152,226,178,217,20,150,46,37,90,186,84,1,204,27,131,97,11,94,254,128,211,0,149,67,43,254,39,216,159,223,178,79,165,4,6,89,55,63,236,74,12,10,16,153,0,184,128,44,36,153,85,158,177,86,230,120,199,115,237,42,25,21,200,90,59,157,250,146,23,164,22,22,42,107,212,160,80,189,209,118,19,156,234,99,152,203,175,238,126,130,255,248,225,189,129,45,229,237,87,45,166,115,252,136,218,203,5,133,22,54,83,150,228,178,243,22,90,83,144,4,182,191,56,192,221,143,40,59,187,192,17,157,55,94,112,12,99,70,148,204,181,143,77,82,94,159,164,180,38,41,45,73,74,115,17,154,170,130,178,124,145,82,185,76,177,107,21,165,254,213,20,31,154,174,64,102,246,108,138,243,231,83,56,229,20,101,123,89,90,11,52,47,27,128,105,128,202,161,151,44,75,73,200,168,63,143,173,234,15,162,103,235,121,120,236,186,204,182,161,31,183,250,182,20,153,89,200,50,22,91,109,95,19,9,14,209,64,32,243,213,163,124,21,136,154,125,7,103,43,14,88,200,110,243,221,199,22,80,212,57,159,92,249,60,31,253,204,15,131,51,30,55,115,28,239,183,44,69,145,1,27,137,235,53,164,42,81,112,217,5,11,153,56,118,68,96,139,249,225,237,27,141,135,26,100,172,60,210,17,188,227,178,25,216,203,133,171,133,96,154,136,105,21,9,173,3,5,90,163,18,45,133,102,154,75,253,52,247,141,162,105,111,129,242,132,2,165,49,80,142,99,74,64,169,178,145,210,234,213,20,87,79,161,56,123,54,133,249,243,41,44,125,153,129,75,54,103,96,67,14,174,68,96,19,191,150,244,212,4,244,3,111,241,119,124,231,235,70,132,246,147,65,88,137,0,162,72,100,128,168,54,65,179,16,66,191,148,131,48,21,17,123,46,235,2,232,124,174,106,152,14,129,77,8,109,43,21,89,23,184,29,32,204,11,156,17,118,157,174,169,25,58,195,235,41,28,164,129,244,222,17,33,194,153,60,112,53,45,224,231,66,169,221,46,217,211,181,151,215,190,243,43,116,247,186,30,198,109,173,37,190,253,247,215,208,209,214,100,219,199,181,181,239,3,10,175,185,163,181,137,59,239,95,101,247,221,219,151,48,110,116,153,25,157,173,184,1,203,96,242,184,102,158,90,179,135,237,47,170,143,4,146,145,145,228,15,68,64,2,66,34,40,16,19,17,139,10,113,84,164,32,11,20,123,7,40,22,161,80,76,40,244,183,18,183,86,137,219,98,226,164,72,84,124,129,232,249,81,68,199,28,3,219,235,244,107,60,210,164,193,84,14,173,248,28,221,15,126,75,201,100,128,123,116,165,199,86,168,53,216,226,175,203,188,108,131,187,152,135,176,141,4,118,17,159,165,36,129,218,148,203,117,114,85,32,117,137,126,100,171,11,151,87,77,16,218,71,124,182,226,83,33,167,218,168,98,189,229,172,71,8,231,54,86,128,210,203,31,125,224,27,116,245,244,7,245,254,203,247,157,207,100,107,156,21,238,216,128,161,100,214,75,184,236,130,69,204,153,62,193,169,80,192,15,126,181,209,221,28,9,38,212,255,141,23,4,30,163,51,83,56,94,38,116,72,65,71,4,35,68,202,136,74,202,8,161,231,171,146,118,98,218,82,65,123,18,211,38,250,105,19,37,90,247,38,180,36,9,77,3,5,154,154,154,40,238,216,65,113,250,116,10,167,56,181,232,136,101,44,13,166,114,104,69,127,234,137,129,34,138,169,148,129,102,224,52,96,156,217,241,172,147,155,153,214,169,179,218,139,193,39,181,143,8,92,205,118,153,44,192,12,101,112,77,245,254,69,203,82,4,49,102,4,66,225,21,40,68,108,8,73,192,64,48,204,5,92,182,181,97,177,21,221,66,214,69,43,92,249,182,60,95,199,147,181,140,5,25,188,94,123,186,122,249,163,15,254,27,43,214,108,117,109,9,124,240,29,103,112,237,27,22,219,162,132,95,63,220,53,153,99,92,93,212,239,140,99,198,114,203,29,143,219,243,236,237,79,64,70,156,48,123,132,119,30,193,248,209,77,108,219,213,199,115,155,123,205,189,25,139,96,89,36,136,101,76,81,66,161,40,41,17,81,22,146,114,42,105,42,68,52,201,148,114,10,165,88,82,74,5,37,25,81,16,85,10,73,74,148,68,10,68,74,221,136,221,99,224,72,103,45,13,166,114,248,36,180,44,102,66,245,87,175,87,6,211,161,98,79,220,216,192,195,249,84,213,183,165,212,238,85,181,11,53,118,21,91,235,4,231,137,169,53,194,170,89,143,121,100,13,182,53,108,197,236,234,111,15,189,55,33,35,33,99,99,73,92,76,138,76,185,127,217,90,206,124,227,223,243,244,234,208,14,126,213,69,199,243,129,119,156,129,167,92,218,211,185,26,10,194,235,145,230,63,72,193,41,158,39,200,84,243,150,123,54,177,245,133,62,239,70,40,84,127,231,229,51,252,216,150,19,129,233,34,98,20,146,81,164,140,150,130,209,50,101,116,42,24,99,230,101,196,232,56,101,52,49,163,132,100,100,12,35,100,68,135,40,208,94,74,105,105,129,230,168,137,82,83,47,197,221,187,137,79,57,130,61,68,141,33,58,94,58,9,190,53,91,118,186,168,214,125,9,106,27,92,134,217,121,208,216,40,101,21,236,208,167,186,179,28,122,32,117,34,164,136,17,214,6,35,144,68,202,96,41,148,26,35,136,52,104,68,32,244,47,41,200,200,118,4,214,187,131,72,145,50,178,204,195,30,239,85,199,30,139,97,15,106,139,148,30,155,64,178,103,79,47,255,240,173,59,249,214,143,30,168,185,180,43,47,56,158,207,221,120,9,78,243,212,117,183,160,28,26,104,221,26,83,49,197,132,164,132,155,174,127,29,215,124,240,27,244,236,237,71,74,232,221,155,240,173,159,60,203,95,92,119,60,66,3,165,144,208,218,82,100,233,226,113,220,245,200,118,34,117,73,159,74,83,61,192,123,164,129,74,208,139,96,189,46,186,39,130,117,82,13,167,186,5,201,230,84,82,41,164,60,85,17,188,64,149,98,21,246,70,2,65,9,209,212,11,91,167,0,27,237,69,13,239,235,113,152,164,161,254,28,90,49,170,79,1,165,246,148,81,134,218,22,96,44,240,42,179,99,91,115,196,107,207,110,27,118,193,86,237,209,42,79,228,177,23,229,17,149,8,49,156,103,205,168,57,37,16,37,34,81,70,141,86,88,64,136,162,86,121,34,5,38,34,82,47,190,40,32,208,170,82,84,208,219,10,234,82,3,67,173,103,200,213,32,96,181,169,92,53,40,92,118,175,122,86,21,50,34,121,122,245,22,222,243,127,190,207,237,247,172,172,185,178,171,46,154,199,23,255,226,53,153,115,25,21,71,32,100,152,102,82,102,85,34,79,245,18,66,141,23,84,46,22,248,253,31,214,216,99,54,109,239,99,70,103,43,147,39,180,96,50,246,11,96,122,103,43,63,191,103,179,2,21,233,221,47,83,162,160,8,140,21,130,113,66,208,9,28,47,4,243,37,156,38,225,2,224,34,41,184,82,192,68,9,203,136,16,105,10,34,66,70,5,100,169,31,57,170,19,249,194,11,186,234,71,144,52,64,229,208,137,121,130,11,40,123,138,177,165,180,0,173,192,8,224,92,179,243,150,157,9,239,186,106,68,174,91,185,166,96,189,61,210,228,215,2,138,7,42,206,86,50,68,37,69,1,33,154,65,20,181,45,69,219,78,178,246,20,147,196,204,130,151,240,108,16,214,208,163,189,33,198,225,101,94,78,205,6,236,113,198,22,162,154,200,183,167,184,101,111,149,109,78,105,175,127,79,215,94,190,248,141,223,112,227,231,127,198,142,23,194,20,53,237,173,37,254,250,35,231,241,161,119,190,202,218,68,172,167,201,216,128,188,55,220,217,80,124,48,241,235,8,6,146,78,152,59,133,59,127,191,130,23,94,116,231,252,195,138,93,92,124,198,4,202,133,216,158,171,173,181,192,182,23,250,89,183,169,135,72,64,107,115,204,21,231,76,225,248,153,35,56,126,102,7,211,59,91,40,22,34,198,142,44,211,82,142,217,221,93,169,233,13,141,160,4,204,19,48,85,166,220,47,98,100,42,145,253,17,233,64,1,185,119,47,114,250,116,228,246,237,129,106,253,146,75,67,253,57,52,98,116,93,99,169,47,228,76,155,178,7,109,217,81,101,210,184,130,235,99,50,24,176,100,126,125,113,118,135,225,89,93,4,85,61,99,190,49,9,246,123,99,139,49,54,22,207,12,39,83,11,4,97,129,74,245,81,44,71,32,165,126,65,205,102,41,145,66,56,53,136,72,109,151,2,68,130,36,70,248,97,249,2,132,237,216,24,177,124,245,86,254,226,243,183,240,244,234,32,48,25,128,201,19,218,249,234,77,151,114,252,156,241,222,249,188,202,105,245,76,34,177,227,38,11,111,179,192,171,171,80,245,16,138,110,72,41,16,66,242,169,235,175,224,173,31,250,87,205,8,161,183,47,225,223,111,126,150,15,191,101,46,214,22,35,5,111,190,112,26,119,255,97,27,18,232,217,155,112,252,140,14,22,204,26,161,64,86,196,8,33,29,123,209,237,184,125,87,31,219,119,245,131,132,239,255,106,29,79,174,217,3,130,11,16,108,141,36,95,79,36,169,168,144,196,41,105,83,66,117,247,110,235,77,60,98,128,165,193,84,14,190,248,128,82,32,244,248,180,2,109,250,247,10,96,190,57,232,146,179,58,56,251,148,54,74,69,169,31,54,243,213,172,51,5,219,4,119,61,210,203,175,239,235,161,189,53,98,236,40,245,18,12,207,54,19,91,102,226,88,72,236,212,21,13,12,106,62,114,236,97,80,239,15,88,53,3,195,162,34,253,198,166,216,189,13,99,48,123,218,149,18,203,88,60,244,20,8,110,252,252,207,249,228,151,126,89,195,78,0,174,186,240,56,190,250,87,151,48,101,226,72,220,192,97,178,182,158,89,182,34,253,184,23,237,86,22,246,138,60,198,162,214,140,25,221,142,148,240,200,19,207,217,99,158,125,190,151,5,179,70,50,97,76,217,214,187,189,37,70,166,130,167,158,221,141,0,118,188,216,207,210,83,199,235,230,137,212,21,122,237,9,208,214,92,96,194,232,38,198,143,110,230,180,249,99,185,123,217,54,122,251,18,4,204,2,238,19,146,61,177,36,17,5,170,125,69,210,145,3,164,227,103,144,30,73,108,165,1,42,7,87,76,212,99,30,160,180,160,0,165,13,56,27,248,99,255,192,235,174,26,195,177,211,202,234,139,172,61,49,81,14,40,152,71,219,60,227,2,88,182,162,159,235,191,176,141,63,60,221,207,125,143,238,229,242,165,205,148,75,98,152,160,146,113,41,107,15,134,90,23,103,220,171,102,222,11,128,51,245,18,145,183,159,251,252,6,110,101,171,238,136,32,58,164,62,176,184,115,60,240,232,6,222,122,253,247,120,240,177,13,53,87,208,57,161,141,175,126,234,98,174,125,195,137,52,149,139,222,113,94,61,130,210,76,75,98,109,32,152,54,13,174,201,237,235,54,169,149,139,79,152,198,79,110,127,140,238,94,23,11,179,124,237,139,156,119,234,4,202,37,167,22,78,159,220,202,175,126,191,153,106,34,217,185,187,159,197,243,71,51,170,189,100,207,43,188,147,251,203,2,65,177,16,209,214,92,224,193,229,59,1,74,82,50,50,138,249,189,148,84,137,72,196,0,73,210,78,50,48,64,250,226,139,71,206,240,8,13,151,242,193,17,245,182,228,199,164,52,225,64,165,5,152,7,188,219,63,248,77,175,25,195,57,139,59,60,22,82,68,5,141,169,142,205,22,72,114,78,42,132,224,251,183,237,177,235,182,236,72,88,185,174,50,76,64,81,98,93,202,65,94,21,168,31,0,151,122,174,101,179,205,133,235,215,115,43,91,32,209,182,151,172,155,217,5,205,89,95,46,187,187,247,242,55,95,253,13,111,187,225,251,60,191,117,15,89,57,255,244,169,252,248,159,175,98,201,194,73,65,37,165,191,96,63,226,210,117,74,246,235,46,148,222,19,166,98,145,164,210,149,163,250,21,133,45,241,87,215,95,30,4,196,109,123,161,159,255,254,197,122,164,20,86,211,106,107,46,114,233,153,147,85,11,164,208,179,183,26,244,114,206,19,225,157,227,220,197,19,57,126,166,141,133,57,55,77,153,42,139,52,9,61,120,89,127,63,133,129,129,35,203,189,220,96,42,7,46,126,191,12,31,80,124,48,105,3,218,245,244,103,192,36,115,240,89,139,59,248,196,123,166,33,72,176,89,175,101,138,192,164,67,48,157,227,124,85,66,29,107,84,159,31,255,186,139,45,59,92,92,201,101,231,180,48,121,252,190,152,203,234,169,64,57,1,112,121,6,91,76,125,220,40,128,249,108,197,92,133,81,61,34,62,251,245,123,248,230,247,151,177,167,187,159,153,83,71,81,46,197,24,149,227,246,123,215,240,254,79,254,140,223,61,252,28,89,233,28,223,202,103,111,56,139,15,188,253,20,202,229,130,45,215,87,169,106,217,138,123,239,130,191,86,53,34,31,140,133,127,149,160,84,75,149,115,165,171,187,143,39,86,108,82,183,13,120,102,125,23,167,45,24,195,232,17,38,144,81,178,96,214,72,78,61,126,52,175,94,56,150,5,179,70,122,192,234,181,143,167,238,250,231,53,54,173,135,150,239,52,160,86,140,5,15,201,42,21,17,83,141,6,168,182,84,73,180,39,232,136,112,47,55,152,202,254,139,207,78,140,135,39,15,76,124,64,121,27,48,215,20,48,103,90,51,159,252,211,233,250,33,43,56,70,146,9,194,86,169,131,148,90,36,77,192,151,247,236,44,91,17,142,160,119,220,244,226,62,94,74,5,73,5,203,86,36,184,0,56,205,86,44,3,48,185,85,114,216,138,204,176,149,32,100,223,45,43,163,167,228,142,123,215,242,237,31,63,201,131,143,111,230,115,95,191,143,7,30,221,8,82,242,244,234,173,188,237,207,254,135,247,127,234,231,60,191,181,171,166,182,87,94,48,147,255,253,234,229,156,127,198,212,154,114,117,37,189,159,90,182,98,151,245,117,185,20,11,190,145,219,94,84,208,5,192,103,96,82,74,222,253,150,51,153,56,174,131,84,19,186,84,194,151,191,187,82,177,21,161,12,182,32,152,222,217,198,252,89,35,130,235,112,1,114,194,214,33,53,204,199,99,64,231,46,158,72,75,83,108,62,40,75,36,148,41,81,174,38,20,139,37,10,253,109,196,125,125,68,75,143,144,240,253,6,83,217,119,49,96,226,123,118,178,234,142,113,27,183,162,192,100,4,240,90,224,173,166,144,57,211,154,249,228,123,103,48,105,92,73,27,2,13,112,168,201,24,107,107,190,156,2,181,175,253,178,74,254,237,127,67,181,224,131,215,140,216,39,245,71,201,190,178,21,89,107,91,177,196,192,45,219,78,137,24,38,131,58,14,184,245,174,181,60,248,184,115,130,237,216,213,203,131,143,109,226,166,175,220,157,11,38,157,227,91,249,202,199,207,226,29,87,205,163,169,108,152,152,49,32,171,147,231,179,21,112,63,86,199,212,219,164,191,17,225,233,71,206,198,162,246,51,86,32,191,105,203,165,34,157,19,70,240,203,187,159,182,219,118,119,171,232,104,23,194,47,29,203,180,69,250,110,118,180,71,40,115,207,180,235,75,202,148,93,93,21,158,89,223,133,16,180,74,201,122,82,158,69,48,144,36,84,154,36,213,158,42,73,211,92,210,205,155,95,122,131,109,195,165,60,124,241,77,27,89,131,108,158,13,197,128,202,120,224,53,192,85,166,160,182,230,136,175,127,106,62,237,173,130,52,13,179,172,25,55,101,184,78,216,231,62,148,108,95,152,3,17,147,87,165,96,138,70,138,196,158,86,5,150,234,110,254,36,26,88,82,85,87,1,38,26,86,185,153,189,121,47,186,86,202,84,3,139,114,35,47,57,97,98,80,131,7,31,223,12,108,174,91,195,243,79,159,204,146,19,39,120,229,154,45,42,242,214,69,241,10,91,15,227,194,54,111,175,191,44,133,126,183,73,177,169,36,133,84,192,162,239,67,16,64,40,77,150,22,65,68,106,65,224,220,211,143,229,156,87,205,225,174,251,159,81,140,37,130,255,254,197,122,206,91,50,129,137,163,203,164,82,16,11,73,42,5,143,44,223,193,93,203,182,242,200,211,187,84,132,173,167,206,54,55,197,204,152,212,202,180,206,86,94,123,102,39,227,70,53,219,135,97,233,226,9,220,122,207,38,179,184,80,8,126,35,4,37,1,197,254,1,10,35,83,162,221,187,77,127,232,151,86,26,76,101,104,241,65,196,48,19,99,59,241,163,100,125,151,177,81,119,46,3,62,14,156,172,247,167,173,57,226,95,254,234,68,58,53,67,17,152,200,87,199,84,132,208,191,67,84,74,8,248,195,211,253,220,122,183,235,240,60,103,106,129,171,47,106,219,15,166,2,46,221,1,245,217,138,247,117,85,51,58,198,68,24,23,176,103,167,176,251,250,159,104,183,60,121,98,7,15,61,190,137,231,183,6,233,101,234,202,227,43,119,242,208,19,219,56,239,85,83,40,151,189,186,230,178,149,28,187,142,207,86,140,216,120,25,168,217,106,235,44,61,214,162,68,226,169,77,192,25,39,207,228,71,183,45,99,96,32,177,199,174,123,190,135,243,95,53,1,1,172,219,212,195,151,191,187,130,159,220,253,60,91,118,244,5,96,98,154,173,90,149,108,127,177,159,213,27,186,185,237,222,205,32,37,243,102,142,4,96,84,123,153,159,255,238,121,42,85,9,48,18,193,207,136,24,136,35,6,10,17,149,254,38,229,5,218,179,231,165,247,2,53,64,165,190,228,129,137,153,234,177,146,118,20,168,76,2,254,4,149,51,37,48,112,124,236,61,115,56,125,209,72,188,44,63,222,164,190,228,66,36,72,169,190,232,129,221,14,247,88,27,80,217,188,35,9,64,101,122,103,129,203,151,182,170,125,246,25,88,6,115,47,171,179,186,184,21,169,217,10,30,0,13,162,6,213,3,150,9,29,220,124,251,170,154,154,76,26,87,96,241,252,38,214,109,10,51,211,109,218,214,195,15,110,91,205,140,41,237,236,216,213,199,138,181,187,216,177,171,143,231,183,118,33,128,142,182,146,41,61,80,217,124,213,200,251,177,18,132,235,139,60,96,129,16,92,156,109,70,0,229,82,129,254,129,10,127,120,114,131,61,229,246,93,253,68,192,67,203,119,240,213,31,172,102,251,174,254,140,145,221,221,199,188,91,245,212,179,123,216,182,179,143,83,231,143,65,10,193,198,109,189,172,223,220,3,208,138,228,97,153,176,61,73,25,72,83,42,3,41,85,41,169,158,210,69,186,46,208,233,14,191,52,212,159,80,252,247,214,24,189,242,84,157,60,150,98,140,179,151,0,111,66,245,237,9,228,221,111,154,206,21,231,118,34,101,21,40,40,53,66,198,158,58,145,4,6,88,191,82,121,82,19,214,237,173,87,106,212,190,171,214,170,207,80,69,81,125,161,152,148,82,45,170,168,102,168,162,178,157,69,72,170,68,162,224,234,98,212,32,237,134,150,222,178,82,53,50,170,16,17,75,78,156,192,169,39,78,226,161,199,157,218,51,105,92,129,43,150,182,241,47,63,124,177,166,126,0,93,61,21,62,244,55,191,203,221,214,222,90,226,252,51,166,243,250,11,143,101,201,162,41,8,171,142,105,21,9,156,26,4,122,70,104,213,76,183,180,132,84,207,70,94,192,158,189,78,210,16,132,244,61,251,211,107,206,228,167,191,126,146,173,219,247,216,235,255,238,47,214,19,199,16,235,216,63,169,188,215,182,44,163,238,186,78,146,161,220,165,35,114,223,251,166,217,156,58,127,52,119,63,178,205,92,195,133,34,98,185,208,201,191,74,3,244,199,85,10,235,166,147,178,46,215,174,114,216,236,44,13,80,169,5,18,243,107,193,100,36,196,85,40,166,45,20,123,123,21,160,148,160,73,66,147,44,208,82,173,210,140,138,63,249,16,48,205,47,188,173,37,230,184,25,237,44,94,48,138,247,188,105,58,54,4,3,16,162,128,20,250,37,37,65,138,24,100,21,41,11,132,73,169,107,197,172,123,228,169,208,243,51,103,90,145,84,238,255,103,74,248,57,107,37,32,98,164,72,136,132,174,99,230,225,151,169,238,217,44,116,122,35,163,14,169,141,96,227,81,234,0,139,136,248,192,219,78,226,218,27,29,168,108,222,94,173,11,40,67,73,87,207,0,55,223,190,138,155,111,95,197,113,51,70,243,151,239,125,53,167,45,156,98,123,7,155,240,127,7,44,214,120,162,0,85,111,83,232,17,145,106,187,139,99,46,198,251,83,251,206,74,224,61,111,57,131,155,254,225,23,170,127,182,190,124,211,67,25,93,236,69,103,29,199,181,175,95,204,196,241,237,248,73,194,215,60,183,131,155,127,245,36,119,220,247,140,221,23,20,176,164,82,114,237,101,51,252,15,201,140,36,161,20,65,169,146,82,172,22,41,138,18,149,202,94,235,182,51,72,120,216,193,229,104,84,127,12,251,168,81,111,166,67,220,2,133,166,113,20,154,154,40,20,139,148,138,69,74,213,2,77,73,76,83,154,210,18,199,180,70,17,109,50,165,157,2,109,82,50,49,138,248,48,240,110,33,24,233,159,232,184,25,29,124,249,99,39,243,199,111,152,197,41,243,71,96,239,177,254,68,202,108,206,85,179,142,20,213,39,70,127,241,253,4,169,25,207,232,178,21,3,44,123,122,192,158,243,85,11,155,56,121,94,185,46,139,25,74,148,173,32,214,204,41,194,100,63,115,229,197,186,62,38,94,197,168,65,18,105,48,57,176,175,24,227,172,107,253,80,21,146,76,153,216,198,131,143,111,97,211,48,109,43,195,149,157,47,238,229,230,219,87,241,212,154,237,156,117,202,84,202,165,88,95,143,186,152,124,15,81,168,158,217,118,241,65,168,110,239,111,201,113,51,199,243,147,219,159,164,187,183,223,22,103,212,155,217,83,199,242,127,255,242,50,174,184,96,1,237,109,101,99,253,182,111,249,232,17,77,156,113,210,52,102,28,51,154,135,158,216,72,165,106,238,63,60,183,185,151,74,37,101,160,154,26,239,210,56,41,249,81,34,24,136,34,6,68,149,106,69,82,173,84,72,247,238,117,223,45,220,85,100,53,233,67,38,175,100,80,49,13,26,101,230,205,114,12,196,83,160,208,60,129,66,75,11,241,222,50,197,254,18,165,74,133,82,181,74,57,73,40,167,41,205,105,74,139,148,180,72,73,155,148,202,118,34,5,19,5,188,13,201,13,18,102,251,186,50,192,123,223,114,44,95,248,232,201,140,29,165,77,42,34,245,18,44,135,227,253,154,241,105,164,182,171,72,29,231,33,101,98,159,184,122,143,241,178,167,7,120,116,133,3,149,147,230,149,57,105,174,3,149,32,230,193,155,6,151,84,107,5,154,242,91,23,108,152,107,197,100,158,87,47,91,24,242,100,213,139,192,112,171,37,199,198,50,111,214,104,110,189,235,89,6,42,67,59,47,218,91,75,44,154,55,129,201,19,218,245,212,1,40,150,146,39,207,110,220,205,207,239,124,134,243,79,159,78,71,123,25,15,70,108,125,66,155,139,32,192,14,225,174,89,129,139,59,218,93,150,218,249,195,127,125,51,79,174,220,28,216,78,16,240,39,111,58,141,191,190,254,98,198,140,106,113,251,91,179,140,179,207,32,224,152,206,17,156,124,194,100,86,172,217,198,174,61,110,152,214,103,214,119,83,169,166,198,88,75,42,121,132,148,237,213,148,74,82,165,58,144,144,86,171,164,29,253,200,94,87,115,31,88,130,43,206,89,127,80,228,229,174,254,12,134,190,1,74,207,214,79,69,31,68,105,39,162,82,33,74,18,162,238,148,40,233,37,150,146,168,41,165,32,36,113,42,41,164,146,162,40,82,148,146,82,154,82,150,21,202,50,86,253,120,146,132,147,4,124,0,207,110,98,158,139,115,151,76,226,211,31,57,153,142,182,130,118,23,43,154,159,74,227,74,149,72,23,255,29,6,59,153,114,252,249,156,95,112,47,237,51,207,133,47,210,196,49,49,169,209,127,12,211,207,83,214,157,22,80,219,168,2,144,21,173,251,23,44,255,79,163,208,197,28,9,109,62,17,94,250,35,115,94,163,85,224,205,123,174,102,167,10,37,236,233,174,112,199,125,235,235,130,66,123,107,137,37,39,118,178,100,161,154,142,159,53,22,11,108,222,5,108,220,178,135,59,238,123,150,255,252,223,199,107,226,92,54,109,235,230,202,247,254,128,255,255,111,175,100,238,172,113,168,4,83,82,171,69,42,46,72,245,74,54,224,40,173,139,89,189,235,190,83,69,56,60,240,32,230,219,63,126,152,59,238,93,109,237,36,113,12,45,205,37,254,234,35,23,177,244,180,153,138,121,42,29,76,151,41,93,30,45,163,86,233,155,63,235,152,209,124,225,198,215,112,227,23,126,193,218,13,187,236,189,239,237,75,108,251,35,24,153,166,148,68,74,185,26,83,42,246,51,208,159,82,169,186,129,235,204,148,102,150,61,20,203,85,145,14,72,142,52,80,201,125,198,135,216,55,11,44,22,76,166,104,0,73,18,196,238,20,145,36,68,105,74,148,118,19,165,41,113,179,36,142,36,145,40,83,72,83,226,126,65,81,74,10,5,73,177,42,41,197,9,197,170,164,44,37,101,25,81,70,114,166,76,121,21,146,51,3,141,68,194,226,5,99,121,223,53,243,57,117,193,24,82,169,217,134,50,37,88,22,34,165,180,163,93,248,99,244,166,26,85,82,141,44,118,187,247,49,11,85,16,119,238,174,158,112,229,132,49,113,141,77,197,168,79,53,13,233,81,239,0,120,244,202,68,74,162,168,98,222,1,72,180,241,54,82,94,144,84,98,189,62,74,149,211,177,43,66,189,242,166,143,203,96,192,242,155,251,54,242,185,127,121,152,77,219,106,123,29,183,183,150,120,255,219,79,230,218,171,78,244,234,111,162,79,19,108,24,187,150,41,19,218,184,246,170,19,184,246,170,19,248,159,95,174,224,179,95,187,151,238,94,103,35,234,238,173,240,254,155,110,227,63,190,120,5,83,38,118,40,16,73,99,231,110,22,234,62,9,17,215,104,56,82,88,229,7,59,28,137,190,62,99,168,125,240,209,13,202,142,162,57,241,177,83,199,242,233,27,46,214,32,150,218,118,84,233,20,76,95,34,233,140,234,138,30,218,27,221,210,82,230,19,31,56,143,247,125,242,167,244,236,117,249,86,60,2,181,32,17,60,34,83,74,177,182,173,36,9,69,209,78,138,194,84,19,77,105,128,35,59,6,85,22,80,14,10,184,236,139,250,227,191,176,81,102,249,64,38,223,174,145,93,206,243,192,152,41,88,238,132,66,11,20,90,198,81,104,105,81,54,145,254,50,197,254,126,138,149,10,69,79,165,41,149,18,202,164,52,85,139,52,85,5,205,73,162,84,156,52,165,37,74,105,75,83,90,73,105,77,37,237,105,202,12,41,121,173,132,247,202,148,75,164,100,42,56,48,105,107,41,242,245,191,90,202,251,174,153,79,231,248,102,149,69,71,170,135,36,53,249,88,165,244,128,37,213,204,197,205,155,237,169,148,164,169,81,127,116,62,88,233,128,39,251,169,233,234,149,124,243,71,187,169,120,253,0,175,189,162,157,182,150,40,159,253,100,212,159,128,249,120,5,219,79,153,125,240,205,151,81,4,76,68,8,23,213,106,236,39,10,88,36,46,126,197,61,60,118,94,3,216,205,191,94,203,71,191,112,47,93,61,153,1,205,128,83,79,152,200,247,190,124,41,167,157,216,137,67,38,233,10,193,240,133,252,247,96,238,204,49,92,122,206,108,30,120,108,19,59,95,220,107,215,119,245,12,112,199,125,207,114,229,5,199,81,46,107,91,144,7,194,170,106,186,27,132,117,45,251,223,47,159,226,41,0,48,179,51,166,140,230,209,167,54,177,125,87,47,167,46,152,194,127,125,249,45,140,29,213,130,1,142,80,113,50,141,40,145,169,159,113,46,28,109,160,173,181,68,177,16,243,208,19,42,242,56,77,241,158,9,86,87,19,158,146,9,3,169,164,90,173,146,196,41,73,21,168,84,108,45,179,147,127,65,135,68,134,42,60,91,145,122,186,217,190,156,99,176,99,234,177,143,220,186,140,2,33,71,42,22,235,77,145,84,22,67,59,47,165,2,158,146,86,109,40,17,73,169,88,137,97,38,18,138,82,253,150,146,148,78,41,56,3,201,210,52,101,170,121,57,33,124,41,143,157,49,146,207,94,127,26,199,205,24,73,154,38,154,222,26,144,48,128,145,132,191,169,26,79,44,213,191,146,68,29,155,170,121,153,86,129,42,146,10,105,90,177,231,244,197,44,255,239,237,221,124,237,7,33,205,191,241,186,17,188,230,204,214,218,70,204,105,81,145,217,150,49,123,216,25,33,138,8,154,181,193,177,140,136,32,162,132,234,0,89,32,138,76,120,191,202,196,111,51,200,69,17,145,48,235,245,120,66,154,169,220,124,199,115,124,252,75,15,145,149,246,214,34,159,189,225,213,156,127,198,116,91,1,85,175,76,55,181,224,130,50,246,28,175,193,118,119,245,243,206,27,111,97,229,179,47,4,251,156,123,113,194,58,13,0,0,32,0,73,68,65,84,250,52,254,233,147,23,227,58,90,69,90,125,115,141,97,51,192,9,47,27,29,97,122,76,239,172,126,5,180,187,71,122,192,39,17,34,209,32,228,200,130,77,62,37,204,184,208,169,43,79,162,212,50,41,185,225,51,191,228,177,21,91,131,107,72,37,183,245,15,240,125,41,216,149,84,217,93,25,160,43,77,232,169,8,250,250,250,232,7,191,163,86,238,52,152,106,180,223,82,143,169,100,25,67,156,153,10,153,223,188,237,133,33,182,103,247,51,83,49,51,95,244,214,149,128,98,43,148,74,80,170,66,41,137,40,105,131,170,249,45,167,41,77,122,106,46,74,154,171,146,230,56,165,37,149,106,146,85,90,82,65,107,154,210,42,37,109,85,73,91,34,89,146,194,213,82,242,190,84,242,38,153,178,48,77,25,97,190,244,62,152,188,238,252,153,252,195,199,207,225,186,171,231,49,102,100,25,149,246,89,125,58,140,1,86,177,14,207,8,171,123,156,73,60,166,98,140,178,82,123,123,236,8,123,234,158,155,180,3,89,80,49,38,153,82,81,240,243,187,131,225,131,120,116,69,63,167,46,40,51,170,67,27,22,49,79,73,168,222,248,160,145,7,152,225,251,98,2,222,148,55,72,96,146,81,235,222,51,134,64,152,240,118,84,32,123,112,34,15,200,30,122,114,7,31,254,155,251,200,202,235,46,152,201,191,124,250,60,230,205,26,131,211,63,108,225,238,74,130,16,216,218,247,66,197,214,168,117,229,98,196,37,231,204,224,158,135,55,178,243,69,103,244,92,183,113,55,157,19,218,152,55,115,12,134,49,64,134,75,72,51,218,161,99,147,246,3,163,89,37,210,31,243,217,40,72,194,85,205,114,29,213,21,192,103,42,126,134,185,160,33,101,184,23,72,102,77,29,197,79,238,120,38,120,22,147,148,167,211,148,53,149,42,21,9,213,52,161,154,166,74,227,78,18,219,220,62,227,31,140,32,28,52,201,43,216,87,75,242,198,115,205,170,62,67,149,59,216,57,242,246,205,94,120,86,85,202,214,33,46,149,220,122,205,74,34,32,54,12,5,15,192,164,164,0,116,8,201,28,33,152,37,37,243,165,138,49,49,102,121,107,60,245,101,210,248,86,222,119,205,34,206,125,213,49,116,180,21,180,154,99,134,172,80,170,142,76,83,251,48,167,150,141,164,154,179,38,164,6,40,164,199,84,164,155,82,153,160,226,84,18,160,130,148,158,30,157,97,75,230,131,250,216,202,1,110,250,231,157,244,58,134,79,75,51,252,221,159,143,101,206,84,23,204,27,134,132,103,19,19,101,238,128,105,92,143,193,40,182,82,4,81,64,229,181,141,195,137,24,17,169,71,70,232,20,242,138,205,40,198,34,204,152,66,34,230,186,143,253,142,135,158,12,70,40,225,125,215,44,224,253,111,61,65,159,80,119,64,12,140,177,166,162,62,43,241,193,69,100,192,198,49,150,52,133,221,93,125,92,124,221,255,4,54,150,182,150,34,191,250,214,91,104,111,47,235,87,55,178,101,153,110,9,106,148,71,240,251,95,25,6,163,2,5,195,122,249,15,175,26,69,210,1,162,48,61,180,133,68,200,4,130,238,25,4,122,170,194,163,84,151,165,192,235,179,95,187,151,95,252,110,173,127,249,187,250,170,252,159,52,97,55,176,187,42,217,147,36,244,86,171,236,29,24,96,0,21,236,164,30,52,199,90,178,243,121,204,197,52,238,126,73,222,35,229,3,138,121,25,253,62,47,230,165,133,250,93,173,7,3,149,60,64,138,50,243,67,1,74,158,173,37,59,239,51,162,118,96,150,16,156,0,28,143,2,17,160,22,60,124,233,28,223,202,121,167,79,231,117,23,204,230,184,25,163,149,55,71,170,118,55,140,66,166,202,208,110,140,179,118,92,27,153,90,80,177,64,226,219,74,210,68,111,211,96,162,213,32,149,40,41,1,89,33,149,234,5,72,51,117,204,214,249,241,149,253,220,248,247,33,189,55,192,50,251,24,157,9,45,0,21,127,222,124,73,51,219,68,230,6,69,0,69,34,157,105,159,168,160,3,226,98,162,104,48,96,137,193,100,226,143,148,26,241,219,7,183,241,241,47,47,163,171,167,66,123,107,145,191,249,200,98,206,63,227,24,7,34,254,153,235,2,140,223,8,254,227,83,11,42,198,198,245,208,19,155,185,238,99,183,7,237,116,197,249,115,248,155,235,207,177,23,46,106,202,114,222,32,99,99,9,152,95,206,211,47,188,122,71,145,32,18,130,200,184,202,68,26,170,68,230,61,150,224,222,231,240,215,88,89,182,108,217,195,213,31,250,177,58,135,62,111,146,240,79,149,132,135,129,61,149,10,123,210,132,238,42,244,87,42,244,163,64,37,11,38,102,170,146,15,44,126,78,150,253,2,150,108,147,100,213,29,95,5,241,85,19,255,37,206,50,142,122,128,82,143,126,101,65,38,11,88,245,126,179,44,42,70,245,8,158,8,44,0,102,160,162,91,107,194,229,7,147,206,241,109,156,119,250,12,174,188,112,142,2,18,237,194,49,65,105,105,106,30,2,109,136,213,76,69,177,22,183,175,101,37,24,6,163,152,10,89,166,98,179,171,121,160,34,149,93,37,149,161,197,63,0,19,95,43,16,112,251,125,189,252,221,127,238,14,174,101,252,152,136,175,127,98,28,109,45,209,32,160,226,207,135,241,27,97,39,60,37,81,228,219,87,74,136,72,221,10,101,87,137,137,68,62,176,136,40,182,54,21,1,108,218,222,207,166,109,123,153,60,190,149,201,19,90,237,75,136,177,189,184,90,120,179,145,183,214,123,217,51,187,101,129,69,221,22,245,106,126,252,75,247,241,211,223,60,27,180,211,61,223,123,27,29,173,101,205,14,60,144,213,231,147,50,251,104,98,111,134,204,65,21,99,116,117,227,91,43,80,137,35,99,232,78,81,189,161,125,230,2,8,19,163,147,106,60,73,181,7,205,169,126,159,254,234,61,220,118,215,90,123,30,41,121,168,146,240,141,164,202,110,25,209,149,166,116,87,171,236,21,21,250,7,66,166,226,3,75,53,243,155,199,88,246,219,190,146,247,210,231,245,113,241,127,75,132,172,197,135,243,60,22,50,216,114,189,99,179,225,242,173,192,76,20,104,140,247,246,59,30,53,116,232,62,1,71,86,206,59,99,6,167,46,232,228,220,211,103,48,121,66,27,160,108,32,210,2,134,137,124,77,181,157,68,5,165,73,11,18,169,3,24,59,2,159,199,84,172,170,163,239,153,6,21,147,8,41,245,88,11,214,80,91,69,74,103,168,205,5,21,66,108,249,245,239,107,129,101,230,228,2,255,247,163,99,104,107,205,208,115,17,254,82,179,62,71,69,18,32,136,137,162,50,130,130,5,22,34,161,88,138,86,133,34,97,0,36,214,227,18,41,252,143,204,176,169,145,186,173,2,16,81,145,128,43,121,224,162,206,87,7,96,204,213,7,0,20,92,137,110,59,169,63,4,170,141,246,236,233,227,77,31,249,37,155,183,59,91,212,123,222,178,144,247,94,115,146,58,167,103,7,113,238,93,85,23,215,254,102,232,48,85,207,60,182,107,194,242,77,30,21,163,10,69,145,32,142,181,189,137,170,169,37,193,192,111,210,3,23,123,38,181,125,213,179,59,121,199,159,223,234,223,155,189,253,21,110,144,146,221,50,101,119,42,232,73,18,250,168,208,87,81,160,81,213,39,48,192,145,5,148,44,176,152,24,151,253,86,131,178,47,187,81,115,12,168,52,161,192,100,12,176,144,124,80,201,83,87,252,242,204,252,56,220,216,193,89,86,147,221,214,2,202,117,123,176,165,173,165,196,146,133,199,176,228,196,201,156,119,198,76,58,39,180,99,245,88,205,66,140,1,21,237,230,53,243,138,85,232,125,44,99,241,84,33,79,253,73,61,245,199,176,19,107,128,77,77,246,54,151,89,205,216,85,242,212,159,26,80,145,33,152,248,242,227,95,119,243,141,31,133,30,33,3,44,173,25,198,130,46,35,215,251,227,129,139,217,207,174,23,69,221,145,176,160,199,28,42,105,39,74,76,228,217,91,34,15,88,20,136,40,35,175,207,90,84,153,30,200,24,122,20,128,69,30,192,232,134,24,68,251,118,54,21,3,42,138,181,124,231,39,43,249,219,127,127,204,238,221,214,82,228,214,127,189,90,133,206,3,82,70,97,219,26,187,138,57,171,63,220,162,87,110,182,14,38,134,71,1,171,32,142,21,176,196,145,154,183,100,64,74,4,137,119,47,29,152,8,233,152,177,2,182,148,11,174,253,65,96,27,74,82,62,151,38,60,37,37,123,82,65,79,181,74,175,16,244,87,42,22,84,12,251,240,153,74,53,103,222,76,89,235,247,62,137,31,252,150,5,4,3,24,215,3,31,222,215,130,95,106,105,107,45,49,111,214,4,150,44,156,10,72,230,206,28,207,146,133,147,105,51,125,46,52,165,52,253,107,144,38,76,222,181,97,16,199,145,179,222,99,165,129,17,117,56,50,232,110,82,230,110,183,31,78,129,11,72,179,135,40,163,225,149,231,183,178,102,99,133,59,238,119,158,142,181,207,87,185,233,159,119,241,197,63,27,227,14,18,174,30,246,181,148,14,100,140,49,88,149,171,247,51,51,178,66,170,179,207,37,178,128,16,253,8,10,68,66,245,238,21,145,212,99,251,20,136,68,138,234,229,12,68,17,146,4,145,234,243,68,41,16,105,204,72,145,34,210,239,78,132,13,213,5,119,177,194,124,60,35,183,158,60,176,113,23,164,238,135,238,0,161,63,14,151,157,59,149,175,127,111,57,221,189,42,192,167,187,183,194,215,190,187,140,143,254,201,18,221,150,94,4,27,250,197,150,94,192,162,192,122,126,125,176,201,222,44,99,224,21,169,110,187,68,1,74,170,105,79,100,25,139,3,37,199,129,204,95,19,104,103,42,32,89,52,111,60,119,63,244,188,57,13,8,198,97,28,19,206,253,20,90,157,235,63,114,169,183,221,204,231,5,198,13,91,234,69,212,250,21,123,215,254,20,124,56,164,115,194,8,38,79,28,201,105,139,166,219,55,124,201,194,169,76,158,56,130,206,9,35,112,55,76,51,17,99,247,0,15,17,12,184,132,18,236,54,136,228,109,150,117,64,97,88,50,156,3,115,0,197,24,35,1,110,120,199,72,144,47,114,199,3,14,88,158,120,102,128,191,253,143,93,124,244,157,163,106,207,227,33,139,15,50,38,195,161,15,48,160,31,100,89,81,180,94,0,20,144,73,21,25,169,101,33,117,8,127,148,32,101,172,189,69,16,233,194,85,151,161,4,145,106,38,147,164,132,246,18,179,28,233,112,15,147,248,200,3,25,192,40,104,210,38,59,115,181,119,109,226,221,221,84,205,183,183,22,184,230,210,89,124,227,135,110,168,212,255,190,101,5,207,111,235,230,166,15,156,78,71,91,147,99,162,66,251,108,252,52,252,86,83,81,30,32,79,113,113,226,49,60,165,246,160,172,221,41,170,1,98,129,72,77,254,26,233,188,201,250,121,180,189,169,237,54,131,94,146,57,211,71,114,215,131,207,187,143,140,100,10,184,216,44,220,251,155,53,61,248,134,40,223,22,233,3,138,255,100,8,111,255,97,75,61,80,241,63,217,255,11,188,115,95,10,221,87,105,111,109,98,222,156,78,252,186,159,182,104,166,94,84,235,150,44,154,161,127,167,123,213,147,152,49,131,77,44,136,185,73,169,158,183,73,139,3,218,225,94,250,124,80,48,191,131,176,23,251,101,169,101,41,202,13,57,244,125,200,253,20,228,172,28,172,36,243,242,100,229,134,107,71,2,33,176,220,113,127,31,200,93,220,112,237,200,16,44,112,47,168,61,161,112,205,111,188,162,181,44,166,162,158,196,168,130,160,25,33,171,150,148,164,17,196,50,134,72,211,122,25,147,146,104,79,17,168,124,44,198,101,10,68,42,181,2,68,58,91,130,82,9,18,137,3,28,173,150,152,248,14,99,4,181,77,39,4,182,123,132,7,38,150,85,224,98,77,222,114,217,140,0,84,0,238,126,112,35,215,220,112,43,95,252,139,179,57,118,250,40,125,221,161,205,36,108,106,7,132,217,123,96,71,88,212,13,38,205,189,138,5,169,16,200,84,93,73,20,105,183,180,144,58,87,130,171,107,246,153,53,103,159,51,125,100,160,14,11,201,24,89,235,21,53,77,155,37,82,245,192,196,103,40,102,58,96,166,82,243,177,214,39,249,52,112,39,240,106,84,38,179,220,81,196,219,91,155,88,114,210,44,94,127,201,98,58,218,90,60,164,86,245,235,104,107,226,248,99,39,235,7,82,55,184,205,210,94,203,37,29,16,120,108,67,16,52,116,30,155,48,116,221,150,145,115,81,185,116,53,83,230,112,165,150,225,248,32,52,120,97,14,140,100,205,250,44,80,13,167,110,217,205,239,126,99,7,107,55,86,121,246,121,23,199,127,199,3,125,180,182,236,225,221,111,236,176,101,138,76,29,44,136,8,17,238,227,61,102,150,52,80,65,202,34,145,216,11,162,168,194,154,133,10,99,150,81,21,210,152,40,146,138,185,16,35,101,162,212,35,155,53,78,223,175,196,248,81,98,253,56,40,128,49,95,103,101,159,208,17,93,122,120,86,5,62,198,0,173,42,167,254,58,150,2,186,111,21,224,12,239,208,210,18,115,233,217,157,252,252,238,112,244,217,45,59,122,120,199,159,223,198,71,174,61,153,55,95,122,28,202,67,103,188,54,230,3,111,238,71,253,30,213,210,12,33,43,37,136,148,84,247,232,70,10,53,48,60,74,61,146,58,97,139,1,22,153,74,92,224,159,1,93,69,77,13,8,183,53,135,67,227,74,24,173,21,182,60,16,49,146,101,44,62,91,241,1,41,59,237,51,176,248,17,181,126,133,178,168,183,5,120,20,248,25,208,133,114,213,6,224,50,80,169,242,236,250,237,252,238,129,149,148,75,69,202,165,34,23,157,125,2,199,76,26,195,148,206,49,140,27,211,225,78,228,43,241,193,175,87,147,26,241,62,153,193,139,171,183,122,172,38,216,22,236,150,203,75,106,150,165,137,132,245,215,73,239,197,147,254,118,239,156,89,70,20,212,199,155,60,6,228,6,207,50,191,97,200,128,97,18,121,213,173,199,82,204,62,165,162,224,236,83,154,120,228,169,126,94,236,114,36,125,229,186,10,227,71,71,204,152,92,116,77,157,33,42,246,75,152,185,44,245,43,194,109,168,68,214,54,174,66,234,215,91,70,246,43,173,94,138,196,150,235,71,11,43,85,67,224,186,55,152,182,209,163,30,105,246,145,98,12,231,10,56,82,29,193,44,204,113,218,211,230,119,139,72,83,99,76,79,212,177,58,178,49,77,83,218,90,98,110,189,187,102,72,107,0,238,127,108,51,171,158,125,129,211,22,78,164,92,140,213,117,72,211,230,126,103,192,204,135,47,179,206,0,157,110,53,151,68,95,128,31,18,98,19,108,11,48,46,103,215,224,169,107,108,36,155,182,245,240,179,223,60,231,1,59,187,82,184,55,149,244,139,132,1,41,168,8,65,146,166,214,232,154,189,203,217,47,95,94,0,156,127,17,131,125,135,107,36,27,166,239,3,75,22,245,4,48,0,60,13,252,20,216,169,167,201,40,143,16,160,192,229,177,167,214,243,235,123,158,228,31,191,245,75,36,208,209,214,164,64,197,222,8,211,88,230,154,252,95,115,214,156,237,98,40,224,28,10,84,107,25,129,126,218,213,156,125,250,67,208,146,185,117,117,243,78,77,178,133,100,150,61,16,73,125,149,202,169,110,238,188,170,63,136,245,38,13,34,91,119,36,108,125,33,97,84,71,236,106,155,193,181,82,81,112,246,226,90,96,185,255,241,126,5,44,83,138,225,113,181,248,167,68,12,14,54,232,151,223,216,31,164,102,27,210,124,145,73,108,239,105,41,21,184,164,82,27,79,5,238,133,213,0,174,186,49,104,111,155,237,241,173,1,217,235,5,142,217,87,184,251,32,53,248,40,16,210,222,185,212,128,65,106,193,102,226,216,38,110,189,123,147,53,216,102,101,253,166,46,110,191,119,61,115,166,119,48,105,156,151,7,5,3,130,4,147,109,9,11,62,166,93,236,133,227,146,156,235,145,39,35,244,115,144,122,64,131,189,78,245,60,72,109,83,81,39,217,180,181,155,91,238,124,206,1,189,96,151,76,184,87,10,6,132,164,95,131,74,53,7,84,124,241,239,180,15,38,89,64,25,234,165,170,145,44,2,25,32,241,251,229,248,195,79,152,169,25,229,110,110,66,185,155,95,3,44,193,27,40,43,43,115,103,119,114,225,89,11,184,240,204,19,56,254,184,201,216,175,181,255,36,219,7,216,183,131,248,251,233,182,48,95,57,251,226,154,206,88,38,215,132,23,145,40,193,230,177,32,117,101,89,32,48,238,97,243,208,41,99,110,74,90,179,143,138,55,209,251,216,122,165,182,103,177,117,31,155,71,219,26,134,221,151,19,237,74,54,1,111,214,149,172,59,36,74,233,197,169,152,14,133,250,106,86,175,31,224,241,149,3,60,190,106,128,53,27,42,108,123,33,4,157,150,38,152,57,165,68,86,198,143,81,241,23,191,121,176,175,102,219,135,223,214,193,249,175,106,169,97,60,121,174,231,172,248,241,43,230,199,132,244,71,2,165,14,81,0,17,19,71,177,181,157,216,14,135,70,141,209,223,182,40,50,170,69,236,149,27,101,78,174,236,42,102,156,233,72,120,251,102,43,233,225,186,83,133,170,193,186,175,124,103,37,63,250,101,62,91,241,229,93,111,152,199,31,95,189,160,206,214,220,214,177,235,133,97,38,66,16,9,73,28,169,120,21,53,105,149,64,152,140,255,230,93,72,93,165,173,58,164,66,73,30,121,98,7,239,254,228,239,252,246,95,35,19,190,144,10,118,139,132,174,68,208,35,4,125,149,10,3,80,3,44,230,133,243,221,201,85,176,97,253,190,171,121,191,2,225,242,90,195,143,88,53,147,223,177,175,132,2,21,127,224,172,38,84,128,218,66,20,184,188,90,239,147,43,115,103,79,226,194,179,78,224,194,179,230,51,111,182,54,208,250,79,245,48,64,197,178,12,220,215,203,44,251,163,201,57,22,96,128,72,3,140,46,195,102,87,179,203,85,75,233,145,58,199,9,41,164,62,45,119,161,249,126,175,100,31,84,92,244,172,6,30,3,30,250,126,154,136,90,80,61,148,93,196,173,186,199,93,189,253,60,250,116,47,107,54,86,44,144,28,10,105,105,130,207,124,120,52,51,38,215,130,145,179,77,133,203,53,243,254,58,11,48,69,221,155,89,245,21,82,32,82,64,133,242,43,64,49,224,98,180,108,3,50,144,3,48,222,217,34,23,89,70,205,80,176,122,47,203,168,180,24,187,74,8,52,41,203,86,188,200,71,62,251,68,246,210,123,128,214,214,150,2,61,30,139,89,52,111,44,159,253,179,51,104,111,13,71,128,172,231,210,150,153,182,17,194,132,236,171,235,139,4,202,80,27,25,203,163,116,215,22,132,58,24,198,2,200,148,135,159,220,206,123,62,117,175,59,191,96,77,53,229,243,66,176,59,85,153,84,122,68,149,190,138,11,211,207,2,66,54,186,182,162,167,1,242,99,86,14,24,84,32,180,167,228,129,139,97,46,37,20,152,248,25,229,155,128,209,192,9,192,25,192,28,6,3,152,89,157,156,118,210,12,94,127,201,41,28,63,91,13,100,45,61,176,8,65,2,242,64,197,80,228,125,5,21,11,24,18,100,154,216,252,39,138,209,160,244,115,208,81,174,120,3,127,169,4,208,105,90,181,117,178,33,249,210,12,73,234,117,48,52,250,190,97,56,50,100,42,200,132,205,219,247,242,232,138,46,30,91,217,205,234,13,253,172,221,112,104,64,36,79,6,3,150,225,72,222,75,109,99,216,40,106,215,179,34,190,42,252,67,131,139,0,19,148,173,130,196,12,184,152,71,207,63,135,9,148,115,251,24,102,68,228,192,197,23,99,123,81,11,132,128,2,152,113,183,206,121,71,77,143,233,31,1,83,38,142,107,62,105,203,246,189,101,127,67,107,75,129,207,94,255,42,78,158,63,46,123,76,182,85,240,71,52,20,56,54,18,199,17,17,169,199,86,220,181,24,240,241,135,141,85,149,117,110,243,135,159,220,206,187,63,121,159,75,166,13,79,164,146,47,137,148,61,169,160,27,232,173,86,233,99,223,65,165,226,29,115,208,65,5,106,67,229,179,195,124,154,208,125,3,40,62,107,49,76,166,4,140,4,206,68,177,152,89,131,85,166,189,181,204,133,103,205,231,130,51,231,51,119,246,36,166,76,84,195,70,6,160,98,213,11,236,181,214,128,138,177,160,7,42,150,139,116,13,213,31,173,214,72,63,169,146,203,109,161,244,113,163,86,233,95,18,77,66,170,182,126,230,107,130,52,46,84,205,120,82,51,54,177,137,128,84,160,242,204,186,46,238,249,195,78,86,175,239,97,217,138,46,122,247,14,110,63,201,17,51,156,223,46,91,48,140,210,147,17,129,106,255,81,12,33,7,10,44,80,11,46,1,115,209,170,144,137,107,241,193,197,28,160,114,177,68,222,49,62,75,137,9,153,146,32,138,34,239,60,194,158,55,120,250,61,186,98,192,36,155,82,226,79,62,241,56,107,54,4,41,36,126,10,172,71,181,219,133,168,174,33,129,188,235,245,115,185,238,234,124,109,223,157,210,7,21,191,31,144,26,178,195,132,237,71,2,13,168,169,142,80,206,168,250,234,129,210,217,231,82,190,254,189,21,124,243,7,207,216,178,129,91,211,132,31,8,2,80,49,234,204,17,195,84,252,237,254,228,51,23,31,88,12,168,248,182,22,99,127,49,204,166,8,116,160,70,235,59,141,33,0,6,96,238,172,137,204,155,61,137,37,139,102,48,111,246,4,230,205,158,100,213,9,229,255,55,70,62,169,125,252,70,21,242,152,138,85,143,12,75,112,44,200,130,136,49,226,153,175,129,5,147,112,160,113,27,178,111,152,137,245,84,128,68,179,150,52,97,211,246,94,54,111,235,162,171,167,202,234,231,84,95,156,63,60,173,122,17,63,182,34,236,155,179,15,178,22,88,13,60,15,172,66,81,244,60,157,55,99,233,8,92,134,199,160,122,108,199,192,20,224,34,255,4,227,70,71,124,249,198,177,180,182,248,110,83,191,123,255,208,50,40,176,120,42,145,18,7,46,106,123,236,61,145,174,51,162,3,25,17,0,141,16,70,141,114,95,120,95,100,6,80,0,119,143,237,186,132,143,124,110,37,143,173,12,210,89,254,8,213,222,85,212,115,123,17,234,163,24,200,162,121,99,248,204,245,75,172,58,84,107,151,114,237,24,9,7,42,136,84,119,46,84,128,18,107,189,192,128,79,36,204,184,66,230,217,82,207,223,195,143,111,99,229,186,61,252,246,129,45,252,225,169,23,108,27,32,185,5,201,247,18,216,35,4,189,84,217,91,133,126,28,64,4,205,130,51,200,26,123,138,207,82,252,176,253,131,102,83,169,183,159,217,215,103,44,5,66,3,110,19,33,168,24,48,241,123,57,151,244,212,142,82,143,78,68,117,22,28,82,218,91,203,44,89,52,157,185,179,38,50,121,226,8,38,79,28,193,105,11,167,123,76,197,125,133,172,81,214,48,23,252,164,211,210,178,11,3,26,210,178,25,72,147,4,129,179,167,24,3,174,122,104,82,30,121,98,11,18,201,31,158,82,3,59,61,179,110,23,221,61,21,54,111,239,101,203,142,189,28,4,217,5,108,66,129,200,42,96,3,4,253,56,242,250,104,100,37,239,99,144,29,97,241,85,120,99,60,3,76,239,44,240,153,15,141,182,192,226,131,138,139,168,21,193,124,205,137,243,212,33,207,222,42,68,81,191,64,25,112,129,16,96,116,1,194,179,171,8,34,101,119,16,238,60,190,234,147,181,3,25,9,84,33,48,223,21,36,9,215,127,126,117,22,84,254,11,213,246,198,208,41,128,197,192,107,201,168,242,74,29,58,149,69,243,198,212,180,67,216,38,154,145,8,215,193,208,164,68,16,134,161,68,14,136,87,60,251,34,43,159,221,205,202,103,119,179,98,237,139,60,178,252,5,171,70,249,109,172,67,14,254,61,77,249,37,208,45,132,85,125,76,221,235,129,138,217,150,85,125,242,122,46,155,227,134,37,195,255,4,185,253,243,24,139,121,72,77,39,196,38,28,120,24,96,41,212,249,45,162,98,94,230,161,0,102,62,131,216,96,94,161,178,9,88,3,108,68,129,200,118,194,155,155,165,164,169,247,139,247,107,196,255,8,152,251,229,171,174,230,190,52,3,231,163,198,124,182,226,3,75,30,144,212,19,219,249,176,14,168,216,138,121,42,145,90,87,240,192,201,99,43,34,4,152,0,160,132,83,143,204,11,107,206,157,87,77,103,71,113,106,172,89,113,253,23,214,102,65,229,63,128,21,184,175,189,68,181,221,84,84,0,232,164,108,249,87,95,60,157,15,189,253,120,123,174,172,88,48,9,64,69,93,212,214,29,189,172,90,183,135,135,151,239,100,213,179,10,64,242,68,29,31,46,3,8,201,71,82,193,115,66,208,67,149,190,42,244,17,246,80,182,205,160,127,179,29,11,179,246,20,243,241,242,93,204,195,150,253,1,21,168,245,16,25,224,40,213,153,47,226,0,40,155,50,50,47,149,228,120,20,221,60,17,117,3,95,9,32,179,75,79,47,160,226,123,122,81,32,178,146,176,75,122,61,32,201,126,61,124,150,226,41,225,185,234,79,150,173,148,112,224,223,2,188,3,245,37,182,50,127,118,137,207,124,104,244,33,6,21,179,181,96,157,64,234,215,120,87,50,158,31,81,8,84,157,8,133,46,206,16,90,191,110,1,168,144,184,23,95,86,185,225,11,27,120,108,85,192,48,191,9,44,7,251,197,55,237,90,4,70,160,134,181,13,218,11,96,214,212,54,62,115,253,41,140,106,43,86,154,154,74,197,236,246,40,130,205,219,123,89,179,190,139,103,158,219,195,178,167,118,242,204,115,187,233,238,173,31,153,27,92,126,134,141,233,54,251,6,240,43,160,87,36,244,105,181,199,183,141,100,65,197,60,63,121,70,218,193,122,43,15,91,246,23,84,204,67,234,3,75,54,167,108,54,191,172,73,151,80,36,164,226,217,124,181,121,219,167,2,199,162,236,0,157,122,58,146,100,47,202,104,10,138,54,75,20,243,72,81,192,97,236,31,254,148,77,156,99,128,197,255,205,178,146,236,215,195,7,19,243,235,223,211,236,253,242,239,147,31,18,208,130,234,223,21,188,40,231,46,105,226,67,111,29,49,236,70,240,85,161,200,3,17,8,65,69,237,91,123,140,155,43,100,194,83,188,180,152,54,143,11,14,136,50,42,16,54,68,222,189,172,105,6,16,221,98,194,53,55,174,99,235,206,224,197,254,123,224,25,212,125,237,195,245,137,49,234,126,19,112,22,112,37,53,234,80,204,91,175,152,249,194,91,47,155,53,186,171,187,194,51,207,237,225,209,21,47,176,90,255,246,12,19,64,234,137,16,172,6,54,8,193,58,96,181,72,89,149,168,122,246,123,147,159,156,201,94,50,249,170,79,149,90,91,74,246,227,117,72,65,197,28,227,171,65,190,119,40,11,6,62,51,201,75,148,93,24,100,190,94,114,109,147,222,242,88,212,203,48,37,115,45,251,115,77,195,17,255,197,53,108,195,252,230,189,240,217,40,197,122,83,61,224,200,203,198,149,213,113,179,55,124,48,80,241,129,197,48,73,195,86,90,245,244,78,6,1,150,161,216,202,190,128,138,218,191,30,168,100,87,20,44,139,249,127,237,93,61,115,28,69,16,125,186,18,2,235,236,196,2,27,144,5,182,37,23,1,174,130,144,136,128,226,15,0,9,17,137,3,82,23,17,228,252,0,126,1,1,9,16,19,0,17,9,56,128,162,10,101,54,182,92,101,73,6,99,91,142,176,49,119,66,34,152,27,109,111,95,119,79,207,126,221,73,190,87,181,53,179,51,179,51,187,183,59,111,94,247,204,238,205,33,154,18,81,221,204,149,204,2,201,252,161,42,165,72,43,22,22,190,125,105,147,183,124,25,225,117,148,135,40,76,32,160,248,237,226,164,196,11,0,62,4,27,228,86,95,10,111,176,108,108,214,254,27,215,63,70,219,54,130,95,237,42,138,89,154,127,73,72,201,132,78,9,243,65,135,59,104,169,249,195,23,189,85,114,210,2,213,255,76,44,62,188,133,119,115,252,153,136,39,19,47,80,251,170,62,37,164,30,73,211,190,196,31,203,255,138,178,98,162,91,27,216,87,54,222,225,165,56,39,23,173,188,150,175,153,58,16,226,20,156,96,162,178,228,237,69,124,13,166,4,127,248,249,49,250,199,122,184,244,238,9,55,161,0,161,35,103,76,26,37,176,123,240,196,237,143,234,238,97,24,204,164,56,171,195,174,244,96,182,135,133,1,67,209,239,81,42,16,58,108,236,180,67,132,150,226,115,73,59,226,167,0,222,7,240,102,60,184,34,153,80,231,124,52,139,249,23,218,184,15,100,0,121,125,9,53,89,56,161,164,6,47,176,99,179,8,5,168,70,42,148,80,0,153,92,162,131,136,118,14,74,8,90,60,74,204,24,246,88,62,127,171,146,18,10,93,45,213,36,177,240,206,75,127,104,201,183,225,137,107,121,123,172,94,222,158,164,76,60,160,138,69,170,151,230,127,134,48,82,31,16,11,125,203,57,23,7,210,137,105,40,137,112,184,204,210,80,148,41,190,126,182,191,79,254,46,132,149,221,63,168,61,150,45,242,215,175,141,45,50,124,128,178,143,33,198,227,189,153,71,217,239,48,0,240,5,194,59,113,31,192,231,255,139,4,114,27,193,204,218,4,240,55,171,151,155,194,220,60,225,106,131,175,43,161,23,45,169,99,205,204,169,100,242,80,212,249,219,83,122,194,244,203,81,52,143,19,75,15,133,106,225,166,83,140,15,70,231,53,64,153,108,232,167,43,37,82,1,218,83,41,17,252,186,36,213,2,140,147,131,117,140,69,30,85,8,36,247,188,129,178,83,247,62,24,177,220,125,176,139,175,190,13,163,239,171,107,11,56,190,56,135,115,203,99,126,200,108,228,174,127,169,163,126,36,211,109,253,218,0,223,253,248,136,23,221,193,184,2,136,42,0,24,255,20,99,204,255,9,192,47,8,223,77,126,25,192,123,163,242,255,32,144,71,84,32,113,141,17,245,163,73,14,121,110,22,115,191,27,39,5,238,88,229,207,37,39,19,137,88,36,133,147,141,58,157,144,207,46,80,83,68,82,20,156,60,184,179,119,142,149,211,242,169,140,167,237,75,215,212,149,98,145,20,12,47,43,197,121,88,251,134,58,33,249,87,226,34,198,232,184,93,1,240,49,140,145,247,236,139,243,232,31,155,195,197,11,11,232,31,155,195,185,51,11,56,125,178,135,83,75,133,51,53,54,86,94,4,55,238,79,225,39,167,221,57,58,211,67,103,67,248,63,1,80,92,223,28,224,206,189,255,112,99,107,136,245,171,3,220,217,217,197,95,59,123,74,105,124,3,224,75,4,229,240,8,40,45,119,143,103,198,215,252,208,5,158,212,127,72,213,51,239,220,82,39,231,230,136,212,225,169,121,163,41,101,64,39,20,73,221,104,170,165,210,115,88,183,211,73,196,34,145,139,70,52,188,12,39,14,205,204,145,226,218,117,229,41,106,29,210,15,236,49,77,188,105,93,35,254,126,124,65,28,37,150,11,0,62,169,82,249,197,181,5,244,23,129,115,103,22,240,252,136,104,86,87,230,113,124,49,190,195,99,56,105,141,187,97,145,202,195,71,123,184,190,57,196,250,181,1,254,188,183,139,141,205,33,54,182,179,77,183,143,0,220,66,32,148,56,171,66,73,5,40,207,164,209,25,53,58,193,64,159,91,218,73,45,159,6,85,27,41,211,218,82,186,220,47,39,45,85,208,254,158,163,182,90,105,98,36,167,196,18,247,57,177,104,161,150,39,17,148,180,197,54,105,219,210,181,73,215,105,17,145,23,252,71,215,216,125,82,196,145,66,28,117,165,245,43,241,5,209,203,0,94,111,170,193,197,103,128,213,149,5,156,90,234,225,244,210,60,86,207,204,163,191,216,195,107,175,60,237,34,150,72,42,235,191,15,112,119,103,23,27,91,129,60,110,108,13,240,176,254,98,230,239,1,124,142,130,80,226,58,21,58,35,2,140,15,142,124,82,129,15,132,90,103,167,113,73,37,72,202,195,19,215,124,40,220,39,195,73,77,114,97,100,163,41,243,128,250,52,172,205,163,56,44,18,161,170,132,154,61,92,173,72,251,82,156,159,187,117,109,218,62,255,241,155,52,185,186,0,37,22,250,62,23,125,237,226,13,0,103,17,22,37,46,33,248,90,26,95,144,120,234,100,32,154,243,43,243,120,231,173,62,78,244,123,184,242,219,227,131,53,36,55,183,135,184,177,53,196,93,221,116,201,197,3,4,63,199,45,132,119,125,174,160,32,147,56,77,203,255,230,2,24,127,166,173,9,4,10,141,52,60,254,53,144,125,30,151,234,147,76,44,73,157,104,190,152,202,104,178,3,240,206,153,34,6,175,26,241,16,140,214,182,118,110,169,52,30,215,202,75,249,86,25,173,252,164,65,125,89,81,177,104,91,148,248,199,17,252,46,207,33,124,234,98,25,129,104,206,55,113,66,231,151,231,113,179,198,172,19,67,92,156,120,27,129,68,238,163,88,243,177,139,242,90,143,184,254,131,127,180,72,234,104,214,128,169,161,174,115,94,243,237,113,133,194,253,52,154,239,166,81,66,1,218,121,176,165,142,45,197,189,106,196,58,198,211,14,140,125,43,212,202,85,137,75,245,89,101,180,242,109,130,19,11,245,181,208,80,90,63,196,29,241,207,142,182,101,4,223,204,26,138,197,98,109,35,46,24,219,65,152,113,217,66,112,186,242,233,89,190,162,148,207,248,80,133,66,85,138,4,233,121,165,121,150,95,205,235,191,240,146,137,69,42,154,185,211,232,36,65,155,15,172,71,69,120,73,66,75,147,202,107,117,164,206,73,10,189,101,188,199,242,116,41,47,167,140,86,190,42,248,76,29,37,144,167,48,78,36,124,186,159,239,115,178,137,159,92,232,35,16,205,34,2,241,240,239,192,120,16,223,165,138,83,181,247,71,161,52,229,106,141,218,156,96,184,207,33,69,40,28,158,251,224,173,79,34,18,160,76,4,220,220,145,166,161,105,168,205,26,229,156,151,137,46,70,193,84,7,205,33,31,43,158,83,159,167,108,78,88,181,140,55,93,202,75,149,151,224,37,39,105,41,128,182,248,80,242,37,104,228,162,17,77,76,187,128,64,56,209,148,90,38,231,21,253,31,219,8,11,198,82,132,33,205,176,88,233,188,30,218,233,186,68,202,103,98,169,19,235,90,45,103,48,111,183,22,186,146,214,82,91,90,167,107,122,223,10,115,235,108,138,124,82,68,211,38,249,120,238,185,54,83,7,148,201,195,202,75,45,39,72,109,32,109,88,163,50,53,107,172,245,29,82,199,178,226,141,248,23,28,176,102,16,53,50,177,76,30,239,244,116,43,132,2,116,75,42,169,118,189,157,171,78,154,85,214,83,223,97,32,159,38,85,143,180,1,101,194,160,101,83,75,2,60,132,67,203,82,236,145,208,179,241,78,196,167,76,173,89,151,54,201,68,34,17,30,122,200,68,34,87,239,111,208,10,153,68,76,138,84,56,114,71,215,42,29,167,234,232,223,164,18,242,132,77,182,151,74,227,199,74,117,241,52,74,38,220,49,201,21,70,76,243,146,13,143,83,72,210,223,218,79,17,6,239,196,52,173,41,88,179,55,90,251,18,145,164,148,150,165,192,82,215,223,56,166,133,84,56,180,243,178,58,128,183,140,119,196,246,146,76,149,180,42,97,85,162,210,142,175,114,222,169,246,121,92,218,207,217,226,177,158,81,28,202,62,15,37,159,69,21,164,142,149,58,175,87,149,72,100,153,34,18,94,166,115,50,137,152,86,82,145,144,58,87,15,193,104,121,185,74,137,166,77,154,124,234,16,147,21,55,128,79,240,0,0,1,193,73,68,65,84,74,199,88,105,90,62,39,137,158,81,158,250,83,104,190,230,119,240,168,15,160,217,142,100,169,15,190,207,207,33,135,76,52,147,71,83,35,150,191,164,51,66,1,14,23,169,104,200,185,6,175,2,210,242,166,137,124,188,251,147,80,61,169,116,75,209,0,242,226,177,152,167,145,8,132,120,211,208,200,67,139,91,157,59,101,234,88,161,69,36,19,35,147,136,163,64,42,41,84,185,198,92,242,177,70,110,41,45,53,210,123,227,57,157,189,105,213,99,133,90,154,149,222,19,202,112,208,244,125,37,189,9,120,212,8,77,179,194,92,117,98,197,83,155,212,102,231,120,18,72,197,139,166,200,199,171,122,60,199,231,146,207,36,84,143,21,230,164,89,233,86,217,54,97,41,19,186,95,69,153,164,136,37,135,64,44,229,214,57,102,164,146,143,105,35,31,111,94,155,170,167,206,49,60,205,147,206,209,181,82,105,82,161,0,229,105,110,26,122,148,72,87,166,159,27,51,82,105,15,93,147,207,180,168,30,79,90,220,247,166,73,113,173,76,19,240,152,58,82,154,167,243,167,20,135,231,120,237,60,166,2,51,82,153,60,218,38,159,46,85,79,110,249,220,184,149,102,165,123,209,164,47,133,135,185,113,43,212,206,107,42,48,35,149,195,131,220,123,53,13,170,135,167,53,93,175,39,175,10,180,14,171,117,106,47,9,84,33,141,67,65,36,20,51,82,57,90,152,38,213,147,83,87,46,217,104,168,243,60,123,58,172,213,193,53,39,169,87,109,164,142,63,52,152,145,202,147,137,182,85,143,148,95,215,49,157,147,239,45,155,75,36,86,158,69,6,57,121,222,243,154,90,204,72,101,6,13,77,169,158,156,186,218,152,54,174,75,42,158,227,60,196,224,37,167,67,143,25,169,204,80,23,117,158,161,38,21,73,215,168,170,48,142,20,129,72,152,230,155,54,195,209,68,27,207,92,87,142,218,174,235,56,148,248,31,27,242,97,60,194,198,66,96,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Transform_png_size = 41526;

extern const unsigned char Rc_GZ_RcEngine_Transform2_png[2556] = {137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,125,0,0,0,125,8,6,0,0,0,143,128,108,37,0,0,0,4,103,65,77,65,0,1,134,160,49,232,150,95,0,0,0,9,112,72,89,115,0,0,14,196,0,0,14,196,1,149,43,14,27,0,0,9,158,73,68,65,84,120,94,237,157,187,142,28,69,20,134,103,121,0,94,0,147,112,145,156,90,200,33,130,16,16,240,0,72,224,136,0,249,1,72,73,253,0,22,1,17,66,34,7,4,164,72,132,6,156,90,66,68,136,208,9,47,96,252,143,231,44,229,218,186,156,107,85,245,244,126,104,228,157,161,187,46,231,171,83,85,221,211,94,95,60,190,241,218,147,219,247,111,30,174,217,7,15,238,62,58,92,188,242,221,251,79,240,230,175,15,127,56,126,184,23,126,122,120,231,240,222,173,175,79,239,246,193,171,223,127,112,252,243,40,29,194,241,193,185,137,127,251,221,223,79,63,201,249,229,231,55,78,63,157,7,228,23,127,94,74,79,255,199,214,168,201,109,137,235,101,186,166,204,85,73,189,94,145,14,182,32,62,23,162,17,161,157,222,61,234,30,73,238,179,40,29,172,40,62,13,182,71,160,189,214,116,239,118,121,82,242,136,207,14,144,94,162,246,249,104,222,122,231,183,227,203,155,31,255,248,228,244,147,31,81,109,213,208,242,90,204,116,98,86,198,143,200,158,200,221,251,236,236,111,121,107,102,58,49,50,227,71,102,74,68,166,151,24,157,253,28,159,93,233,32,90,252,232,192,128,81,210,137,17,125,228,186,100,73,7,81,226,71,203,38,70,75,39,162,250,43,241,216,92,211,115,60,215,120,90,247,162,215,188,116,125,229,50,170,77,94,245,72,188,224,88,145,116,224,33,30,157,142,8,108,73,112,173,158,214,70,174,54,80,188,219,236,17,7,169,15,149,116,160,21,239,61,194,115,57,146,114,53,187,247,180,62,239,62,104,202,211,120,192,57,236,53,61,71,122,158,215,90,70,27,34,107,121,214,53,221,171,29,132,180,28,139,55,181,116,192,61,215,35,48,158,1,6,158,27,57,175,182,113,203,176,58,51,73,7,173,243,61,130,225,21,208,156,136,221,251,136,254,122,248,58,174,233,223,190,248,213,105,198,215,241,209,191,159,30,242,50,62,191,247,207,225,222,231,47,157,222,201,193,249,192,82,198,44,60,218,94,138,95,41,206,82,80,134,57,211,137,180,28,203,104,247,200,22,14,35,174,211,173,125,73,207,245,244,228,38,29,160,44,109,39,173,1,146,50,242,230,140,165,111,56,207,219,209,11,167,172,119,225,229,47,191,56,252,253,217,23,167,119,124,232,122,213,235,50,104,53,168,111,249,37,38,7,196,19,113,117,197,107,20,165,35,89,82,230,200,236,78,25,153,233,41,146,254,166,113,244,138,19,202,116,145,94,106,80,175,92,156,51,75,56,152,37,29,112,250,94,138,159,71,188,92,164,183,26,82,43,123,166,108,98,166,116,162,22,135,150,19,107,236,80,182,235,154,158,131,91,132,199,219,126,9,180,126,95,243,108,173,207,215,121,237,45,110,17,150,76,231,142,58,170,99,133,12,39,86,200,116,130,226,194,117,97,137,35,234,80,75,151,86,188,146,112,176,146,116,48,42,158,240,173,154,222,165,83,52,29,159,79,245,215,60,3,113,145,94,210,73,143,79,9,93,211,65,58,64,74,107,252,222,73,215,112,139,72,17,210,233,93,50,173,212,142,213,46,41,158,172,48,189,215,226,224,17,227,26,168,83,36,221,179,49,179,197,207,150,222,235,127,148,120,212,27,62,189,215,216,243,84,159,78,233,83,224,102,92,228,200,155,193,172,76,151,244,55,34,230,168,159,37,61,74,56,49,67,252,12,233,154,126,122,199,30,109,96,61,68,193,125,32,194,242,224,132,199,3,2,43,99,233,159,103,252,209,142,238,211,176,233,37,87,15,201,177,37,162,214,58,201,101,144,165,253,53,172,253,242,116,112,220,71,245,166,28,238,244,162,153,214,75,104,166,192,18,104,15,189,74,212,166,247,244,188,218,185,18,60,251,195,161,119,28,218,211,148,46,233,180,71,128,8,75,160,208,14,78,91,184,107,58,183,188,18,94,194,129,164,13,173,99,221,164,107,131,210,66,26,48,180,65,210,14,233,70,78,90,190,167,112,130,91,127,235,56,180,107,218,117,122,15,238,117,60,214,48,90,199,34,214,99,130,202,167,250,90,76,191,14,239,81,27,145,30,163,202,3,143,153,168,132,245,146,173,86,119,68,134,167,88,189,44,157,233,68,41,227,211,236,158,69,41,235,151,207,112,162,52,50,173,163,41,2,106,167,87,157,158,55,103,208,166,232,12,79,177,248,217,68,166,19,200,160,217,217,93,35,228,49,229,64,212,210,71,11,160,250,56,155,187,145,208,148,78,211,253,8,172,117,93,185,13,59,226,150,171,148,145,117,89,25,213,86,173,167,226,223,101,179,172,23,81,212,214,38,11,214,53,189,86,63,59,46,135,195,241,117,249,223,179,183,108,180,158,212,107,250,200,169,189,86,87,105,87,63,138,214,46,125,212,52,111,169,103,233,141,92,111,112,205,16,223,18,78,140,18,175,229,57,233,189,32,175,200,72,241,28,225,171,81,26,128,203,102,186,100,0,142,16,47,21,190,114,182,139,165,175,58,27,68,138,95,53,195,181,3,107,201,76,215,14,172,8,241,22,225,171,102,251,210,27,57,13,158,226,87,205,112,43,203,73,247,88,62,60,196,159,171,112,112,41,125,213,181,90,139,69,188,167,240,21,166,248,188,13,162,76,223,218,192,208,136,223,90,134,107,6,213,82,211,123,196,160,146,136,223,154,112,45,103,183,145,43,193,17,31,41,124,133,41,62,101,23,210,65,75,252,94,50,156,216,141,116,80,18,191,55,225,96,87,210,65,42,126,143,194,193,229,95,107,194,154,211,251,82,62,250,1,129,145,15,75,188,254,241,155,135,63,191,249,245,244,46,158,200,190,113,202,198,49,216,91,28,7,60,61,12,192,249,82,158,253,128,128,146,232,242,9,244,25,15,81,212,30,132,136,32,178,111,18,119,234,135,40,182,76,58,165,167,83,253,158,216,149,244,210,26,190,71,241,187,145,94,18,78,236,77,252,46,164,183,132,19,145,226,87,187,125,189,148,244,136,59,87,28,225,196,94,50,94,36,125,181,219,137,61,36,194,137,173,137,215,204,34,151,210,183,38,180,135,70,56,113,110,25,159,15,140,179,92,211,45,194,9,47,241,154,76,140,102,57,233,214,25,199,67,56,113,110,25,79,156,85,166,123,10,39,206,81,252,146,210,53,217,30,33,156,208,138,95,113,106,7,98,233,214,233,55,130,72,225,196,138,25,175,29,84,207,73,95,73,40,183,45,35,132,19,18,241,171,100,121,169,29,155,94,211,71,10,39,86,204,120,41,42,233,163,102,132,86,61,51,132,19,61,241,35,178,220,82,199,245,111,162,112,102,84,91,181,158,170,255,170,178,228,75,249,17,164,117,121,61,248,224,245,219,165,242,246,140,138,139,214,145,233,33,138,81,83,60,160,186,102,78,233,53,210,169,126,196,180,14,172,245,108,102,35,183,242,175,237,130,248,81,194,93,168,77,151,220,105,106,196,116,150,182,209,171,62,239,95,30,8,188,150,158,22,86,47,166,233,125,20,249,148,78,83,61,94,179,161,118,80,134,247,118,245,203,208,26,157,214,81,101,165,151,57,150,122,173,153,222,170,59,50,227,57,125,238,181,109,217,76,231,108,218,102,100,125,158,221,37,162,50,190,87,47,27,143,76,7,150,172,203,209,100,10,234,151,180,65,154,233,210,242,129,103,198,75,234,110,29,139,54,53,165,3,110,101,210,128,212,176,6,10,237,160,87,11,142,116,110,89,45,188,196,115,219,208,59,206,85,58,176,4,7,120,5,136,64,123,232,149,83,146,158,30,95,58,71,139,199,64,230,210,59,22,109,233,254,19,93,128,187,150,88,214,28,206,26,110,1,109,235,225,178,94,86,176,244,207,51,254,104,199,149,123,239,37,36,247,147,183,116,159,124,11,120,199,190,122,239,189,132,231,20,147,98,157,250,180,120,222,156,145,32,233,111,68,204,81,63,91,58,240,110,196,44,225,96,150,116,192,233,119,132,112,128,186,167,93,167,71,175,225,43,19,117,29,207,70,154,109,30,35,112,102,134,19,51,51,157,168,197,33,42,203,1,234,20,75,7,150,70,173,32,28,172,32,29,228,241,136,20,14,80,95,248,244,142,75,8,186,92,218,243,148,94,35,157,234,45,151,188,34,180,153,39,29,101,154,81,25,201,42,153,78,140,138,167,41,211,211,12,238,129,145,44,57,126,111,80,134,115,55,119,230,25,193,186,198,246,70,156,101,205,138,100,149,76,207,227,209,243,97,141,159,41,211,57,148,214,240,235,140,255,159,82,198,14,185,156,179,102,58,40,141,62,206,136,157,153,245,51,51,157,211,247,82,252,60,226,133,114,93,164,131,180,65,146,50,103,137,159,37,93,210,223,52,142,94,113,114,149,14,208,48,77,121,51,196,207,144,174,233,39,226,233,25,31,148,231,186,166,107,31,83,166,117,254,92,215,122,234,155,102,199,141,120,34,174,174,120,101,122,90,142,101,100,226,220,17,153,63,34,211,173,125,73,207,245,244,196,250,62,189,7,190,163,205,203,176,126,175,142,243,193,86,191,155,247,232,127,126,126,41,206,82,68,223,167,215,104,157,239,145,181,30,101,148,136,200,116,106,171,165,189,189,243,61,124,153,164,115,207,181,4,129,176,6,51,199,83,186,87,219,184,101,88,157,169,165,75,207,243,18,70,1,182,150,103,149,238,213,14,66,90,142,197,27,235,193,200,156,210,157,54,14,180,59,55,221,55,78,200,119,251,146,114,127,122,120,231,240,222,173,175,79,239,120,164,245,121,247,65,83,158,198,3,206,17,75,215,10,79,209,94,190,244,200,7,1,168,213,211,146,94,42,7,120,183,217,35,14,82,31,98,233,30,194,9,203,8,151,80,19,216,98,84,155,188,234,145,120,193,177,236,53,157,123,156,20,175,53,81,202,140,59,114,32,170,191,18,143,172,59,114,158,25,158,131,209,142,145,175,201,200,45,65,125,236,101,247,197,197,5,251,149,2,63,199,44,230,208,27,33,81,25,94,194,115,55,220,99,84,166,75,251,244,84,201,233,167,54,181,227,56,62,155,107,122,100,134,183,72,179,62,106,125,213,236,222,185,88,218,143,12,126,234,230,244,174,78,235,184,150,183,230,154,62,50,195,91,68,101,127,228,29,57,11,79,189,156,126,106,211,59,174,229,181,152,233,179,50,188,133,119,246,123,101,186,119,187,60,50,157,40,121,196,103,87,164,175,40,60,39,13,52,208,4,91,43,221,163,238,22,158,210,65,238,243,138,244,45,8,47,145,139,32,90,66,122,210,53,101,122,224,45,29,164,94,159,147,190,85,225,45,106,226,56,68,203,173,1,153,92,184,210,1,249,189,148,142,15,207,77,120,143,200,221,251,170,64,56,184,120,124,227,181,39,183,239,223,60,190,185,230,252,121,112,247,209,225,63,125,109,160,227,70,178,18,128,0,0,0,0,73,69,78,68,174,66,96,130,};
extern const int Rc_GZ_RcEngine_Transform2_png_size = 2556;

namespace Lib_GZ_Windows{ void fIniLib(); extern Lib_GZ::uLib zpLib; extern Lib_GZ::uOverplace* rLastClass; inline Lib_GZ::uLib NewLib(){return {Lib_GZ::fSetLib(&zpLib), (gzStr((gzUInt8*)"\0" "Lib_GZ_Windows", (sizeof("\0" "Lib_GZ_Windows")/sizeof(gzUInt8)) - 2, true)), &rLastClass };} namespace Lib{ inline Lib_GZ::uOverplace* SetClass(Lib_GZ::uOverplace* _rClass){ Lib_GZ::uOverplace* rTemp = rLastClass; rLastClass = _rClass; return rTemp; } }}






namespace Lib_GZ_Windows{namespace Sys{class cOpContext;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}






namespace Lib_GZ_Windows{namespace Sys{namespace OpContext{



}}}


namespace Lib_GZ{namespace Gpu{class cGpu;}}
namespace Lib_GZ{namespace Gfx{class cInterface;}}

namespace Lib_GZ{namespace Input{class cKey;}}

namespace Lib_GZ{namespace Sys{class cContext;}}

namespace Lib_GZ{namespace Sys{class cWindow;}}

namespace Lib_GZ{namespace Sys{class cSystem;}}
namespace Lib_GZ_Windows{namespace Sys{class cOpContext;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_Windows{namespace Sys{namespace OpContext{
 LRESULT __attribute__((__stdcall__)) AppWndProc(HWND _hWnd, gzUInt uMsg, WPARAM wParam, LPARAM lParam);


}
class pOpContext {

 public:


};

class cOpContext : public Lib_GZ::Sys::cContext {

 public:



  gzStr sIcon;
  Lib_GZ::Sys::Window::eWinClick hWinClickNew;
  cOpContext(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpContext(Lib_GZ::Gfx::cInterface* _oInterface, const gzStr& _sWindowName, gzUInt _nFrameWidth, gzUInt _nFrameHeight, gzBool _bTransparent = false, gzInt _nBgColor = gzInt(4294967295));
  virtual void fMove(gzInt _nPosX, gzInt _nPosY);
  virtual void fMoveAndSize(gzInt _nPosX, gzInt _nPosY, gzInt _nWidth, gzInt _nHeight);
  virtual void fShow(gzBool _bActive = true);
  virtual void fHide();
  virtual void fIniProcess();
  virtual void fMinimize();
  virtual void fMaximize();
  virtual void fRestore();
  virtual void fDisable();
  virtual void fSendData(gzUInt _nOtherWinId);
  virtual void drawPixel();
  virtual gzInt fKeyIsDown(gzInt _nKeyVal);
  virtual void fCpuVSyncOnGpu();
  virtual gzBool fIsWindowReady();
  virtual void fIniRender();
  virtual void fGetMousePosition();
  virtual void fStartCaptureOutside();
  virtual void fStopCaptureOutside();
  virtual void fFrameEnd();
  virtual gzInt** fGetPixelArray();
  virtual void fGetKey(Lib_GZ::Input::cKey* _oKey);

  inline cOpContext(const cOpContext &_o) : Lib_GZ::Sys::cContext(_o), sIcon(_o.sIcon), hWinClickNew(){};
  inline cOpContext(const cOpContext &_o, gzBool _b) : Lib_GZ::Sys::cContext(_o, _b), sIcon(_o.sIcon,_b), hWinClickNew(){};
  virtual ~cOpContext();

 private:


  virtual void fReceiveMessage(const gzStr& _sMessage);

};
class csOpContext : public Lib_GZ::Sys::csContext {

 public:

  inline virtual gzSp<Lib_GZ::Sys::cContext> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cInterface* _oInterface, const gzStr& _sWindowName, gzUInt _nFrameWidth, gzUInt _nFrameHeight, gzBool _bTransparent = false, gzInt _nBgColor = gzInt(4294967295)){
   gzSp<cOpContext>_oTemp = gzSp<cOpContext>(new cOpContext(_parent));
   _oTemp->Ini_cOpContext(_oInterface, _sWindowName, _nFrameWidth, _nFrameHeight, _bTransparent, _nBgColor);
   return _oTemp;
  }



  virtual void fManageMessageOp();

  gzQArray<gzInt> qaShort;
  inline csOpContext(Lib_GZ::cBase* _parent): Lib_GZ::Sys::csContext(_parent){};
  inline ~csOpContext(){};
};
namespace OpContext{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpContext((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Sys::Context::Create, &Lib_GZ::Sys::Context::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpContext> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpContext*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpContext*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpContext>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpContext{
}}}




namespace Lib_GZ_Windows{namespace Sys{class cOpContextHandle;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}






namespace Lib_GZ_Windows{namespace Sys{namespace OpContextHandle{



}}}


namespace Lib_GZ{namespace Sys{class cSystem;}}
namespace Lib_GZ{namespace Sys{namespace Message{class cContextLink;}}}
namespace Lib_GZ_Windows{namespace Sys{class cOpContext;}}
namespace Lib_GZ{namespace Sys{class cContextHandle;}}
namespace Lib_GZ_Windows{namespace Sys{class cOpContextHandle;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_Windows{namespace Sys{namespace OpContextHandle{
}
class pOpContextHandle {

 public:


};

class cOpContextHandle : public Lib_GZ::Sys::cContextHandle {

 public:



  gzUIntX nMainInst;
  cOpContextHandle(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpContextHandle(Lib_GZ::Sys::Message::cContextLink* _oLink);
  virtual gzBool fCreateContextHandle();
  virtual gzInt32* fIniPixelDrawZone();
  virtual gzUIntX fBlit();

  inline cOpContextHandle(const cOpContextHandle &_o) : Lib_GZ::Sys::cContextHandle(_o), nMainInst(_o.nMainInst){};
  inline cOpContextHandle(const cOpContextHandle &_o, gzBool _b) : Lib_GZ::Sys::cContextHandle(_o, _b), nMainInst(_o.nMainInst){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpContextHandle();

 private:



};
class csOpContextHandle : public Lib_GZ::Sys::csContextHandle {

 public:

  inline virtual gzSp<Lib_GZ::Sys::cContextHandle> New(Lib_GZ::cBase* _parent, Lib_GZ::Sys::Message::cContextLink* _oLink){
   gzSp<cOpContextHandle>_oTemp = gzSp<cOpContextHandle>(new cOpContextHandle(_parent));
   _oTemp->Ini_cOpContextHandle(_oLink);
   return _oTemp;
  }




  inline csOpContextHandle(Lib_GZ::cBase* _parent): Lib_GZ::Sys::csContextHandle(_parent){};
  inline ~csOpContextHandle(){};
};
namespace OpContextHandle{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpContextHandle((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Sys::ContextHandle::Create, &Lib_GZ::Sys::ContextHandle::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpContextHandle> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpContextHandle*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpContextHandle*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpContextHandle>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpContextHandle{
}}}





namespace Lib_GZ_Windows{namespace Sys{class cOpDebug;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}




extern "C" {
  struct lconv {
    char *decimal_point;
    char *thousands_sep;
    char *grouping;
    char *int_curr_symbol;
    char *currency_symbol;
    char *mon_decimal_point;
    char *mon_thousands_sep;
    char *mon_grouping;
    char *positive_sign;
    char *negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
  };
   int __attribute__((__cdecl__)) _configthreadlocale(int _Flag);
   char *__attribute__((__cdecl__)) setlocale(int _Category,const char *_Locale);
           struct lconv *__attribute__((__cdecl__)) localeconv(void);
   _locale_t __attribute__((__cdecl__)) _get_current_locale(void);
   _locale_t __attribute__((__cdecl__)) _create_locale(int _Category,const char *_Locale);
   void __attribute__((__cdecl__)) _free_locale(_locale_t _Locale);
   _locale_t __attribute__((__cdecl__)) __get_current_locale(void);
   _locale_t __attribute__((__cdecl__)) __create_locale(int _Category,const char *_Locale);
   void __attribute__((__cdecl__)) __free_locale(_locale_t _Locale);



           wchar_t *__attribute__((__cdecl__)) _wsetlocale(int _Category,const wchar_t *_Locale);



}



namespace Lib_GZ_Windows{namespace Sys{namespace OpDebug{



}}}


namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ_Windows{namespace Sys{class cOpDebug;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_Windows{namespace Sys{namespace OpDebug{
}
class pOpDebug {

 public:


};

class cOpDebug : public Lib_GZ::Sys::cDebug {

 public:



  cOpDebug(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpDebug();

  inline cOpDebug(const cOpDebug &_o) : Lib_GZ::Sys::cDebug(_o){};
  inline cOpDebug(const cOpDebug &_o, gzBool _b) : Lib_GZ::Sys::cDebug(_o, _b){};
  virtual ~cOpDebug();

 private:



};
class csOpDebug : public Lib_GZ::Sys::csDebug {

 public:

  inline virtual gzSp<Lib_GZ::Sys::cDebug> New(Lib_GZ::cBase* _parent){
   gzSp<cOpDebug>_oTemp = gzSp<cOpDebug>(new cOpDebug(_parent));
   _oTemp->Ini_cOpDebug();
   return _oTemp;
  }



  virtual void fTrace1(const gzStr& _sValue);
  virtual void fTrace2(const gzStr& _sValue);
  virtual void fTrace3(const gzStr& _sValue);
  virtual void fWarning(const gzStr& _sValue);
  virtual void fError(const gzStr& _sValue);
  virtual void fPass(const gzStr& _sValue);
  virtual void fFatal(const gzStr& _sValue);

  inline csOpDebug(Lib_GZ::cBase* _parent): Lib_GZ::Sys::csDebug(_parent){};
  inline ~csOpDebug(){};
};
namespace OpDebug{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpDebug((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Sys::Debug::Create, &Lib_GZ::Sys::Debug::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpDebug> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpDebug*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpDebug*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpDebug>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpDebug{
}}}




namespace Lib_GZ_Windows{namespace Sys{class cOpFile;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}






namespace Lib_GZ_Windows{namespace Sys{namespace OpFile{



}}}


namespace Lib_GZ{namespace Sys{class cFile;}}

namespace Lib_GZ{namespace File{class cResource;}}

namespace Lib_GZ_Windows{namespace Sys{class cOpFile;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_Windows{namespace Sys{namespace OpFile{
}
class pOpFile {

 public:


};

class cOpFile : public Lib_GZ::Sys::cFile {

 public:



  cOpFile(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpFile();

  inline cOpFile(const cOpFile &_o) : Lib_GZ::Sys::cFile(_o){};
  inline cOpFile(const cOpFile &_o, gzBool _b) : Lib_GZ::Sys::cFile(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpFile();

 private:



};
class csOpFile : public Lib_GZ::Sys::csFile {

 public:

  inline virtual gzSp<Lib_GZ::Sys::cFile> New(Lib_GZ::cBase* _parent){
   gzSp<cOpFile>_oTemp = gzSp<cOpFile>(new cOpFile(_parent));
   _oTemp->Ini_cOpFile();
   return _oTemp;
  }



  virtual gzStr fGetExePath();
  virtual gzBool fLoadFile(Lib_GZ::File::cResource* _oRc, const gzStr& _sFullPath);

  inline csOpFile(Lib_GZ::cBase* _parent): Lib_GZ::Sys::csFile(_parent){};
  inline ~csOpFile(){};
};
namespace OpFile{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpFile((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Sys::File::Create, &Lib_GZ::Sys::File::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpFile> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpFile*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpFile*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpFile>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpFile{
}}}





namespace Lib_GZ_Windows{namespace Sys{class cOpSystem;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}






namespace Lib_GZ_Windows{namespace Sys{namespace OpSystem{



}}}


namespace Lib_GZ{namespace Sys{class cSystem;}}
namespace Lib_GZ_Windows{namespace Sys{class cOpSystem;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_Windows{namespace Sys{namespace OpSystem{
}
class pOpSystem {

 public:


};

class cOpSystem : public Lib_GZ::Sys::cSystem {

 public:



  cOpSystem(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpSystem();

  inline cOpSystem(const cOpSystem &_o) : Lib_GZ::Sys::cSystem(_o){};
  inline cOpSystem(const cOpSystem &_o, gzBool _b) : Lib_GZ::Sys::cSystem(_o, _b){};
  virtual ~cOpSystem();

 private:



};
class csOpSystem : public Lib_GZ::Sys::csSystem {

 public:

  inline virtual gzSp<Lib_GZ::Sys::cSystem> New(Lib_GZ::cBase* _parent){
   gzSp<cOpSystem>_oTemp = gzSp<cOpSystem>(new cOpSystem(_parent));
   _oTemp->Ini_cOpSystem();
   return _oTemp;
  }



  virtual void fSleep(gzUInt _nMilliseconds = 1);
  virtual gzBool fDetectGpu();
  virtual void fExit();

  inline csOpSystem(Lib_GZ::cBase* _parent): Lib_GZ::Sys::csSystem(_parent){};
  inline ~csOpSystem(){};
};
namespace OpSystem{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpSystem((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Sys::System::Create, &Lib_GZ::Sys::System::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpSystem> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpSystem*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpSystem*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpSystem>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpSystem{
}}}

extern "C" int IniLib_Lib_GZ_Windows(){
Lib_GZ_Windows::zpLib = Lib_GZ_Windows::NewLib();
Lib_GZ_Windows::Sys::OpContext::NewClass();
Lib_GZ_Windows::Sys::OpContextHandle::NewClass();
Lib_GZ_Windows::Sys::OpDebug::NewClass();
Lib_GZ_Windows::Sys::OpFile::NewClass();
Lib_GZ_Windows::Sys::OpSystem::NewClass();
return 1;
}

namespace Lib_GZ_Windows{ Lib_GZ::uOverplace* rLastClass = 0; Lib_GZ::uLib zpLib = NewLib(); }

extern gzUIntX nTestProgInstance;


namespace Lib_GZ_Windows{namespace Sys{namespace OpContext{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"OpContext"},{0,"fManageMessageOp"},{0,"fMove"},{0,"fMoveAndSize"},{0,"fShow"},{0,"fHide"},{0,"fIniProcess"},{0,"fMinimize"},{0,"fMaximize"},{0,"fRestore"},{0,"fDisable"},{0,"fSendData"},{0,"fReceiveMessage"},{0,"drawPixel"},{0,"fKeyIsDown"},{0,"fCpuVSyncOnGpu"},{0,"fIsWindowReady"},{0,"fIniRender"},{0,"fGetMousePosition"},{0,"fStartCaptureOutside"},{0,"fStopCaptureOutside"},{0,"fFrameEnd"},{0,"fGetPixelArray"},{0,"fGetKey"}};




HINSTANCE hInstance;
WCHAR* WinClassName;





LRESULT __attribute__((__stdcall__)) AppWndProc(HWND _hWnd, gzUInt uMsg, WPARAM wParam, LPARAM lParam){
using namespace Lib_GZ::Sys::Window;
using namespace Lib_GZ::Sys::Message;


cContextLink *_this = (cContextLink*)GetWindowLongW(_hWnd, (-21));
if(_this == 0 ){
switch(uMsg){
case 0x0081:

SetWindowLongW(_hWnd, (-21), (LONG_PTR) ((CREATESTRUCT*)lParam)->lpCreateParams);
break;
}
return DefWindowProcW(_hWnd, uMsg, wParam, lParam);
}
return DefWindowProcW(_hWnd, uMsg, wParam, lParam);
}


}

namespace OpContext{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cOpContext::cOpContext(Lib_GZ::cBase* _parent) : Lib_GZ::Sys::cContext(_parent){

 hWinClickNew = Lib_GZ::Sys::Window::eWinClick::None;

}

void cOpContext::Ini_cOpContext(Lib_GZ::Gfx::cInterface* _oInterface, const gzStr& _sWindowName, gzUInt _nFrameWidth, gzUInt _nFrameHeight, gzBool _bTransparent, gzInt _nBgColor){ gzStack gz_s( &OpContext::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "---New OpWindows--", (sizeof("\0" "---New OpWindows--")/sizeof(gzUInt8)) - 2, true)));
 Ini_cContext((Lib_GZ::Gfx::cInterface*)(_oInterface), _sWindowName, _nFrameWidth, _nFrameHeight, _bTransparent, _nBgColor);
}

void csOpContext::fManageMessageOp(){ gzStack gz_s( &OpContext::zFuncName[1] );

 static MSG msg;
 while (PeekMessageW(&msg, 0, 0, 0, 0x0001) > 0){
 if (msg.message == 0x0012){
 break;
 }
 TranslateMessage(&msg);
 DispatchMessageW(&msg);
 }
}

void cOpContext::fMove(gzInt _nPosX, gzInt _nPosY){ gzStack gz_s( &OpContext::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fMove", (sizeof("\0" "GzWindows::OpContext::fMove")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fMoveAndSize(gzInt _nPosX, gzInt _nPosY, gzInt _nWidth, gzInt _nHeight){ gzStack gz_s( &OpContext::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fMoveAndSize", (sizeof("\0" "GzWindows::OpContext::fMoveAndSize")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fShow(gzBool _bActive){ gzStack gz_s( &OpContext::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fShow", (sizeof("\0" "GzWindows::OpContext::fShow")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fHide(){ gzStack gz_s( &OpContext::zFuncName[5] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fHide", (sizeof("\0" "GzWindows::OpContext::fHide")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fIniProcess(){ gzStack gz_s( &OpContext::zFuncName[6] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fIniProcess", (sizeof("\0" "GzWindows::OpContext::fIniProcess")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fMinimize(){ gzStack gz_s( &OpContext::zFuncName[7] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fMinimize", (sizeof("\0" "GzWindows::OpContext::fMinimize")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fMaximize(){ gzStack gz_s( &OpContext::zFuncName[8] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fMaximize", (sizeof("\0" "GzWindows::OpContext::fMaximize")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fRestore(){ gzStack gz_s( &OpContext::zFuncName[9] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fRestore", (sizeof("\0" "GzWindows::OpContext::fRestore")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fDisable(){ gzStack gz_s( &OpContext::zFuncName[10] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fDisable", (sizeof("\0" "GzWindows::OpContext::fDisable")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fSendData(gzUInt _nOtherWinId){ gzStack gz_s( &OpContext::zFuncName[11] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fSendData", (sizeof("\0" "GzWindows::OpContext::fSendData")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fReceiveMessage(const gzStr& _sMessage){ gzStack gz_s( &OpContext::zFuncName[12] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fReceiveMessage", (sizeof("\0" "GzWindows::OpContext::fReceiveMessage")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::drawPixel(){ gzStack gz_s( &OpContext::zFuncName[13] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::drawPixel", (sizeof("\0" "GzWindows::OpContext::drawPixel")/sizeof(gzUInt8)) - 2, true))); }
}

gzInt cOpContext::fKeyIsDown(gzInt _nKeyVal){ gzStack gz_s( &OpContext::zFuncName[14] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fKeyIsDown", (sizeof("\0" "GzWindows::OpContext::fKeyIsDown")/sizeof(gzUInt8)) - 2, true))); }
 return 0;
}

void cOpContext::fCpuVSyncOnGpu(){ gzStack gz_s( &OpContext::zFuncName[15] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fCpuVSyncOnGpu", (sizeof("\0" "GzWindows::OpContext::fCpuVSyncOnGpu")/sizeof(gzUInt8)) - 2, true))); }
}

gzBool cOpContext::fIsWindowReady(){ gzStack gz_s( &OpContext::zFuncName[16] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fIsWindowReady", (sizeof("\0" "GzWindows::OpContext::fIsWindowReady")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

void cOpContext::fIniRender(){ gzStack gz_s( &OpContext::zFuncName[17] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fIniRender", (sizeof("\0" "GzWindows::OpContext::fIniRender")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fGetMousePosition(){ gzStack gz_s( &OpContext::zFuncName[18] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fGetMousePosition", (sizeof("\0" "GzWindows::OpContext::fGetMousePosition")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fStartCaptureOutside(){ gzStack gz_s( &OpContext::zFuncName[19] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fStartCaptureOutside", (sizeof("\0" "GzWindows::OpContext::fStartCaptureOutside")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fStopCaptureOutside(){ gzStack gz_s( &OpContext::zFuncName[20] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fStopCaptureOutside", (sizeof("\0" "GzWindows::OpContext::fStopCaptureOutside")/sizeof(gzUInt8)) - 2, true))); }
}

void cOpContext::fFrameEnd(){ gzStack gz_s( &OpContext::zFuncName[21] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fFrameEnd", (sizeof("\0" "GzWindows::OpContext::fFrameEnd")/sizeof(gzUInt8)) - 2, true))); }
}

gzInt** cOpContext::fGetPixelArray(){ gzStack gz_s( &OpContext::zFuncName[22] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fGetPixelArray", (sizeof("\0" "GzWindows::OpContext::fGetPixelArray")/sizeof(gzUInt8)) - 2, true))); }
 return 0;
}

void cOpContext::fGetKey(Lib_GZ::Input::cKey* _oKey){ gzStack gz_s( &OpContext::zFuncName[23] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpContext::fGetKey", (sizeof("\0" "GzWindows::OpContext::fGetKey")/sizeof(gzUInt8)) - 2, true))); }
}

cOpContext::~cOpContext(){
}



}}

HDC hmemdc;
gzInt* aPixels;
gzInt** p2DArray;
HDC dcScreen;
SIZE frameSize;
HWND hWnd;
HBITMAP hbmp;


namespace Lib_GZ_Windows{namespace Sys{namespace OpContextHandle{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"OpContextHandle"},{0,"fCreateContextHandle"},{0,"fIniPixelDrawZone"},{0,"fBlit"}};




void fClientResize(HWND _hWnd, int _nWidth, int _nHeight){
RECT rcClient, rcWindow;
POINT ptDiff;
GetClientRect(_hWnd, &rcClient);
GetWindowRect(_hWnd, &rcWindow);
ptDiff.x = (rcWindow.right - rcWindow.left) - rcClient.right;
ptDiff.y = (rcWindow.bottom - rcWindow.top) - rcClient.bottom;
MoveWindow(_hWnd,rcWindow.left, rcWindow.top, _nWidth + ptDiff.x, _nHeight + ptDiff.y, 1);
}


}

namespace OpContextHandle{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cOpContextHandle::cOpContextHandle(Lib_GZ::cBase* _parent) : Lib_GZ::Sys::cContextHandle(_parent){
 nMainInst=0;

}

void cOpContextHandle::Ini_cOpContextHandle(Lib_GZ::Sys::Message::cContextLink* _oLink){ gzStack gz_s( &OpContextHandle::zFuncName[0] );
 Ini_cContextHandle((Lib_GZ::Sys::Message::cContextLink*)(_oLink));
}

gzBool cOpContextHandle::fCreateContextHandle(){ gzStack gz_s( &OpContextHandle::zFuncName[1] );
 nMainInst = Lib_GZ::Sys::System::Get(thread)->nInstance;
 gzUInt _nX = gzUInt(oLink->oPos->nX);
 gzUInt _nY = gzUInt(oLink->oPos->nY);

 using namespace OpContextHandle;
 using namespace Lib_GZ_Windows::Sys;
 using namespace Lib_GZ::Sys::Window;

 HINSTANCE hInstance = (HINSTANCE)nMainInst;
 WNDCLASSEX wClass;
 wClass.cbClsExtra=0;
 wClass.cbSize=sizeof(WNDCLASSEX);
 wClass.cbWndExtra=0;
 wClass.hbrBackground=0;
 wClass.hCursor = LoadCursorW( 0, ((LPWSTR)((ULONG_PTR)((WORD)(32512)))) );
 gzUTF16 _sIcon(oLink->sIcon);
 wClass.hIcon = LoadIconW(hInstance, (LPCWSTR)(gzUInt16*)_sIcon);
 wClass.hIconSm = LoadIconW(hInstance, (LPCWSTR)(gzUInt16*)_sIcon);
 WCHAR _buffer[10];
 static gzUInt _nUniqueId = 0;
 wsprintfW(_buffer, L"GZ_%d", _nUniqueId);
 _nUniqueId ++;
 WCHAR* WinClassName = _buffer;
 wClass.lpszClassName = WinClassName;
 wClass.hInstance = hInstance;
 wClass.lpfnWndProc = OpContext::AppWndProc;
 wClass.lpszMenuName = 0;
 if(!oLink->bCloseBox){
 wClass.style = 0x0200;
 }else{
 wClass.style = 0;
 }
 if ( !RegisterClassExW(&wClass) ) {
 MessageBoxW( 0, L"Failed to register window class.", L"Error", 0x00000000l );

 return false;
 }

 oLink->bTransparent = false;
 oLink->bBorder = true;
 gzUInt _nExStyleFlag = 0;
 gzUInt _hBorderFlag = 0;
 if(oLink->bTransparent){
 _nExStyleFlag = 0x00080000 ;
 _hBorderFlag = 0x80000000l;
 oLink->bBorder = false;
 }else{
 switch(oLink->hBorder){
 case eWinBorder::Normal :
 _nExStyleFlag = 0x00040000l;
 _hBorderFlag = 0x00080000l | 0x00C00000l;
 break;
 case eWinBorder::NormalDouble :
 _nExStyleFlag = 0x00040000l |0x00000200l;
 _hBorderFlag = 0x00080000l | 0x00C00000l;
 break;
 case eWinBorder::None :
 _nExStyleFlag = 0x00040000l;
 _hBorderFlag = 0x80000000l;
 oLink->bBorder = false;
 break;
 case eWinBorder::BorderOnly :
 _nExStyleFlag = 0x00040000l;
 _hBorderFlag = 0x80000000l | 0x00040000l;
 break;
 case eWinBorder::BorderOnlyDouble :
 _nExStyleFlag = 0x00040000l |0x00000200l;
 _hBorderFlag = 0x80000000l | 0x00040000l;
 break;
 case eWinBorder::Title :
 _nExStyleFlag = 0x00040000l;
 _hBorderFlag = 0x80000000l | 0x00C00000l;
 break;
 case eWinBorder::TitleDouble :
 _nExStyleFlag = 0x00040000l |0x00000200l;
 _hBorderFlag = 0x80000000l | 0x00C00000l;
 break;
 }
 _nExStyleFlag = 0x00040000l;
 _hBorderFlag = 0x00080000l | 0x00C00000l;
 }
 gzUTF16 _sWinName(oLink->sName);
 WCHAR* _WinName = (WCHAR*)(gzUInt16*)_sWinName;
 hWnd = CreateWindowExW(
 _nExStyleFlag | 0x00000004l,
 WinClassName,
 _WinName,
 _hBorderFlag
 | 0x02000000l | 0x04000000l
 ,_nX, _nY, nFrameWidth, nFrameHeight,
 0, 0, hInstance, this);
 if (!hWnd){
 gzInt nResult = GetLastError();
 WCHAR buffer[100];
 wsprintfW(buffer, L"Window Class Failed, error : %i", nResult);
 MessageBoxW(0, buffer, L"Window Creation Failed!", 0x00000010l);
 }
 dcScreen = GetDC(hWnd);
 nHandleId = (gzUIntX)dcScreen;
 nWinHandleId = (gzUIntX)hWnd;
 fClientResize(hWnd, nFrameWidth, nFrameHeight);
 ShowWindow( hWnd, 10 );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "Finsish Create: ", (sizeof("\0" "Finsish Create: ")/sizeof(gzUInt8)) - 2, true)) + gzStrI(nHandleId));
 return false;
}

gzInt32* cOpContextHandle::fIniPixelDrawZone(){ gzStack gz_s( &OpContextHandle::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "fIniPixelDrawZone", (sizeof("\0" "fIniPixelDrawZone")/sizeof(gzUInt8)) - 2, true)));

 frameSize.cx = nFrameWidth;
 frameSize.cy = nFrameHeight;
 if (oLink->bGpuDraw == false){

  hmemdc = CreateCompatibleDC(dcScreen);
  BITMAPINFO bmi;
  bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
  bmi.bmiHeader.biWidth = nFrameWidth;
  bmi.bmiHeader.biHeight = -nFrameHeight;
  bmi.bmiHeader.biPlanes = 1;
  bmi.bmiHeader.biBitCount = 32;
  bmi.bmiHeader.biCompression = 0l;
  bmi.bmiHeader.biSizeImage = 0;
  bmi.bmiHeader.biXPelsPerMeter = 0;
  bmi.bmiHeader.biYPelsPerMeter = 0;
  bmi.bmiHeader.biClrUsed = 0;
  bmi.bmiHeader.biClrImportant = 0;
  bmi.bmiColors[0].rgbBlue = 0;
  bmi.bmiColors[0].rgbGreen = 0;
  bmi.bmiColors[0].rgbRed = 0;
  bmi.bmiColors[0].rgbReserved = 0;
  hbmp = CreateDIBSection( hmemdc, &bmi, 0, (void**)&aPixels, 0, 0 );
  SelectObject( hmemdc, hbmp );
  return aPixels;
 }
 return 0;
}

gzUIntX cOpContextHandle::fBlit(){ gzStack gz_s( &OpContextHandle::zFuncName[3] );

 if (hWnd && dcScreen) {
 if(oLink->bGpuDraw){
 }else{


 BitBlt( dcScreen, 0, 0, nFrameWidth, nFrameHeight, hmemdc, 0, 0, (DWORD)0x00CC0020 );
 }
 }
 return 0;
}

gzAny cOpContextHandle::MemCopy(){
return (gzAny)new cOpContextHandle(*this);
}
gzAny cOpContextHandle::DeepCopy(){
return (gzAny)new cOpContextHandle(*this, true);
}
cOpContextHandle::~cOpContextHandle(){
}



}}








namespace Lib_GZ_Windows{namespace Sys{namespace OpDebug{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"OpDebug"},{0,"fTrace1"},{0,"fTrace2"},{0,"fTrace3"},{0,"fWarning"},{0,"fError"},{0,"fPass"},{0,"fFatal"}};




namespace FgColor{
enum {
BLACK = 0,
DARKBLUE = 0x1,
DARKGREEN = 0x2,
DARKCYAN = 0x2 | 0x1,
DARKRED = 0x4,
DARKMAGENTA = 0x4 | 0x1,
DARKYELLOW = 0x4 | 0x2,
DARKGRAY = 0x4 | 0x2 | 0x1,
GRAY = 0x8,
BLUE = 0x8 | 0x1,
GREEN = 0x8 | 0x2,
CYAN = 0x8 | 0x2 | 0x1,
RED = 0x8 | 0x4,
MAGENTA = 0x8 | 0x4 | 0x1,
YELLOW = 0x8 | 0x4 | 0x2,
WHITE = 0x8 | 0x4 | 0x2 | 0x1,
};
}
bool bIni = false;
bool bPrefix = true;
bool bPipe = false;
void fPrint(const gzStr& _sValue);

void Color(gzUInt flags)
{
HANDLE H=GetStdHandle(((DWORD)-11));
SetConsoleTextAttribute(H,(WORD)flags);
}
void fMsgPrint(const gzStr& _sValue){
if(bPipe){
gzUTF16 _sPrint16(_sValue);
wprintf(L"%s\n", (const wchar_t*)_sPrint16.get());
}else{
DWORD slen = _sValue.GnSize();
WriteConsoleA(GetStdHandle(((DWORD)-11)),_sValue.sStr->array + 1,slen,&slen,0);
wprintf(L"\n");
}
}
void fPrint(char* _sPrefix , gzUInt _nPredixFlag, const gzStr& _sMsg, gzUInt _nMsgFlag ){
Color(_nPredixFlag );
if(bPrefix){
wprintf(L"%s ", _sPrefix);
}
Color(_nMsgFlag);
fMsgPrint(_sMsg);
Color((0x1| 0x4 | 0x2));
}


}

namespace OpDebug{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cOpDebug::cOpDebug(Lib_GZ::cBase* _parent) : Lib_GZ::Sys::cDebug(_parent){

}

void cOpDebug::Ini_cOpDebug(){ gzStack gz_s( &OpDebug::zFuncName[0] );
 Ini_cDebug();
 gzUInt _nWidth = 1000;
 gzUInt _nHeight = 600;
 gzUInt _nPosX = 0;
 gzUInt _nPosY = 0;


 COORD coord;
 coord.X=_nWidth/8 * 1.5;
 coord.Y=_nHeight/12 * 50;
 SetConsoleScreenBufferSize(GetStdHandle(((DWORD)-11)),coord);
 HWND hConsole = GetConsoleWindow();
 MoveWindow(hConsole, _nPosX, _nPosY, _nWidth, _nHeight + 300, true);
 SMALL_RECT windowSize = {0, 0, (gzInt16)(_nWidth-1), (gzInt16)(_nHeight-1)};
 SetConsoleWindowInfo(hConsole, true, &windowSize);


 setlocale(0, ".65001");
 SetConsoleOutputCP(65001);


 OpDebug::Color((0x1| 0x4 | 0x2));

}

void csOpDebug::fTrace1(const gzStr& _sValue){ gzStack gz_s( &OpDebug::zFuncName[1] );

 OpDebug::fPrint((char*)L"1:", 0x2, _sValue, 0x2 |0x8);

}

void csOpDebug::fTrace2(const gzStr& _sValue){ gzStack gz_s( &OpDebug::zFuncName[2] );

 OpDebug::fPrint((char*)L"2:", 0x1 | 0x4, _sValue, 0x1 | 0x4|0x8);

}

void csOpDebug::fTrace3(const gzStr& _sValue){ gzStack gz_s( &OpDebug::zFuncName[3] );

 OpDebug::fPrint((char*)L"3:", 0x2 | 0x4, _sValue, 0x2 | 0x4| 0x8);

}

void csOpDebug::fWarning(const gzStr& _sValue){ gzStack gz_s( &OpDebug::zFuncName[4] );

 OpDebug::fPrint((char*)L"W:", OpDebug::FgColor::YELLOW, _sValue, OpDebug::FgColor::YELLOW | 0x8);

}

void csOpDebug::fError(const gzStr& _sValue){ gzStack gz_s( &OpDebug::zFuncName[5] );

 printf("E:%s\n", (char*)_sValue.fcStr());
}

void csOpDebug::fPass(const gzStr& _sValue){ gzStack gz_s( &OpDebug::zFuncName[6] );

 printf("P:%s\n", (char*)_sValue.fcStr());
}

void csOpDebug::fFatal(const gzStr& _sValue){ gzStack gz_s( &OpDebug::zFuncName[7] );

 printf("F:%s\n", (char*)_sValue.fcStr());
}

cOpDebug::~cOpDebug(){
}



}}

namespace Lib_GZ_Windows{namespace Sys{namespace OpFile{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fGetExePath"},{0,"fLoadFile"},{0,"OpFile"}};



}

namespace OpFile{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

gzStr csOpFile::fGetExePath(){ gzStack gz_s( &OpFile::zFuncName[0] );


 wchar_t result[ 260 ];
 GetModuleFileNameW( 0, result, 260 );

 gzInt _nLength = 0;
 for(gzInt i = 0; i < 260; i++){
 if(result[i] == 0){
 break;
 }
 _nLength++;
 }

 gzStr _sPath((gzUInt16*)result);
 _sPath.fReplaceAll((gzStr((gzUInt8*)"\0" "\\", (sizeof("\0" "\\")/sizeof(gzUInt8)) - 2, true)), (gzStr((gzUInt8*)"\0" "/", (sizeof("\0" "/")/sizeof(gzUInt8)) - 2, true)));
 _sPath.fBegin();
 return _sPath;

 return (gzStr((gzUInt8*)"\0" "", (sizeof("\0" "")/sizeof(gzUInt8)) - 2, true));
}

gzBool csOpFile::fLoadFile(Lib_GZ::File::cResource* _oRc, const gzStr& _sFullPath){ gzStack gz_s( &OpFile::zFuncName[1] );
 Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "Overcplace fLoadFile not impletmented", (sizeof("\0" "Overcplace fLoadFile not impletmented")/sizeof(gzUInt8)) - 2, true)));

 gzUTF16 _wcFile(_sFullPath);
 FILE* f = _wfopen((wchar_t*)(gzUInt16*)_wcFile, L"rb+");
 unsigned char *result;
 if (f != 0){
 WIN32_FILE_ATTRIBUTE_DATA fa;
 if (!GetFileAttributesExW((LP)(gzUInt16*)_wcFile, GetFileExInfoStandard, &fa)){

 }
 gzUIntX _nSize = ((gzUInt64)fa.nFileSizeHigh << 32) | fa.nFileSizeLow;
 gzUInt8* _aData = new gzUInt8[_nSize];
 fread(_aData, 1, _nSize, f);
 _oRc->fSetDynamicMemData(_aData, _nSize);
 Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "---File Open!-- ", (sizeof("\0" "---File Open!-- ")/sizeof(gzUInt8)) - 2, true)) + _sFullPath);
 return true;
 }else{
 Lib_GZ::Sys::pDebug::fConsole((gzStr((gzUInt8*)"\0" "Error, can't open file : ", (sizeof("\0" "Error, can't open file : ")/sizeof(gzUInt8)) - 2, true)) + _sFullPath);
 }
 fclose(f);
 return false;
 return false;
}

cOpFile::cOpFile(Lib_GZ::cBase* _parent) : Lib_GZ::Sys::cFile(_parent){

}

void cOpFile::Ini_cOpFile(){ gzStack gz_s( &OpFile::zFuncName[2] );
 Ini_cFile();
}

gzAny cOpFile::MemCopy(){
return (gzAny)new cOpFile(*this);
}
gzAny cOpFile::DeepCopy(){
return (gzAny)new cOpFile(*this, true);
}
cOpFile::~cOpFile(){
}



}}









namespace Lib_GZ_Windows{namespace Sys{namespace OpSystem{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"OpSystem"},{0,"fSleep"},{0,"fDetectGpu"},{0,"fExit"}};



}

namespace OpSystem{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cOpSystem::cOpSystem(Lib_GZ::cBase* _parent) : Lib_GZ::Sys::cSystem(_parent){

}

void cOpSystem::Ini_cOpSystem(){ gzStack gz_s( &OpSystem::zFuncName[0] );
 Ini_cSystem();
}

void csOpSystem::fSleep(gzUInt _nMilliseconds){ gzStack gz_s( &OpSystem::zFuncName[1] );

 Sleep(_nMilliseconds);
}

gzBool csOpSystem::fDetectGpu(){ gzStack gz_s( &OpSystem::zFuncName[2] );
 return true;
}

void csOpSystem::fExit(){ gzStack gz_s( &OpSystem::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzWindows::OpSystem::fExit", (sizeof("\0" "GzWindows::OpSystem::fExit")/sizeof(gzUInt8)) - 2, true))); }
}

cOpSystem::~cOpSystem(){
}



}}







namespace Lib_GZ_OpenGL{namespace Base{class cOpAttribute;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ_OpenGL{namespace Base{namespace OpAttribute{



}}}



   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ_OpenGL{class cOpGpuInfo;}

namespace Lib_GZ{namespace Gpu{namespace Base{class cAttribute;}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}
namespace Lib_GZ_OpenGL{namespace Base{class cOpAttribute;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace Base{namespace OpAttribute{
}
class pOpAttribute {

 public:


};

class cOpAttribute : public Lib_GZ::Gpu::Base::cAttribute {

 public:



  virtual void fLoad();
  virtual void fSetOffset(gzUInt _nValOffset);
  virtual void fSetDivisor(gzUInt _nDiv = 1);
  cOpAttribute(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpAttribute(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName);

  inline cOpAttribute(const cOpAttribute &_o) : Lib_GZ::Gpu::Base::cAttribute(_o){};
  inline cOpAttribute(const cOpAttribute &_o, gzBool _b) : Lib_GZ::Gpu::Base::cAttribute(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpAttribute();

 private:



};
class csOpAttribute : public Lib_GZ::Gpu::Base::csAttribute {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::Base::cAttribute> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName){
   gzSp<cOpAttribute>_oTemp = gzSp<cOpAttribute>(new cOpAttribute(_parent));
   _oTemp->Ini_cOpAttribute(_oProgram, _sName);
   return _oTemp;
  }




  inline csOpAttribute(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::Base::csAttribute(_parent){};
  inline ~csOpAttribute(){};
};
namespace OpAttribute{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpAttribute((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::Base::Attribute::Create, &Lib_GZ::Gpu::Base::Attribute::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpAttribute> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpAttribute*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpAttribute*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpAttribute>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpAttribute{
}}}




namespace Lib_GZ_OpenGL{class cOpGpuInfo;}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}






namespace Lib_GZ_OpenGL{namespace OpGpuInfo{



}}


namespace Lib_GZ{namespace Gpu{class cGpuInfo;}}

   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ_OpenGL{class cOpGpuInfo;}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace OpGpuInfo{
}
class pOpGpuInfo {

 public:


};

class cOpGpuInfo : public Lib_GZ::Gpu::cGpuInfo {

 public:



  virtual gzBool fIniFunctions();
  virtual gzBool fGetVersion();
  cOpGpuInfo(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpGpuInfo();

  inline cOpGpuInfo(const cOpGpuInfo &_o) : Lib_GZ::Gpu::cGpuInfo(_o){};
  inline cOpGpuInfo(const cOpGpuInfo &_o, gzBool _b) : Lib_GZ::Gpu::cGpuInfo(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpGpuInfo();

 private:



};
class csOpGpuInfo : public Lib_GZ::Gpu::csGpuInfo {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::cGpuInfo> New(Lib_GZ::cBase* _parent){
   gzSp<cOpGpuInfo>_oTemp = gzSp<cOpGpuInfo>(new cOpGpuInfo(_parent));
   _oTemp->Ini_cOpGpuInfo();
   return _oTemp;
  }




  inline csOpGpuInfo(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::csGpuInfo(_parent){};
  inline ~csOpGpuInfo(){};
};
namespace OpGpuInfo{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpGpuInfo((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::GpuInfo::Create, &Lib_GZ::Gpu::GpuInfo::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpGpuInfo> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpGpuInfo*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpGpuInfo*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpGpuInfo>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpGpuInfo{
}}




namespace Lib_GZ_OpenGL{namespace Base{class cOpUnVec2;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ_OpenGL{namespace Base{namespace OpUnVec2{



}}}



   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ_OpenGL{class cOpGpuInfo;}

namespace Lib_GZ{namespace Gpu{namespace Base{class cUniform;}}}

namespace Lib_GZ{namespace Base{class cVec2;}}
namespace Lib_GZ{namespace Gpu{namespace Base{class cUnVec2;}}}
namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}
namespace Lib_GZ_OpenGL{namespace Base{class cOpUnVec2;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace Base{namespace OpUnVec2{
}
class pOpUnVec2 {

 public:


};

class cOpUnVec2 : public Lib_GZ::Gpu::Base::cUnVec2 {

 public:



  virtual void fLoad();
  virtual void fSend();
  cOpUnVec2(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpUnVec2(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName);

  inline cOpUnVec2(const cOpUnVec2 &_o) : Lib_GZ::Gpu::Base::cUnVec2(_o){};
  inline cOpUnVec2(const cOpUnVec2 &_o, gzBool _b) : Lib_GZ::Gpu::Base::cUnVec2(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpUnVec2();

 private:



};
class csOpUnVec2 : public Lib_GZ::Gpu::Base::csUnVec2 {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::Base::cUnVec2> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName){
   gzSp<cOpUnVec2>_oTemp = gzSp<cOpUnVec2>(new cOpUnVec2(_parent));
   _oTemp->Ini_cOpUnVec2(_oProgram, _sName);
   return _oTemp;
  }




  inline csOpUnVec2(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::Base::csUnVec2(_parent){};
  inline ~csOpUnVec2(){};
};
namespace OpUnVec2{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpUnVec2((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::Base::UnVec2::Create, &Lib_GZ::Gpu::Base::UnVec2::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpUnVec2> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpUnVec2*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpUnVec2*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpUnVec2>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpUnVec2{
}}}




namespace Lib_GZ_OpenGL{namespace GpuObj{class cOpGpuBatch;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ_OpenGL{namespace GpuObj{namespace OpGpuBatch{



}}}



   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ_OpenGL{class cOpGpuInfo;}

namespace Lib_GZ{namespace Gfx{class cFace;}}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuBatch;}}}
namespace Lib_GZ_OpenGL{namespace GpuObj{class cOpGpuBatch;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace GpuObj{namespace OpGpuBatch{
}
class pOpGpuBatch {

 public:


};

class cOpGpuBatch : public Lib_GZ::Gpu::GpuObj::cGpuBatch {

 public:



  gzUInt8* aIndice2Tri;
  gzData<gzUInt8> aIndice;
  virtual void fDraw();
  cOpGpuBatch(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpGpuBatch();

  inline cOpGpuBatch(const cOpGpuBatch &_o) : Lib_GZ::Gpu::GpuObj::cGpuBatch(_o), aIndice2Tri(), aIndice(){};
  inline cOpGpuBatch(const cOpGpuBatch &_o, gzBool _b) : Lib_GZ::Gpu::GpuObj::cGpuBatch(_o, _b), aIndice2Tri(), aIndice(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpGpuBatch();

 private:



};
class csOpGpuBatch : public Lib_GZ::Gpu::GpuObj::csGpuBatch {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::GpuObj::cGpuBatch> New(Lib_GZ::cBase* _parent){
   gzSp<cOpGpuBatch>_oTemp = gzSp<cOpGpuBatch>(new cOpGpuBatch(_parent));
   _oTemp->Ini_cOpGpuBatch();
   return _oTemp;
  }




  inline csOpGpuBatch(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::GpuObj::csGpuBatch(_parent){};
  inline ~csOpGpuBatch(){};
};
namespace OpGpuBatch{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpGpuBatch((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::GpuObj::GpuBatch::Create, &Lib_GZ::Gpu::GpuObj::GpuBatch::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpGpuBatch> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpGpuBatch*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpGpuBatch*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpGpuBatch>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpGpuBatch{
}}}




namespace Lib_GZ_OpenGL{namespace GpuObj{class cOpGpuBuffer;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ_OpenGL{namespace GpuObj{namespace OpGpuBuffer{



}}}


namespace Lib_GZ_OpenGL{class cOpGpuInfo;}
namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuBuffer;}}}
namespace Lib_GZ_OpenGL{namespace GpuObj{class cOpGpuBuffer;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace GpuObj{namespace OpGpuBuffer{
}
class pOpGpuBuffer {

 public:


};

class cOpGpuBuffer : public Lib_GZ::Gpu::GpuObj::cGpuBuffer {

 public:



  cOpGpuBuffer(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpGpuBuffer();

  inline cOpGpuBuffer(const cOpGpuBuffer &_o) : Lib_GZ::Gpu::GpuObj::cGpuBuffer(_o){};
  inline cOpGpuBuffer(const cOpGpuBuffer &_o, gzBool _b) : Lib_GZ::Gpu::GpuObj::cGpuBuffer(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpGpuBuffer();

 private:



};
class csOpGpuBuffer : public Lib_GZ::Gpu::GpuObj::csGpuBuffer {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::GpuObj::cGpuBuffer> New(Lib_GZ::cBase* _parent){
   gzSp<cOpGpuBuffer>_oTemp = gzSp<cOpGpuBuffer>(new cOpGpuBuffer(_parent));
   _oTemp->Ini_cOpGpuBuffer();
   return _oTemp;
  }




  inline csOpGpuBuffer(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::GpuObj::csGpuBuffer(_parent){};
  inline ~csOpGpuBuffer(){};
};
namespace OpGpuBuffer{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpGpuBuffer((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::GpuObj::GpuBuffer::Create, &Lib_GZ::Gpu::GpuObj::GpuBuffer::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpGpuBuffer> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpGpuBuffer*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpGpuBuffer*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpGpuBuffer>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpGpuBuffer{
}}}




namespace Lib_GZ_OpenGL{namespace GpuObj{class cOpGpuFace;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ_OpenGL{namespace GpuObj{namespace OpGpuFace{



}}}


namespace Lib_GZ_OpenGL{class cOpGpuInfo;}

namespace Lib_GZ{namespace Gfx{class cFace;}}

namespace Lib_GZ{namespace Gpu{namespace GpuObj{class cGpuFace;}}}
namespace Lib_GZ_OpenGL{namespace GpuObj{class cOpGpuFace;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace GpuObj{namespace OpGpuFace{
}
class pOpGpuFace {

 public:


};

class cOpGpuFace : public Lib_GZ::Gpu::GpuObj::cGpuFace {

 public:



  cOpGpuFace(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpGpuFace();

  inline cOpGpuFace(const cOpGpuFace &_o) : Lib_GZ::Gpu::GpuObj::cGpuFace(_o){};
  inline cOpGpuFace(const cOpGpuFace &_o, gzBool _b) : Lib_GZ::Gpu::GpuObj::cGpuFace(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpGpuFace();

 private:



};
class csOpGpuFace : public Lib_GZ::Gpu::GpuObj::csGpuFace {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::GpuObj::cGpuFace> New(Lib_GZ::cBase* _parent){
   gzSp<cOpGpuFace>_oTemp = gzSp<cOpGpuFace>(new cOpGpuFace(_parent));
   _oTemp->Ini_cOpGpuFace();
   return _oTemp;
  }




  inline csOpGpuFace(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::GpuObj::csGpuFace(_parent){};
  inline ~csOpGpuFace(){};
};
namespace OpGpuFace{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpGpuFace((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::GpuObj::GpuFace::Create, &Lib_GZ::Gpu::GpuObj::GpuFace::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpGpuFace> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpGpuFace*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpGpuFace*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpGpuFace>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpGpuFace{
}}}




namespace Lib_GZ_OpenGL{namespace ShaderBase{class cOpFragmentShader;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpFragmentShader{



}}}



   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ_OpenGL{class cOpGpuInfo;}
namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cFragmentShader;}}}
namespace Lib_GZ_OpenGL{namespace ShaderBase{class cOpFragmentShader;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpFragmentShader{
}
class pOpFragmentShader {

 public:


};

class cOpFragmentShader : public Lib_GZ::Gpu::ShaderBase::cFragmentShader {

 public:



  cOpFragmentShader(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpFragmentShader(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version = Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto);
  virtual gzBool fSendToGpu(const gzStr& _sShader);
  virtual gzBool fCompile();
  virtual gzStr fGetLog();

  inline cOpFragmentShader(const cOpFragmentShader &_o) : Lib_GZ::Gpu::ShaderBase::cFragmentShader(_o){};
  inline cOpFragmentShader(const cOpFragmentShader &_o, gzBool _b) : Lib_GZ::Gpu::ShaderBase::cFragmentShader(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpFragmentShader();

 private:



};
class csOpFragmentShader : public Lib_GZ::Gpu::ShaderBase::csFragmentShader {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::ShaderBase::cFragmentShader> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version = Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto){
   gzSp<cOpFragmentShader>_oTemp = gzSp<cOpFragmentShader>(new cOpFragmentShader(_parent));
   _oTemp->Ini_cOpFragmentShader(_hGlsl_ES_Version);
   return _oTemp;
  }




  inline csOpFragmentShader(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::ShaderBase::csFragmentShader(_parent){};
  inline ~csOpFragmentShader(){};
};
namespace OpFragmentShader{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpFragmentShader((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::ShaderBase::FragmentShader::Create, &Lib_GZ::Gpu::ShaderBase::FragmentShader::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpFragmentShader> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpFragmentShader*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpFragmentShader*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpFragmentShader>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpFragmentShader{
}}}




namespace Lib_GZ_OpenGL{namespace ShaderBase{class cOpProgramShader;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpProgramShader{



}}}



   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ_OpenGL{class cOpGpuInfo;}
namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cShaderBase;}}}

namespace Lib_GZ_OpenGL{namespace ShaderBase{class cOpProgramShader;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpProgramShader{
}
class pOpProgramShader {

 public:


};

class cOpProgramShader : public Lib_GZ::Gpu::ShaderBase::cProgramShader {

 public:



  virtual void fLoad();
  virtual void fAttachShader(Lib_GZ::Gpu::ShaderBase::cShaderBase* _oShader);
  virtual gzBool fLink();
  virtual gzBool fUse();
  cOpProgramShader(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpProgramShader();

  inline cOpProgramShader(const cOpProgramShader &_o) : Lib_GZ::Gpu::ShaderBase::cProgramShader(_o){};
  inline cOpProgramShader(const cOpProgramShader &_o, gzBool _b) : Lib_GZ::Gpu::ShaderBase::cProgramShader(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpProgramShader();

 private:



};
class csOpProgramShader : public Lib_GZ::Gpu::ShaderBase::csProgramShader {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::ShaderBase::cProgramShader> New(Lib_GZ::cBase* _parent){
   gzSp<cOpProgramShader>_oTemp = gzSp<cOpProgramShader>(new cOpProgramShader(_parent));
   _oTemp->Ini_cOpProgramShader();
   return _oTemp;
  }




  inline csOpProgramShader(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::ShaderBase::csProgramShader(_parent){};
  inline ~csOpProgramShader(){};
};
namespace OpProgramShader{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpProgramShader((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::ShaderBase::ProgramShader::Create, &Lib_GZ::Gpu::ShaderBase::ProgramShader::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpProgramShader> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpProgramShader*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpProgramShader*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpProgramShader>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpProgramShader{
}}}




namespace Lib_GZ_OpenGL{namespace ShaderBase{class cOpVbo;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpVbo{



}}}



   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ_OpenGL{class cOpGpuInfo;}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cVbo;}}}

namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cProgramShader;}}}
namespace Lib_GZ_OpenGL{namespace ShaderBase{class cOpVbo;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpVbo{
}
class pOpVbo {

 public:


};

class cOpVbo : public Lib_GZ::Gpu::ShaderBase::cVbo {

 public:



  virtual void fLoad();
  virtual void fSendData();
  cOpVbo(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpVbo(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram);

  inline cOpVbo(const cOpVbo &_o) : Lib_GZ::Gpu::ShaderBase::cVbo(_o){};
  inline cOpVbo(const cOpVbo &_o, gzBool _b) : Lib_GZ::Gpu::ShaderBase::cVbo(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpVbo();

 private:



};
class csOpVbo : public Lib_GZ::Gpu::ShaderBase::csVbo {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::ShaderBase::cVbo> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram){
   gzSp<cOpVbo>_oTemp = gzSp<cOpVbo>(new cOpVbo(_parent));
   _oTemp->Ini_cOpVbo(_oProgram);
   return _oTemp;
  }




  inline csOpVbo(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::ShaderBase::csVbo(_parent){};
  inline ~csOpVbo(){};
};
namespace OpVbo{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpVbo((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::ShaderBase::Vbo::Create, &Lib_GZ::Gpu::ShaderBase::Vbo::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpVbo> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpVbo*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpVbo*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpVbo>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpVbo{
}}}




namespace Lib_GZ_OpenGL{namespace ShaderBase{class cOpVertexShader;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpVertexShader{



}}}



   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ_OpenGL{class cOpGpuInfo;}
namespace Lib_GZ{namespace Gpu{namespace ShaderBase{class cVertexShader;}}}
namespace Lib_GZ_OpenGL{namespace ShaderBase{class cOpVertexShader;}}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpVertexShader{
}
class pOpVertexShader {

 public:


};

class cOpVertexShader : public Lib_GZ::Gpu::ShaderBase::cVertexShader {

 public:



  cOpVertexShader(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpVertexShader(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version = Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto);
  virtual gzBool fSendToGpu(const gzStr& _sShader);
  virtual gzBool fCompile();
  virtual gzStr fGetLog();

  inline cOpVertexShader(const cOpVertexShader &_o) : Lib_GZ::Gpu::ShaderBase::cVertexShader(_o){};
  inline cOpVertexShader(const cOpVertexShader &_o, gzBool _b) : Lib_GZ::Gpu::ShaderBase::cVertexShader(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpVertexShader();

 private:



};
class csOpVertexShader : public Lib_GZ::Gpu::ShaderBase::csVertexShader {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::ShaderBase::cVertexShader> New(Lib_GZ::cBase* _parent, Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version = Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto){
   gzSp<cOpVertexShader>_oTemp = gzSp<cOpVertexShader>(new cOpVertexShader(_parent));
   _oTemp->Ini_cOpVertexShader(_hGlsl_ES_Version);
   return _oTemp;
  }




  inline csOpVertexShader(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::ShaderBase::csVertexShader(_parent){};
  inline ~csOpVertexShader(){};
};
namespace OpVertexShader{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpVertexShader((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::ShaderBase::VertexShader::Create, &Lib_GZ::Gpu::ShaderBase::VertexShader::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpVertexShader> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpVertexShader*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpVertexShader*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpVertexShader>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpVertexShader{
}}}




namespace Lib_GZ_OpenGL{class cOpGpu;}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_GZ_OpenGL{namespace OpGpu{



}}



   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ{namespace Gpu{class cGpu;}}
namespace Lib_GZ{namespace Gpu{class cGpuInfo;}}
namespace Lib_GZ{namespace Gpu{namespace ShaderModel{namespace GzModel{class cGzShModel;}}}}
namespace Lib_GZ_OpenGL{class cOpGpu;}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_OpenGL{namespace OpGpu{
}
class pOpGpu {

 public:


};

class cOpGpu : public Lib_GZ::Gpu::cGpu {

 public:



  gzSp<Lib_GZ::Gpu::ShaderModel::GzModel::cGzShModel> oGzShModel;
  virtual void fLoadImg(gzInt* _aImg, gzInt _nWidth, gzInt _nHeight);
  virtual gzBool fContextIni(gzUIntX _nHandleId, gzBool _bGlobalSharedContext);
  virtual void fBlit();
  virtual gzBool fLoadDefaultShader();
  virtual void fClear();
  cOpGpu(Lib_GZ::cBase* _parent);
  virtual void Ini_cOpGpu(gzUIntX _nHandleId, gzBool _bGlobalSharedContext);

  inline cOpGpu(const cOpGpu &_o) : Lib_GZ::Gpu::cGpu(_o), oGzShModel(){};
  inline cOpGpu(const cOpGpu &_o, gzBool _b) : Lib_GZ::Gpu::cGpu(_o, _b), oGzShModel(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cOpGpu();

 private:



};
class csOpGpu : public Lib_GZ::Gpu::csGpu {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::cGpu> New(Lib_GZ::cBase* _parent, gzUIntX _nHandleId, gzBool _bGlobalSharedContext){
   gzSp<cOpGpu>_oTemp = gzSp<cOpGpu>(new cOpGpu(_parent));
   _oTemp->Ini_cOpGpu(_nHandleId, _bGlobalSharedContext);
   return _oTemp;
  }




  inline csOpGpu(Lib_GZ::cBase* _parent): Lib_GZ::Gpu::csGpu(_parent){};
  inline ~csOpGpu(){};
};
namespace OpGpu{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csOpGpu((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ::Gpu::Gpu::Create, &Lib_GZ::Gpu::Gpu::Adr}; Ini_Class(); return zDefault;} inline gzSp<csOpGpu> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpGpu*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csOpGpu*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csOpGpu>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace OpGpu{
}}

extern "C" int IniLib_Lib_GZ_OpenGL(){
Lib_GZ_OpenGL::zpLib = Lib_GZ_OpenGL::NewLib();
Lib_GZ_OpenGL::OpenGL::NewClass();
Lib_GZ_OpenGL::Base::OpAttribute::NewClass();
Lib_GZ_OpenGL::OpGpuInfo::NewClass();
Lib_GZ_OpenGL::Base::OpUnVec2::NewClass();
Lib_GZ_OpenGL::GpuObj::OpGpuBatch::NewClass();
Lib_GZ_OpenGL::GpuObj::OpGpuBuffer::NewClass();
Lib_GZ_OpenGL::GpuObj::OpGpuFace::NewClass();
Lib_GZ_OpenGL::ShaderBase::OpFragmentShader::NewClass();
Lib_GZ_OpenGL::ShaderBase::OpProgramShader::NewClass();
Lib_GZ_OpenGL::ShaderBase::OpVbo::NewClass();
Lib_GZ_OpenGL::ShaderBase::OpVertexShader::NewClass();
Lib_GZ_OpenGL::OpGpu::NewClass();
return 1;
}

namespace Lib_GZ_OpenGL{ Lib_GZ::uOverplace* rLastClass = 0; Lib_GZ::uLib zpLib = NewLib(); }







namespace Lib_GZ_OpenGL{namespace OpenGL{
}}


namespace Lib_GZ_OpenGL{namespace OpenGL{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fGetError"},{0,"fFlush"},{0,"fEnable"},{0,"fDisable"},{0,"fDepthMask"},{0,"fDepthFunc"},{0,"fGetBooleanv"},{0,"fGetDoublev"},{0,"fGetFloatv"},{0,"fGetIntegerv"},{0,"fGetInteger64v"},{0,"fGetBooleani_v"},{0,"fGetIntegeri_v"},{0,"fGetFloati_v"},{0,"fGetDoublei_v"},{0,"fGetInteger64i_v"},{0,"fVertexAttribPointer"},{0,"fVertexAttribDivisor"},{0,"fEnableVertexAttribArray"},{0,"fDisableVertexAttribArray"},{0,"fSwapIntervalEXT"},{0,"fBlendEquation"},{0,"fBlendFuncSeparate"},{0,"fBlendFunc"},{0,"fGenVertexArrays"},{0,"fCreateBuffer"},{0,"fGenBuffers"},{0,"fBindVertexArray"},{0,"fBindBuffer"},{0,"fBufferSubData"},{0,"fGetShaderInfoLog"},{0,"fGetShaderInfoLog"},{0,"fCreateProgram"},{0,"fLinkProgram"},{0,"fGetProgramParameter"},{0,"fGetProgramiv"},{0,"fUseProgram"},{0,"fDeleteProgram"},{0,"fGetProgramInfoLog"},{0,"fGetUniformLocation"},{0,"fGetAttribLocation"},{0,"fBindAttribLocation"},{0,"fCreateShader"},{0,"fShaderSource"},{0,"fShaderSource"},{0,"fCompileShader"},{0,"fGetShaderParameter"},{0,"fGetShaderiv"},{0,"fDeleteShader"},{0,"fAttachShader"},{0,"fActiveTexture"},{0,"fTexImage2D"},{0,"fTexImage3D"},{0,"fTexSubImage3D"},{0,"fBindTexture"},{0,"fTexParameterf"},{0,"fTexParameteri"},{0,"fGenTextures"},{0,"fClear"},{0,"fClearColor"},{0,"fBufferData"},{0,"fBufferData"},{0,"fDrawElements"},{0,"fDrawElementsInstanced"},{0,"fGenFramebuffers"},{0,"fBindFramebuffer"},{0,"fGenRenderbuffers"},{0,"fBindRenderbuffer"},{0,"fRenderbufferStorage"},{0,"fFramebufferTexture2D"},{0,"fFramebufferRenderbuffer"},{0,"fCheckFramebufferStatus"},{0,"fDeleteBuffers"},{0,"fUniform1f"},{0,"fUniform2f"},{0,"fUniform3f"},{0,"fUniform4f"},{0,"fUniform1i"},{0,"fUniform2i"},{0,"fUniform3i"},{0,"fUniform4i"},{0,"fUniform1fv"},{0,"fUniform2fv"},{0,"fUniform3fv"},{0,"fUniform4fv"},{0,"fUniform1iv"},{0,"fUniform2iv"},{0,"fUniform3iv"},{0,"fUniform4iv"},{0,"fUniformMatrix2fv"},{0,"fUniformMatrix3fv"},{0,"fUniformMatrix4fv"},{0,"fUniform1d"},{0,"fUniform2d"},{0,"fUniform3d"},{0,"fUniform4d"},{0,"fUniform1dv"},{0,"fUniform2dv"},{0,"fUniform3dv"},{0,"fUniform4dv"},{0,"fUniformMatrix2dv"},{0,"fUniformMatrix3dv"},{0,"fUniformMatrix4dv"},{0,"fUniformMatrix2x3dv"},{0,"fUniformMatrix2x4dv"},{0,"fUniformMatrix3x2dv"},{0,"fUniformMatrix3x4dv"},{0,"fUniformMatrix4x2dv"},{0,"fUniformMatrix4x3dv"},{0,"fUniform1ui"},{0,"fUniform2ui"},{0,"fUniform3ui"},{0,"fUniform4ui"},{0,"fUniform1uiv"},{0,"fUniform2uiv"},{0,"fUniform3uiv"},{0,"fUniform4uiv"},{0,"fGetUniformBlockIndex"},{0,"fBindBufferBase"},{0,"fUniformBlockBinding"},{0,"OpenGL"}};



}

namespace OpenGL{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

gzUInt csOpenGL::fGetError(){ gzStack gz_s( &OpenGL::zFuncName[0] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetError", (sizeof("\0" "GzOpenGL::OpenGL::fGetError")/sizeof(gzUInt8)) - 2, true))); }
 return 0;
}

void csOpenGL::fFlush(){ gzStack gz_s( &OpenGL::zFuncName[1] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fFlush", (sizeof("\0" "GzOpenGL::OpenGL::fFlush")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fFlush("_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 34);
}

void csOpenGL::fEnable(gzUInt _eCapability){ gzStack gz_s( &OpenGL::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fEnable", (sizeof("\0" "GzOpenGL::OpenGL::fEnable")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fEnable(_eCapability, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 39);
}

void csOpenGL::fDisable(gzUInt _eCapability){ gzStack gz_s( &OpenGL::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fDisable", (sizeof("\0" "GzOpenGL::OpenGL::fDisable")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fDisable(_eCapability, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 44);
}

void csOpenGL::fDepthMask(gzBool _bEnable){ gzStack gz_s( &OpenGL::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fDepthMask", (sizeof("\0" "GzOpenGL::OpenGL::fDepthMask")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fDepthMask(_bEnable, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 49);
}

void csOpenGL::fDepthFunc(gzUInt _eFunc){ gzStack gz_s( &OpenGL::zFuncName[5] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fDepthFunc", (sizeof("\0" "GzOpenGL::OpenGL::fDepthFunc")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fDepthFunc(_eFunc, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 54);
}

void csOpenGL::fGetBooleanv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzBool* _pData){ gzStack gz_s( &OpenGL::zFuncName[6] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetBooleanv", (sizeof("\0" "GzOpenGL::OpenGL::fGetBooleanv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetBooleanv(_hName, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 59);
}

void csOpenGL::fGetDoublev(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzFloat64* _pData){ gzStack gz_s( &OpenGL::zFuncName[7] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetDoublev", (sizeof("\0" "GzOpenGL::OpenGL::fGetDoublev")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetDoublev(_hName, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 64);
}

void csOpenGL::fGetFloatv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzFloat32* _pData){ gzStack gz_s( &OpenGL::zFuncName[8] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetFloatv", (sizeof("\0" "GzOpenGL::OpenGL::fGetFloatv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetFloatv(_hName, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 69);
}

void csOpenGL::fGetIntegerv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzInt32* _pData){ gzStack gz_s( &OpenGL::zFuncName[9] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetIntegerv", (sizeof("\0" "GzOpenGL::OpenGL::fGetIntegerv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetIntegerv(_hName, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 74);
}

void csOpenGL::fGetInteger64v(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzInt64* _pData){ gzStack gz_s( &OpenGL::zFuncName[10] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetInteger64v", (sizeof("\0" "GzOpenGL::OpenGL::fGetInteger64v")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetInteger64v(_hName, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 79);
}

void csOpenGL::fGetBooleani_v(gzUInt _hTarget, gzUInt _nIndex, gzBool* _pData){ gzStack gz_s( &OpenGL::zFuncName[11] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetBooleani_v", (sizeof("\0" "GzOpenGL::OpenGL::fGetBooleani_v")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetBooleani_v(_hTarget, _nIndex, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 84);
}

void csOpenGL::fGetIntegeri_v(gzUInt _hTarget, gzUInt _nIndex, gzFloat64* _pData){ gzStack gz_s( &OpenGL::zFuncName[12] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetIntegeri_v", (sizeof("\0" "GzOpenGL::OpenGL::fGetIntegeri_v")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetIntegeri_v(_hTarget, _nIndex, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 89);
}

void csOpenGL::fGetFloati_v(gzUInt _hTarget, gzUInt _nIndex, gzFloat32* _pData){ gzStack gz_s( &OpenGL::zFuncName[13] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetFloati_v", (sizeof("\0" "GzOpenGL::OpenGL::fGetFloati_v")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetFloati_v(_hTarget, _nIndex, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 94);
}

void csOpenGL::fGetDoublei_v(gzUInt _hTarget, gzUInt _nIndex, gzInt32* _pData){ gzStack gz_s( &OpenGL::zFuncName[14] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetDoublei_v", (sizeof("\0" "GzOpenGL::OpenGL::fGetDoublei_v")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetDoublei_v(_hTarget, _nIndex, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 99);
}

void csOpenGL::fGetInteger64i_v(gzUInt _hTarget, gzUInt _nIndex, gzInt64* _pData){ gzStack gz_s( &OpenGL::zFuncName[15] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetInteger64i_v", (sizeof("\0" "GzOpenGL::OpenGL::fGetInteger64i_v")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetInteger64i_v(_hTarget, _nIndex, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 104);
}

void csOpenGL::fVertexAttribPointer(gzVal _nIndex, Lib_GZ_OpenGL::OpenGL::eVecLength _hLength, Lib_GZ_OpenGL::OpenGL::eVarType _hType, gzBool _bNormalized, gzInt _nStride, gzUInt _nPointer){ gzStack gz_s( &OpenGL::zFuncName[16] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fVertexAttribPointer", (sizeof("\0" "GzOpenGL::OpenGL::fVertexAttribPointer")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fVertexAttribPointer(_nIndex, _hLength, _hType, _bNormalized, _nStride, _nPointer, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 109);
}

void csOpenGL::fVertexAttribDivisor(gzVal _nIndex, gzUInt _nDivisor){ gzStack gz_s( &OpenGL::zFuncName[17] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fVertexAttribDivisor", (sizeof("\0" "GzOpenGL::OpenGL::fVertexAttribDivisor")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fVertexAttribDivisor(_nIndex, _nDivisor, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 114);
}

void csOpenGL::fEnableVertexAttribArray(gzVal _nIndex){ gzStack gz_s( &OpenGL::zFuncName[18] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fEnableVertexAttribArray", (sizeof("\0" "GzOpenGL::OpenGL::fEnableVertexAttribArray")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fEnableVertexAttribArray(_nIndex, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 119);
}

void csOpenGL::fDisableVertexAttribArray(gzUInt _nIndex){ gzStack gz_s( &OpenGL::zFuncName[19] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fDisableVertexAttribArray", (sizeof("\0" "GzOpenGL::OpenGL::fDisableVertexAttribArray")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fDisableVertexAttribArray(_nIndex, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 124);
}

gzBool csOpenGL::fSwapIntervalEXT(gzInt _nInterval){ gzStack gz_s( &OpenGL::zFuncName[20] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fSwapIntervalEXT", (sizeof("\0" "GzOpenGL::OpenGL::fSwapIntervalEXT")/sizeof(gzUInt8)) - 2, true))); }
 return glDbg_fSwapIntervalEXT(_nInterval, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 129);
 return false;
}

void csOpenGL::fBlendEquation(gzUInt _eMode){ gzStack gz_s( &OpenGL::zFuncName[21] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBlendEquation", (sizeof("\0" "GzOpenGL::OpenGL::fBlendEquation")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBlendEquation(_eMode, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 135);
}

void csOpenGL::fBlendFuncSeparate(gzUInt _eSFactorRGB, gzUInt _eDFactorRGB, gzUInt _eSFactorAlpha, gzUInt _eDFactorAlpha){ gzStack gz_s( &OpenGL::zFuncName[22] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBlendFuncSeparate", (sizeof("\0" "GzOpenGL::OpenGL::fBlendFuncSeparate")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBlendFuncSeparate(_eSFactorRGB, _eDFactorRGB, _eSFactorAlpha, _eDFactorAlpha, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 140);
}

void csOpenGL::fBlendFunc(gzUInt _eSrcFactor, gzUInt _eDstFactor){ gzStack gz_s( &OpenGL::zFuncName[23] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBlendFunc", (sizeof("\0" "GzOpenGL::OpenGL::fBlendFunc")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBlendFunc(_eSrcFactor, _eDstFactor, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 145);
}

void csOpenGL::fGenVertexArrays(gzInt _nNb, gzUInt* _aArrays){ gzStack gz_s( &OpenGL::zFuncName[24] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGenVertexArrays", (sizeof("\0" "GzOpenGL::OpenGL::fGenVertexArrays")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGenVertexArrays(_nNb, _aArrays, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 150);
}

gzVal csOpenGL::fCreateBuffer(){ gzStack gz_s( &OpenGL::zFuncName[25] );





 gzVal _nVal;
 glDbg_fGenBuffers(1, &_nVal, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 160);
 return _nVal;

 return 0;;
}

void csOpenGL::fGenBuffers(gzInt _nNb, gzUInt* _aBuffers){ gzStack gz_s( &OpenGL::zFuncName[26] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGenBuffers", (sizeof("\0" "GzOpenGL::OpenGL::fGenBuffers")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGenBuffers(_nNb, _aBuffers, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 168);
}

void csOpenGL::fBindVertexArray(gzUInt _nVAO){ gzStack gz_s( &OpenGL::zFuncName[27] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBindVertexArray", (sizeof("\0" "GzOpenGL::OpenGL::fBindVertexArray")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBindVertexArray(_nVAO, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 173);
}

void csOpenGL::fBindBuffer(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzVal _nBuffer){ gzStack gz_s( &OpenGL::zFuncName[28] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBindBuffer", (sizeof("\0" "GzOpenGL::OpenGL::fBindBuffer")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBindBuffer(_hTarget, _nBuffer, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 178);
}

void csOpenGL::fBufferSubData(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzIntX _nOffset, gzIntX _nSize, void* _pData){ gzStack gz_s( &OpenGL::zFuncName[29] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBufferSubData", (sizeof("\0" "GzOpenGL::OpenGL::fBufferSubData")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBufferSubData(_hTarget, _nOffset, _nSize, _pData, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 183);
}

gzStr csOpenGL::fGetShaderInfoLog(gzVal _nShaderId){ gzStack gz_s( &OpenGL::zFuncName[30] );





 gzUInt8* _aLogBuff;
 gzInt _nLength;


 char logBuf[8024];
 _aLogBuff = (gzUInt8*)logBuf;
 glDbg_fGetShaderInfoLog(_nShaderId, sizeof(logBuf), &_nLength, (gzUInt8*)logBuf, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 198);

 return gzStrC(logBuf, _nLength);

 return (gzStr((gzUInt8*)"\0" "", (sizeof("\0" "")/sizeof(gzUInt8)) - 2, true));
}

void csOpenGL::fGetShaderInfoLog(gzVal _nShaderId, gzInt _nMaxLength, gzInt* _aLength, gzUInt8* _cLogInfo){ gzStack gz_s( &OpenGL::zFuncName[31] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetShaderInfoLog", (sizeof("\0" "GzOpenGL::OpenGL::fGetShaderInfoLog")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetShaderInfoLog(_nShaderId, _nMaxLength, _aLength, _cLogInfo, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 207);
}

gzVal csOpenGL::fCreateProgram(){ gzStack gz_s( &OpenGL::zFuncName[32] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fCreateProgram", (sizeof("\0" "GzOpenGL::OpenGL::fCreateProgram")/sizeof(gzUInt8)) - 2, true))); }
 return glDbg_fCreateProgram("_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 212);
 return 0;;
}

void csOpenGL::fLinkProgram(gzVal _nIdProgram){ gzStack gz_s( &OpenGL::zFuncName[33] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fLinkProgram", (sizeof("\0" "GzOpenGL::OpenGL::fLinkProgram")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fLinkProgram(_nIdProgram, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 218);
}

void csOpenGL::fGetProgramParameter(gzVal _nShaderId, Lib_GZ_OpenGL::OpenGL::eProgramInfo _hInfo, gzInt* _aParams){ gzStack gz_s( &OpenGL::zFuncName[34] );




 glDbg_fGetProgramiv(_nShaderId, _hInfo, _aParams, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 226);

}

void csOpenGL::fGetProgramiv(gzVal _nIdProgram, Lib_GZ_OpenGL::OpenGL::eProgramInfo _hInfo, gzInt* _aParams){ gzStack gz_s( &OpenGL::zFuncName[35] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetProgramiv", (sizeof("\0" "GzOpenGL::OpenGL::fGetProgramiv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetProgramiv(_nIdProgram, _hInfo, _aParams, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 232);
}

void csOpenGL::fUseProgram(gzVal _nIdProgram){ gzStack gz_s( &OpenGL::zFuncName[36] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUseProgram", (sizeof("\0" "GzOpenGL::OpenGL::fUseProgram")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUseProgram(_nIdProgram, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 237);
}

void csOpenGL::fDeleteProgram(gzVal _nIdProgram){ gzStack gz_s( &OpenGL::zFuncName[37] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fDeleteProgram", (sizeof("\0" "GzOpenGL::OpenGL::fDeleteProgram")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fDeleteProgram(_nIdProgram, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 242);
}

void csOpenGL::fGetProgramInfoLog(gzVal _nProgramId, gzInt _nMaxLength, gzInt* _aLength, gzUInt8* _cLogInfo){ gzStack gz_s( &OpenGL::zFuncName[38] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetProgramInfoLog", (sizeof("\0" "GzOpenGL::OpenGL::fGetProgramInfoLog")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetProgramInfoLog(_nProgramId, _nMaxLength, _aLength, _cLogInfo, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 247);
}

gzVal csOpenGL::fGetUniformLocation(gzVal _nIdProgram, gzUInt8* _cName){ gzStack gz_s( &OpenGL::zFuncName[39] );





 return glDbg_fGetUniformLocation(_nIdProgram, _cName, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 256);
 return 0;;
}

gzVal csOpenGL::fGetAttribLocation(gzVal _nIdProgram, gzUInt8* _cName){ gzStack gz_s( &OpenGL::zFuncName[40] );





 return glDbg_fGetAttribLocation(_nIdProgram, _cName, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 266);
 return 0;;
}

void csOpenGL::fBindAttribLocation(gzVal _nIdProgram, gzUInt _nIndex, gzUInt8* _cName){ gzStack gz_s( &OpenGL::zFuncName[41] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBindAttribLocation", (sizeof("\0" "GzOpenGL::OpenGL::fBindAttribLocation")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBindAttribLocation(_nIdProgram, _nIndex, _cName, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 272);
}

gzVal csOpenGL::fCreateShader(Lib_GZ_OpenGL::OpenGL::eShader _hType){ gzStack gz_s( &OpenGL::zFuncName[42] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fCreateShader", (sizeof("\0" "GzOpenGL::OpenGL::fCreateShader")/sizeof(gzUInt8)) - 2, true))); }
 return glDbg_fCreateShader(_hType, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 277);
 return 0;;
}

void csOpenGL::fShaderSource(gzVal _nShaderId, const gzStr& _sSourceCode){ gzStack gz_s( &OpenGL::zFuncName[43] );

 const gzUInt8* _cStr = _sSourceCode.fcStr();




 glDbg_fShaderSource(_nShaderId, 1, (gzUInt8**)&_cStr, 0, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 288);

}

void csOpenGL::fShaderSource(gzVal _nShaderId, gzInt _nCount, gzUInt8** _cSourceCode, gzInt* _pLength){ gzStack gz_s( &OpenGL::zFuncName[44] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fShaderSource", (sizeof("\0" "GzOpenGL::OpenGL::fShaderSource")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fShaderSource(_nShaderId, _nCount, _cSourceCode, _pLength, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 294);
}

void csOpenGL::fCompileShader(gzVal _nShaderId){ gzStack gz_s( &OpenGL::zFuncName[45] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fCompileShader", (sizeof("\0" "GzOpenGL::OpenGL::fCompileShader")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fCompileShader(_nShaderId, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 299);
}

gzUInt csOpenGL::fGetShaderParameter(gzVal _nShaderId, Lib_GZ_OpenGL::OpenGL::eShaderInfo _hInfo){ gzStack gz_s( &OpenGL::zFuncName[46] );




 gzInt _nParam;
 glDbg_fGetShaderiv(_nShaderId, _hInfo, &_nParam, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 308);
 return _nParam;

 return 0;
}

void csOpenGL::fGetShaderiv(gzVal _nShaderId, Lib_GZ_OpenGL::OpenGL::eShaderInfo _hInfo, gzInt* _aParams){ gzStack gz_s( &OpenGL::zFuncName[47] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetShaderiv", (sizeof("\0" "GzOpenGL::OpenGL::fGetShaderiv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGetShaderiv(_nShaderId, _hInfo, _aParams, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 316);
}

void csOpenGL::fDeleteShader(gzVal _nShaderId){ gzStack gz_s( &OpenGL::zFuncName[48] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fDeleteShader", (sizeof("\0" "GzOpenGL::OpenGL::fDeleteShader")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fDeleteShader(_nShaderId, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 321);
}

void csOpenGL::fAttachShader(gzVal _nIdProgram, gzVal _nShaderId){ gzStack gz_s( &OpenGL::zFuncName[49] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fAttachShader", (sizeof("\0" "GzOpenGL::OpenGL::fAttachShader")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fAttachShader(_nIdProgram, _nShaderId, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 326);
}

void csOpenGL::fActiveTexture(gzUInt _eTexture){ gzStack gz_s( &OpenGL::zFuncName[50] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fActiveTexture", (sizeof("\0" "GzOpenGL::OpenGL::fActiveTexture")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fActiveTexture(_eTexture, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 331);
}

void csOpenGL::fTexImage2D(gzUInt _eTarget, gzInt _nLevel, gzInt _nInternalformat, gzInt _nWidth, gzInt _nHeight, gzInt _nBorder, gzUInt _eFormat, gzUInt _eType, void* _pPixel){ gzStack gz_s( &OpenGL::zFuncName[51] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fTexImage2D", (sizeof("\0" "GzOpenGL::OpenGL::fTexImage2D")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fTexImage2D(_eTarget, _nLevel, _nInternalformat, _nWidth, _nHeight, _nBorder, _eFormat, _eType, _pPixel, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 336);
}

void csOpenGL::fTexImage3D(gzUInt _eTarget, gzInt _nLevel, gzInt _nInternalformat, gzInt _nWidth, gzInt _nHeight, gzInt _nDepth, gzInt _nBorder, gzUInt _eFormat, gzUInt _eType, void* _pPixel){ gzStack gz_s( &OpenGL::zFuncName[52] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fTexImage3D", (sizeof("\0" "GzOpenGL::OpenGL::fTexImage3D")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fTexImage3D(_eTarget, _nLevel, _nInternalformat, _nWidth, _nHeight, _nDepth, _nBorder, _eFormat, _eType, _pPixel, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 341);
}

void csOpenGL::fTexSubImage3D(gzUInt _eTarget, gzInt _nLevel, gzInt _nOffsetX, gzInt _nOffsetY, gzInt _nOffsetZ, gzInt _nWidth, gzInt _nHeight, gzInt _nDepth, gzUInt _eFormat, gzUInt _eType, void* _pPixel){ gzStack gz_s( &OpenGL::zFuncName[53] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fTexSubImage3D", (sizeof("\0" "GzOpenGL::OpenGL::fTexSubImage3D")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fTexSubImage3D(_eTarget, _nLevel, _nOffsetX, _nOffsetY, _nOffsetZ, _nWidth, _nHeight, _nDepth, _eFormat, _eType, _pPixel, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 346);
}

void csOpenGL::fBindTexture(gzUInt _eTarget, gzUInt _nTextureId){ gzStack gz_s( &OpenGL::zFuncName[54] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBindTexture", (sizeof("\0" "GzOpenGL::OpenGL::fBindTexture")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBindTexture(_eTarget, _nTextureId, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 351);
}

void csOpenGL::fTexParameterf(gzUInt _eTarget, gzUInt _eName, gzFloat32 _nParam){ gzStack gz_s( &OpenGL::zFuncName[55] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fTexParameterf", (sizeof("\0" "GzOpenGL::OpenGL::fTexParameterf")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fTexParameterf(_eTarget, _eName, _nParam, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 356);
}

void csOpenGL::fTexParameteri(gzUInt _eTarget, gzUInt _eName, gzInt _nParam){ gzStack gz_s( &OpenGL::zFuncName[56] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fTexParameteri", (sizeof("\0" "GzOpenGL::OpenGL::fTexParameteri")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fTexParameteri(_eTarget, _eName, _nParam, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 361);
}

void csOpenGL::fGenTextures(gzInt _nNb, gzUInt* _aTextures){ gzStack gz_s( &OpenGL::zFuncName[57] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGenTextures", (sizeof("\0" "GzOpenGL::OpenGL::fGenTextures")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGenTextures(_nNb, _aTextures, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 366);
}

void csOpenGL::fClear(Lib_GZ_OpenGL::OpenGL::eClearBuffer _hMask){ gzStack gz_s( &OpenGL::zFuncName[58] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fClear", (sizeof("\0" "GzOpenGL::OpenGL::fClear")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fClear(_hMask, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 371);
}

void csOpenGL::fClearColor(gzFloat32 _nRed, gzFloat32 _nGreen, gzFloat32 _nBlue, gzFloat32 _nAlpha){ gzStack gz_s( &OpenGL::zFuncName[59] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fClearColor", (sizeof("\0" "GzOpenGL::OpenGL::fClearColor")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fClearColor(_nRed, _nGreen, _nBlue, _nAlpha, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 376);
}

void csOpenGL::fBufferData(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzUInt _nNb, Lib_GZ_OpenGL::OpenGL::eTypeSize _hType, const gzFData<gzUInt8>& _pData, Lib_GZ_OpenGL::OpenGL::eDrawFlow _hUsage){ gzStack gz_s( &OpenGL::zFuncName[60] );

 fBufferData(Lib_GZ_OpenGL::OpenGL::eBufferTarget(_hTarget), _nNb * _hType, (void*)_pData.array, _hUsage);
}

void csOpenGL::fBufferData(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzIntX _nSize, void* _pData, Lib_GZ_OpenGL::OpenGL::eDrawFlow _hUsage){ gzStack gz_s( &OpenGL::zFuncName[61] );






 _pData = (void*)((gzDataRoot*)_pData)->aTab;

 glDbg_fBufferData(_hTarget, _nSize, _pData, _hUsage, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 393);
}

void csOpenGL::fDrawElements(Lib_GZ_OpenGL::OpenGL::eDrawMode _hMode, gzInt _nCount, Lib_GZ_OpenGL::OpenGL::eVarType _hVarType, void* _pOffset){ gzStack gz_s( &OpenGL::zFuncName[62] );






 glDbg_fDrawElements(_hMode, _nCount, _hVarType, _pOffset, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 403);
}

void csOpenGL::fDrawElementsInstanced(Lib_GZ_OpenGL::OpenGL::eDrawMode _hMode, gzInt _nCount, Lib_GZ_OpenGL::OpenGL::eVarType _hVarType, void* _pIndicesLocation, gzInt _nInstanceCount){ gzStack gz_s( &OpenGL::zFuncName[63] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fDrawElementsInstanced", (sizeof("\0" "GzOpenGL::OpenGL::fDrawElementsInstanced")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fDrawElementsInstanced(_hMode, _nCount, _hVarType, _pIndicesLocation, _nInstanceCount, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 408);
}

void csOpenGL::fGenFramebuffers(gzInt _nNb, gzUInt* _aFrameBuffers){ gzStack gz_s( &OpenGL::zFuncName[64] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGenFramebuffers", (sizeof("\0" "GzOpenGL::OpenGL::fGenFramebuffers")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGenFramebuffers(_nNb, _aFrameBuffers, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 413);
}

void csOpenGL::fBindFramebuffer(gzUInt _eTarget, gzUInt _nFrameBufferId){ gzStack gz_s( &OpenGL::zFuncName[65] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBindFramebuffer", (sizeof("\0" "GzOpenGL::OpenGL::fBindFramebuffer")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBindFramebuffer(_eTarget, _nFrameBufferId, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 418);
}

void csOpenGL::fGenRenderbuffers(gzInt _nNb, gzUInt* _aRenderBuffers){ gzStack gz_s( &OpenGL::zFuncName[66] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGenRenderbuffers", (sizeof("\0" "GzOpenGL::OpenGL::fGenRenderbuffers")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fGenRenderbuffers(_nNb, _aRenderBuffers, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 423);
}

void csOpenGL::fBindRenderbuffer(gzUInt _eTarget, gzUInt _nRenderBufferId){ gzStack gz_s( &OpenGL::zFuncName[67] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBindRenderbuffer", (sizeof("\0" "GzOpenGL::OpenGL::fBindRenderbuffer")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBindRenderbuffer(_eTarget, _nRenderBufferId, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 428);
}

void csOpenGL::fRenderbufferStorage(gzUInt _eTarget, gzUInt _eInternalFormat, gzInt _nWidth, gzInt _nHeight){ gzStack gz_s( &OpenGL::zFuncName[68] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fRenderbufferStorage", (sizeof("\0" "GzOpenGL::OpenGL::fRenderbufferStorage")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fRenderbufferStorage(_eTarget, _eInternalFormat, _nWidth, _nHeight, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 433);
}

void csOpenGL::fFramebufferTexture2D(gzUInt _eTarget, gzUInt _eAttachement, gzUInt _eTextureTarget, gzUInt _nTexture, gzInt _nLevel){ gzStack gz_s( &OpenGL::zFuncName[69] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fFramebufferTexture2D", (sizeof("\0" "GzOpenGL::OpenGL::fFramebufferTexture2D")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fFramebufferTexture2D(_eTarget, _eAttachement, _eTextureTarget, _nTexture, _nLevel, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 438);
}

void csOpenGL::fFramebufferRenderbuffer(gzUInt _eTarget, gzUInt _eAttachement, gzUInt _eRenderBufferTarget, gzUInt _nRenderBufferId){ gzStack gz_s( &OpenGL::zFuncName[70] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fFramebufferRenderbuffer", (sizeof("\0" "GzOpenGL::OpenGL::fFramebufferRenderbuffer")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fFramebufferRenderbuffer(_eTarget, _eAttachement, _eRenderBufferTarget, _nRenderBufferId, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 443);
}

gzUInt csOpenGL::fCheckFramebufferStatus(gzUInt _eTarget){ gzStack gz_s( &OpenGL::zFuncName[71] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fCheckFramebufferStatus", (sizeof("\0" "GzOpenGL::OpenGL::fCheckFramebufferStatus")/sizeof(gzUInt8)) - 2, true))); }
 return glDbg_fCheckFramebufferStatus(_eTarget, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 448);
 return 0;
}

void csOpenGL::fDeleteBuffers(gzInt _nNb, gzUInt* _aBuffers){ gzStack gz_s( &OpenGL::zFuncName[72] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fDeleteBuffers", (sizeof("\0" "GzOpenGL::OpenGL::fDeleteBuffers")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fDeleteBuffers(_nNb, _aBuffers, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 454);
}

void csOpenGL::fUniform1f(gzVal _nLocation, gzFloat32 _n0){ gzStack gz_s( &OpenGL::zFuncName[73] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform1f", (sizeof("\0" "GzOpenGL::OpenGL::fUniform1f")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform1f(_nLocation, _n0, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 459);
}

void csOpenGL::fUniform2f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1){ gzStack gz_s( &OpenGL::zFuncName[74] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform2f", (sizeof("\0" "GzOpenGL::OpenGL::fUniform2f")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform2f(_nLocation, _n0, _n1, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 464);
}

void csOpenGL::fUniform3f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, gzFloat32 _n2){ gzStack gz_s( &OpenGL::zFuncName[75] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform3f", (sizeof("\0" "GzOpenGL::OpenGL::fUniform3f")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform3f(_nLocation, _n0, _n1, _n2, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 469);
}

void csOpenGL::fUniform4f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, gzFloat32 _n2, gzFloat32 _n3){ gzStack gz_s( &OpenGL::zFuncName[76] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform4f", (sizeof("\0" "GzOpenGL::OpenGL::fUniform4f")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform4f(_nLocation, _n0, _n1, _n2, _n3, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 474);
}

void csOpenGL::fUniform1i(gzVal _nLocation, gzInt32 _n0){ gzStack gz_s( &OpenGL::zFuncName[77] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform1i", (sizeof("\0" "GzOpenGL::OpenGL::fUniform1i")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform1i(_nLocation, _n0, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 479);
}

void csOpenGL::fUniform2i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1){ gzStack gz_s( &OpenGL::zFuncName[78] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform2i", (sizeof("\0" "GzOpenGL::OpenGL::fUniform2i")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform2i(_nLocation, _n0, _n1, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 484);
}

void csOpenGL::fUniform3i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, gzInt32 _n2){ gzStack gz_s( &OpenGL::zFuncName[79] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform3i", (sizeof("\0" "GzOpenGL::OpenGL::fUniform3i")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform3i(_nLocation, _n0, _n1, _n2, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 489);
}

void csOpenGL::fUniform4i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, gzInt32 _n2, gzInt32 _n3){ gzStack gz_s( &OpenGL::zFuncName[80] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform4i", (sizeof("\0" "GzOpenGL::OpenGL::fUniform4i")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform4i(_nLocation, _n0, _n1, _n2, _n3, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 494);
}

void csOpenGL::fUniform1fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[81] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform1fv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform1fv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform1fv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 499);
}

void csOpenGL::fUniform2fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[82] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform2fv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform2fv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform2fv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 504);
}

void csOpenGL::fUniform3fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[83] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform3fv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform3fv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform3fv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 509);
}

void csOpenGL::fUniform4fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[84] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform4fv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform4fv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform4fv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 514);
}

void csOpenGL::fUniform1iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[85] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform1iv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform1iv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform1iv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 519);
}

void csOpenGL::fUniform2iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[86] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform2iv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform2iv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform2iv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 524);
}

void csOpenGL::fUniform3iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[87] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform3iv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform3iv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform3iv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 529);
}

void csOpenGL::fUniform4iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[88] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform4iv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform4iv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform4iv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 534);
}

void csOpenGL::fUniformMatrix2fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[89] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix2fv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix2fv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix2fv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 539);
}

void csOpenGL::fUniformMatrix3fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[90] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix3fv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix3fv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix3fv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 544);
}

void csOpenGL::fUniformMatrix4fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[91] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix4fv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix4fv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix4fv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 549);
}

void csOpenGL::fUniform1d(gzVal _nLocation, gzFloat64 _nX){ gzStack gz_s( &OpenGL::zFuncName[92] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform1d", (sizeof("\0" "GzOpenGL::OpenGL::fUniform1d")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform1d(_nLocation, _nX, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 554);
}

void csOpenGL::fUniform2d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY){ gzStack gz_s( &OpenGL::zFuncName[93] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform2d", (sizeof("\0" "GzOpenGL::OpenGL::fUniform2d")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform2d(_nLocation, _nX, _nY, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 559);
}

void csOpenGL::fUniform3d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, gzFloat64 _nZ){ gzStack gz_s( &OpenGL::zFuncName[94] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform3d", (sizeof("\0" "GzOpenGL::OpenGL::fUniform3d")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform3d(_nLocation, _nX, _nY, _nZ, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 564);
}

void csOpenGL::fUniform4d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, gzFloat64 _nZ, gzFloat64 _nW){ gzStack gz_s( &OpenGL::zFuncName[95] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform4d", (sizeof("\0" "GzOpenGL::OpenGL::fUniform4d")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform4d(_nLocation, _nX, _nY, _nZ, _nW, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 569);
}

void csOpenGL::fUniform1dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[96] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform1dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform1dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform1dv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 574);
}

void csOpenGL::fUniform2dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[97] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform2dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform2dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform2dv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 579);
}

void csOpenGL::fUniform3dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[98] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform3dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform3dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform3dv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 584);
}

void csOpenGL::fUniform4dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[99] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform4dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform4dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform4dv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 589);
}

void csOpenGL::fUniformMatrix2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[100] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix2dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix2dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix2dv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 594);
}

void csOpenGL::fUniformMatrix3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[101] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix3dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix3dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix3dv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 599);
}

void csOpenGL::fUniformMatrix4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[102] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix4dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix4dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix4dv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 604);
}

void csOpenGL::fUniformMatrix2x3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[103] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix2x3dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix2x3dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix2x3dv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 609);
}

void csOpenGL::fUniformMatrix2x4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[104] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix2x4dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix2x4dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix2x4dv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 614);
}

void csOpenGL::fUniformMatrix3x2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[105] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix3x2dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix3x2dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix3x2dv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 619);
}

void csOpenGL::fUniformMatrix3x4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[106] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix3x4dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix3x4dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix3x4dv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 624);
}

void csOpenGL::fUniformMatrix4x2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[107] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix4x2dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix4x2dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix4x2dv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 629);
}

void csOpenGL::fUniformMatrix4x3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue){ gzStack gz_s( &OpenGL::zFuncName[108] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformMatrix4x3dv", (sizeof("\0" "GzOpenGL::OpenGL::fUniformMatrix4x3dv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformMatrix4x3dv(_nLocation, _nCount, _bTranspose, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 634);
}

void csOpenGL::fUniform1ui(gzVal _nLocation, gzUInt32 _n0){ gzStack gz_s( &OpenGL::zFuncName[109] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform1ui", (sizeof("\0" "GzOpenGL::OpenGL::fUniform1ui")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform1ui(_nLocation, _n0, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 639);
}

void csOpenGL::fUniform2ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1){ gzStack gz_s( &OpenGL::zFuncName[110] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform2ui", (sizeof("\0" "GzOpenGL::OpenGL::fUniform2ui")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform2ui(_nLocation, _n0, _n1, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 644);
}

void csOpenGL::fUniform3ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, gzUInt32 _n2){ gzStack gz_s( &OpenGL::zFuncName[111] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform3ui", (sizeof("\0" "GzOpenGL::OpenGL::fUniform3ui")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform3ui(_nLocation, _n0, _n1, _n2, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 649);
}

void csOpenGL::fUniform4ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, gzUInt32 _n2, gzUInt32 _n3){ gzStack gz_s( &OpenGL::zFuncName[112] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform4ui", (sizeof("\0" "GzOpenGL::OpenGL::fUniform4ui")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform4ui(_nLocation, _n0, _n1, _n2, _n3, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 654);
}

void csOpenGL::fUniform1uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[113] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform1uiv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform1uiv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform1uiv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 659);
}

void csOpenGL::fUniform2uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[114] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform2uiv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform2uiv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform2uiv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 664);
}

void csOpenGL::fUniform3uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[115] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform3uiv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform3uiv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform3uiv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 669);
}

void csOpenGL::fUniform4uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue){ gzStack gz_s( &OpenGL::zFuncName[116] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniform4uiv", (sizeof("\0" "GzOpenGL::OpenGL::fUniform4uiv")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniform4uiv(_nLocation, _nCount, _aValue, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 674);
}

gzUInt csOpenGL::fGetUniformBlockIndex(gzUInt _nPorgramId, gzUInt8* _cUboName){ gzStack gz_s( &OpenGL::zFuncName[117] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fGetUniformBlockIndex", (sizeof("\0" "GzOpenGL::OpenGL::fGetUniformBlockIndex")/sizeof(gzUInt8)) - 2, true))); }
 return glDbg_fGetUniformBlockIndex(_nPorgramId, _cUboName, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 679);
 return 0;
}

void csOpenGL::fBindBufferBase(gzUInt _eTarget, gzUInt _nIndex, gzUInt _nBuffer){ gzStack gz_s( &OpenGL::zFuncName[118] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fBindBufferBase", (sizeof("\0" "GzOpenGL::OpenGL::fBindBufferBase")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fBindBufferBase(_eTarget, _nIndex, _nBuffer, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 685);
}

void csOpenGL::fUniformBlockBinding(gzUInt _nPorgramId, gzUInt _nUniformBlickId, gzUInt _nBindPoint){ gzStack gz_s( &OpenGL::zFuncName[119] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpenGL::fUniformBlockBinding", (sizeof("\0" "GzOpenGL::OpenGL::fUniformBlockBinding")/sizeof(gzUInt8)) - 2, true))); }
 glDbg_fUniformBlockBinding(_nPorgramId, _nUniformBlickId, _nBindPoint, "_Lib/GZE/SubLib_System\\Lib_GZ_OpenGL/OpenGL.cpp", 690);
}

cOpenGL::cOpenGL(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent){

}

void cOpenGL::Ini_cOpenGL(){ gzStack gz_s( &OpenGL::zFuncName[120] );
 Ini_cClass();
}

gzAny cOpenGL::MemCopy(){
return (gzAny)new cOpenGL(*this);
}
gzAny cOpenGL::DeepCopy(){
return (gzAny)new cOpenGL(*this, true);
}
cOpenGL::~cOpenGL(){
}



}
FUNC_fGetError glCall_fGetError = 0;
FUNC_fFlush glCall_fFlush = 0;
FUNC_fEnable glCall_fEnable = 0;
FUNC_fDisable glCall_fDisable = 0;
FUNC_fDepthMask glCall_fDepthMask = 0;
FUNC_fDepthFunc glCall_fDepthFunc = 0;
FUNC_fGetBooleanv glCall_fGetBooleanv = 0;
FUNC_fGetDoublev glCall_fGetDoublev = 0;
FUNC_fGetFloatv glCall_fGetFloatv = 0;
FUNC_fGetIntegerv glCall_fGetIntegerv = 0;
FUNC_fGetInteger64v glCall_fGetInteger64v = 0;
FUNC_fGetBooleani_v glCall_fGetBooleani_v = 0;
FUNC_fGetIntegeri_v glCall_fGetIntegeri_v = 0;
FUNC_fGetFloati_v glCall_fGetFloati_v = 0;
FUNC_fGetDoublei_v glCall_fGetDoublei_v = 0;
FUNC_fGetInteger64i_v glCall_fGetInteger64i_v = 0;
FUNC_fVertexAttribPointer glCall_fVertexAttribPointer = 0;
FUNC_fVertexAttribDivisor glCall_fVertexAttribDivisor = 0;
FUNC_fEnableVertexAttribArray glCall_fEnableVertexAttribArray = 0;
FUNC_fDisableVertexAttribArray glCall_fDisableVertexAttribArray = 0;
FUNC_fSwapIntervalEXT glCall_fSwapIntervalEXT = 0;
FUNC_fBlendEquation glCall_fBlendEquation = 0;
FUNC_fBlendFuncSeparate glCall_fBlendFuncSeparate = 0;
FUNC_fBlendFunc glCall_fBlendFunc = 0;
FUNC_fGenVertexArrays glCall_fGenVertexArrays = 0;
FUNC_fGenBuffers glCall_fGenBuffers = 0;
FUNC_fBindVertexArray glCall_fBindVertexArray = 0;
FUNC_fBindBuffer glCall_fBindBuffer = 0;
FUNC_fBufferSubData glCall_fBufferSubData = 0;
FUNC_fGetShaderInfoLog glCall_fGetShaderInfoLog = 0;
FUNC_fCreateProgram glCall_fCreateProgram = 0;
FUNC_fLinkProgram glCall_fLinkProgram = 0;
FUNC_fGetProgramiv glCall_fGetProgramiv = 0;
FUNC_fUseProgram glCall_fUseProgram = 0;
FUNC_fDeleteProgram glCall_fDeleteProgram = 0;
FUNC_fGetProgramInfoLog glCall_fGetProgramInfoLog = 0;
FUNC_fGetUniformLocation glCall_fGetUniformLocation = 0;
FUNC_fGetAttribLocation glCall_fGetAttribLocation = 0;
FUNC_fBindAttribLocation glCall_fBindAttribLocation = 0;
FUNC_fCreateShader glCall_fCreateShader = 0;
FUNC_fShaderSource glCall_fShaderSource = 0;
FUNC_fCompileShader glCall_fCompileShader = 0;
FUNC_fGetShaderiv glCall_fGetShaderiv = 0;
FUNC_fDeleteShader glCall_fDeleteShader = 0;
FUNC_fAttachShader glCall_fAttachShader = 0;
FUNC_fActiveTexture glCall_fActiveTexture = 0;
FUNC_fTexImage2D glCall_fTexImage2D = 0;
FUNC_fTexImage3D glCall_fTexImage3D = 0;
FUNC_fTexSubImage3D glCall_fTexSubImage3D = 0;
FUNC_fBindTexture glCall_fBindTexture = 0;
FUNC_fTexParameterf glCall_fTexParameterf = 0;
FUNC_fTexParameteri glCall_fTexParameteri = 0;
FUNC_fGenTextures glCall_fGenTextures = 0;
FUNC_fClear glCall_fClear = 0;
FUNC_fClearColor glCall_fClearColor = 0;
FUNC_fBufferData glCall_fBufferData = 0;
FUNC_fDrawElements glCall_fDrawElements = 0;
FUNC_fDrawElementsInstanced glCall_fDrawElementsInstanced = 0;
FUNC_fGenFramebuffers glCall_fGenFramebuffers = 0;
FUNC_fBindFramebuffer glCall_fBindFramebuffer = 0;
FUNC_fGenRenderbuffers glCall_fGenRenderbuffers = 0;
FUNC_fBindRenderbuffer glCall_fBindRenderbuffer = 0;
FUNC_fRenderbufferStorage glCall_fRenderbufferStorage = 0;
FUNC_fFramebufferTexture2D glCall_fFramebufferTexture2D = 0;
FUNC_fFramebufferRenderbuffer glCall_fFramebufferRenderbuffer = 0;
FUNC_fCheckFramebufferStatus glCall_fCheckFramebufferStatus = 0;
FUNC_fDeleteBuffers glCall_fDeleteBuffers = 0;
FUNC_fUniform1f glCall_fUniform1f = 0;
FUNC_fUniform2f glCall_fUniform2f = 0;
FUNC_fUniform3f glCall_fUniform3f = 0;
FUNC_fUniform4f glCall_fUniform4f = 0;
FUNC_fUniform1i glCall_fUniform1i = 0;
FUNC_fUniform2i glCall_fUniform2i = 0;
FUNC_fUniform3i glCall_fUniform3i = 0;
FUNC_fUniform4i glCall_fUniform4i = 0;
FUNC_fUniform1fv glCall_fUniform1fv = 0;
FUNC_fUniform2fv glCall_fUniform2fv = 0;
FUNC_fUniform3fv glCall_fUniform3fv = 0;
FUNC_fUniform4fv glCall_fUniform4fv = 0;
FUNC_fUniform1iv glCall_fUniform1iv = 0;
FUNC_fUniform2iv glCall_fUniform2iv = 0;
FUNC_fUniform3iv glCall_fUniform3iv = 0;
FUNC_fUniform4iv glCall_fUniform4iv = 0;
FUNC_fUniformMatrix2fv glCall_fUniformMatrix2fv = 0;
FUNC_fUniformMatrix3fv glCall_fUniformMatrix3fv = 0;
FUNC_fUniformMatrix4fv glCall_fUniformMatrix4fv = 0;
FUNC_fUniform1d glCall_fUniform1d = 0;
FUNC_fUniform2d glCall_fUniform2d = 0;
FUNC_fUniform3d glCall_fUniform3d = 0;
FUNC_fUniform4d glCall_fUniform4d = 0;
FUNC_fUniform1dv glCall_fUniform1dv = 0;
FUNC_fUniform2dv glCall_fUniform2dv = 0;
FUNC_fUniform3dv glCall_fUniform3dv = 0;
FUNC_fUniform4dv glCall_fUniform4dv = 0;
FUNC_fUniformMatrix2dv glCall_fUniformMatrix2dv = 0;
FUNC_fUniformMatrix3dv glCall_fUniformMatrix3dv = 0;
FUNC_fUniformMatrix4dv glCall_fUniformMatrix4dv = 0;
FUNC_fUniformMatrix2x3dv glCall_fUniformMatrix2x3dv = 0;
FUNC_fUniformMatrix2x4dv glCall_fUniformMatrix2x4dv = 0;
FUNC_fUniformMatrix3x2dv glCall_fUniformMatrix3x2dv = 0;
FUNC_fUniformMatrix3x4dv glCall_fUniformMatrix3x4dv = 0;
FUNC_fUniformMatrix4x2dv glCall_fUniformMatrix4x2dv = 0;
FUNC_fUniformMatrix4x3dv glCall_fUniformMatrix4x3dv = 0;
FUNC_fUniform1ui glCall_fUniform1ui = 0;
FUNC_fUniform2ui glCall_fUniform2ui = 0;
FUNC_fUniform3ui glCall_fUniform3ui = 0;
FUNC_fUniform4ui glCall_fUniform4ui = 0;
FUNC_fUniform1uiv glCall_fUniform1uiv = 0;
FUNC_fUniform2uiv glCall_fUniform2uiv = 0;
FUNC_fUniform3uiv glCall_fUniform3uiv = 0;
FUNC_fUniform4uiv glCall_fUniform4uiv = 0;
FUNC_fGetUniformBlockIndex glCall_fGetUniformBlockIndex = 0;
FUNC_fBindBufferBase glCall_fBindBufferBase = 0;
FUNC_fUniformBlockBinding glCall_fUniformBlockBinding = 0;


gzBool Lib_GZ_OpenGL::SysGpuFunc::fGetGpuFunctions(){

using namespace SysGpuFunc;
glCall_fGetError = (FUNC_fGetError)fGetFuncGL("glGetError");
glCall_fFlush = (FUNC_fFlush)fGetFuncGL("glFlush");
glCall_fEnable = (FUNC_fEnable)fGetFuncGL("glEnable");
glCall_fDisable = (FUNC_fDisable)fGetFuncGL("glDisable");
glCall_fDepthMask = (FUNC_fDepthMask)fGetFuncGL("glDepthMask");
glCall_fDepthFunc = (FUNC_fDepthFunc)fGetFuncGL("glDepthFunc");
glCall_fGetBooleanv = (FUNC_fGetBooleanv)fGetFuncGL("glGetBooleanv");
glCall_fGetDoublev = (FUNC_fGetDoublev)fGetFuncGL("glGetDoublev");
glCall_fGetFloatv = (FUNC_fGetFloatv)fGetFuncGL("glGetFloatv");
glCall_fGetIntegerv = (FUNC_fGetIntegerv)fGetFuncGL("glGetIntegerv");
glCall_fGetInteger64v = (FUNC_fGetInteger64v)fGetFuncGL("glGetInteger64v");
glCall_fGetBooleani_v = (FUNC_fGetBooleani_v)fGetFuncGL("glGetBooleani_v");
glCall_fGetIntegeri_v = (FUNC_fGetIntegeri_v)fGetFuncGL("glGetIntegeri_v");
glCall_fGetFloati_v = (FUNC_fGetFloati_v)fGetFuncGL("glGetFloati_v");
glCall_fGetDoublei_v = (FUNC_fGetDoublei_v)fGetFuncGL("glGetDoublei_v");
glCall_fGetInteger64i_v = (FUNC_fGetInteger64i_v)fGetFuncGL("glGetInteger64i_v");
glCall_fVertexAttribPointer = (FUNC_fVertexAttribPointer)fGetFuncGL("glVertexAttribPointer");
glCall_fVertexAttribDivisor = (FUNC_fVertexAttribDivisor)fGetFuncGL("glVertexAttribDivisor");
glCall_fEnableVertexAttribArray = (FUNC_fEnableVertexAttribArray)fGetFuncGL("glEnableVertexAttribArray");
glCall_fDisableVertexAttribArray = (FUNC_fDisableVertexAttribArray)fGetFuncGL("glDisableVertexAttribArray");
glCall_fSwapIntervalEXT = (FUNC_fSwapIntervalEXT)fGetFuncGL("wglSwapIntervalEXT");
glCall_fBlendEquation = (FUNC_fBlendEquation)fGetFuncGL("glBlendEquation");
glCall_fBlendFuncSeparate = (FUNC_fBlendFuncSeparate)fGetFuncGL("glBlendFuncSeparate");
glCall_fBlendFunc = (FUNC_fBlendFunc)fGetFuncGL("glBlendFunc");
glCall_fGenVertexArrays = (FUNC_fGenVertexArrays)fGetFuncGL("glGenVertexArrays");
glCall_fGenBuffers = (FUNC_fGenBuffers)fGetFuncGL("glGenBuffers");
glCall_fBindVertexArray = (FUNC_fBindVertexArray)fGetFuncGL("glBindVertexArray");
glCall_fBindBuffer = (FUNC_fBindBuffer)fGetFuncGL("glBindBuffer");
glCall_fBufferSubData = (FUNC_fBufferSubData)fGetFuncGL("glBufferSubData");
glCall_fGetShaderInfoLog = (FUNC_fGetShaderInfoLog)fGetFuncGL("glGetShaderInfoLog");
glCall_fCreateProgram = (FUNC_fCreateProgram)fGetFuncGL("glCreateProgram");
glCall_fLinkProgram = (FUNC_fLinkProgram)fGetFuncGL("glLinkProgram");
glCall_fGetProgramiv = (FUNC_fGetProgramiv)fGetFuncGL("glGetProgramiv");
glCall_fUseProgram = (FUNC_fUseProgram)fGetFuncGL("glUseProgram");
glCall_fDeleteProgram = (FUNC_fDeleteProgram)fGetFuncGL("glDeleteProgram");
glCall_fGetProgramInfoLog = (FUNC_fGetProgramInfoLog)fGetFuncGL("glGetProgramInfoLog");
glCall_fGetUniformLocation = (FUNC_fGetUniformLocation)fGetFuncGL("glGetUniformLocation");
glCall_fGetAttribLocation = (FUNC_fGetAttribLocation)fGetFuncGL("glGetAttribLocation");
glCall_fBindAttribLocation = (FUNC_fBindAttribLocation)fGetFuncGL("glBindAttribLocation");
glCall_fCreateShader = (FUNC_fCreateShader)fGetFuncGL("glCreateShader");
glCall_fShaderSource = (FUNC_fShaderSource)fGetFuncGL("glShaderSource");
glCall_fCompileShader = (FUNC_fCompileShader)fGetFuncGL("glCompileShader");
glCall_fGetShaderiv = (FUNC_fGetShaderiv)fGetFuncGL("glGetShaderiv");
glCall_fDeleteShader = (FUNC_fDeleteShader)fGetFuncGL("glDeleteShader");
glCall_fAttachShader = (FUNC_fAttachShader)fGetFuncGL("glAttachShader");
glCall_fActiveTexture = (FUNC_fActiveTexture)fGetFuncGL("glActiveTexture");
glCall_fTexImage2D = (FUNC_fTexImage2D)fGetFuncGL("glTexImage2D");
glCall_fTexImage3D = (FUNC_fTexImage3D)fGetFuncGL("glTexImage3D");
glCall_fTexSubImage3D = (FUNC_fTexSubImage3D)fGetFuncGL("glTexSubImage3D");
glCall_fBindTexture = (FUNC_fBindTexture)fGetFuncGL("glBindTexture");
glCall_fTexParameterf = (FUNC_fTexParameterf)fGetFuncGL("glTexParameterf");
glCall_fTexParameteri = (FUNC_fTexParameteri)fGetFuncGL("glTexParameteri");
glCall_fGenTextures = (FUNC_fGenTextures)fGetFuncGL("glGenTextures");
glCall_fClear = (FUNC_fClear)fGetFuncGL("glClear");
glCall_fClearColor = (FUNC_fClearColor)fGetFuncGL("glClearColor");
glCall_fBufferData = (FUNC_fBufferData)fGetFuncGL("glBufferData");
glCall_fDrawElements = (FUNC_fDrawElements)fGetFuncGL("glDrawElements");
glCall_fDrawElementsInstanced = (FUNC_fDrawElementsInstanced)fGetFuncGL("glDrawElementsInstanced");
glCall_fGenFramebuffers = (FUNC_fGenFramebuffers)fGetFuncGL("glGenFramebuffers");
glCall_fBindFramebuffer = (FUNC_fBindFramebuffer)fGetFuncGL("glBindFramebuffer");
glCall_fGenRenderbuffers = (FUNC_fGenRenderbuffers)fGetFuncGL("glGenRenderbuffers");
glCall_fBindRenderbuffer = (FUNC_fBindRenderbuffer)fGetFuncGL("glBindRenderbuffer");
glCall_fRenderbufferStorage = (FUNC_fRenderbufferStorage)fGetFuncGL("glRenderbufferStorage");
glCall_fFramebufferTexture2D = (FUNC_fFramebufferTexture2D)fGetFuncGL("glFramebufferTexture2D");
glCall_fFramebufferRenderbuffer = (FUNC_fFramebufferRenderbuffer)fGetFuncGL("glFramebufferRenderbuffer");
glCall_fCheckFramebufferStatus = (FUNC_fCheckFramebufferStatus)fGetFuncGL("glCheckFramebufferStatus");
glCall_fDeleteBuffers = (FUNC_fDeleteBuffers)fGetFuncGL("glDeleteBuffers");
glCall_fUniform1f = (FUNC_fUniform1f)fGetFuncGL("glUniform1f");
glCall_fUniform2f = (FUNC_fUniform2f)fGetFuncGL("glUniform2f");
glCall_fUniform3f = (FUNC_fUniform3f)fGetFuncGL("glUniform3f");
glCall_fUniform4f = (FUNC_fUniform4f)fGetFuncGL("glUniform4f");
glCall_fUniform1i = (FUNC_fUniform1i)fGetFuncGL("glUniform1i");
glCall_fUniform2i = (FUNC_fUniform2i)fGetFuncGL("glUniform2i");
glCall_fUniform3i = (FUNC_fUniform3i)fGetFuncGL("glUniform3i");
glCall_fUniform4i = (FUNC_fUniform4i)fGetFuncGL("glUniform4i");
glCall_fUniform1fv = (FUNC_fUniform1fv)fGetFuncGL("glUniform1fv");
glCall_fUniform2fv = (FUNC_fUniform2fv)fGetFuncGL("glUniform2fv");
glCall_fUniform3fv = (FUNC_fUniform3fv)fGetFuncGL("glUniform3fv");
glCall_fUniform4fv = (FUNC_fUniform4fv)fGetFuncGL("glUniform4fv");
glCall_fUniform1iv = (FUNC_fUniform1iv)fGetFuncGL("glUniform1iv");
glCall_fUniform2iv = (FUNC_fUniform2iv)fGetFuncGL("glUniform2iv");
glCall_fUniform3iv = (FUNC_fUniform3iv)fGetFuncGL("glUniform3iv");
glCall_fUniform4iv = (FUNC_fUniform4iv)fGetFuncGL("glUniform4iv");
glCall_fUniformMatrix2fv = (FUNC_fUniformMatrix2fv)fGetFuncGL("glUniformMatrix2fv");
glCall_fUniformMatrix3fv = (FUNC_fUniformMatrix3fv)fGetFuncGL("glUniformMatrix3fv");
glCall_fUniformMatrix4fv = (FUNC_fUniformMatrix4fv)fGetFuncGL("glUniformMatrix4fv");
glCall_fUniform1d = (FUNC_fUniform1d)fGetFuncGL("glUniform1d");
glCall_fUniform2d = (FUNC_fUniform2d)fGetFuncGL("glUniform2d");
glCall_fUniform3d = (FUNC_fUniform3d)fGetFuncGL("glUniform3d");
glCall_fUniform4d = (FUNC_fUniform4d)fGetFuncGL("glUniform4d");
glCall_fUniform1dv = (FUNC_fUniform1dv)fGetFuncGL("glUniform1dv");
glCall_fUniform2dv = (FUNC_fUniform2dv)fGetFuncGL("glUniform2dv");
glCall_fUniform3dv = (FUNC_fUniform3dv)fGetFuncGL("glUniform3dv");
glCall_fUniform4dv = (FUNC_fUniform4dv)fGetFuncGL("glUniform4dv");
glCall_fUniformMatrix2dv = (FUNC_fUniformMatrix2dv)fGetFuncGL("glUniformMatrix2dv");
glCall_fUniformMatrix3dv = (FUNC_fUniformMatrix3dv)fGetFuncGL("glUniformMatrix3dv");
glCall_fUniformMatrix4dv = (FUNC_fUniformMatrix4dv)fGetFuncGL("glUniformMatrix4dv");
glCall_fUniformMatrix2x3dv = (FUNC_fUniformMatrix2x3dv)fGetFuncGL("glUniformMatrix2x3dv");
glCall_fUniformMatrix2x4dv = (FUNC_fUniformMatrix2x4dv)fGetFuncGL("glUniformMatrix2x4dv");
glCall_fUniformMatrix3x2dv = (FUNC_fUniformMatrix3x2dv)fGetFuncGL("glUniformMatrix3x2dv");
glCall_fUniformMatrix3x4dv = (FUNC_fUniformMatrix3x4dv)fGetFuncGL("glUniformMatrix3x4dv");
glCall_fUniformMatrix4x2dv = (FUNC_fUniformMatrix4x2dv)fGetFuncGL("glUniformMatrix4x2dv");
glCall_fUniformMatrix4x3dv = (FUNC_fUniformMatrix4x3dv)fGetFuncGL("glUniformMatrix4x3dv");
glCall_fUniform1ui = (FUNC_fUniform1ui)fGetFuncGL("glUniform1ui");
glCall_fUniform2ui = (FUNC_fUniform2ui)fGetFuncGL("glUniform2ui");
glCall_fUniform3ui = (FUNC_fUniform3ui)fGetFuncGL("glUniform3ui");
glCall_fUniform4ui = (FUNC_fUniform4ui)fGetFuncGL("glUniform4ui");
glCall_fUniform1uiv = (FUNC_fUniform1uiv)fGetFuncGL("glUniform1uiv");
glCall_fUniform2uiv = (FUNC_fUniform2uiv)fGetFuncGL("glUniform2uiv");
glCall_fUniform3uiv = (FUNC_fUniform3uiv)fGetFuncGL("glUniform3uiv");
glCall_fUniform4uiv = (FUNC_fUniform4uiv)fGetFuncGL("glUniform4uiv");
glCall_fGetUniformBlockIndex = (FUNC_fGetUniformBlockIndex)fGetFuncGL("glGetUniformBlockIndex");
glCall_fBindBufferBase = (FUNC_fBindBufferBase)fGetFuncGL("glBindBufferBase");
glCall_fUniformBlockBinding = (FUNC_fUniformBlockBinding)fGetFuncGL("glUniformBlockBinding");

return true;
}

void glDbg_fFlush(const char* _file , gzUInt _line){
 glCall_fFlush();
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glFlush( ", (sizeof("\0" ": glFlush( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fEnable(gzUInt _eCapability, const char* _file , gzUInt _line){
 glCall_fEnable(_eCapability);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glEnable( ", (sizeof("\0" ": glEnable( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eCapability|", (sizeof("\0" "_eCapability|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eCapability) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fDisable(gzUInt _eCapability, const char* _file , gzUInt _line){
 glCall_fDisable(_eCapability);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glDisable( ", (sizeof("\0" ": glDisable( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eCapability|", (sizeof("\0" "_eCapability|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eCapability) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fDepthMask(gzBool _bEnable, const char* _file , gzUInt _line){
 glCall_fDepthMask(_bEnable);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glDepthMask( ", (sizeof("\0" ": glDepthMask( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bEnable|", (sizeof("\0" "_bEnable|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bEnable) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fDepthFunc(gzUInt _eFunc, const char* _file , gzUInt _line){
 glCall_fDepthFunc(_eFunc);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glDepthFunc( ", (sizeof("\0" ": glDepthFunc( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eFunc|", (sizeof("\0" "_eFunc|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eFunc) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetBooleanv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzBool* _pData, const char* _file , gzUInt _line){
 glCall_fGetBooleanv(_hName, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetBooleanv( ", (sizeof("\0" ": glGetBooleanv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hName|", (sizeof("\0" "_hName|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hName) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(*_pData) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetDoublev(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzFloat64* _pData, const char* _file , gzUInt _line){
 glCall_fGetDoublev(_hName, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetDoublev( ", (sizeof("\0" ": glGetDoublev( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hName|", (sizeof("\0" "_hName|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hName) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_pData) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetFloatv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzFloat32* _pData, const char* _file , gzUInt _line){
 glCall_fGetFloatv(_hName, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetFloatv( ", (sizeof("\0" ": glGetFloatv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hName|", (sizeof("\0" "_hName|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hName) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_pData) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetIntegerv(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzInt32* _pData, const char* _file , gzUInt _line){
 glCall_fGetIntegerv(_hName, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetIntegerv( ", (sizeof("\0" ": glGetIntegerv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hName|", (sizeof("\0" "_hName|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hName) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_pData) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetInteger64v(Lib_GZ_OpenGL::OpenGL::eGetName _hName, gzInt64* _pData, const char* _file , gzUInt _line){
 glCall_fGetInteger64v(_hName, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetInteger64v( ", (sizeof("\0" ": glGetInteger64v( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hName|", (sizeof("\0" "_hName|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hName) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_pData) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetBooleani_v(gzUInt _hTarget, gzUInt _nIndex, gzBool* _pData, const char* _file , gzUInt _line){
 glCall_fGetBooleani_v(_hTarget, _nIndex, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetBooleani_v( ", (sizeof("\0" ": glGetBooleani_v( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hTarget|", (sizeof("\0" "_hTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(*_pData) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetIntegeri_v(gzUInt _hTarget, gzUInt _nIndex, gzFloat64* _pData, const char* _file , gzUInt _line){
 glCall_fGetIntegeri_v(_hTarget, _nIndex, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetIntegeri_v( ", (sizeof("\0" ": glGetIntegeri_v( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hTarget|", (sizeof("\0" "_hTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_pData) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetFloati_v(gzUInt _hTarget, gzUInt _nIndex, gzFloat32* _pData, const char* _file , gzUInt _line){
 glCall_fGetFloati_v(_hTarget, _nIndex, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetFloati_v( ", (sizeof("\0" ": glGetFloati_v( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hTarget|", (sizeof("\0" "_hTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_pData) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetDoublei_v(gzUInt _hTarget, gzUInt _nIndex, gzInt32* _pData, const char* _file , gzUInt _line){
 glCall_fGetDoublei_v(_hTarget, _nIndex, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetDoublei_v( ", (sizeof("\0" ": glGetDoublei_v( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hTarget|", (sizeof("\0" "_hTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_pData) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetInteger64i_v(gzUInt _hTarget, gzUInt _nIndex, gzInt64* _pData, const char* _file , gzUInt _line){
 glCall_fGetInteger64i_v(_hTarget, _nIndex, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetInteger64i_v( ", (sizeof("\0" ": glGetInteger64i_v( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hTarget|", (sizeof("\0" "_hTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_pData) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fVertexAttribPointer(gzVal _nIndex, Lib_GZ_OpenGL::OpenGL::eVecLength _hLength, Lib_GZ_OpenGL::OpenGL::eVarType _hType, gzBool _bNormalized, gzInt _nStride, gzUInt _nPointer, const char* _file , gzUInt _line){
 glCall_fVertexAttribPointer(_nIndex, _hLength, _hType, _bNormalized, _nStride, _nPointer);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glVertexAttribPointer( ", (sizeof("\0" ": glVertexAttribPointer( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hLength|", (sizeof("\0" "_hLength|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hLength) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hType|", (sizeof("\0" "_hType|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hType) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bNormalized|", (sizeof("\0" "_bNormalized|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bNormalized) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nStride|", (sizeof("\0" "_nStride|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nStride) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nPointer|", (sizeof("\0" "_nPointer|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nPointer) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fVertexAttribDivisor(gzVal _nIndex, gzUInt _nDivisor, const char* _file , gzUInt _line){
 glCall_fVertexAttribDivisor(_nIndex, _nDivisor);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glVertexAttribDivisor( ", (sizeof("\0" ": glVertexAttribDivisor( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nDivisor|", (sizeof("\0" "_nDivisor|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nDivisor) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fEnableVertexAttribArray(gzVal _nIndex, const char* _file , gzUInt _line){
 glCall_fEnableVertexAttribArray(_nIndex);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glEnableVertexAttribArray( ", (sizeof("\0" ": glEnableVertexAttribArray( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fDisableVertexAttribArray(gzUInt _nIndex, const char* _file , gzUInt _line){
 glCall_fDisableVertexAttribArray(_nIndex);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glDisableVertexAttribArray( ", (sizeof("\0" ": glDisableVertexAttribArray( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
gzBool glDbg_fSwapIntervalEXT(gzInt _nInterval, const char* _file , gzUInt _line){

  System::fResetLastError();
 gzBool _Ret = glCall_fSwapIntervalEXT(_nInterval);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glSwapIntervalEXT( ", (sizeof("\0" ": glSwapIntervalEXT( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nInterval|", (sizeof("\0" "_nInterval|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nInterval) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
 nErr = GetLastError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(System::fGetLastErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glSwapIntervalEXT( ", (sizeof("\0" ": glSwapIntervalEXT( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nInterval|", (sizeof("\0" "_nInterval|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nInterval) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
 return _Ret;

  return false;
}
void glDbg_fBlendEquation(gzUInt _eMode, const char* _file , gzUInt _line){
 glCall_fBlendEquation(_eMode);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBlendEquation( ", (sizeof("\0" ": glBlendEquation( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eMode|", (sizeof("\0" "_eMode|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eMode) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fBlendFuncSeparate(gzUInt _eSFactorRGB, gzUInt _eDFactorRGB, gzUInt _eSFactorAlpha, gzUInt _eDFactorAlpha, const char* _file , gzUInt _line){
 glCall_fBlendFuncSeparate(_eSFactorRGB, _eDFactorRGB, _eSFactorAlpha, _eDFactorAlpha);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBlendFuncSeparate( ", (sizeof("\0" ": glBlendFuncSeparate( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eSFactorRGB|", (sizeof("\0" "_eSFactorRGB|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eSFactorRGB) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eDFactorRGB|", (sizeof("\0" "_eDFactorRGB|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eDFactorRGB) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eSFactorAlpha|", (sizeof("\0" "_eSFactorAlpha|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eSFactorAlpha) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eDFactorAlpha|", (sizeof("\0" "_eDFactorAlpha|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eDFactorAlpha) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fBlendFunc(gzUInt _eSrcFactor, gzUInt _eDstFactor, const char* _file , gzUInt _line){
 glCall_fBlendFunc(_eSrcFactor, _eDstFactor);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBlendFunc( ", (sizeof("\0" ": glBlendFunc( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eSrcFactor|", (sizeof("\0" "_eSrcFactor|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eSrcFactor) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eDstFactor|", (sizeof("\0" "_eDstFactor|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eDstFactor) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGenVertexArrays(gzInt _nNb, gzUInt* _aArrays, const char* _file , gzUInt _line){
 glCall_fGenVertexArrays(_nNb, _aArrays);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGenVertexArrays( ", (sizeof("\0" ": glGenVertexArrays( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nNb|", (sizeof("\0" "_nNb|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nNb) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aArrays|", (sizeof("\0" "_aArrays|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aArrays)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGenBuffers(gzInt _nNb, gzUInt* _aBuffers, const char* _file , gzUInt _line){
 glCall_fGenBuffers(_nNb, _aBuffers);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGenBuffers( ", (sizeof("\0" ": glGenBuffers( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nNb|", (sizeof("\0" "_nNb|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nNb) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aBuffers|", (sizeof("\0" "_aBuffers|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aBuffers)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fBindVertexArray(gzUInt _nVAO, const char* _file , gzUInt _line){
 glCall_fBindVertexArray(_nVAO);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBindVertexArray( ", (sizeof("\0" ": glBindVertexArray( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nVAO|", (sizeof("\0" "_nVAO|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nVAO) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fBindBuffer(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzVal _nBuffer, const char* _file , gzUInt _line){
 glCall_fBindBuffer(_hTarget, _nBuffer);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBindBuffer( ", (sizeof("\0" ": glBindBuffer( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hTarget|", (sizeof("\0" "_hTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nBuffer|", (sizeof("\0" "_nBuffer|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nBuffer) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fBufferSubData(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzIntX _nOffset, gzIntX _nSize, void* _pData, const char* _file , gzUInt _line){
 glCall_fBufferSubData(_hTarget, _nOffset, _nSize, _pData);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBufferSubData( ", (sizeof("\0" ": glBufferSubData( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hTarget|", (sizeof("\0" "_hTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nOffset|", (sizeof("\0" "_nOffset|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nOffset) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nSize|", (sizeof("\0" "_nSize|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nSize) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetShaderInfoLog(gzVal _nShaderId, gzInt _nMaxLength, gzInt* _aLength, gzUInt8* _cLogInfo, const char* _file , gzUInt _line){
 glCall_fGetShaderInfoLog(_nShaderId, _nMaxLength, _aLength, _cLogInfo);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetShaderInfoLog( ", (sizeof("\0" ": glGetShaderInfoLog( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nShaderId|", (sizeof("\0" "_nShaderId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nShaderId) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nMaxLength|", (sizeof("\0" "_nMaxLength|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nMaxLength) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aLength|", (sizeof("\0" "_aLength|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aLength)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_cLogInfo|", (sizeof("\0" "_cLogInfo|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
gzVal glDbg_fCreateProgram(const char* _file , gzUInt _line){
 gzVal _Ret = glCall_fCreateProgram();
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glCreateProgram( ", (sizeof("\0" ": glCreateProgram( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
 return _Ret;
}
void glDbg_fLinkProgram(gzVal _nIdProgram, const char* _file , gzUInt _line){
 glCall_fLinkProgram(_nIdProgram);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glLinkProgram( ", (sizeof("\0" ": glLinkProgram( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIdProgram|", (sizeof("\0" "_nIdProgram|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIdProgram) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetProgramiv(gzVal _nIdProgram, Lib_GZ_OpenGL::OpenGL::eProgramInfo _hInfo, gzInt* _aParams, const char* _file , gzUInt _line){
 glCall_fGetProgramiv(_nIdProgram, _hInfo, _aParams);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetProgramiv( ", (sizeof("\0" ": glGetProgramiv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIdProgram|", (sizeof("\0" "_nIdProgram|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIdProgram) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hInfo|", (sizeof("\0" "_hInfo|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hInfo) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aParams|", (sizeof("\0" "_aParams|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aParams)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUseProgram(gzVal _nIdProgram, const char* _file , gzUInt _line){
 glCall_fUseProgram(_nIdProgram);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUseProgram( ", (sizeof("\0" ": glUseProgram( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIdProgram|", (sizeof("\0" "_nIdProgram|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIdProgram) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fDeleteProgram(gzVal _nIdProgram, const char* _file , gzUInt _line){
 glCall_fDeleteProgram(_nIdProgram);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glDeleteProgram( ", (sizeof("\0" ": glDeleteProgram( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIdProgram|", (sizeof("\0" "_nIdProgram|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIdProgram) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetProgramInfoLog(gzVal _nProgramId, gzInt _nMaxLength, gzInt* _aLength, gzUInt8* _cLogInfo, const char* _file , gzUInt _line){
 glCall_fGetProgramInfoLog(_nProgramId, _nMaxLength, _aLength, _cLogInfo);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetProgramInfoLog( ", (sizeof("\0" ": glGetProgramInfoLog( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nProgramId|", (sizeof("\0" "_nProgramId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nProgramId) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nMaxLength|", (sizeof("\0" "_nMaxLength|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nMaxLength) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aLength|", (sizeof("\0" "_aLength|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aLength)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_cLogInfo|", (sizeof("\0" "_cLogInfo|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
gzVal glDbg_fGetUniformLocation(gzVal _nIdProgram, gzUInt8* _cName, const char* _file , gzUInt _line){
 gzVal _Ret = glCall_fGetUniformLocation(_nIdProgram, _cName);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetUniformLocation( ", (sizeof("\0" ": glGetUniformLocation( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIdProgram|", (sizeof("\0" "_nIdProgram|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIdProgram) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_cName|", (sizeof("\0" "_cName|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
 return _Ret;
}
gzVal glDbg_fGetAttribLocation(gzVal _nIdProgram, gzUInt8* _cName, const char* _file , gzUInt _line){
 gzVal _Ret = glCall_fGetAttribLocation(_nIdProgram, _cName);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetAttribLocation( ", (sizeof("\0" ": glGetAttribLocation( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIdProgram|", (sizeof("\0" "_nIdProgram|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIdProgram) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_cName|", (sizeof("\0" "_cName|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
 return _Ret;
}
void glDbg_fBindAttribLocation(gzVal _nIdProgram, gzUInt _nIndex, gzUInt8* _cName, const char* _file , gzUInt _line){
 glCall_fBindAttribLocation(_nIdProgram, _nIndex, _cName);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBindAttribLocation( ", (sizeof("\0" ": glBindAttribLocation( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIdProgram|", (sizeof("\0" "_nIdProgram|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIdProgram) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_cName|", (sizeof("\0" "_cName|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
gzVal glDbg_fCreateShader(Lib_GZ_OpenGL::OpenGL::eShader _hType, const char* _file , gzUInt _line){
 gzVal _Ret = glCall_fCreateShader(_hType);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glCreateShader( ", (sizeof("\0" ": glCreateShader( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hType|", (sizeof("\0" "_hType|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hType) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
 return _Ret;
}
void glDbg_fShaderSource(gzVal _nShaderId, gzInt _nCount, gzUInt8** _cSourceCode, gzInt* _pLength, const char* _file , gzUInt _line){
 glCall_fShaderSource(_nShaderId, _nCount, _cSourceCode, _pLength);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glShaderSource( ", (sizeof("\0" ": glShaderSource( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nShaderId|", (sizeof("\0" "_nShaderId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nShaderId) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_cSourceCode|", (sizeof("\0" "_cSourceCode|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pLength|", (sizeof("\0" "_pLength|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_pLength) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fCompileShader(gzVal _nShaderId, const char* _file , gzUInt _line){
 glCall_fCompileShader(_nShaderId);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glCompileShader( ", (sizeof("\0" ": glCompileShader( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nShaderId|", (sizeof("\0" "_nShaderId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nShaderId) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGetShaderiv(gzVal _nShaderId, Lib_GZ_OpenGL::OpenGL::eShaderInfo _hInfo, gzInt* _aParams, const char* _file , gzUInt _line){
 glCall_fGetShaderiv(_nShaderId, _hInfo, _aParams);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetShaderiv( ", (sizeof("\0" ": glGetShaderiv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nShaderId|", (sizeof("\0" "_nShaderId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nShaderId) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hInfo|", (sizeof("\0" "_hInfo|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hInfo) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aParams|", (sizeof("\0" "_aParams|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aParams)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fDeleteShader(gzVal _nShaderId, const char* _file , gzUInt _line){
 glCall_fDeleteShader(_nShaderId);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glDeleteShader( ", (sizeof("\0" ": glDeleteShader( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nShaderId|", (sizeof("\0" "_nShaderId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nShaderId) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fAttachShader(gzVal _nIdProgram, gzVal _nShaderId, const char* _file , gzUInt _line){
 glCall_fAttachShader(_nIdProgram, _nShaderId);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glAttachShader( ", (sizeof("\0" ": glAttachShader( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIdProgram|", (sizeof("\0" "_nIdProgram|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIdProgram) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nShaderId|", (sizeof("\0" "_nShaderId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nShaderId) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fActiveTexture(gzUInt _eTexture, const char* _file , gzUInt _line){
 glCall_fActiveTexture(_eTexture);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glActiveTexture( ", (sizeof("\0" ": glActiveTexture( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTexture|", (sizeof("\0" "_eTexture|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTexture) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fTexImage2D(gzUInt _eTarget, gzInt _nLevel, gzInt _nInternalformat, gzInt _nWidth, gzInt _nHeight, gzInt _nBorder, gzUInt _eFormat, gzUInt _eType, void* _pPixel, const char* _file , gzUInt _line){
 glCall_fTexImage2D(_eTarget, _nLevel, _nInternalformat, _nWidth, _nHeight, _nBorder, _eFormat, _eType, _pPixel);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glTexImage2D( ", (sizeof("\0" ": glTexImage2D( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLevel|", (sizeof("\0" "_nLevel|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLevel) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nInternalformat|", (sizeof("\0" "_nInternalformat|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nInternalformat) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nWidth|", (sizeof("\0" "_nWidth|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nWidth) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nHeight|", (sizeof("\0" "_nHeight|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nHeight) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nBorder|", (sizeof("\0" "_nBorder|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nBorder) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eFormat|", (sizeof("\0" "_eFormat|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eFormat) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eType|", (sizeof("\0" "_eType|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eType) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pPixel|", (sizeof("\0" "_pPixel|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fTexImage3D(gzUInt _eTarget, gzInt _nLevel, gzInt _nInternalformat, gzInt _nWidth, gzInt _nHeight, gzInt _nDepth, gzInt _nBorder, gzUInt _eFormat, gzUInt _eType, void* _pPixel, const char* _file , gzUInt _line){
 glCall_fTexImage3D(_eTarget, _nLevel, _nInternalformat, _nWidth, _nHeight, _nDepth, _nBorder, _eFormat, _eType, _pPixel);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glTexImage3D( ", (sizeof("\0" ": glTexImage3D( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLevel|", (sizeof("\0" "_nLevel|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLevel) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nInternalformat|", (sizeof("\0" "_nInternalformat|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nInternalformat) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nWidth|", (sizeof("\0" "_nWidth|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nWidth) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nHeight|", (sizeof("\0" "_nHeight|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nHeight) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nDepth|", (sizeof("\0" "_nDepth|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nDepth) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nBorder|", (sizeof("\0" "_nBorder|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nBorder) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eFormat|", (sizeof("\0" "_eFormat|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eFormat) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eType|", (sizeof("\0" "_eType|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eType) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pPixel|", (sizeof("\0" "_pPixel|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fTexSubImage3D(gzUInt _eTarget, gzInt _nLevel, gzInt _nOffsetX, gzInt _nOffsetY, gzInt _nOffsetZ, gzInt _nWidth, gzInt _nHeight, gzInt _nDepth, gzUInt _eFormat, gzUInt _eType, void* _pPixel, const char* _file , gzUInt _line){
 glCall_fTexSubImage3D(_eTarget, _nLevel, _nOffsetX, _nOffsetY, _nOffsetZ, _nWidth, _nHeight, _nDepth, _eFormat, _eType, _pPixel);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glTexSubImage3D( ", (sizeof("\0" ": glTexSubImage3D( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLevel|", (sizeof("\0" "_nLevel|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLevel) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nOffsetX|", (sizeof("\0" "_nOffsetX|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nOffsetX) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nOffsetY|", (sizeof("\0" "_nOffsetY|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nOffsetY) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nOffsetZ|", (sizeof("\0" "_nOffsetZ|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nOffsetZ) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nWidth|", (sizeof("\0" "_nWidth|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nWidth) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nHeight|", (sizeof("\0" "_nHeight|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nHeight) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nDepth|", (sizeof("\0" "_nDepth|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nDepth) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eFormat|", (sizeof("\0" "_eFormat|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eFormat) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eType|", (sizeof("\0" "_eType|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eType) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pPixel|", (sizeof("\0" "_pPixel|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fBindTexture(gzUInt _eTarget, gzUInt _nTextureId, const char* _file , gzUInt _line){
 glCall_fBindTexture(_eTarget, _nTextureId);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBindTexture( ", (sizeof("\0" ": glBindTexture( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nTextureId|", (sizeof("\0" "_nTextureId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nTextureId) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fTexParameterf(gzUInt _eTarget, gzUInt _eName, gzFloat32 _nParam, const char* _file , gzUInt _line){
 glCall_fTexParameterf(_eTarget, _eName, _nParam);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glTexParameterf( ", (sizeof("\0" ": glTexParameterf( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eName|", (sizeof("\0" "_eName|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eName) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nParam|", (sizeof("\0" "_nParam|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nParam) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fTexParameteri(gzUInt _eTarget, gzUInt _eName, gzInt _nParam, const char* _file , gzUInt _line){
 glCall_fTexParameteri(_eTarget, _eName, _nParam);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glTexParameteri( ", (sizeof("\0" ": glTexParameteri( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eName|", (sizeof("\0" "_eName|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eName) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nParam|", (sizeof("\0" "_nParam|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nParam) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGenTextures(gzInt _nNb, gzUInt* _aTextures, const char* _file , gzUInt _line){
 glCall_fGenTextures(_nNb, _aTextures);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGenTextures( ", (sizeof("\0" ": glGenTextures( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nNb|", (sizeof("\0" "_nNb|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nNb) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aTextures|", (sizeof("\0" "_aTextures|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aTextures)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fClear(Lib_GZ_OpenGL::OpenGL::eClearBuffer _hMask, const char* _file , gzUInt _line){
 glCall_fClear(_hMask);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glClear( ", (sizeof("\0" ": glClear( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hMask|", (sizeof("\0" "_hMask|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hMask) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fClearColor(gzFloat32 _nRed, gzFloat32 _nGreen, gzFloat32 _nBlue, gzFloat32 _nAlpha, const char* _file , gzUInt _line){
 glCall_fClearColor(_nRed, _nGreen, _nBlue, _nAlpha);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glClearColor( ", (sizeof("\0" ": glClearColor( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nRed|", (sizeof("\0" "_nRed|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nRed) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nGreen|", (sizeof("\0" "_nGreen|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nGreen) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nBlue|", (sizeof("\0" "_nBlue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nBlue) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nAlpha|", (sizeof("\0" "_nAlpha|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nAlpha) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fBufferData(Lib_GZ_OpenGL::OpenGL::eBufferTarget _hTarget, gzIntX _nSize, void* _pData, Lib_GZ_OpenGL::OpenGL::eDrawFlow _hUsage, const char* _file , gzUInt _line){
 glCall_fBufferData(_hTarget, _nSize, _pData, _hUsage);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBufferData( ", (sizeof("\0" ": glBufferData( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hTarget|", (sizeof("\0" "_hTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nSize|", (sizeof("\0" "_nSize|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nSize) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pData|", (sizeof("\0" "_pData|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hUsage|", (sizeof("\0" "_hUsage|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hUsage) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fDrawElements(Lib_GZ_OpenGL::OpenGL::eDrawMode _hMode, gzInt _nCount, Lib_GZ_OpenGL::OpenGL::eVarType _hVarType, void* _pOffset, const char* _file , gzUInt _line){
 glCall_fDrawElements(_hMode, _nCount, _hVarType, _pOffset);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glDrawElements( ", (sizeof("\0" ": glDrawElements( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hMode|", (sizeof("\0" "_hMode|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hMode) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hVarType|", (sizeof("\0" "_hVarType|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hVarType) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pOffset|", (sizeof("\0" "_pOffset|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fDrawElementsInstanced(Lib_GZ_OpenGL::OpenGL::eDrawMode _hMode, gzInt _nCount, Lib_GZ_OpenGL::OpenGL::eVarType _hVarType, void* _pIndicesLocation, gzInt _nInstanceCount, const char* _file , gzUInt _line){
 glCall_fDrawElementsInstanced(_hMode, _nCount, _hVarType, _pIndicesLocation, _nInstanceCount);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glDrawElementsInstanced( ", (sizeof("\0" ": glDrawElementsInstanced( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hMode|", (sizeof("\0" "_hMode|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hMode) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_hVarType|", (sizeof("\0" "_hVarType|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_hVarType) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_pIndicesLocation|", (sizeof("\0" "_pIndicesLocation|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nInstanceCount|", (sizeof("\0" "_nInstanceCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nInstanceCount) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGenFramebuffers(gzInt _nNb, gzUInt* _aFrameBuffers, const char* _file , gzUInt _line){
 glCall_fGenFramebuffers(_nNb, _aFrameBuffers);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGenFramebuffers( ", (sizeof("\0" ": glGenFramebuffers( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nNb|", (sizeof("\0" "_nNb|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nNb) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aFrameBuffers|", (sizeof("\0" "_aFrameBuffers|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aFrameBuffers)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fBindFramebuffer(gzUInt _eTarget, gzUInt _nFrameBufferId, const char* _file , gzUInt _line){
 glCall_fBindFramebuffer(_eTarget, _nFrameBufferId);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBindFramebuffer( ", (sizeof("\0" ": glBindFramebuffer( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nFrameBufferId|", (sizeof("\0" "_nFrameBufferId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nFrameBufferId) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fGenRenderbuffers(gzInt _nNb, gzUInt* _aRenderBuffers, const char* _file , gzUInt _line){
 glCall_fGenRenderbuffers(_nNb, _aRenderBuffers);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGenRenderbuffers( ", (sizeof("\0" ": glGenRenderbuffers( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nNb|", (sizeof("\0" "_nNb|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nNb) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aRenderBuffers|", (sizeof("\0" "_aRenderBuffers|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aRenderBuffers)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fBindRenderbuffer(gzUInt _eTarget, gzUInt _nRenderBufferId, const char* _file , gzUInt _line){
 glCall_fBindRenderbuffer(_eTarget, _nRenderBufferId);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBindRenderbuffer( ", (sizeof("\0" ": glBindRenderbuffer( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nRenderBufferId|", (sizeof("\0" "_nRenderBufferId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nRenderBufferId) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fRenderbufferStorage(gzUInt _eTarget, gzUInt _eInternalFormat, gzInt _nWidth, gzInt _nHeight, const char* _file , gzUInt _line){
 glCall_fRenderbufferStorage(_eTarget, _eInternalFormat, _nWidth, _nHeight);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glRenderbufferStorage( ", (sizeof("\0" ": glRenderbufferStorage( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eInternalFormat|", (sizeof("\0" "_eInternalFormat|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eInternalFormat) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nWidth|", (sizeof("\0" "_nWidth|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nWidth) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nHeight|", (sizeof("\0" "_nHeight|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nHeight) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fFramebufferTexture2D(gzUInt _eTarget, gzUInt _eAttachement, gzUInt _eTextureTarget, gzUInt _nTexture, gzInt _nLevel, const char* _file , gzUInt _line){
 glCall_fFramebufferTexture2D(_eTarget, _eAttachement, _eTextureTarget, _nTexture, _nLevel);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glFramebufferTexture2D( ", (sizeof("\0" ": glFramebufferTexture2D( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eAttachement|", (sizeof("\0" "_eAttachement|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eAttachement) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTextureTarget|", (sizeof("\0" "_eTextureTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTextureTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nTexture|", (sizeof("\0" "_nTexture|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nTexture) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLevel|", (sizeof("\0" "_nLevel|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLevel) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fFramebufferRenderbuffer(gzUInt _eTarget, gzUInt _eAttachement, gzUInt _eRenderBufferTarget, gzUInt _nRenderBufferId, const char* _file , gzUInt _line){
 glCall_fFramebufferRenderbuffer(_eTarget, _eAttachement, _eRenderBufferTarget, _nRenderBufferId);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glFramebufferRenderbuffer( ", (sizeof("\0" ": glFramebufferRenderbuffer( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eAttachement|", (sizeof("\0" "_eAttachement|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eAttachement) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eRenderBufferTarget|", (sizeof("\0" "_eRenderBufferTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eRenderBufferTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nRenderBufferId|", (sizeof("\0" "_nRenderBufferId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nRenderBufferId) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
gzUInt glDbg_fCheckFramebufferStatus(gzUInt _eTarget, const char* _file , gzUInt _line){
 gzUInt _Ret = glCall_fCheckFramebufferStatus(_eTarget);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glCheckFramebufferStatus( ", (sizeof("\0" ": glCheckFramebufferStatus( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
 return _Ret;
}
void glDbg_fDeleteBuffers(gzInt _nNb, gzUInt* _aBuffers, const char* _file , gzUInt _line){
 glCall_fDeleteBuffers(_nNb, _aBuffers);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glDeleteBuffers( ", (sizeof("\0" ": glDeleteBuffers( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nNb|", (sizeof("\0" "_nNb|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nNb) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aBuffers|", (sizeof("\0" "_aBuffers|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aBuffers)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform1f(gzVal _nLocation, gzFloat32 _n0, const char* _file , gzUInt _line){
 glCall_fUniform1f(_nLocation, _n0);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform1f( ", (sizeof("\0" ": glUniform1f( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_n0) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform2f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, const char* _file , gzUInt _line){
 glCall_fUniform2f(_nLocation, _n0, _n1);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform2f( ", (sizeof("\0" ": glUniform2f( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_n0) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n1|", (sizeof("\0" "_n1|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_n1) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform3f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, gzFloat32 _n2, const char* _file , gzUInt _line){
 glCall_fUniform3f(_nLocation, _n0, _n1, _n2);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform3f( ", (sizeof("\0" ": glUniform3f( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_n0) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n1|", (sizeof("\0" "_n1|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_n1) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n2|", (sizeof("\0" "_n2|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_n2) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform4f(gzVal _nLocation, gzFloat32 _n0, gzFloat32 _n1, gzFloat32 _n2, gzFloat32 _n3, const char* _file , gzUInt _line){
 glCall_fUniform4f(_nLocation, _n0, _n1, _n2, _n3);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform4f( ", (sizeof("\0" ": glUniform4f( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_n0) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n1|", (sizeof("\0" "_n1|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_n1) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n2|", (sizeof("\0" "_n2|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_n2) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n3|", (sizeof("\0" "_n3|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_n3) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform1i(gzVal _nLocation, gzInt32 _n0, const char* _file , gzUInt _line){
 glCall_fUniform1i(_nLocation, _n0);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform1i( ", (sizeof("\0" ": glUniform1i( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n0) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform2i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, const char* _file , gzUInt _line){
 glCall_fUniform2i(_nLocation, _n0, _n1);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform2i( ", (sizeof("\0" ": glUniform2i( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n0) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n1|", (sizeof("\0" "_n1|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n1) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform3i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, gzInt32 _n2, const char* _file , gzUInt _line){
 glCall_fUniform3i(_nLocation, _n0, _n1, _n2);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform3i( ", (sizeof("\0" ": glUniform3i( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n0) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n1|", (sizeof("\0" "_n1|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n1) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n2|", (sizeof("\0" "_n2|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n2) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform4i(gzVal _nLocation, gzInt32 _n0, gzInt32 _n1, gzInt32 _n2, gzInt32 _n3, const char* _file , gzUInt _line){
 glCall_fUniform4i(_nLocation, _n0, _n1, _n2, _n3);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform4i( ", (sizeof("\0" ": glUniform4i( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n0) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n1|", (sizeof("\0" "_n1|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n1) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n2|", (sizeof("\0" "_n2|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n2) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n3|", (sizeof("\0" "_n3|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n3) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform1fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform1fv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform1fv( ", (sizeof("\0" ": glUniform1fv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform2fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform2fv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform2fv( ", (sizeof("\0" ": glUniform2fv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform3fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform3fv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform3fv( ", (sizeof("\0" ": glUniform3fv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform4fv(gzVal _nLocation, gzInt _nCount, gzFloat32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform4fv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform4fv( ", (sizeof("\0" ": glUniform4fv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform1iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform1iv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform1iv( ", (sizeof("\0" ": glUniform1iv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform2iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform2iv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform2iv( ", (sizeof("\0" ": glUniform2iv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform3iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform3iv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform3iv( ", (sizeof("\0" ": glUniform3iv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform4iv(gzVal _nLocation, gzInt _nCount, gzInt32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform4iv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform4iv( ", (sizeof("\0" ": glUniform4iv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix2fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix2fv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix2fv( ", (sizeof("\0" ": glUniformMatrix2fv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix3fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix3fv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix3fv( ", (sizeof("\0" ": glUniformMatrix3fv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix4fv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix4fv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix4fv( ", (sizeof("\0" ": glUniformMatrix4fv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform1d(gzVal _nLocation, gzFloat64 _nX, const char* _file , gzUInt _line){
 glCall_fUniform1d(_nLocation, _nX);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform1d( ", (sizeof("\0" ": glUniform1d( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nX|", (sizeof("\0" "_nX|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nX) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform2d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, const char* _file , gzUInt _line){
 glCall_fUniform2d(_nLocation, _nX, _nY);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform2d( ", (sizeof("\0" ": glUniform2d( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nX|", (sizeof("\0" "_nX|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nX) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nY|", (sizeof("\0" "_nY|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nY) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform3d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, gzFloat64 _nZ, const char* _file , gzUInt _line){
 glCall_fUniform3d(_nLocation, _nX, _nY, _nZ);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform3d( ", (sizeof("\0" ": glUniform3d( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nX|", (sizeof("\0" "_nX|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nX) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nY|", (sizeof("\0" "_nY|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nY) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nZ|", (sizeof("\0" "_nZ|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nZ) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform4d(gzVal _nLocation, gzFloat64 _nX, gzFloat64 _nY, gzFloat64 _nZ, gzFloat64 _nW, const char* _file , gzUInt _line){
 glCall_fUniform4d(_nLocation, _nX, _nY, _nZ, _nW);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform4d( ", (sizeof("\0" ": glUniform4d( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nX|", (sizeof("\0" "_nX|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nX) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nY|", (sizeof("\0" "_nY|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nY) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nZ|", (sizeof("\0" "_nZ|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nZ) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nW|", (sizeof("\0" "_nW|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(_nW) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform1dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform1dv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform1dv( ", (sizeof("\0" ": glUniform1dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform2dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform2dv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform2dv( ", (sizeof("\0" ": glUniform2dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform3dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform3dv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform3dv( ", (sizeof("\0" ": glUniform3dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform4dv(gzVal _nLocation, gzInt _nCount, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform4dv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform4dv( ", (sizeof("\0" ": glUniform4dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix2dv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix2dv( ", (sizeof("\0" ": glUniformMatrix2dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix3dv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix3dv( ", (sizeof("\0" ": glUniformMatrix3dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix4dv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix4dv( ", (sizeof("\0" ": glUniformMatrix4dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix2x3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix2x3dv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix2x3dv( ", (sizeof("\0" ": glUniformMatrix2x3dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix2x4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix2x4dv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix2x4dv( ", (sizeof("\0" ": glUniformMatrix2x4dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix3x2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix3x2dv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix3x2dv( ", (sizeof("\0" ": glUniformMatrix3x2dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix3x4dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix3x4dv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix3x4dv( ", (sizeof("\0" ": glUniformMatrix3x4dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix4x2dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix4x2dv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix4x2dv( ", (sizeof("\0" ": glUniformMatrix4x2dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformMatrix4x3dv(gzVal _nLocation, gzInt _nCount, gzBool _bTranspose, gzFloat64* _aValue, const char* _file , gzUInt _line){
 glCall_fUniformMatrix4x3dv(_nLocation, _nCount, _bTranspose, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformMatrix4x3dv( ", (sizeof("\0" ": glUniformMatrix4x3dv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_bTranspose|", (sizeof("\0" "_bTranspose|")/sizeof(gzUInt8)) - 2, true)) + gzStrB(_bTranspose) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrF(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform1ui(gzVal _nLocation, gzUInt32 _n0, const char* _file , gzUInt _line){
 glCall_fUniform1ui(_nLocation, _n0);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform1ui( ", (sizeof("\0" ": glUniform1ui( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n0) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform2ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, const char* _file , gzUInt _line){
 glCall_fUniform2ui(_nLocation, _n0, _n1);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform2ui( ", (sizeof("\0" ": glUniform2ui( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n0) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n1|", (sizeof("\0" "_n1|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n1) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform3ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, gzUInt32 _n2, const char* _file , gzUInt _line){
 glCall_fUniform3ui(_nLocation, _n0, _n1, _n2);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform3ui( ", (sizeof("\0" ": glUniform3ui( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n0) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n1|", (sizeof("\0" "_n1|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n1) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n2|", (sizeof("\0" "_n2|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n2) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform4ui(gzVal _nLocation, gzUInt32 _n0, gzUInt32 _n1, gzUInt32 _n2, gzUInt32 _n3, const char* _file , gzUInt _line){
 glCall_fUniform4ui(_nLocation, _n0, _n1, _n2, _n3);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform4ui( ", (sizeof("\0" ": glUniform4ui( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n0|", (sizeof("\0" "_n0|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n0) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n1|", (sizeof("\0" "_n1|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n1) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n2|", (sizeof("\0" "_n2|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n2) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_n3|", (sizeof("\0" "_n3|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_n3) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform1uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform1uiv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform1uiv( ", (sizeof("\0" ": glUniform1uiv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform2uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform2uiv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform2uiv( ", (sizeof("\0" ": glUniform2uiv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform3uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform3uiv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform3uiv( ", (sizeof("\0" ": glUniform3uiv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniform4uiv(gzVal _nLocation, gzInt _nCount, gzUInt32* _aValue, const char* _file , gzUInt _line){
 glCall_fUniform4uiv(_nLocation, _nCount, _aValue);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniform4uiv( ", (sizeof("\0" ": glUniform4uiv( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nLocation|", (sizeof("\0" "_nLocation|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nLocation) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nCount|", (sizeof("\0" "_nCount|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nCount) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_aValue|", (sizeof("\0" "_aValue|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(*_aValue)+ (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
gzUInt glDbg_fGetUniformBlockIndex(gzUInt _nPorgramId, gzUInt8* _cUboName, const char* _file , gzUInt _line){
 gzUInt _Ret = glCall_fGetUniformBlockIndex(_nPorgramId, _cUboName);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glGetUniformBlockIndex( ", (sizeof("\0" ": glGetUniformBlockIndex( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nPorgramId|", (sizeof("\0" "_nPorgramId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nPorgramId) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_cUboName|", (sizeof("\0" "_cUboName|")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "*", (sizeof("\0" "*")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
 return _Ret;
}
void glDbg_fBindBufferBase(gzUInt _eTarget, gzUInt _nIndex, gzUInt _nBuffer, const char* _file , gzUInt _line){
 glCall_fBindBufferBase(_eTarget, _nIndex, _nBuffer);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glBindBufferBase( ", (sizeof("\0" ": glBindBufferBase( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_eTarget|", (sizeof("\0" "_eTarget|")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_eTarget) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nIndex|", (sizeof("\0" "_nIndex|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nIndex) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nBuffer|", (sizeof("\0" "_nBuffer|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nBuffer) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}
void glDbg_fUniformBlockBinding(gzUInt _nPorgramId, gzUInt _nUniformBlickId, gzUInt _nBindPoint, const char* _file , gzUInt _line){
 glCall_fUniformBlockBinding(_nPorgramId, _nUniformBlickId, _nBindPoint);
 gzInt nErr = glCall_fGetError();
 if(nErr){
 Lib_GZ::Sys::pDebug::fConsole(_SysGpuInfo::fGetErrorString(nErr) + (gzStr((gzUInt8*)"\0" ": glUniformBlockBinding( ", (sizeof("\0" ": glUniformBlockBinding( ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nPorgramId|", (sizeof("\0" "_nPorgramId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nPorgramId) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nUniformBlickId|", (sizeof("\0" "_nUniformBlickId|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nUniformBlickId) + (gzStr((gzUInt8*)"\0" "|, ", (sizeof("\0" "|, ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "_nBindPoint|", (sizeof("\0" "_nBindPoint|")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nBindPoint) + (gzStr((gzUInt8*)"\0" "| ", (sizeof("\0" "| ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" ") ", (sizeof("\0" ") ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" " File: ", (sizeof("\0" " File: ")/sizeof(gzUInt8)) - 2, true)) + fGetFile(_file) + (gzStr((gzUInt8*)"\0" " Line: ", (sizeof("\0" " Line: ")/sizeof(gzUInt8)) - 2, true)) + gzStrUI(_line) );
 }
}

namespace Lib_GZ_OpenGL{namespace Base{namespace OpAttribute{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fLoad"},{0,"fSetOffset"},{0,"fSetDivisor"},{0,"OpAttribute"}};



}

namespace OpAttribute{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

void cOpAttribute::fLoad(){ gzStack gz_s( &OpAttribute::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- OpAttribute Created!! ---", (sizeof("\0" "--- OpAttribute Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 nId = Lib_GZ_OpenGL::OpenGL::Get(thread)->fGetAttribLocation(gzVal(oProgram->nId), (gzUInt8*)(sName.fcStr()));
 bValid = true;
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fEnableVertexAttribArray(gzVal(nId));
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fVertexAttribPointer(gzVal(nId), Lib_GZ_OpenGL::OpenGL::eVecLength(Lib_GZ_OpenGL::OpenGL::eVecLength::Vec4), Lib_GZ_OpenGL::OpenGL::eVarType(Lib_GZ_OpenGL::OpenGL::eVarType::FLOAT), false, 0, 0);
}

void cOpAttribute::fSetOffset(gzUInt _nValOffset){ gzStack gz_s( &OpAttribute::zFuncName[1] );
 if (bValid == true){


 }
}

void cOpAttribute::fSetDivisor(gzUInt _nDiv){ gzStack gz_s( &OpAttribute::zFuncName[2] );
 if (bValid == true){
  Lib_GZ_OpenGL::OpenGL::Get(thread)->fVertexAttribPointer(gzVal(nId), Lib_GZ_OpenGL::OpenGL::eVecLength(Lib_GZ_OpenGL::OpenGL::eVecLength::Vec4), Lib_GZ_OpenGL::OpenGL::eVarType(Lib_GZ_OpenGL::OpenGL::eVarType::FLOAT), false, 0, 0);




 }
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "SetDivisor", (sizeof("\0" "SetDivisor")/sizeof(gzUInt8)) - 2, true)));
}

cOpAttribute::cOpAttribute(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::Base::cAttribute(_parent){

}

void cOpAttribute::Ini_cOpAttribute(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName){ gzStack gz_s( &OpAttribute::zFuncName[3] );
 Ini_cAttribute((Lib_GZ::Gpu::ShaderBase::cProgramShader*)(_oProgram), _sName);
}

gzAny cOpAttribute::MemCopy(){
return (gzAny)new cOpAttribute(*this);
}
gzAny cOpAttribute::DeepCopy(){
return (gzAny)new cOpAttribute(*this, true);
}
cOpAttribute::~cOpAttribute(){
}



}}

namespace Lib_GZ_OpenGL{namespace OpGpuInfo{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fIniFunctions"},{0,"fGetVersion"},{0,"OpGpuInfo"}};



}

namespace OpGpuInfo{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

gzBool cOpGpuInfo::fIniFunctions(){ gzStack gz_s( &OpGpuInfo::zFuncName[0] );

 Lib_GZ_OpenGL::SysGpuFunc::fGetGpuFunctions();
 return true;
}

gzBool cOpGpuInfo::fGetVersion(){ gzStack gz_s( &OpGpuInfo::zFuncName[1] );
 gzInt _nMaj = 0;
 gzInt _nMin = 0;
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fGetIntegerv(Lib_GZ_OpenGL::OpenGL::eGetName(Lib_GZ_OpenGL::OpenGL::eGetName::MAJOR_VERSION), (gzInt32*)(&_nMaj));
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fGetIntegerv(Lib_GZ_OpenGL::OpenGL::eGetName(Lib_GZ_OpenGL::OpenGL::eGetName::MINOR_VERSION), (gzInt32*)(&_nMin));
 Lib_GZ::Gpu::GpuInfo::Get(thread)->nVersionMinor = _nMin;
 Lib_GZ::Gpu::GpuInfo::Get(thread)->nVersionMajor = _nMaj;



 if( _nMaj < 3){
 return false;
 }
 if( _nMaj == 3 && _nMin < 3){
 return false;
 }
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "GetVersion : nVersionMinor", (sizeof("\0" "GetVersion : nVersionMinor")/sizeof(gzUInt8)) - 2, true)) + gzStrI(Lib_GZ::Gpu::GpuInfo::Get(thread)->nVersionMinor));
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "GetVersion : nVersionMajor", (sizeof("\0" "GetVersion : nVersionMajor")/sizeof(gzUInt8)) - 2, true)) + gzStrI(Lib_GZ::Gpu::GpuInfo::Get(thread)->nVersionMajor));
 return true;
}

cOpGpuInfo::cOpGpuInfo(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::cGpuInfo(_parent){

}

void cOpGpuInfo::Ini_cOpGpuInfo(){ gzStack gz_s( &OpGpuInfo::zFuncName[2] );
 Ini_cGpuInfo();
}

gzAny cOpGpuInfo::MemCopy(){
return (gzAny)new cOpGpuInfo(*this);
}
gzAny cOpGpuInfo::DeepCopy(){
return (gzAny)new cOpGpuInfo(*this, true);
}
cOpGpuInfo::~cOpGpuInfo(){
}



}

namespace Lib_GZ_OpenGL{namespace Base{namespace OpUnVec2{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fLoad"},{0,"fSend"},{0,"OpUnVec2"}};



}

namespace OpUnVec2{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

void cOpUnVec2::fLoad(){ gzStack gz_s( &OpUnVec2::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- OpShUniform Created!! ---", (sizeof("\0" "--- OpShUniform Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 nId = Lib_GZ_OpenGL::OpenGL::Get(thread)->fGetUniformLocation(gzVal(oProgram->nId), (gzUInt8*)(sName.fcStr()));
 bValid = true;
}

void cOpUnVec2::fSend(){ gzStack gz_s( &OpUnVec2::zFuncName[1] );
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fUniform2f(gzVal(nId), oVal->nX, oVal->nY);
}

cOpUnVec2::cOpUnVec2(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::Base::cUnVec2(_parent){

}

void cOpUnVec2::Ini_cOpUnVec2(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram, const gzStr& _sName){ gzStack gz_s( &OpUnVec2::zFuncName[2] );
 Ini_cUnVec2((Lib_GZ::Gpu::ShaderBase::cProgramShader*)(_oProgram), _sName);
}

gzAny cOpUnVec2::MemCopy(){
return (gzAny)new cOpUnVec2(*this);
}
gzAny cOpUnVec2::DeepCopy(){
return (gzAny)new cOpUnVec2(*this, true);
}
cOpUnVec2::~cOpUnVec2(){
}



}}

namespace Lib_GZ_OpenGL{namespace GpuObj{namespace OpGpuBatch{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fDraw"},{0,"OpGpuBatch"}};




static char aIndice2TriA[] = {0,1,2, 0,2,3};


}

namespace OpGpuBatch{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

void cOpGpuBatch::fDraw(){ gzStack gz_s( &OpGpuBatch::zFuncName[0] );
 aIndice2Tri[gzUInt(0)] = 0;
 aIndice2Tri[gzUInt(1)] = 1;
 aIndice2Tri[gzUInt(2)] = 2;
 aIndice2Tri[gzUInt(3)] = 0;
 aIndice2Tri[gzUInt(4)] = 2;
 aIndice2Tri[gzUInt(5)] = 3;
 aIndice[gzUInt(0)] = 0;
 aIndice[gzUInt(1)] = 1;
 aIndice[gzUInt(2)] = 2;
 aIndice[gzUInt(3)] = 0;
 aIndice[gzUInt(4)] = 2;
 aIndice[gzUInt(5)] = 3;
 gzVal _nIndice = Lib_GZ_OpenGL::OpenGL::Get(thread)->fCreateBuffer();
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fBindBuffer(Lib_GZ_OpenGL::OpenGL::eBufferTarget(Lib_GZ_OpenGL::OpenGL::eBufferTarget::ELEMENT_ARRAY_BUFFER), gzVal(_nIndice));
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fBufferData(Lib_GZ_OpenGL::OpenGL::eBufferTarget(Lib_GZ_OpenGL::OpenGL::eBufferTarget::ELEMENT_ARRAY_BUFFER), 3, Lib_GZ_OpenGL::OpenGL::eTypeSize(Lib_GZ_OpenGL::OpenGL::eTypeSize::Vec4), gzFData<gzUInt8>(aIndice.get()), Lib_GZ_OpenGL::OpenGL::eDrawFlow(Lib_GZ_OpenGL::OpenGL::eDrawFlow::STREAM_DRAW));
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fDrawElements(Lib_GZ_OpenGL::OpenGL::eDrawMode(Lib_GZ_OpenGL::OpenGL::eDrawMode::TRIANGLES), 6, Lib_GZ_OpenGL::OpenGL::eVarType(Lib_GZ_OpenGL::OpenGL::eVarType::UNSIGNED_BYTE), (void*)(0));
}

cOpGpuBatch::cOpGpuBatch(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::GpuObj::cGpuBatch(_parent){
 aIndice2Tri = (gzUInt8*)malloc((6) * (sizeof(gzUInt8)));

}

void cOpGpuBatch::Ini_cOpGpuBatch(){ gzStack gz_s( &OpGpuBatch::zFuncName[1] );
 Ini_cGpuBatch();
}

gzAny cOpGpuBatch::MemCopy(){
return (gzAny)new cOpGpuBatch(*this);
}
gzAny cOpGpuBatch::DeepCopy(){
return (gzAny)new cOpGpuBatch(*this, true);
}
cOpGpuBatch::~cOpGpuBatch(){
 free(aIndice2Tri);
}



}}

namespace Lib_GZ_OpenGL{namespace GpuObj{namespace OpGpuBuffer{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"OpGpuBuffer"}};



}

namespace OpGpuBuffer{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cOpGpuBuffer::cOpGpuBuffer(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::GpuObj::cGpuBuffer(_parent){

}

void cOpGpuBuffer::Ini_cOpGpuBuffer(){ gzStack gz_s( &OpGpuBuffer::zFuncName[0] );
 Ini_cGpuBuffer();
}

gzAny cOpGpuBuffer::MemCopy(){
return (gzAny)new cOpGpuBuffer(*this);
}
gzAny cOpGpuBuffer::DeepCopy(){
return (gzAny)new cOpGpuBuffer(*this, true);
}
cOpGpuBuffer::~cOpGpuBuffer(){
}



}}

namespace Lib_GZ_OpenGL{namespace GpuObj{namespace OpGpuFace{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"OpGpuFace"}};



}

namespace OpGpuFace{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cOpGpuFace::cOpGpuFace(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::GpuObj::cGpuFace(_parent){

}

void cOpGpuFace::Ini_cOpGpuFace(){ gzStack gz_s( &OpGpuFace::zFuncName[0] );
 Ini_cGpuFace();
}

gzAny cOpGpuFace::MemCopy(){
return (gzAny)new cOpGpuFace(*this);
}
gzAny cOpGpuFace::DeepCopy(){
return (gzAny)new cOpGpuFace(*this, true);
}
cOpGpuFace::~cOpGpuFace(){
}



}}

namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpFragmentShader{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"OpFragmentShader"},{0,"fSendToGpu"},{0,"fCompile"},{0,"fGetLog"}};



}

namespace OpFragmentShader{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cOpFragmentShader::cOpFragmentShader(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::ShaderBase::cFragmentShader(_parent){

}

void cOpFragmentShader::Ini_cOpFragmentShader(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version){ gzStack gz_s( &OpFragmentShader::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- OpFragmentShader Created!! ---", (sizeof("\0" "--- OpFragmentShader Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 Ini_cFragmentShader(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version(_hGlsl_ES_Version));
 if (gzInt(_hGlsl_ES_Version) == Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto){
   this->fAddLine((gzStr((gzUInt8*)"\0" "//#ifdef GZ_tWindows  //GL 3.3 minimal", (sizeof("\0" "//#ifdef GZ_tWindows  //GL 3.3 minimal")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "#version 330", (sizeof("\0" "#version 330")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "#define xflat flat", (sizeof("\0" "#define xflat flat")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "out vec4 FragColor;", (sizeof("\0" "out vec4 FragColor;")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "///#endif", (sizeof("\0" "///#endif")/sizeof(gzUInt8)) - 2, true)));



 }
}

gzBool cOpFragmentShader::fSendToGpu(const gzStr& _sShader){ gzStack gz_s( &OpFragmentShader::zFuncName[1] );
 nId = Lib_GZ_OpenGL::OpenGL::Get(thread)->fCreateShader(Lib_GZ_OpenGL::OpenGL::eShader(Lib_GZ_OpenGL::OpenGL::eShader::FRAGMENT_SHADER));
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fShaderSource(gzVal(nId), _sShader);
 return true;
}

gzBool cOpFragmentShader::fCompile(){ gzStack gz_s( &OpFragmentShader::zFuncName[2] );
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fCompileShader(gzVal(nId));
 gzUInt _nCompilationStatus;
 _nCompilationStatus = Lib_GZ_OpenGL::OpenGL::Get(thread)->fGetShaderParameter(gzVal(nId), Lib_GZ_OpenGL::OpenGL::eShaderInfo(Lib_GZ_OpenGL::OpenGL::eShaderInfo::COMPILE_STATUS));




 if(_nCompilationStatus == 0){
 return false;
 }
 bReady = true;
 return true;
 return false;
}

gzStr cOpFragmentShader::fGetLog(){ gzStack gz_s( &OpFragmentShader::zFuncName[3] );
 gzStr _sReturn = Lib_GZ_OpenGL::OpenGL::Get(thread)->fGetShaderInfoLog(gzVal(nId));

 char* _str = ( char* )_sReturn.fcStr();

 int _nStartIndex = 1;
 if(_str[0] == 'E'){
 _nStartIndex += 5;
 }
 char* pEnd;
 nSourceError = strtol( &_str[_nStartIndex], &pEnd, 10);
 nLineError = strtol(&pEnd[1], 0, 10) - 1;
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "LineErr: ", (sizeof("\0" "LineErr: ")/sizeof(gzUInt8)) - 2, true)) + gzStrI(nLineError));
 return _sReturn;
}

gzAny cOpFragmentShader::MemCopy(){
return (gzAny)new cOpFragmentShader(*this);
}
gzAny cOpFragmentShader::DeepCopy(){
return (gzAny)new cOpFragmentShader(*this, true);
}
cOpFragmentShader::~cOpFragmentShader(){
}



}}

namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpProgramShader{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fLoad"},{0,"fAttachShader"},{0,"fLink"},{0,"fUse"},{0,"OpProgramShader"}};



}

namespace OpProgramShader{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

void cOpProgramShader::fLoad(){ gzStack gz_s( &OpProgramShader::zFuncName[0] );
 nId = Lib_GZ_OpenGL::OpenGL::Get(thread)->fCreateProgram();
}

void cOpProgramShader::fAttachShader(Lib_GZ::Gpu::ShaderBase::cShaderBase* _oShader){ gzStack gz_s( &OpProgramShader::zFuncName[1] );
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fAttachShader(gzVal(nId), gzVal(_oShader->nId));
}

gzBool cOpProgramShader::fLink(){ gzStack gz_s( &OpProgramShader::zFuncName[2] );
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fLinkProgram(gzVal(nId));
 gzUInt _nLinkStatus;
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fGetProgramParameter(gzVal(nId), Lib_GZ_OpenGL::OpenGL::eProgramInfo(Lib_GZ_OpenGL::OpenGL::eProgramInfo::LINK_STATUS), (gzInt*)(&_nLinkStatus));
 if (_nLinkStatus != 0){
  bLinked = true;
 }
 return bLinked;
}

gzBool cOpProgramShader::fUse(){ gzStack gz_s( &OpProgramShader::zFuncName[3] );
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fUseProgram(gzVal(nId));



 gzUInt _nEmptyVAO;
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fGenVertexArrays(1, (gzUInt*)(&_nEmptyVAO));
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fBindVertexArray(_nEmptyVAO);



 return true;
}

cOpProgramShader::cOpProgramShader(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::ShaderBase::cProgramShader(_parent){

}

void cOpProgramShader::Ini_cOpProgramShader(){ gzStack gz_s( &OpProgramShader::zFuncName[4] );
 Ini_cProgramShader();
}

gzAny cOpProgramShader::MemCopy(){
return (gzAny)new cOpProgramShader(*this);
}
gzAny cOpProgramShader::DeepCopy(){
return (gzAny)new cOpProgramShader(*this, true);
}
cOpProgramShader::~cOpProgramShader(){
}



}}

namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpVbo{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fLoad"},{0,"fSendData"},{0,"OpVbo"}};



}

namespace OpVbo{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

void cOpVbo::fLoad(){ gzStack gz_s( &OpVbo::zFuncName[0] );
 nId = Lib_GZ_OpenGL::OpenGL::Get(thread)->fCreateBuffer();
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fBindBuffer(Lib_GZ_OpenGL::OpenGL::eBufferTarget(Lib_GZ_OpenGL::OpenGL::eBufferTarget::ARRAY_BUFFER), gzVal(nId));
}

void cOpVbo::fSendData(){ gzStack gz_s( &OpVbo::zFuncName[1] );

 static gzFloat _nInc = 0;
 _nInc += 0.001;
 if(_nInc > 50.0){
 _nInc = 0;
 }
 aData[0] = 0.0;
 aData[1] = 0.0;
 aData[2] = 0.0;
 aData[3] = 1.0;
 aData[4] = 1.0;
 aData[5] = 0.0;
 aData[6] = 0.0;
 aData[7] = 1.0;
 aData[8] = 2.0;
 aData[9] = 0.4;
 aData[10] = 0.6;
 aData[11] = 0.2;
 aData[12] = 3.0;
 aData[13] = 0.4;
 aData[14] = 0.6;
 aData[15] = 0.2;
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fBindBuffer(Lib_GZ_OpenGL::OpenGL::eBufferTarget(Lib_GZ_OpenGL::OpenGL::eBufferTarget::ARRAY_BUFFER), gzVal(nId));
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fBufferData(Lib_GZ_OpenGL::OpenGL::eBufferTarget(Lib_GZ_OpenGL::OpenGL::eBufferTarget::ARRAY_BUFFER), 4, Lib_GZ_OpenGL::OpenGL::eTypeSize(Lib_GZ_OpenGL::OpenGL::eTypeSize::Vec4), gzFData<gzUInt8>(aData.get()), Lib_GZ_OpenGL::OpenGL::eDrawFlow(Lib_GZ_OpenGL::OpenGL::eDrawFlow::STREAM_DRAW));
}

cOpVbo::cOpVbo(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::ShaderBase::cVbo(_parent){

}

void cOpVbo::Ini_cOpVbo(Lib_GZ::Gpu::ShaderBase::cProgramShader* _oProgram){ gzStack gz_s( &OpVbo::zFuncName[2] );
 Ini_cVbo((Lib_GZ::Gpu::ShaderBase::cProgramShader*)(_oProgram));
}

gzAny cOpVbo::MemCopy(){
return (gzAny)new cOpVbo(*this);
}
gzAny cOpVbo::DeepCopy(){
return (gzAny)new cOpVbo(*this, true);
}
cOpVbo::~cOpVbo(){
}



}}

namespace Lib_GZ_OpenGL{namespace ShaderBase{namespace OpVertexShader{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"OpVertexShader"},{0,"fSendToGpu"},{0,"fCompile"},{0,"fGetLog"}};



}

namespace OpVertexShader{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cOpVertexShader::cOpVertexShader(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::ShaderBase::cVertexShader(_parent){

}

void cOpVertexShader::Ini_cOpVertexShader(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version _hGlsl_ES_Version){ gzStack gz_s( &OpVertexShader::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--- OpVertexShader Created!! ---", (sizeof("\0" "--- OpVertexShader Created!! ---")/sizeof(gzUInt8)) - 2, true)));
 Ini_cVertexShader(Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version(_hGlsl_ES_Version));
 if (gzInt(_hGlsl_ES_Version) == Lib_GZ::Gpu::ShaderBase::ShaderBase::eGlsl_ES_Version::Auto){
  Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "--****************--", (sizeof("\0" "--****************--")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "//// Windows ///", (sizeof("\0" "//// Windows ///")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "#version 330", (sizeof("\0" "#version 330")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "#define xflat flat", (sizeof("\0" "#define xflat flat")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "///////////////", (sizeof("\0" "///////////////")/sizeof(gzUInt8)) - 2, true)));




   this->fAddLine((gzStr((gzUInt8*)"\0" "///// nVertexID /////", (sizeof("\0" "///// nVertexID /////")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "#ifdef glVxID", (sizeof("\0" "#ifdef glVxID")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "#define nVertexID gl_VertexID", (sizeof("\0" "#define nVertexID gl_VertexID")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "in int gl_VertexID;", (sizeof("\0" "in int gl_VertexID;")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "#else", (sizeof("\0" "#else")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "in vec4 atVertexID;", (sizeof("\0" "in vec4 atVertexID;")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "#define nVertexID int(atVertexID.x)", (sizeof("\0" "#define nVertexID int(atVertexID.x)")/sizeof(gzUInt8)) - 2, true)));
   this->fAddLine((gzStr((gzUInt8*)"\0" "#endif", (sizeof("\0" "#endif")/sizeof(gzUInt8)) - 2, true)));

 }
}

gzBool cOpVertexShader::fSendToGpu(const gzStr& _sShader){ gzStack gz_s( &OpVertexShader::zFuncName[1] );
 nId = Lib_GZ_OpenGL::OpenGL::Get(thread)->fCreateShader(Lib_GZ_OpenGL::OpenGL::eShader(Lib_GZ_OpenGL::OpenGL::eShader::VERTEX_SHADER));
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fShaderSource(gzVal(nId), _sShader);
 return true;
}

gzBool cOpVertexShader::fCompile(){ gzStack gz_s( &OpVertexShader::zFuncName[2] );
 Lib_GZ_OpenGL::OpenGL::Get(thread)->fCompileShader(gzVal(nId));
 gzUInt _nCompilationStatus;
 _nCompilationStatus = Lib_GZ_OpenGL::OpenGL::Get(thread)->fGetShaderParameter(gzVal(nId), Lib_GZ_OpenGL::OpenGL::eShaderInfo(Lib_GZ_OpenGL::OpenGL::eShaderInfo::COMPILE_STATUS));




 if(_nCompilationStatus == 0){
 return false;
 }
 bReady = true;
 return true;
 return false;
}

gzStr cOpVertexShader::fGetLog(){ gzStack gz_s( &OpVertexShader::zFuncName[3] );
 return Lib_GZ_OpenGL::OpenGL::Get(thread)->fGetShaderInfoLog(gzVal(nId));
}

gzAny cOpVertexShader::MemCopy(){
return (gzAny)new cOpVertexShader(*this);
}
gzAny cOpVertexShader::DeepCopy(){
return (gzAny)new cOpVertexShader(*this, true);
}
cOpVertexShader::~cOpVertexShader(){
}



}}

namespace Lib_GZ_OpenGL{namespace OpGpu{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fLoadImg"},{0,"fContextIni"},{0,"fBlit"},{0,"fLoadDefaultShader"},{0,"fClear"},{0,"OpGpu"}};



}

namespace OpGpu{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

void cOpGpu::fLoadImg(gzInt* _aImg, gzInt _nWidth, gzInt _nHeight){ gzStack gz_s( &OpGpu::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "Load Img", (sizeof("\0" "Load Img")/sizeof(gzUInt8)) - 2, true)));
}

gzBool cOpGpu::fContextIni(gzUIntX _nHandleId, gzBool _bGlobalSharedContext){ gzStack gz_s( &OpGpu::zFuncName[1] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "OP fContextIni Not Implemented : ", (sizeof("\0" "OP fContextIni Not Implemented : ")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nHandleId));
 return false;
}

void cOpGpu::fBlit(){ gzStack gz_s( &OpGpu::zFuncName[2] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpGpu::fBlit", (sizeof("\0" "GzOpenGL::OpGpu::fBlit")/sizeof(gzUInt8)) - 2, true))); }
}

gzBool cOpGpu::fLoadDefaultShader(){ gzStack gz_s( &OpGpu::zFuncName[3] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpGpu::fLoadDefaultShader", (sizeof("\0" "GzOpenGL::OpGpu::fLoadDefaultShader")/sizeof(gzUInt8)) - 2, true))); }
 return false;
}

void cOpGpu::fClear(){ gzStack gz_s( &OpGpu::zFuncName[4] );
 static gzBool bTraced = false; if(!bTraced){ bTraced = true; Lib_GZ::Sys::Debug::Get(thread)->fWarning( (gzStr((gzUInt8*)"\0" "Func unimplemented: ", (sizeof("\0" "Func unimplemented: ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GzOpenGL::OpGpu::fClear", (sizeof("\0" "GzOpenGL::OpGpu::fClear")/sizeof(gzUInt8)) - 2, true))); }
}

cOpGpu::cOpGpu(Lib_GZ::cBase* _parent) : Lib_GZ::Gpu::cGpu(_parent){


}

void cOpGpu::Ini_cOpGpu(gzUIntX _nHandleId, gzBool _bGlobalSharedContext){ gzStack gz_s( &OpGpu::zFuncName[5] );
 Ini_cGpu(_nHandleId, _bGlobalSharedContext);
}

gzAny cOpGpu::MemCopy(){
return (gzAny)new cOpGpu(*this);
}
gzAny cOpGpu::DeepCopy(){
return (gzAny)new cOpGpu(*this, true);
}
cOpGpu::~cOpGpu(){
}



}

namespace Lib_GZ_WinOpenGL{ void fIniLib(); extern Lib_GZ::uLib zpLib; extern Lib_GZ::uOverplace* rLastClass; inline Lib_GZ::uLib NewLib(){return {Lib_GZ::fSetLib(&zpLib), (gzStr((gzUInt8*)"\0" "Lib_GZ_WinOpenGL", (sizeof("\0" "Lib_GZ_WinOpenGL")/sizeof(gzUInt8)) - 2, true)), &rLastClass };} namespace Lib{ inline Lib_GZ::uOverplace* SetClass(Lib_GZ::uOverplace* _rClass){ Lib_GZ::uOverplace* rTemp = rLastClass; rLastClass = _rClass; return rTemp; } }}





namespace Lib_GZ_WinOpenGL{class cSOpGpu;}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}






namespace Lib_GZ_WinOpenGL{namespace SOpGpu{



}}



   namespace Lib_GZ_OpenGL{class cOpenGL;}

namespace Lib_GZ{namespace Gpu{class cGpu;}}
namespace Lib_GZ{namespace Gpu{class cGpuInfo;}}
namespace Lib_GZ{namespace Gpu{namespace ShaderModel{namespace GzModel{class cGzShModel;}}}}
namespace Lib_GZ_OpenGL{class cOpGpu;}
namespace Lib_GZ_WinOpenGL{class cSOpGpu;}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_GZ_WinOpenGL{namespace SOpGpu{
}
class pSOpGpu {

 public:


};

class cSOpGpu : public Lib_GZ_OpenGL::cOpGpu {

 public:


  HDC hDC;
  HGLRC hRC;




  virtual void fLoadImg(gzInt* _aImg, gzInt _nWidth, gzInt _nHeight);
  virtual gzBool fContextIni(gzUIntX _nHandleId, gzBool _bGlobalSharedContext);
  virtual void fBlit();
  virtual gzBool fLoadDefaultShader();
  virtual void fClear();
  cSOpGpu(Lib_GZ::cBase* _parent);
  virtual void Ini_cSOpGpu(gzUIntX _nHandleId, gzBool _bGlobalSharedContext);

  inline cSOpGpu(const cSOpGpu &_o) : Lib_GZ_OpenGL::cOpGpu(_o){};
  inline cSOpGpu(const cSOpGpu &_o, gzBool _b) : Lib_GZ_OpenGL::cOpGpu(_o, _b){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cSOpGpu();

 private:



};
class csSOpGpu : public Lib_GZ_OpenGL::csOpGpu {

 public:

  inline virtual gzSp<Lib_GZ::Gpu::cGpu> New(Lib_GZ::cBase* _parent, gzUIntX _nHandleId, gzBool _bGlobalSharedContext){
   gzSp<cSOpGpu>_oTemp = gzSp<cSOpGpu>(new cSOpGpu(_parent));
   _oTemp->Ini_cSOpGpu(_nHandleId, _bGlobalSharedContext);
   return _oTemp;
  }




  inline csSOpGpu(Lib_GZ::cBase* _parent): Lib_GZ_OpenGL::csOpGpu(_parent){};
  inline ~csSOpGpu(){};
};
namespace SOpGpu{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csSOpGpu((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, &Lib_GZ_OpenGL::OpGpu::Create, &Lib_GZ_OpenGL::OpGpu::Adr}; Ini_Class(); return zDefault;} inline gzSp<csSOpGpu> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csSOpGpu*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csSOpGpu*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csSOpGpu>((_oCurrThread->st(zDefault.nId)->get())); }};
namespace SOpGpu{
}}

extern "C" int IniLib_Lib_GZ_WinOpenGL(){
Lib_GZ_WinOpenGL::zpLib = Lib_GZ_WinOpenGL::NewLib();
Lib_GZ_WinOpenGL::SOpGpu::NewClass();
return 1;
}

namespace Lib_GZ_WinOpenGL{ Lib_GZ::uOverplace* rLastClass = 0; Lib_GZ::uLib zpLib = NewLib(); }

namespace Lib_GZ_WinOpenGL{namespace SOpGpu{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"fLoadImg"},{0,"fContextIni"},{0,"fBlit"},{0,"fLoadDefaultShader"},{0,"fClear"},{0,"SOpGpu"}};



}

namespace SOpGpu{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

void cSOpGpu::fLoadImg(gzInt* _aImg, gzInt _nWidth, gzInt _nHeight){ gzStack gz_s( &SOpGpu::zFuncName[0] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "Load Img", (sizeof("\0" "Load Img")/sizeof(gzUInt8)) - 2, true)));
}

gzBool cSOpGpu::fContextIni(gzUIntX _nHandleId, gzBool _bGlobalSharedContext){ gzStack gz_s( &SOpGpu::zFuncName[1] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "*********** OP Windows!! fContextIni GPU : ", (sizeof("\0" "*********** OP Windows!! fContextIni GPU : ")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nHandleId));

 hDC = (HDC)_nHandleId;
 static gzUInt PixelFormat;
 static PIXELFORMATDESCRIPTOR pfd =
 {
 sizeof(PIXELFORMATDESCRIPTOR),
 1,
 0x00000004 |
 0x00000020 |
 0x00000001,
 0,
 32,
 0, 0, 0, 0, 0, 0,
 0,
 0,
 0,
 0, 0, 0, 0,
 24,

 8,
 0,
 0,
 0,
 0, 0, 0
 };


 if (!(PixelFormat = ChoosePixelFormat(hDC,&pfd))){
 return fFatal((gzStr((gzUInt8*)"\0" "Can't find a suitable PixelFormat or valid handle", (sizeof("\0" "Can't find a suitable PixelFormat or valid handle")/sizeof(gzUInt8)) - 2, true)));
 }
 if(!SetPixelFormat(hDC,PixelFormat,&pfd)){
 return fFatal((gzStr((gzUInt8*)"\0" "Can't Set The PixelFormat", (sizeof("\0" "Can't Set The PixelFormat")/sizeof(gzUInt8)) - 2, true)));
 }
 DescribePixelFormat(hDC, PixelFormat, sizeof(PIXELFORMATDESCRIPTOR), &pfd);
 if (!(hRC=wglCreateContext(hDC))){
 return fFatal((gzStr((gzUInt8*)"\0" "Can't get A Rendering Context", (sizeof("\0" "Can't get A Rendering Context")/sizeof(gzUInt8)) - 2, true)));
 }
 if(!wglMakeCurrent(hDC,hRC)) {
 return fFatal((gzStr((gzUInt8*)"\0" "Can't Activate The GL Rendering Context", (sizeof("\0" "Can't Activate The GL Rendering Context")/sizeof(gzUInt8)) - 2, true)));
 }


 oGpuInfo->fIniFunctions();
 if (oGpuInfo->fGetVersion() == false){
  return fFatal((gzStr((gzUInt8*)"\0" "Mininal version required not supported >= 3.3", (sizeof("\0" "Mininal version required not supported >= 3.3")/sizeof(gzUInt8)) - 2, true)));
 }
 gzInt _nMin = Lib_GZ::Gpu::GpuInfo::Get(thread)->nVersionMinor;
 gzInt _nMaj = Lib_GZ::Gpu::GpuInfo::Get(thread)->nVersionMajor;


 PFNWGLCHOOSEPIXELFORMATARBPROC glChoosePixelFormat = (PFNWGLCHOOSEPIXELFORMATARBPROC)wglGetProcAddress("wglChoosePixelFormatARB");
 PFNWGLCREATECONTEXTATTRIBSARBPROC glCreateContextAttribs = (PFNWGLCREATECONTEXTATTRIBSARBPROC)wglGetProcAddress("wglCreateContextAttribsARB");
 if(!(glChoosePixelFormat && glCreateContextAttribs)){
 return fFatal((gzStr((gzUInt8*)"\0" "Can't get A Rendering Context >= 3.3", (sizeof("\0" "Can't get A Rendering Context >= 3.3")/sizeof(gzUInt8)) - 2, true)));
 }

 wglMakeCurrent(0, 0);
 wglDeleteContext(hRC);

 const int iPixelFormatAttribList[] =
 {
 0x2001, true,
 0x2010, true,
 0x2011, true,
 0x2013, 0x202B,
 0x2014, 32,
 0x2022, 24,
 0x2023, 8,
 0
 };

 int iContextAttribs[] =
 {
 0x2091, _nMaj,
 0x2092, _nMin,
 0x2094, 0x00000001,
 0
 };
 int iPixelFormat, iNumFormats;
 glChoosePixelFormat(hDC, iPixelFormatAttribList, 0, 1, &iPixelFormat, (gzUInt*)&iNumFormats);
 if(!SetPixelFormat(hDC, iPixelFormat, &pfd)){
 return fFatal((gzStr((gzUInt8*)"\0" "Can't Set The Pixel Format On Context >= 3.3", (sizeof("\0" "Can't Set The Pixel Format On Context >= 3.3")/sizeof(gzUInt8)) - 2, true)));
 }
 hRC = glCreateContextAttribs(hDC, 0, iContextAttribs);
 if(!wglMakeCurrent(hDC,hRC)) {
 return fFatal((gzStr((gzUInt8*)"\0" "Can't Activate The GL Rendering Context >= 3.3", (sizeof("\0" "Can't Activate The GL Rendering Context >= 3.3")/sizeof(gzUInt8)) - 2, true)));
 }
 fLoadDefaultShader();
 fClear();
 fBlit();
 fClear();
 return true;
}

void cSOpGpu::fBlit(){ gzStack gz_s( &SOpGpu::zFuncName[2] );
 oGzShModel->fDraw();

 SwapBuffers(hDC);
}

gzBool cSOpGpu::fLoadDefaultShader(){ gzStack gz_s( &SOpGpu::zFuncName[3] );



 glDbg_fEnable(0x0BE2, "./_Lib/GZE/SubLib_System/Lib_GZ_WinOpenGL/SOpGpu.cpp", 139);

 oGzShModel = gzSCast<Lib_GZ::Gpu::ShaderModel::GzModel::cGzShModel>((Lib_GZ::Gpu::ShaderModel::GzModel::GzShModel::Get(thread)->New(this)));
 return false;
}

void cSOpGpu::fClear(){ gzStack gz_s( &SOpGpu::zFuncName[4] );







}

cSOpGpu::cSOpGpu(Lib_GZ::cBase* _parent) : Lib_GZ_OpenGL::cOpGpu(_parent){

}

void cSOpGpu::Ini_cSOpGpu(gzUIntX _nHandleId, gzBool _bGlobalSharedContext){ gzStack gz_s( &SOpGpu::zFuncName[5] );
 Ini_cOpGpu(_nHandleId, _bGlobalSharedContext);
}

gzAny cSOpGpu::MemCopy(){
return (gzAny)new cSOpGpu(*this);
}
gzAny cSOpGpu::DeepCopy(){
return (gzAny)new cSOpGpu(*this, true);
}
cSOpGpu::~cSOpGpu(){
}



}







namespace Lib_Demo{class cMainInterface;}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_Demo{namespace MainInterface{



}}


namespace Lib_GZ{namespace Gfx{class cObject;}}

namespace Lib_GZ{namespace Sys{class cWindow;}}

namespace Lib_GZ{namespace File{class cRcImg;}}

namespace Lib_GZ{namespace Gfx{class cRoot;}}

namespace Lib_GZ{namespace Gfx{class cInterface;}}
namespace Lib_GZ{namespace Gfx{namespace Clip{class cImg;}}}
namespace Lib_GZ{namespace Gfx{class cClip;}}
namespace Lib_Demo{namespace Screen{class cDemoRoll;}}

namespace Lib_GZ{class cThread;}
namespace Lib_GZ{namespace Sys{class cThreadItf;}}
namespace Lib_GZ{namespace Base{class cMat4x4;}}
namespace Lib_GZ{namespace Base{class cPerspective;}}
namespace Lib_Demo{class cMainInterface;}
namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}

namespace Lib_Demo{namespace MainInterface{
}
class pMainInterface {

 public:


};

class cMainInterface : public Lib_GZ::Gfx::cInterface {

 public:



  gzSp<Lib_GZ::Gfx::cClip> oDemo;
  gzSp<Lib_GZ::Gfx::Clip::cImg> oImg;
  cMainInterface(Lib_GZ::cBase* _parent);
  virtual void Ini_cMainInterface(Lib_GZ::Sys::cThreadItf* _oThreadItf);
  virtual void fWinStart();
  virtual void fUpdateChildToParent();
  virtual void fUpdateParentToChild();

  inline cMainInterface(const cMainInterface &_o) : Lib_GZ::Gfx::cInterface(_o), oDemo(), oImg(){};
  inline cMainInterface(const cMainInterface &_o, gzBool _b) : Lib_GZ::Gfx::cInterface(_o, _b), oDemo(), oImg(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cMainInterface();

 private:



};
class csMainInterface : public Lib_GZ::cStThread {

 public:




  inline csMainInterface(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csMainInterface(){};
};
namespace MainInterface{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csMainInterface((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csMainInterface> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMainInterface*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csMainInterface*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csMainInterface>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace MainInterface{
void New(); void Thread_Start(gzDlgWrapD*, gzPtr _pThread); gzSp<Lib_GZ::cThreadExt> NewThread(Lib_GZ::cBase* _parent);;
}}




namespace Lib_Demo{namespace Screen{class cDemoRoll;}}



template <class T> class gzArray;


template <class T> class gzQArray;



namespace Lib_GZ{class cThreadExt;}

namespace Lib_GZ{class cThread;}


namespace Lib_Demo{namespace Screen{namespace DemoRoll{



}}}


namespace Lib_GZ{namespace Sys{class cDebug;}}
namespace Lib_GZ{class cClass;}
namespace Lib_GZ{class cThreadMsg;}
namespace Lib_GZ{namespace Gfx{class cObject;}}
namespace Lib_GZ{namespace File{class cRcImg;}}

namespace Lib_GZ{namespace Gfx{class cRoot;}}

namespace Lib_GZ{namespace Gfx{class cInterface;}}
namespace Lib_GZ{namespace Gfx{class cClip;}}

namespace Lib_GZ{namespace Gfx{namespace Clip{class cImg;}}}

namespace Lib_Demo{namespace Screen{namespace DemoRoll{
}
class pDemoRoll {

 public:


};

class cDemoRoll : public Lib_GZ::Gfx::cClip {

 public:



  gzSp<Lib_GZ::Gfx::Clip::cImg> oImg;
  cDemoRoll(Lib_GZ::cBase* _parent);
  virtual void Ini_cDemoRoll(Lib_GZ::Gfx::cRoot* _oParent);
  virtual void fUpdateParentToChild();
  virtual void fUpdateChildToParent();

  inline cDemoRoll(const cDemoRoll &_o) : Lib_GZ::Gfx::cClip(_o), oImg(){};
  inline cDemoRoll(const cDemoRoll &_o, gzBool _b) : Lib_GZ::Gfx::cClip(_o, _b), oImg(){};
  virtual gzAny MemCopy();
  virtual gzAny DeepCopy();
  virtual ~cDemoRoll();

 private:



};
class csDemoRoll : public Lib_GZ::cStThread {

 public:

  inline virtual gzSp<cDemoRoll> New(Lib_GZ::cBase* _parent, Lib_GZ::Gfx::cRoot* _oParent){
   gzSp<cDemoRoll>_oTemp = gzSp<cDemoRoll>(new cDemoRoll(_parent));
   _oTemp->Ini_cDemoRoll(_oParent);
   return _oTemp;
  }

  gzInt nInterger;
  gzFloat nFloat;
  gzStr sTest;



  inline csDemoRoll(Lib_GZ::cBase* _parent): Lib_GZ::cStThread(_parent){};
  inline ~csDemoRoll(){};
};
namespace DemoRoll{ extern Lib_GZ::uOverplace zDefault; extern gzPtrFuncRPAny cfDefault; extern void Ini_Class(); inline void* Create(void* _oCurrThread){ return new csDemoRoll((Lib_GZ::cThread*)_oCurrThread); } inline void* Adr(){ return &zDefault; } inline Lib_GZ::uOverplace NewClass(){ zDefault = {Lib::SetClass(&zDefault), 0, &Create, &Create, 0, 0}; Ini_Class(); return zDefault;} inline gzSp<csDemoRoll> Get(Lib_GZ::cThread* _oCurrThread){ if(_oCurrThread->st(zDefault.nId) == 0){ if(_oCurrThread->func(zDefault.nId) != 0){ gzPtrFuncRPAny cfCall = *_oCurrThread->func(zDefault.nId); _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csDemoRoll*)cfCall(_oCurrThread) ); }else{ _oCurrThread->st[zDefault.nId] = gzSp<Lib_GZ::cStThread>((csDemoRoll*)zDefault.cfOver(_oCurrThread) ); } } return gzSCastSelf<csDemoRoll>((_oCurrThread->st(zDefault.nId)->get())); }}
namespace DemoRoll{
}}}

extern "C" int IniLib_Lib_Demo(){
Lib_Demo::zpLib = Lib_Demo::NewLib();
Lib_Demo::MainEntry::NewClass();
Lib_Demo::MainInterface::NewClass();
Lib_Demo::Screen::DemoRoll::NewClass();
return 1;
}

namespace Lib_Demo{ Lib_GZ::uOverplace* rLastClass = 0; Lib_GZ::uLib zpLib = NewLib(); }




namespace Lib_GZ{class cThreadExt;}







namespace Lib_Demo{namespace MainEntry{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"MainEntry"},{0,"fTestArray"},{0,"fTestDelegate"},{0,"fQueueDelegate"}};



}

namespace MainEntry{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cMainEntry::cMainEntry(Lib_GZ::cBase* _parent) : Lib_GZ::cClass(_parent)

,dComapre(this, &Lib_Demo::cMainEntry::wQueueDelegate)

{ gzStack gz_s( &MainEntry::zFuncName[0] );


}

void cMainEntry::Ini_cMainEntry(){ gzStack gz_s( &MainEntry::zFuncName[0] );

 Lib_GZ::Sys::Debug::Get(thread)->fTrace2((gzStr((gzUInt8*)"\0" " ***-------- Demo : ", (sizeof("\0" " ***-------- Demo : ")/sizeof(gzUInt8)) - 2, true)) + (gzStr((gzUInt8*)"\0" "GroundZero Engine v", (sizeof("\0" "GroundZero Engine v")/sizeof(gzUInt8)) - 2, true)) + gzStrF(0.005) + (gzStr((gzUInt8*)"\0" " --------***", (sizeof("\0" " --------***")/sizeof(gzUInt8)) - 2, true)));
 gzInt _nLocalVar = 4;
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" " - Test QueueArray / Delegates -", (sizeof("\0" " - Test QueueArray / Delegates -")/sizeof(gzUInt8)) - 2, true)));
 qaShort.fPush(70);
 qaShort.fPush(50);
 qaShort.fPush(99);
 qaShort.fPush(2);
 qaShort.fPush(17);
 qaShort.fPush(13);
 {gzQElement<gzInt> _qe_nVal = qaShort.GqeFirst();if(_qe_nVal != qaShort.qeEmpty){ gzQElement<gzInt> _qe_nValReserved = qaShort.GqeFirst();do{
  gzInt _nVal = _qe_nVal.ref();
  Lib_GZ::Sys::Debug::Get(thread)->fTrace3((gzStr((gzUInt8*)"\0" "Val : ", (sizeof("\0" "Val : ")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nVal));
 _qe_nVal = _qe_nVal.GqeNext();}while(_qe_nVal != _qe_nValReserved);}}
 qaShort.fShort(dComapre.get());
 {gzQElement<gzInt> _qe_nVal = qaShort.GqeFirst();if(_qe_nVal != qaShort.qeEmpty){ gzQElement<gzInt> _qe_nValReserved = qaShort.GqeFirst();do{
  gzInt _nVal = _qe_nVal.ref();
  Lib_GZ::Sys::Debug::Get(thread)->fTrace3((gzStr((gzUInt8*)"\0" "SortVal : ", (sizeof("\0" "SortVal : ")/sizeof(gzUInt8)) - 2, true)) + gzStrI(_nVal));
 _qe_nVal = _qe_nVal.GqeNext();}while(_qe_nVal != _qe_nValReserved);}}
 Lib_GZ::Sys::Debug::Get(thread)->fTrace1((gzStr((gzUInt8*)"\0" "4444----------- ", (sizeof("\0" "4444----------- ")/sizeof(gzUInt8)) - 2, true)));

 oThread = gzSCast<Lib_GZ::cThreadExt>((Lib_Demo::MainInterface::NewThread(this)));
}

void cMainEntry::fTestArray(gzArray<gzInt> _aTest){ gzStack gz_s( &MainEntry::zFuncName[1] );
 _aTest[gzUInt(6)] = 666;
}

gzInt cMainEntry::fTestDelegate(gzFloat _nF1, gzFloat _nF2){ gzStack gz_s( &MainEntry::zFuncName[2] );
 Lib_GZ::Sys::Debug::Get(thread)->fTrace2((gzStr((gzUInt8*)"\0" "fTestDelegate", (sizeof("\0" "fTestDelegate")/sizeof(gzUInt8)) - 2, true)));
 return 33;
}

gzBool cMainEntry::fQueueDelegate(gzQElement<gzInt> _qT1, gzQElement<gzInt> _qT2){ gzStack gz_s( &MainEntry::zFuncName[3] );
 if (gzInt(_qT1.ref()) < gzInt(_qT2.ref())){
  return true;
 }else{
  return false;
 }
 return false;
}

gzAny cMainEntry::MemCopy(){
return (gzAny)new cMainEntry(*this);
}
gzAny cMainEntry::DeepCopy(){
return (gzAny)new cMainEntry(*this, true);
}
cMainEntry::~cMainEntry(){
}



}

namespace Lib_GZ{class cThread;}
gzSp<Lib_GZ::cThreadExt> Lib_Demo::MainInterface::NewThread(Lib_GZ::cBase* _parent){ Lib_GZ::Dlg_r_void_p_gzPtr::Dlg _dTCall(&Lib_Demo::MainInterface::Thread_Start); return Lib_GZ::ThreadExt::New(_parent, _dTCall); } void Lib_Demo::MainInterface::Thread_Start(gzDlgWrapD*, gzPtr _pThread){ gzSp<Lib_GZ::Sys::cThreadItf> _oInitialiser = Lib_GZ::Sys::ThreadItf::Get( ((Lib_GZ::cThreadExt*)_pThread)->thread )->New(0); _oInitialiser->fLinkThreadExt((Lib_GZ::cThreadExt*)_pThread); gzSp<Lib_Demo::cMainInterface>_oTemp = gzSp<Lib_Demo::cMainInterface>(new Lib_Demo::cMainInterface(_oInitialiser.get())); _oTemp->Ini_cMainInterface((Lib_GZ::Sys::cThreadItf*)_oInitialiser.get()); _oInitialiser->fStart(_oTemp.get()); _oInitialiser->ThreadEnd();};

namespace Lib_Demo{namespace MainInterface{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"MainInterface"},{0,"fWinStart"},{0,"fUpdateChildToParent"},{0,"fUpdateParentToChild"}};



}

namespace MainInterface{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cMainInterface::cMainInterface(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cInterface(_parent){


}

void cMainInterface::Ini_cMainInterface(Lib_GZ::Sys::cThreadItf* _oThreadItf){ gzStack gz_s( &MainInterface::zFuncName[0] );


 bGpuDraw = false;

 gzBool _bTranparent = false;

 Ini_cInterface((Lib_GZ::Sys::cThreadItf*)(_oThreadItf), (gzStr((gzUInt8*)"\0" "GroundZero", (sizeof("\0" "GroundZero")/sizeof(gzUInt8)) - 2, true)), 800, 600, _bTranparent, gzInt(4294967295));
 fCreateInterface(300, 100);
}

void cMainInterface::fWinStart(){ gzStack gz_s( &MainInterface::zFuncName[1] );
 Lib_GZ::Sys::Debug::Get(thread)->fPass((gzStr((gzUInt8*)"\0" " ---- Interface Lnx initialised ----", (sizeof("\0" " ---- Interface Lnx initialised ----")/sizeof(gzUInt8)) - 2, true)));



 gzInt _nDemo = 1;

 oDemo = gzSCast<Lib_GZ::Gfx::cClip>((Lib_Demo::Screen::DemoRoll::Get(thread)->New(this, (Lib_GZ::Gfx::cRoot*)(this))));
}

void cMainInterface::fUpdateChildToParent(){ gzStack gz_s( &MainInterface::zFuncName[2] );

}

void cMainInterface::fUpdateParentToChild(){ gzStack gz_s( &MainInterface::zFuncName[3] );

}

gzAny cMainInterface::MemCopy(){
return (gzAny)new cMainInterface(*this);
}
gzAny cMainInterface::DeepCopy(){
return (gzAny)new cMainInterface(*this, true);
}
cMainInterface::~cMainInterface(){
}



}

namespace Lib_Demo{namespace Screen{namespace DemoRoll{




void Ini_Class(){
}

gzFuncStack zFuncName[] = {{0,"DemoRoll"},{0,"fUpdateParentToChild"},{0,"fUpdateChildToParent"}};



}

namespace DemoRoll{ gzUInt zId; Lib_GZ::uOverplace zDefault = NewClass(); }

cDemoRoll::cDemoRoll(Lib_GZ::cBase* _parent) : Lib_GZ::Gfx::cClip(_parent){


}

void cDemoRoll::Ini_cDemoRoll(Lib_GZ::Gfx::cRoot* _oParent){ gzStack gz_s( &DemoRoll::zFuncName[0] );
 Ini_cClip((Lib_GZ::Gfx::cRoot*)(_oParent), 0.0, 0.0);
 oImg = gzSCast<Lib_GZ::Gfx::Clip::cImg>((Lib_GZ::Gfx::Clip::Img::Get(thread)->New(this, (Lib_GZ::Gfx::cRoot*)(this), 400.0, 300.0, Lib_GZ::File::RcImg::Get(thread)->New(this,(gzStr((gzUInt8*)"\0" "Exe:/Tf.png", (sizeof("\0" "Exe:/Tf.png")/sizeof(gzUInt8)) - 2, true))).get(), true)));
 oImg->WnWidth(0.5);
 oImg->WnHeight(0.5);
 oImg->TnWidth(1.0);
 oImg->TnHeight(1.0);
 oImg->EnWidth(gzFloat(75));
 oImg->EnHeight(gzFloat(75));
 oImg->TnYaw(3.0 * Lib_GZ::Math::nPI);
 oImg->EnYaw(gzFloat(150));
 oImg->WnAlpha(0.0);
 oImg->TnAlpha(1.0);
 oImg->EnAlpha(100.0);
}

void cDemoRoll::fUpdateParentToChild(){ gzStack gz_s( &DemoRoll::zFuncName[1] );

 oImg->MnRoll(0.005);
}

void cDemoRoll::fUpdateChildToParent(){ gzStack gz_s( &DemoRoll::zFuncName[2] );

}

gzAny cDemoRoll::MemCopy(){
return (gzAny)new cDemoRoll(*this);
}
gzAny cDemoRoll::DeepCopy(){
return (gzAny)new cDemoRoll(*this, true);
}
cDemoRoll::~cDemoRoll(){
}



}}

